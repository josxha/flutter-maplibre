// ignore_for_file: camel_case_types, non_constant_identifier_names, unused_element, unused_field, return_of_invalid_type, void_checks, annotate_overrides, no_leading_underscores_for_local_identifiers, library_private_types_in_public_api
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:objective_c/objective_c.dart' as objc;
import 'package:ffi/ffi.dart' as pkg_ffi;

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl> _MapLibreFFi_wrapListenerBlock_1pl9qdv(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl> _MapLibreFFi_wrapListenerBlock_wjovn7(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

final class CGPoint extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

final class CGSize extends ffi.Struct {
  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

final class CGRect extends ffi.Struct {
  external CGPoint origin;

  external CGSize size;
}

final class _NSZone extends ffi.Opaque {}

enum NSQualityOfService {
  NSQualityOfServiceUserInteractive(33),
  NSQualityOfServiceUserInitiated(25),
  NSQualityOfServiceUtility(17),
  NSQualityOfServiceBackground(9),
  NSQualityOfServiceDefault(-1);

  final int value;
  const NSQualityOfService(this.value);

  static NSQualityOfService fromValue(int value) => switch (value) {
        33 => NSQualityOfServiceUserInteractive,
        25 => NSQualityOfServiceUserInitiated,
        17 => NSQualityOfServiceUtility,
        9 => NSQualityOfServiceBackground,
        -1 => NSQualityOfServiceDefault,
        _ =>
          throw ArgumentError("Unknown value for NSQualityOfService: $value"),
      };
}

void _ObjCBlock_ffiVoid_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function()>>()
        .asFunction<void Function()>()();
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_fnPtrCallable = ffi.Pointer
        .fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>)>(
            _ObjCBlock_ffiVoid_fnPtrTrampoline)
    .cast();
void _ObjCBlock_ffiVoid_closureTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
) =>
    (objc.getBlockClosure(block) as void Function())();
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_closureCallable = ffi.Pointer
        .fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>)>(
            _ObjCBlock_ffiVoid_closureTrampoline)
    .cast();
void _ObjCBlock_ffiVoid_listenerTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
) {
  (objc.getBlockClosure(block) as void Function())();
  objc.objectRelease(block.cast());
}

ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>)>
    _ObjCBlock_ffiVoid_listenerCallable = ffi.NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>)>.listener(
        _ObjCBlock_ffiVoid_listenerTrampoline)
      ..keepIsolateAlive = false;

/// Construction methods for `objc.ObjCBlock<ffi.Void Function()>`.
abstract final class ObjCBlock_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function()> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function()>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function()> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> ptr) =>
      objc.ObjCBlock<ffi.Void Function()>(
          objc.newPointerBlock(_ObjCBlock_ffiVoid_fnPtrCallable, ptr.cast()),
          retain: false,
          release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function()> fromFunction(void Function() fn) =>
      objc.ObjCBlock<ffi.Void Function()>(
          objc.newClosureBlock(_ObjCBlock_ffiVoid_closureCallable, () => fn()),
          retain: false,
          release: true);

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function()> listener(void Function() fn) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_listenerCallable.nativeFunction.cast(), () => fn());
    final wrapper = _MapLibreFFi_wrapListenerBlock_1pl9qdv(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function()>(wrapper,
        retain: false, release: true);
  }
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function()>`.
extension ObjCBlock_ffiVoid_CallExtension
    on objc.ObjCBlock<ffi.Void Function()> {
  void call() => ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlockImpl>)>()(
        ref.pointer,
      );
}

ffi.Pointer<objc.ObjCBlockImpl>
    _ObjCBlock_NSProgressUnpublishingHandler_NSProgress_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<objc.ObjCObject> arg0) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCBlockImpl> Function(
                        ffi.Pointer<objc.ObjCObject> arg0)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCBlockImpl> Function(
                    ffi.Pointer<objc.ObjCObject>)>()(arg0);
ffi.Pointer<ffi.Void>
    _ObjCBlock_NSProgressUnpublishingHandler_NSProgress_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Pointer<objc.ObjCBlockImpl> Function(
                    ffi.Pointer<objc.ObjCBlockImpl>,
                    ffi.Pointer<objc.ObjCObject>)>(
            _ObjCBlock_NSProgressUnpublishingHandler_NSProgress_fnPtrTrampoline)
        .cast();
ffi.Pointer<objc.ObjCBlockImpl>
    _ObjCBlock_NSProgressUnpublishingHandler_NSProgress_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<objc.ObjCObject> arg0) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCBlockImpl>
            Function(ffi.Pointer<objc.ObjCObject>))(arg0);
ffi.Pointer<ffi.Void>
    _ObjCBlock_NSProgressUnpublishingHandler_NSProgress_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Pointer<objc.ObjCBlockImpl> Function(
                    ffi.Pointer<objc.ObjCBlockImpl>,
                    ffi.Pointer<objc.ObjCObject>)>(
            _ObjCBlock_NSProgressUnpublishingHandler_NSProgress_closureTrampoline)
        .cast();

/// Construction methods for `objc.ObjCBlock<objc.ObjCBlock<ffi.Void Function()>? Function(NSProgress)>`.
abstract final class ObjCBlock_NSProgressUnpublishingHandler_NSProgress {
  /// Returns a block that wraps the given raw block pointer.
  static objc
      .ObjCBlock<objc.ObjCBlock<ffi.Void Function()>? Function(NSProgress)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              objc.ObjCBlock<ffi.Void Function()>? Function(
                  NSProgress)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<objc.ObjCBlock<ffi.Void Function()>? Function(NSProgress)> fromFunctionPointer(
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCBlockImpl> Function(
                          ffi.Pointer<objc.ObjCObject> arg0)>>
              ptr) =>
      objc.ObjCBlock<objc.ObjCBlock<ffi.Void Function()>? Function(NSProgress)>(
          objc.newPointerBlock(
              _ObjCBlock_NSProgressUnpublishingHandler_NSProgress_fnPtrCallable, ptr.cast()),
          retain: false,
          release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
      objc.ObjCBlock<ffi.Void Function()>? Function(NSProgress)> fromFunction(
          objc.ObjCBlock<ffi.Void Function()>? Function(NSProgress) fn) =>
      objc.ObjCBlock<objc.ObjCBlock<ffi.Void Function()>? Function(NSProgress)>(
          objc.newClosureBlock(
              _ObjCBlock_NSProgressUnpublishingHandler_NSProgress_closureCallable,
              (ffi.Pointer<objc.ObjCObject> arg0) =>
                  fn(NSProgress.castFromPointer(arg0, retain: true, release: true))
                      ?.ref
                      .retainAndAutorelease() ??
                  ffi.nullptr),
          retain: false,
          release: true);
}

/// Call operator for `objc.ObjCBlock<objc.ObjCBlock<ffi.Void Function()>? Function(NSProgress)>`.
extension ObjCBlock_NSProgressUnpublishingHandler_NSProgress_CallExtension
    on objc
    .ObjCBlock<objc.ObjCBlock<ffi.Void Function()>? Function(NSProgress)> {
  objc.ObjCBlock<ffi.Void Function()>? call(NSProgress arg0) => ref.pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCBlockImpl> Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<objc.ObjCObject> arg0)>>()
              .asFunction<ffi.Pointer<objc.ObjCBlockImpl> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>()
              (ref.pointer, arg0.ref.pointer)
              .address ==
          0
      ? null
      : ObjCBlock_ffiVoid.castFromPointer(
          ref.pointer.ref.invoke
              .cast<ffi.NativeFunction<ffi.Pointer<objc.ObjCBlockImpl> Function(ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<objc.ObjCObject> arg0)>>()
              .asFunction<ffi.Pointer<objc.ObjCBlockImpl> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<objc.ObjCObject>)>()(ref.pointer, arg0.ref.pointer),
          retain: true,
          release: true);
}

enum NSOperationQueuePriority {
  NSOperationQueuePriorityVeryLow(-8),
  NSOperationQueuePriorityLow(-4),
  NSOperationQueuePriorityNormal(0),
  NSOperationQueuePriorityHigh(4),
  NSOperationQueuePriorityVeryHigh(8);

  final int value;
  const NSOperationQueuePriority(this.value);

  static NSOperationQueuePriority fromValue(int value) => switch (value) {
        -8 => NSOperationQueuePriorityVeryLow,
        -4 => NSOperationQueuePriorityLow,
        0 => NSOperationQueuePriorityNormal,
        4 => NSOperationQueuePriorityHigh,
        8 => NSOperationQueuePriorityVeryHigh,
        _ => throw ArgumentError(
            "Unknown value for NSOperationQueuePriority: $value"),
      };
}

/// WARNING: NSOperationQueue is a stub. To generate bindings for this class, include
/// NSOperationQueue in your config's objc-interfaces list.
///
/// NSOperationQueue
class NSOperationQueue extends objc.NSObject {
  NSOperationQueue._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSOperationQueue] that points to the same underlying object as [other].
  NSOperationQueue.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSOperationQueue] that wraps the given raw object pointer.
  NSOperationQueue.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);
}

/// WARNING: NSPredicate is a stub. To generate bindings for this class, include
/// NSPredicate in your config's objc-interfaces list.
///
/// NSPredicate
class NSPredicate extends objc.NSObject {
  NSPredicate._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSPredicate] that points to the same underlying object as [other].
  NSPredicate.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSPredicate] that wraps the given raw object pointer.
  NSPredicate.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);
}

late final _class_MapLibreRegistry =
    objc.getClass("maplibre_ios.MapLibreRegistry");
late final _sel_isKindOfClass_ = objc.registerName("isKindOfClass:");
final _objc_msgSend_69e0x1 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_getMapWithViewId_ = objc.registerName("getMapWithViewId:");
final _objc_msgSend_r25hnf = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int64)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_activity = objc.registerName("activity");
final _objc_msgSend_1x359cv = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setActivity_ = objc.registerName("setActivity:");
final _objc_msgSend_1jdvcbf = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_context = objc.registerName("context");
late final _sel_setContext_ = objc.registerName("setContext:");
typedef instancetype = ffi.Pointer<objc.ObjCObject>;
typedef Dartinstancetype = objc.ObjCObjectBase;
late final _sel_init = objc.registerName("init");
late final _sel_new = objc.registerName("new");
late final _sel_allocWithZone_ = objc.registerName("allocWithZone:");
final _objc_msgSend_hzlb60 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>();
late final _sel_alloc = objc.registerName("alloc");
late final _sel_self = objc.registerName("self");
ffi.Pointer<objc.ObjCObject> _ObjCBlock_objcObjCObject_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void> arg0)>>()
        .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<ffi.Void>)>()(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_objcObjCObject_ffiVoid_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_objcObjCObject_ffiVoid_fnPtrTrampoline)
        .cast();
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.Void> arg0) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>))(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_objcObjCObject_ffiVoid_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_objcObjCObject_ffiVoid_closureTrampoline)
        .cast();

/// Construction methods for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_objcObjCObject_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc
      .ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>
      fromFunctionPointer(
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<ffi.Void> arg0)>>
                  ptr) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>(
              objc.newPointerBlock(_ObjCBlock_objcObjCObject_ffiVoid_fnPtrCallable, ptr.cast()),
              retain: false,
              release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc
      .ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>
      fromFunction(objc.ObjCObjectBase Function(ffi.Pointer<ffi.Void>) fn) =>
          objc.ObjCBlock<
                  ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>(
              objc.newClosureBlock(
                  _ObjCBlock_objcObjCObject_ffiVoid_closureCallable,
                  (ffi.Pointer<ffi.Void> arg0) =>
                      fn(arg0).ref.retainAndAutorelease()),
              retain: false,
              release: true);
}

/// Call operator for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_objcObjCObject_ffiVoid_CallExtension on objc
    .ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)> {
  objc.ObjCObjectBase call(ffi.Pointer<ffi.Void> arg0) => objc.ObjCObjectBase(
      ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<ffi.Void> arg0)>>()
          .asFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<ffi.Void>)>()(ref.pointer, arg0),
      retain: true,
      release: true);
}

late final _sel_retain = objc.registerName("retain");
late final _sel_autorelease = objc.registerName("autorelease");

/// MapLibreRegistry
class MapLibreRegistry extends objc.NSObject {
  MapLibreRegistry._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MapLibreRegistry] that points to the same underlying object as [other].
  MapLibreRegistry.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MapLibreRegistry] that wraps the given raw object pointer.
  MapLibreRegistry.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [MapLibreRegistry].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_69e0x1(
        obj.ref.pointer, _sel_isKindOfClass_, _class_MapLibreRegistry);
  }

  /// getMapWithViewId:
  static objc.ObjCObjectBase? getMapWithViewId_(int viewId) {
    final _ret = _objc_msgSend_r25hnf(
        _class_MapLibreRegistry, _sel_getMapWithViewId_, viewId);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// activity
  static objc.ObjCObjectBase? getActivity() {
    final _ret = _objc_msgSend_1x359cv(_class_MapLibreRegistry, _sel_activity);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setActivity:
  static void setActivity(objc.ObjCObjectBase? value) {
    return _objc_msgSend_1jdvcbf(_class_MapLibreRegistry, _sel_setActivity_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// context
  static objc.ObjCObjectBase? getContext() {
    final _ret = _objc_msgSend_1x359cv(_class_MapLibreRegistry, _sel_context);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// setContext:
  static void setContext(objc.ObjCObjectBase? value) {
    return _objc_msgSend_1jdvcbf(_class_MapLibreRegistry, _sel_setContext_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// init
  MapLibreRegistry init() {
    final _ret =
        _objc_msgSend_1x359cv(this.ref.retainAndReturnPointer(), _sel_init);
    return MapLibreRegistry.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static MapLibreRegistry new1() {
    final _ret = _objc_msgSend_1x359cv(_class_MapLibreRegistry, _sel_new);
    return MapLibreRegistry.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static MapLibreRegistry allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_hzlb60(
        _class_MapLibreRegistry, _sel_allocWithZone_, zone);
    return MapLibreRegistry.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static MapLibreRegistry alloc() {
    final _ret = _objc_msgSend_1x359cv(_class_MapLibreRegistry, _sel_alloc);
    return MapLibreRegistry.castFromPointer(_ret, retain: false, release: true);
  }

  /// self
  MapLibreRegistry self() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_self);
    return MapLibreRegistry.castFromPointer(_ret, retain: true, release: true);
  }

  /// retain
  MapLibreRegistry retain() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_retain);
    return MapLibreRegistry.castFromPointer(_ret, retain: true, release: true);
  }

  /// autorelease
  MapLibreRegistry autorelease() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_autorelease);
    return MapLibreRegistry.castFromPointer(_ret, retain: true, release: true);
  }
}

/// Options for enabling debugging features in an ``MLNMapView`` instance.
enum MLNMapDebugMaskOptions {
  /// Edges of tile boundaries are shown as thick, red lines to help diagnose
  /// tile clipping issues.
  MLNMapDebugTileBoundariesMask(2),

  /// Each tile shows its tile coordinate (x/y/z) in the upper-left corner.
  MLNMapDebugTileInfoMask(4),

  /// Each tile shows a timestamp indicating when it was loaded.
  MLNMapDebugTimestampsMask(8),

  /// Edges of glyphs and symbols are shown as faint, green lines to help
  /// diagnose collision and label placement issues.
  MLNMapDebugCollisionBoxesMask(16),

  /// Each drawing operation is replaced by a translucent fill. Overlapping
  /// drawing operations appear more prominent to help diagnose overdrawing.
  /// > Note: This option does nothing in Release builds of the SDK.
  MLNMapDebugOverdrawVisualizationMask(32),

  /// The stencil buffer is shown instead of the color buffer.
  /// > Note: This option does nothing in Release builds of the SDK.
  MLNMapDebugStencilBufferMask(64),

  /// The depth buffer is shown instead of the color buffer.
  /// > Note: This option does nothing in Release builds of the SDK.
  MLNMapDebugDepthBufferMask(128);

  final int value;
  const MLNMapDebugMaskOptions(this.value);

  static MLNMapDebugMaskOptions fromValue(int value) => switch (value) {
        2 => MLNMapDebugTileBoundariesMask,
        4 => MLNMapDebugTileInfoMask,
        8 => MLNMapDebugTimestampsMask,
        16 => MLNMapDebugCollisionBoxesMask,
        32 => MLNMapDebugOverdrawVisualizationMask,
        64 => MLNMapDebugStencilBufferMask,
        128 => MLNMapDebugDepthBufferMask,
        _ => throw ArgumentError(
            "Unknown value for MLNMapDebugMaskOptions: $value"),
      };
}

/// A structure containing information about a transition.
final class MLNTransition extends ffi.Struct {
  /// The amount of time the animation should take, not including the delay.
  @ffi.Double()
  external double duration;

  /// The amount of time in seconds to wait before beginning the animation.
  @ffi.Double()
  external double delay;
}

/// Constants indicating the visibility of different map ornaments.
enum MLNOrnamentVisibility {
  /// A constant indicating that the ornament adapts to the current map state.
  MLNOrnamentVisibilityAdaptive(0),

  /// A constant indicating that the ornament is always hidden.
  MLNOrnamentVisibilityHidden(1),

  /// A constant indicating that the ornament is always visible.
  MLNOrnamentVisibilityVisible(2);

  final int value;
  const MLNOrnamentVisibility(this.value);

  static MLNOrnamentVisibility fromValue(int value) => switch (value) {
        0 => MLNOrnamentVisibilityAdaptive,
        1 => MLNOrnamentVisibilityHidden,
        2 => MLNOrnamentVisibilityVisible,
        _ => throw ArgumentError(
            "Unknown value for MLNOrnamentVisibility: $value"),
      };
}

/// WARNING: MLNCompassButton is a stub. To generate bindings for this class, include
/// MLNCompassButton in your config's objc-interfaces list.
///
/// A specialized view that displays the current compass heading for its associated map.
class MLNCompassButton extends objc.ObjCObjectBase {
  MLNCompassButton._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [MLNCompassButton] that points to the same underlying object as [other].
  MLNCompassButton.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNCompassButton] that wraps the given raw object pointer.
  MLNCompassButton.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);
}

final class CLLocationCoordinate2D extends ffi.Struct {
  @ffi.Double()
  external double latitude;

  @ffi.Double()
  external double longitude;
}

/// A rectangular area as measured on a two-dimensional map projection.
final class MLNCoordinateBounds extends ffi.Struct {
  /// Coordinate at the southwest corner.
  external CLLocationCoordinate2D sw;

  /// Coordinate at the northeast corner.
  external CLLocationCoordinate2D ne;
}

/// A quadrilateral area as measured on a two-dimensional map projection.
/// ``MLNCoordinateQuad`` differs from ``MLNCoordinateQuad`` in that it allows
/// representation of non-axis aligned bounds and non-rectangular quadrilaterals.
/// The coordinates are described in counter clockwise order from top left.
final class MLNCoordinateQuad extends ffi.Struct {
  /// Coordinate at the top left corner.
  external CLLocationCoordinate2D topLeft;

  /// Coordinate at the bottom left corner.
  external CLLocationCoordinate2D bottomLeft;

  /// Coordinate at the bottom right corner.
  external CLLocationCoordinate2D bottomRight;

  /// Coordinate at the top right corner.
  external CLLocationCoordinate2D topRight;
}

late final _class_MLNMapCamera = objc.getClass("MapLibre.MLNMapCamera");
late final _sel_centerCoordinate = objc.registerName("centerCoordinate");
final _objc_msgSend_18o5nok = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CLLocationCoordinate2D Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CLLocationCoordinate2D Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_18o5nokStret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CLLocationCoordinate2D>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CLLocationCoordinate2D>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCenterCoordinate_ =
    objc.registerName("setCenterCoordinate:");
final _objc_msgSend_1zv0am = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CLLocationCoordinate2D)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CLLocationCoordinate2D)>();
late final _sel_heading = objc.registerName("heading");
final _objc_msgSend_1ukqyt8 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1ukqyt8Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setHeading_ = objc.registerName("setHeading:");
final _objc_msgSend_hwm8nu = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_pitch = objc.registerName("pitch");
late final _sel_setPitch_ = objc.registerName("setPitch:");
late final _sel_altitude = objc.registerName("altitude");
late final _sel_setAltitude_ = objc.registerName("setAltitude:");
late final _sel_viewingDistance = objc.registerName("viewingDistance");
late final _sel_setViewingDistance_ = objc.registerName("setViewingDistance:");
late final _sel_camera = objc.registerName("camera");
late final _sel_cameraLookingAtCenterCoordinate_fromEyeCoordinate_eyeAltitude_ =
    objc.registerName(
        "cameraLookingAtCenterCoordinate:fromEyeCoordinate:eyeAltitude:");
final _objc_msgSend_15ghv6w = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CLLocationCoordinate2D,
                CLLocationCoordinate2D,
                ffi.Double)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CLLocationCoordinate2D,
            CLLocationCoordinate2D,
            double)>();
late final _sel_cameraLookingAtCenterCoordinate_acrossDistance_pitch_heading_ =
    objc.registerName(
        "cameraLookingAtCenterCoordinate:acrossDistance:pitch:heading:");
final _objc_msgSend_em17dp = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CLLocationCoordinate2D,
                ffi.Double,
                ffi.Double,
                ffi.Double)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CLLocationCoordinate2D,
            double,
            double,
            double)>();
late final _sel_cameraLookingAtCenterCoordinate_altitude_pitch_heading_ = objc
    .registerName("cameraLookingAtCenterCoordinate:altitude:pitch:heading:");
late final _sel_cameraLookingAtCenterCoordinate_fromDistance_pitch_heading_ =
    objc.registerName(
        "cameraLookingAtCenterCoordinate:fromDistance:pitch:heading:");
late final _sel_isEqualToMapCamera_ = objc.registerName("isEqualToMapCamera:");
late final _sel_supportsSecureCoding =
    objc.registerName("supportsSecureCoding");
final _objc_msgSend_91o635 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
bool _ObjCBlock_bool_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void> arg0)>>()
        .asFunction<bool Function(ffi.Pointer<ffi.Void>)>()(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_bool_ffiVoid_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Bool Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_bool_ffiVoid_fnPtrTrampoline, false)
        .cast();
bool _ObjCBlock_bool_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> arg0) =>
    (objc.getBlockClosure(block) as bool Function(ffi.Pointer<ffi.Void>))(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_bool_ffiVoid_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Bool Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_bool_ffiVoid_closureTrampoline, false)
        .cast();

/// Construction methods for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_bool_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)>
      fromFunctionPointer(
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Bool Function(ffi.Pointer<ffi.Void> arg0)>>
                  ptr) =>
          objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)>(
              objc.newPointerBlock(_ObjCBlock_bool_ffiVoid_fnPtrCallable, ptr.cast()),
              retain: false,
              release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)> fromFunction(
          bool Function(ffi.Pointer<ffi.Void>) fn) =>
      objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)>(
          objc.newClosureBlock(_ObjCBlock_bool_ffiVoid_closureCallable,
              (ffi.Pointer<ffi.Void> arg0) => fn(arg0)),
          retain: false,
          release: true);
}

/// Call operator for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_bool_ffiVoid_CallExtension
    on objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Void>)> {
  bool call(ffi.Pointer<ffi.Void> arg0) => ref.pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<ffi.Void> arg0)>>()
      .asFunction<
          bool Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<ffi.Void>)>()(ref.pointer, arg0);
}

late final _sel_encodeWithCoder_ = objc.registerName("encodeWithCoder:");
void _ObjCBlock_ffiVoid_ffiVoid_NSCoder_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<ffi.Void>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_ffiVoid_NSCoder_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                    ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>(
            _ObjCBlock_ffiVoid_ffiVoid_NSCoder_fnPtrTrampoline)
        .cast();
void _ObjCBlock_ffiVoid_ffiVoid_NSCoder_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>))(arg0, arg1);
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_ffiVoid_NSCoder_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                    ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>(
            _ObjCBlock_ffiVoid_ffiVoid_NSCoder_closureTrampoline)
        .cast();
void _ObjCBlock_ffiVoid_ffiVoid_NSCoder_listenerTrampoline(
    ffi.Pointer<objc.ObjCBlockImpl> block,
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<objc.ObjCObject> arg1) {
  (objc.getBlockClosure(block) as void Function(
      ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>))(arg0, arg1);
  objc.objectRelease(block.cast());
}

ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>
    _ObjCBlock_ffiVoid_ffiVoid_NSCoder_listenerCallable = ffi.NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>.listener(
        _ObjCBlock_ffiVoid_ffiVoid_NSCoder_listenerTrampoline)
      ..keepIsolateAlive = false;

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>, objc.NSCoder)>`.
abstract final class ObjCBlock_ffiVoid_ffiVoid_NSCoder {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>, objc.NSCoder)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  objc.NSCoder)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>, objc.NSCoder)> fromFunctionPointer(
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1)>>
              ptr) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>, objc.NSCoder)>(
          objc.newPointerBlock(_ObjCBlock_ffiVoid_ffiVoid_NSCoder_fnPtrCallable, ptr.cast()),
          retain: false,
          release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>, objc.NSCoder)>
      fromFunction(void Function(ffi.Pointer<ffi.Void>, objc.NSCoder) fn) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>, objc.NSCoder)>(
              objc.newClosureBlock(
                  _ObjCBlock_ffiVoid_ffiVoid_NSCoder_closureCallable,
                  (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                      fn(
                          arg0,
                          objc.NSCoder.castFromPointer(arg1,
                              retain: true, release: true))),
              retain: false,
              release: true);

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>, objc.NSCoder)>
      listener(void Function(ffi.Pointer<ffi.Void>, objc.NSCoder) fn) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_ffiVoid_NSCoder_listenerCallable.nativeFunction
            .cast(),
        (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
            arg0,
            objc.NSCoder.castFromPointer(arg1, retain: false, release: true)));
    final wrapper = _MapLibreFFi_wrapListenerBlock_wjovn7(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
            ffi.Void Function(ffi.Pointer<ffi.Void>, objc.NSCoder)>(wrapper,
        retain: false, release: true);
  }
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>, objc.NSCoder)>`.
extension ObjCBlock_ffiVoid_ffiVoid_NSCoder_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>, objc.NSCoder)> {
  void call(ffi.Pointer<ffi.Void> arg0, objc.NSCoder arg1) => ref
          .pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>()(
      ref.pointer, arg0, arg1.ref.pointer);
}

late final _sel_initWithCoder_ = objc.registerName("initWithCoder:");
final _objc_msgSend_62nh5j = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
instancetype _ObjCBlock_instancetype_ffiVoid_NSCoder_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                instancetype Function(ffi.Pointer<ffi.Void> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            instancetype Function(ffi.Pointer<ffi.Void>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
ffi.Pointer<ffi.Void> _ObjCBlock_instancetype_ffiVoid_NSCoder_fnPtrCallable =
    ffi.Pointer.fromFunction<
                instancetype Function(ffi.Pointer<objc.ObjCBlockImpl>,
                    ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>(
            _ObjCBlock_instancetype_ffiVoid_NSCoder_fnPtrTrampoline)
        .cast();
instancetype _ObjCBlock_instancetype_ffiVoid_NSCoder_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as instancetype Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>))(arg0, arg1);
ffi.Pointer<ffi.Void> _ObjCBlock_instancetype_ffiVoid_NSCoder_closureCallable =
    ffi.Pointer.fromFunction<
                instancetype Function(ffi.Pointer<objc.ObjCBlockImpl>,
                    ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>(
            _ObjCBlock_instancetype_ffiVoid_NSCoder_closureTrampoline)
        .cast();

/// Construction methods for `objc.ObjCBlock<objc.Retained<ffi.Pointer<objc.ObjCObject>?> Function(ffi.Pointer<ffi.Void>, objc.NSCoder)>`.
abstract final class ObjCBlock_instancetype_ffiVoid_NSCoder {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          objc.Retained<ffi.Pointer<objc.ObjCObject>?> Function(
              ffi.Pointer<ffi.Void>, objc.NSCoder)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              objc.Retained<ffi.Pointer<objc.ObjCObject>?> Function(
                  ffi.Pointer<ffi.Void>,
                  objc.NSCoder)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
          objc.Retained<ffi.Pointer<objc.ObjCObject>?> Function(
              ffi.Pointer<ffi.Void>, objc.NSCoder)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<instancetype Function(ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1)>> ptr) =>
          objc.ObjCBlock<
                  objc.Retained<ffi.Pointer<objc.ObjCObject>?> Function(
                      ffi.Pointer<ffi.Void>, objc.NSCoder)>(
              objc.newPointerBlock(
                  _ObjCBlock_instancetype_ffiVoid_NSCoder_fnPtrCallable, ptr.cast()),
              retain: false,
              release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<objc.Retained<ffi.Pointer<objc.ObjCObject>?> Function(ffi.Pointer<ffi.Void>, objc.NSCoder)> fromFunction(
          Dartinstancetype? Function(ffi.Pointer<ffi.Void>, objc.NSCoder) fn) =>
      objc.ObjCBlock<objc.Retained<ffi.Pointer<objc.ObjCObject>?> Function(ffi.Pointer<ffi.Void>, objc.NSCoder)>(
          objc.newClosureBlock(
              _ObjCBlock_instancetype_ffiVoid_NSCoder_closureCallable,
              (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                  fn(arg0, objc.NSCoder.castFromPointer(arg1, retain: true, release: true))
                      ?.ref
                      .retainAndReturnPointer() ??
                  ffi.nullptr),
          retain: false,
          release: true);
}

/// Call operator for `objc.ObjCBlock<objc.Retained<ffi.Pointer<objc.ObjCObject>?> Function(ffi.Pointer<ffi.Void>, objc.NSCoder)>`.
extension ObjCBlock_instancetype_ffiVoid_NSCoder_CallExtension
    on objc.ObjCBlock<
        objc.Retained<ffi.Pointer<objc.ObjCObject>?> Function(
            ffi.Pointer<ffi.Void>, objc.NSCoder)> {
  Dartinstancetype? call(ffi.Pointer<ffi.Void> arg0, objc.NSCoder arg1) => ref
              .pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      instancetype Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<instancetype Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>()
              (ref.pointer, arg0, arg1.ref.pointer)
              .address ==
          0
      ? null
      : objc.ObjCObjectBase(
          ref.pointer.ref.invoke
              .cast<ffi.NativeFunction<instancetype Function(ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> arg0, ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<instancetype Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Pointer<objc.ObjCObject>)>()(ref.pointer, arg0, arg1.ref.pointer),
          retain: false,
          release: true);
}

/// An ``MLNMapCamera`` object represents a viewpoint from which the user observes
/// some point on an ``MLNMapView``.
///
/// #### Related examples
/// - <doc:BlockingGesturesExample>: learn how to use the
/// ``MLNMapViewDelegate/mapView:shouldChangeFromCamera:toCamera:`` method of ``MLNMapViewDelegate`` to
/// restrict panning.
/// - *TODO:* Camera animation, learn how to create a camera that rotates
/// around a central point.
class MLNMapCamera extends objc.NSObject {
  MLNMapCamera._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNMapCamera] that points to the same underlying object as [other].
  MLNMapCamera.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNMapCamera] that wraps the given raw object pointer.
  MLNMapCamera.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [MLNMapCamera].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_69e0x1(
        obj.ref.pointer, _sel_isKindOfClass_, _class_MLNMapCamera);
  }

  /// Coordinate at the center of the map view.
  CLLocationCoordinate2D get centerCoordinate {
    final _ptr = pkg_ffi.calloc<CLLocationCoordinate2D>();
    objc.useMsgSendVariants
        ? _objc_msgSend_18o5nokStret(
            _ptr, this.ref.pointer, _sel_centerCoordinate)
        : _ptr.ref =
            _objc_msgSend_18o5nok(this.ref.pointer, _sel_centerCoordinate);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<CLLocationCoordinate2D>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<CLLocationCoordinate2D>(_finalizable);
  }

  /// Coordinate at the center of the map view.
  set centerCoordinate(CLLocationCoordinate2D value) {
    return _objc_msgSend_1zv0am(
        this.ref.pointer, _sel_setCenterCoordinate_, value);
  }

  /// Heading measured in degrees clockwise from true north.
  double get heading {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_heading)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_heading);
  }

  /// Heading measured in degrees clockwise from true north.
  set heading(double value) {
    return _objc_msgSend_hwm8nu(this.ref.pointer, _sel_setHeading_, value);
  }

  /// Pitch toward the horizon measured in degrees, with 0 degrees resulting in a
  /// two-dimensional map.
  double get pitch {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_pitch)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_pitch);
  }

  /// Pitch toward the horizon measured in degrees, with 0 degrees resulting in a
  /// two-dimensional map.
  set pitch(double value) {
    return _objc_msgSend_hwm8nu(this.ref.pointer, _sel_setPitch_, value);
  }

  /// The altitude (measured in meters) above the map at which the camera is
  /// situated.
  ///
  /// The altitude is the distance from the viewpoint to the map, perpendicular to
  /// the map plane. This property does not account for physical elevation.
  ///
  /// This property’s value may be less than that of the ``viewingDistance`` property.
  /// Setting this property automatically updates the ``viewingDistance`` property
  /// based on the ``pitch`` property’s current value.
  double get altitude {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_altitude)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_altitude);
  }

  /// The altitude (measured in meters) above the map at which the camera is
  /// situated.
  ///
  /// The altitude is the distance from the viewpoint to the map, perpendicular to
  /// the map plane. This property does not account for physical elevation.
  ///
  /// This property’s value may be less than that of the ``viewingDistance`` property.
  /// Setting this property automatically updates the ``viewingDistance`` property
  /// based on the ``pitch`` property’s current value.
  set altitude(double value) {
    return _objc_msgSend_hwm8nu(this.ref.pointer, _sel_setAltitude_, value);
  }

  /// The straight-line distance from the viewpoint to the ``centerCoordinate``.
  ///
  /// Setting this property automatically updates the ``altitude`` property based on
  /// the ``pitch`` property’s current value.
  double get viewingDistance {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_viewingDistance)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_viewingDistance);
  }

  /// The straight-line distance from the viewpoint to the ``centerCoordinate``.
  ///
  /// Setting this property automatically updates the ``altitude`` property based on
  /// the ``pitch`` property’s current value.
  set viewingDistance(double value) {
    return _objc_msgSend_hwm8nu(
        this.ref.pointer, _sel_setViewingDistance_, value);
  }

  /// Returns a new camera with all properties set to 0.
  static MLNMapCamera camera() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNMapCamera, _sel_camera);
    return MLNMapCamera.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns a new camera based on information about the camera’s viewpoint
  /// and focus point.
  ///
  /// @param centerCoordinate The geographic coordinate on which the map should be
  /// centered.
  /// @param eyeCoordinate The geometric coordinate at which the camera should be
  /// situated.
  /// @param eyeAltitude The altitude (measured in meters) above the map at which the
  /// camera should be situated. The altitude may be less than the distance from
  /// the camera’s viewpoint to the camera’s focus point.
  static MLNMapCamera
      cameraLookingAtCenterCoordinate_fromEyeCoordinate_eyeAltitude_(
          CLLocationCoordinate2D centerCoordinate,
          CLLocationCoordinate2D eyeCoordinate,
          double eyeAltitude) {
    final _ret = _objc_msgSend_15ghv6w(
        _class_MLNMapCamera,
        _sel_cameraLookingAtCenterCoordinate_fromEyeCoordinate_eyeAltitude_,
        centerCoordinate,
        eyeCoordinate,
        eyeAltitude);
    return MLNMapCamera.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns a new camera with the given distance, pitch, and heading.
  ///
  /// This method interprets the distance as a straight-line distance from the
  /// viewpoint to the center coordinate. To specify the altitude of the viewpoint,
  /// use the ``cameraLookingAtCenterCoordinate:altitude:pitch:heading:`` method.
  ///
  /// @param centerCoordinate The geographic coordinate on which the map should be
  /// centered.
  /// @param distance The straight-line distance from the viewpoint to the
  /// ``centerCoordinate``.
  /// @param pitch The viewing angle of the camera, measured in degrees. A value of
  /// `0` results in a camera pointed straight down at the map. Angles greater
  /// than `0` result in a camera angled toward the horizon.
  /// @param heading The camera’s heading, measured in degrees clockwise from true
  /// north. A value of `0` means that the top edge of the map view corresponds to
  /// true north. The value `90` means the top of the map is pointing due east.
  /// The value `180` means the top of the map points due south, and so on.
  static MLNMapCamera
      cameraLookingAtCenterCoordinate_acrossDistance_pitch_heading_(
          CLLocationCoordinate2D centerCoordinate,
          double distance,
          double pitch,
          double heading) {
    final _ret = _objc_msgSend_em17dp(
        _class_MLNMapCamera,
        _sel_cameraLookingAtCenterCoordinate_acrossDistance_pitch_heading_,
        centerCoordinate,
        distance,
        pitch,
        heading);
    return MLNMapCamera.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns a new camera with the given altitude, pitch, and heading.
  ///
  /// @param centerCoordinate The geographic coordinate on which the map should be
  /// centered.
  /// @param altitude The altitude (measured in meters) above the map at which the
  /// camera should be situated. The altitude may be less than the distance from
  /// the camera’s viewpoint to the camera’s focus point.
  /// @param pitch The viewing angle of the camera, measured in degrees. A value of
  /// `0` results in a camera pointed straight down at the map. Angles greater
  /// than `0` result in a camera angled toward the horizon.
  /// @param heading The camera’s heading, measured in degrees clockwise from true
  /// north. A value of `0` means that the top edge of the map view corresponds to
  /// true north. The value `90` means the top of the map is pointing due east.
  /// The value `180` means the top of the map points due south, and so on.
  static MLNMapCamera cameraLookingAtCenterCoordinate_altitude_pitch_heading_(
      CLLocationCoordinate2D centerCoordinate,
      double altitude,
      double pitch,
      double heading) {
    final _ret = _objc_msgSend_em17dp(
        _class_MLNMapCamera,
        _sel_cameraLookingAtCenterCoordinate_altitude_pitch_heading_,
        centerCoordinate,
        altitude,
        pitch,
        heading);
    return MLNMapCamera.castFromPointer(_ret, retain: true, release: true);
  }

  /// > This initializer incorrectly interprets the `distance` parameter. To
  /// specify the straight-line distance from the viewpoint to ``centerCoordinate``,
  /// use the ``cameraLookingAtCenterCoordinate:acrossDistance:pitch:heading:``
  /// method. To specify the altitude of the viewpoint, use the
  /// ``cameraLookingAtCenterCoordinate:altitude:pitch:heading:`` method, which has
  /// the same behavior as this initializer.
  static MLNMapCamera
      cameraLookingAtCenterCoordinate_fromDistance_pitch_heading_(
          CLLocationCoordinate2D centerCoordinate,
          double distance,
          double pitch,
          double heading) {
    final _ret = _objc_msgSend_em17dp(
        _class_MLNMapCamera,
        _sel_cameraLookingAtCenterCoordinate_fromDistance_pitch_heading_,
        centerCoordinate,
        distance,
        pitch,
        heading);
    return MLNMapCamera.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns a Boolean value indicating whether the given camera is functionally
  /// equivalent to the receiver.
  ///
  /// Unlike `isEqual:`, this method returns `YES` if the difference between the
  /// coordinates, altitudes, pitches, or headings of the two camera objects is
  /// negligible.
  ///
  /// @param otherCamera The camera with which to compare the receiver.
  /// @return A Boolean value indicating whether the two cameras are functionally
  /// equivalent.
  bool isEqualToMapCamera_(MLNMapCamera otherCamera) {
    return _objc_msgSend_69e0x1(
        this.ref.pointer, _sel_isEqualToMapCamera_, otherCamera.ref.pointer);
  }

  /// init
  MLNMapCamera init() {
    final _ret =
        _objc_msgSend_1x359cv(this.ref.retainAndReturnPointer(), _sel_init);
    return MLNMapCamera.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static MLNMapCamera new1() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNMapCamera, _sel_new);
    return MLNMapCamera.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static MLNMapCamera allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_hzlb60(_class_MLNMapCamera, _sel_allocWithZone_, zone);
    return MLNMapCamera.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static MLNMapCamera alloc() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNMapCamera, _sel_alloc);
    return MLNMapCamera.castFromPointer(_ret, retain: false, release: true);
  }

  /// self
  MLNMapCamera self() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_self);
    return MLNMapCamera.castFromPointer(_ret, retain: true, release: true);
  }

  /// retain
  MLNMapCamera retain() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_retain);
    return MLNMapCamera.castFromPointer(_ret, retain: true, release: true);
  }

  /// autorelease
  MLNMapCamera autorelease() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_autorelease);
    return MLNMapCamera.castFromPointer(_ret, retain: true, release: true);
  }

  /// supportsSecureCoding
  static bool getSupportsSecureCoding() {
    return _objc_msgSend_91o635(_class_MLNMapCamera, _sel_supportsSecureCoding);
  }

  /// encodeWithCoder:
  void encodeWithCoder_(objc.NSCoder coder) {
    _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_encodeWithCoder_, coder.ref.pointer);
  }

  /// initWithCoder:
  MLNMapCamera? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_62nh5j(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : MLNMapCamera.castFromPointer(_ret, retain: false, release: true);
  }
}

/// WARNING: MLNStyleLayer is a stub. To generate bindings for this class, include
/// MLNStyleLayer in your config's objc-interfaces list.
///
/// ``MLNStyleLayer`` is an abstract base class for style layers. A style layer
/// manages the layout and appearance of content at a specific z-index in a style.
/// An ``MLNStyle`` object consists of one or more ``MLNStyle`` objects.
///
/// Each style layer defined by the style JSON file is represented at runtime by an
/// ``MLNStyleLayer`` object, which you can use to refine the map’s appearance. You
/// can also add and remove style layers dynamically.
///
/// Create instances of ``MLNBackgroundStyleLayer`` and the concrete subclasses of
/// ``MLNForegroundStyleLayer`` in order to use ``MLNForegroundStyleLayer``'s properties and methods.
/// You do not create instances of ``MLNStyleLayer`` directly, and do not
/// create your own subclasses of this class.
///
/// Do not add ``MLNStyleLayer`` objects to the `style` property of a ``MLNStyleLayer`` before
/// ``MLNMapViewDelegate/mapView:didFinishLoadingStyle:`` is called.
class MLNStyleLayer extends objc.NSObject {
  MLNStyleLayer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNStyleLayer] that points to the same underlying object as [other].
  MLNStyleLayer.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNStyleLayer] that wraps the given raw object pointer.
  MLNStyleLayer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);
}

/// WARNING: MLNDefaultStyle is a stub. To generate bindings for this class, include
/// MLNDefaultStyle in your config's objc-interfaces list.
///
/// The ``MLNDefaultStyle`` defines the predefined vendor style
class MLNDefaultStyle extends objc.NSObject {
  MLNDefaultStyle._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNDefaultStyle] that points to the same underlying object as [other].
  MLNDefaultStyle.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNDefaultStyle] that wraps the given raw object pointer.
  MLNDefaultStyle.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);
}

late final _class_MLNStyle = objc.getClass("MLNStyle");
late final _sel_predefinedStyles = objc.registerName("predefinedStyles");
late final _sel_defaultStyle = objc.registerName("defaultStyle");
late final _sel_defaultStyleURL = objc.registerName("defaultStyleURL");
late final _sel_predefinedStyle_ = objc.registerName("predefinedStyle:");
late final _sel_name = objc.registerName("name");
late final _sel_sources = objc.registerName("sources");
late final _sel_setSources_ = objc.registerName("setSources:");
late final _sel_transition = objc.registerName("transition");
final _objc_msgSend_1i0p3hy = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            MLNTransition Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        MLNTransition Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1i0p3hyStret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<MLNTransition>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<MLNTransition>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTransition_ = objc.registerName("setTransition:");
final _objc_msgSend_z7lywk = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, MLNTransition)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, MLNTransition)>();
late final _sel_performsPlacementTransitions =
    objc.registerName("performsPlacementTransitions");
late final _sel_setPerformsPlacementTransitions_ =
    objc.registerName("setPerformsPlacementTransitions:");
final _objc_msgSend_1s56lr9 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
late final _class_MLNSource = objc.getClass("MLNSource");
late final _sel_initWithIdentifier_ = objc.registerName("initWithIdentifier:");
late final _sel_identifier = objc.registerName("identifier");
late final _sel_setIdentifier_ = objc.registerName("setIdentifier:");

/// MLNSource
class MLNSource extends objc.NSObject {
  MLNSource._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNSource] that points to the same underlying object as [other].
  MLNSource.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNSource] that wraps the given raw object pointer.
  MLNSource.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [MLNSource].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_69e0x1(
        obj.ref.pointer, _sel_isKindOfClass_, _class_MLNSource);
  }

  /// init
  MLNSource init() {
    final _ret =
        _objc_msgSend_1x359cv(this.ref.retainAndReturnPointer(), _sel_init);
    return MLNSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// Returns a source initialized with an identifier.
  ///
  /// After initializing and configuring the source, add it to a map view’s style
  /// using the ``MLNStyle/addSource:`` method.
  ///
  /// @param identifier A string that uniquely identifies the source in the style to
  /// which it is added.
  /// @return An initialized source.
  MLNSource initWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_62nh5j(this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_, identifier.ref.pointer);
    return MLNSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// A string that uniquely identifies the source in the style to which it is added.
  objc.NSString get identifier {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_identifier);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// A string that uniquely identifies the source in the style to which it is added.
  set identifier(objc.NSString value) {
    return _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_setIdentifier_, value.ref.pointer);
  }

  /// new
  static MLNSource new1() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNSource, _sel_new);
    return MLNSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static MLNSource allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_hzlb60(_class_MLNSource, _sel_allocWithZone_, zone);
    return MLNSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static MLNSource alloc() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNSource, _sel_alloc);
    return MLNSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// self
  MLNSource self() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_self);
    return MLNSource.castFromPointer(_ret, retain: true, release: true);
  }

  /// retain
  MLNSource retain() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_retain);
    return MLNSource.castFromPointer(_ret, retain: true, release: true);
  }

  /// autorelease
  MLNSource autorelease() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_autorelease);
    return MLNSource.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _sel_sourceWithIdentifier_ =
    objc.registerName("sourceWithIdentifier:");
late final _sel_addSource_ = objc.registerName("addSource:");
late final _sel_removeSource_ = objc.registerName("removeSource:");
late final _sel_removeSource_error_ = objc.registerName("removeSource:error:");
final _objc_msgSend_blqzg8 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_layers = objc.registerName("layers");
late final _sel_setLayers_ = objc.registerName("setLayers:");
late final _sel_layerWithIdentifier_ =
    objc.registerName("layerWithIdentifier:");
late final _sel_addLayer_ = objc.registerName("addLayer:");
late final _sel_insertLayer_atIndex_ =
    objc.registerName("insertLayer:atIndex:");
final _objc_msgSend_10i1axw = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_insertLayer_belowLayer_ =
    objc.registerName("insertLayer:belowLayer:");
final _objc_msgSend_wjvic9 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_insertLayer_aboveLayer_ =
    objc.registerName("insertLayer:aboveLayer:");
late final _sel_removeLayer_ = objc.registerName("removeLayer:");
late final _class_NSImage = objc.getClass("NSImage");

/// NSImage
class NSImage extends objc.ObjCObjectBase {
  NSImage._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSImage] that points to the same underlying object as [other].
  NSImage.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSImage] that wraps the given raw object pointer.
  NSImage.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSImage].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_69e0x1(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSImage);
  }
}

late final _sel_imageForName_ = objc.registerName("imageForName:");
late final _sel_setImage_forName_ = objc.registerName("setImage:forName:");
late final _sel_removeImageForName_ = objc.registerName("removeImageForName:");

/// WARNING: MLNLight is a stub. To generate bindings for this class, include
/// MLNLight in your config's objc-interfaces list.
///
/// MLNLight
class MLNLight extends objc.ObjCObjectBase {
  MLNLight._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [MLNLight] that points to the same underlying object as [other].
  MLNLight.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNLight] that wraps the given raw object pointer.
  MLNLight.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);
}

late final _sel_light = objc.registerName("light");
late final _sel_setLight_ = objc.registerName("setLight:");
late final _sel_localizeLabelsIntoLocale_ =
    objc.registerName("localizeLabelsIntoLocale:");

/// The proxy object for the current map style.
///
/// MLNStyle provides a set of convenience methods for changing default styles included
/// with MapLibre.
///
/// It is also possible to directly manipulate the current map style
/// via ``MLNMapView/style`` by updating the style's data sources or layers.
///
/// > Note: Wait until the map style has finished loading before modifying a map's
/// style via any of the ``MLNStyle`` instance methods below. You can use the
/// ``MLNMapViewDelegate/mapView:didFinishLoadingStyle:`` or
/// ``MLNMapViewDelegate/mapViewDidFinishLoadingMap:`` methods as indicators
/// that it's safe to modify the map's style.
class MLNStyle extends objc.NSObject {
  MLNStyle._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNStyle] that points to the same underlying object as [other].
  MLNStyle.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNStyle] that wraps the given raw object pointer.
  MLNStyle.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [MLNStyle].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_69e0x1(
        obj.ref.pointer, _sel_isKindOfClass_, _class_MLNStyle);
  }

  /// Returns list of predefined styles
  static objc.NSArray predefinedStyles() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNStyle, _sel_predefinedStyles);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns default style
  static MLNDefaultStyle defaultStyle() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNStyle, _sel_defaultStyle);
    return MLNDefaultStyle.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns default style as NSURL
  static objc.NSURL? defaultStyleURL() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNStyle, _sel_defaultStyleURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// Get predefined style by name
  ///
  /// @param withStyleName style name.
  static MLNDefaultStyle? predefinedStyle_(objc.NSString withStyleName) {
    final _ret = _objc_msgSend_62nh5j(
        _class_MLNStyle, _sel_predefinedStyle_, withStyleName.ref.pointer);
    return _ret.address == 0
        ? null
        : MLNDefaultStyle.castFromPointer(_ret, retain: true, release: true);
  }

  /// The name of the style.
  ///
  /// You can customize the style’s name in Mapbox Studio.
  objc.NSString? get name {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// A set containing the style’s sources.
  objc.NSSet get sources {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_sources);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  /// A set containing the style’s sources.
  set sources(objc.NSSet value) {
    return _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_setSources_, value.ref.pointer);
  }

  /// Values describing animated transitions to changes on a style's individual
  /// paint properties.
  MLNTransition get transition {
    final _ptr = pkg_ffi.calloc<MLNTransition>();
    objc.useMsgSendVariants
        ? _objc_msgSend_1i0p3hyStret(_ptr, this.ref.pointer, _sel_transition)
        : _ptr.ref = _objc_msgSend_1i0p3hy(this.ref.pointer, _sel_transition);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<MLNTransition>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<MLNTransition>(_finalizable);
  }

  /// Values describing animated transitions to changes on a style's individual
  /// paint properties.
  set transition(MLNTransition value) {
    return _objc_msgSend_z7lywk(this.ref.pointer, _sel_setTransition_, value);
  }

  /// A boolean value indicating whether label placement transitions are enabled.
  ///
  /// The default value of this property is `YES`.
  bool get performsPlacementTransitions {
    return _objc_msgSend_91o635(
        this.ref.pointer, _sel_performsPlacementTransitions);
  }

  /// A boolean value indicating whether label placement transitions are enabled.
  ///
  /// The default value of this property is `YES`.
  set performsPlacementTransitions(bool value) {
    return _objc_msgSend_1s56lr9(
        this.ref.pointer, _sel_setPerformsPlacementTransitions_, value);
  }

  /// Returns a source with the given identifier in the current style.
  ///
  /// @return An instance of a concrete subclass of ``MLNSource`` associated with the
  /// given identifier, or `nil` if the current style contains no such source.
  MLNSource? sourceWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_62nh5j(
        this.ref.pointer, _sel_sourceWithIdentifier_, identifier.ref.pointer);
    return _ret.address == 0
        ? null
        : MLNSource.castFromPointer(_ret, retain: true, release: true);
  }

  /// Adds a new source to the current style.
  ///
  /// > Note: Adding the same source instance more than once will result in a
  /// ``MLNRedundantSourceException``. Reusing the same source identifier, even with
  /// different source instances, will result in a
  /// ``MLNRedundantSourceIdentifierException``.
  ///
  /// > Note: Sources should be added in
  /// ``MLNMapViewDelegate/mapView:didFinishLoadingStyle:`` or
  /// ``MLNMapViewDelegate/mapViewDidFinishLoadingMap:`` to ensure that the map
  /// has loaded the style and is ready to accept a new source.
  ///
  /// @param source The source to add to the current style.
  void addSource_(MLNSource source) {
    _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_addSource_, source.ref.pointer);
  }

  /// Removes a source from the current style.
  ///
  /// @param source The source to remove from the current style.
  void removeSource_(MLNSource source) {
    _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_removeSource_, source.ref.pointer);
  }

  /// Removes a source from the current style.
  ///
  /// @param source The source to remove from the current style.
  /// @param outError Upon return, if an error has occurred, a pointer to an `NSError`
  /// object describing the error. Pass in `NULL` to ignore any error.
  ///
  /// @return `YES` if `source` was removed successfully. If `NO`, `outError` contains
  /// an `NSError` object describing the problem.
  bool removeSource_error_(
      MLNSource source, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_blqzg8(this.ref.pointer, _sel_removeSource_error_,
        source.ref.pointer, outError);
  }

  /// The layers included in the style, arranged according to their back-to-front
  /// ordering on the screen.
  objc.NSArray get layers {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_layers);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// The layers included in the style, arranged according to their back-to-front
  /// ordering on the screen.
  set layers(objc.NSArray value) {
    return _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_setLayers_, value.ref.pointer);
  }

  /// Returns a style layer with the given identifier in the current style.
  ///
  /// @return An instance of a concrete subclass of ``MLNStyleLayer`` associated with
  /// the given identifier, or `nil` if the current style contains no such style
  /// layer.
  MLNStyleLayer? layerWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_62nh5j(
        this.ref.pointer, _sel_layerWithIdentifier_, identifier.ref.pointer);
    return _ret.address == 0
        ? null
        : MLNStyleLayer.castFromPointer(_ret, retain: true, release: true);
  }

  /// Adds a new layer on top of existing layers.
  ///
  /// > Note: Adding the same layer instance more than once will result in a
  /// ``MLNRedundantLayerException``. Reusing the same layer identifer, even with
  /// different layer instances, will also result in an exception.
  ///
  /// > Note: Layers should be added in
  /// ``MLNMapViewDelegate/mapView:didFinishLoadingStyle:`` or
  /// ``MLNMapViewDelegate/mapViewDidFinishLoadingMap:`` to ensure that the map
  /// has loaded the style and is ready to accept a new layer.
  ///
  /// @param layer The layer object to add to the map view. This object must be an
  /// instance of a concrete subclass of ``MLNStyleLayer``.
  void addLayer_(MLNStyleLayer layer) {
    _objc_msgSend_1jdvcbf(this.ref.pointer, _sel_addLayer_, layer.ref.pointer);
  }

  /// Inserts a new layer into the style at the given index.
  ///
  /// > Note: Adding the same layer instance more than once will result in a
  /// ``MLNRedundantLayerException``. Reusing the same layer identifer, even with
  /// different layer instances, will also result in an exception.
  ///
  /// > Note: Layers should be added in
  /// ``MLNMapViewDelegate/mapView:didFinishLoadingStyle:`` or
  /// ``MLNMapViewDelegate/mapViewDidFinishLoadingMap:`` to ensure that the map
  /// has loaded the style and is ready to accept a new layer.
  ///
  /// @param layer The layer to insert.
  /// @param index The index at which to insert the layer. An index of 0 would send
  /// the layer to the back; an index equal to the number of objects in the
  /// `layers` property would bring the layer to the front.
  void insertLayer_atIndex_(MLNStyleLayer layer, int index) {
    _objc_msgSend_10i1axw(
        this.ref.pointer, _sel_insertLayer_atIndex_, layer.ref.pointer, index);
  }

  /// Inserts a new layer below another layer.
  ///
  /// > Note: Inserting the same layer instance more than once will result in a
  /// ``MLNRedundantLayerException``. Reusing the same layer identifer, even with
  /// different layer instances, will also result in an exception.
  ///
  /// @param layer The layer to insert.
  /// @param sibling An existing layer in the style.
  ///
  /// #### Related examples
  /// TODO: Add multiple shapes from a single shape source, learn how to
  /// add a layer to your map below an existing layer.
  void insertLayer_belowLayer_(MLNStyleLayer layer, MLNStyleLayer sibling) {
    _objc_msgSend_wjvic9(this.ref.pointer, _sel_insertLayer_belowLayer_,
        layer.ref.pointer, sibling.ref.pointer);
  }

  /// Inserts a new layer above another layer.
  ///
  /// > Note: Inserting the same layer instance more than once will result in a
  /// ``MLNRedundantLayerException``. Reusing the same layer identifer, even with
  /// different layer instances, will also result in an exception.
  ///
  /// @param layer The layer to insert.
  /// @param sibling An existing layer in the style.
  ///
  /// #### Related examples
  /// TODO: Add an image, learn how to add a layer to your map above an
  /// existing layer.
  void insertLayer_aboveLayer_(MLNStyleLayer layer, MLNStyleLayer sibling) {
    _objc_msgSend_wjvic9(this.ref.pointer, _sel_insertLayer_aboveLayer_,
        layer.ref.pointer, sibling.ref.pointer);
  }

  /// Removes a layer from the map view.
  ///
  /// @param layer The layer object to remove from the map view. This object
  /// must conform to the ``MLNStyleLayer`` protocol.
  void removeLayer_(MLNStyleLayer layer) {
    _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_removeLayer_, layer.ref.pointer);
  }

  /// Returns the image associated with the given name in the style.
  ///
  /// @param name The name associated with the image you want to obtain.
  /// @return The image associated with the given name, or `nil` if no image is
  /// associated with that name.
  NSImage? imageForName_(objc.NSString name) {
    final _ret = _objc_msgSend_62nh5j(
        this.ref.pointer, _sel_imageForName_, name.ref.pointer);
    return _ret.address == 0
        ? null
        : NSImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// Adds or overrides an image used by the style’s layers.
  ///
  /// To use an image in a style layer, give it a unique name using this method, then
  /// set the `iconImageName` property of an ``MLNSymbolStyleLayer`` object to that
  /// name.
  ///
  /// @param image The image for the name.
  /// @param name The name of the image to set to the style.
  ///
  /// #### Related examples
  /// TODO: Use images to cluster point data
  /// TODO: Cluster point data
  /// Learn how to add images to your map using an ``MLNStyle`` object.
  void setImage_forName_(NSImage image, objc.NSString name) {
    _objc_msgSend_wjvic9(this.ref.pointer, _sel_setImage_forName_,
        image.ref.pointer, name.ref.pointer);
  }

  /// Removes a name and its associated image from the style.
  ///
  /// @param name The name of the image to remove.
  void removeImageForName_(objc.NSString name) {
    _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_removeImageForName_, name.ref.pointer);
  }

  /// Provides global light source for the style.
  MLNLight get light {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_light);
    return MLNLight.castFromPointer(_ret, retain: true, release: true);
  }

  /// Provides global light source for the style.
  set light(MLNLight value) {
    return _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_setLight_, value.ref.pointer);
  }

  /// Attempts to localize labels in the style into the given locale.
  ///
  /// This method automatically modifies the text property of any symbol style layer
  /// in the style whose source is the
  /// <a href="https://www.mapbox.com/vector-tiles/mapbox-streets-v8/#overview">Mapbox Streets
  /// source</a>. On iOS, the user can set the system’s preferred language in Settings, General Settings,
  /// Language & Region. On macOS, the user can set the system’s preferred language in the Language &
  /// Region pane of System Preferences.
  ///
  /// @param locale The locale into which labels should be localized. To use the
  /// system’s preferred language, if supported, specify `nil`. To use the local
  /// language, specify a locale with the identifier `mul`.
  void localizeLabelsIntoLocale_(objc.NSLocale? locale) {
    _objc_msgSend_1jdvcbf(this.ref.pointer, _sel_localizeLabelsIntoLocale_,
        locale?.ref.pointer ?? ffi.nullptr);
  }

  /// init
  MLNStyle init() {
    final _ret =
        _objc_msgSend_1x359cv(this.ref.retainAndReturnPointer(), _sel_init);
    return MLNStyle.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static MLNStyle new1() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNStyle, _sel_new);
    return MLNStyle.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static MLNStyle allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_hzlb60(_class_MLNStyle, _sel_allocWithZone_, zone);
    return MLNStyle.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static MLNStyle alloc() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNStyle, _sel_alloc);
    return MLNStyle.castFromPointer(_ret, retain: false, release: true);
  }

  /// self
  MLNStyle self() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_self);
    return MLNStyle.castFromPointer(_ret, retain: true, release: true);
  }

  /// retain
  MLNStyle retain() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_retain);
    return MLNStyle.castFromPointer(_ret, retain: true, release: true);
  }

  /// autorelease
  MLNStyle autorelease() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_autorelease);
    return MLNStyle.castFromPointer(_ret, retain: true, release: true);
  }
}

/// The vertical alignment of an annotation within a map view. Used with
/// ``MLNMapView/userLocationVerticalAlignment``.
enum MLNAnnotationVerticalAlignment {
  /// Aligns the annotation vertically in the center of the map view.
  MLNAnnotationVerticalAlignmentCenter(0),

  /// Aligns the annotation vertically at the top of the map view.
  MLNAnnotationVerticalAlignmentTop(1),

  /// Aligns the annotation vertically at the bottom of the map view.
  MLNAnnotationVerticalAlignmentBottom(2);

  final int value;
  const MLNAnnotationVerticalAlignment(this.value);

  static MLNAnnotationVerticalAlignment fromValue(int value) => switch (value) {
        0 => MLNAnnotationVerticalAlignmentCenter,
        1 => MLNAnnotationVerticalAlignmentTop,
        2 => MLNAnnotationVerticalAlignmentBottom,
        _ => throw ArgumentError(
            "Unknown value for MLNAnnotationVerticalAlignment: $value"),
      };
}

/// The position of scale bar, compass, logo and attribution in a map view. Used with
/// ``MLNMapView/scaleBarPosition``,
/// ``MLNMapView/compassViewPosition``,
/// ``MLNMapView/logoViewPosition``,
/// ``MLNMapView/attributionButtonPosition``.
enum MLNOrnamentPosition {
  /// Place the ornament in the top left of the map view.
  MLNOrnamentPositionTopLeft(0),

  /// Place the ornament in the top right of the map view.
  MLNOrnamentPositionTopRight(1),

  /// Place the ornament in the bottom left of the map view.
  MLNOrnamentPositionBottomLeft(2),

  /// Place the ornament in the bottom right of the map view.
  MLNOrnamentPositionBottomRight(3);

  final int value;
  const MLNOrnamentPosition(this.value);

  static MLNOrnamentPosition fromValue(int value) => switch (value) {
        0 => MLNOrnamentPositionTopLeft,
        1 => MLNOrnamentPositionTopRight,
        2 => MLNOrnamentPositionBottomLeft,
        3 => MLNOrnamentPositionBottomRight,
        _ =>
          throw ArgumentError("Unknown value for MLNOrnamentPosition: $value"),
      };
}

/// The mode used to track the user location on the map. Used with
/// ``MLNMapView/userTrackingMode``.
///
/// #### Related examples
/// - TODO: Switch between user tracking modes</a> example to learn how to toggle modes and
/// how each mode behaves.
enum MLNUserTrackingMode {
  /// The map does not follow the user location.
  MLNUserTrackingModeNone(0),

  /// The map follows the user location. This tracking mode falls back
  /// to ``MLNUserTrackingMode/MLNUserTrackingModeNone`` if the user pans the map view.
  MLNUserTrackingModeFollow(1),

  /// The map follows the user location and rotates when the heading changes.
  /// The default user location annotation displays a fan-shaped indicator with
  /// the current heading. The heading indicator represents the direction the
  /// device is facing, which is sized according to the reported accuracy.
  ///
  /// This tracking mode is disabled if the user pans the map view, but
  /// remains enabled if the user zooms in. If the user rotates the map
  /// view, this tracking mode will fall back to ``MLNUserTrackingModeFollow``.
  MLNUserTrackingModeFollowWithHeading(2),

  /// The map follows the user location and rotates when the course changes.
  /// Course represents the direction in which the device is traveling.
  /// The default user location annotation shows a puck-shaped indicator
  /// that rotates as the course changes.
  ///
  /// This tracking mode is disabled if the user pans the map view, but
  /// remains enabled if the user zooms in. If the user rotates the map view,
  /// this tracking mode will fall back to ``MLNUserTrackingModeFollow``.
  MLNUserTrackingModeFollowWithCourse(3);

  final int value;
  const MLNUserTrackingMode(this.value);

  static MLNUserTrackingMode fromValue(int value) => switch (value) {
        0 => MLNUserTrackingModeNone,
        1 => MLNUserTrackingModeFollow,
        2 => MLNUserTrackingModeFollowWithHeading,
        3 => MLNUserTrackingModeFollowWithCourse,
        _ =>
          throw ArgumentError("Unknown value for MLNUserTrackingMode: $value"),
      };
}

enum MLNPanScrollingMode {
  /// The map allows the user to only scroll horizontally.
  MLNPanScrollingModeHorizontal(0),

  /// The map allows the user to only scroll vertically.
  MLNPanScrollingModeVertical(1),

  /// The map allows the user to scroll both horizontally and vertically.
  MLNPanScrollingModeDefault(2);

  final int value;
  const MLNPanScrollingMode(this.value);

  static MLNPanScrollingMode fromValue(int value) => switch (value) {
        0 => MLNPanScrollingModeHorizontal,
        1 => MLNPanScrollingModeVertical,
        2 => MLNPanScrollingModeDefault,
        _ =>
          throw ArgumentError("Unknown value for MLNPanScrollingMode: $value"),
      };
}

late final _class_MLNMapView = objc.getClass("MapLibre.MLNMapView");
late final _sel_initWithFrame_ = objc.registerName("initWithFrame:");
final _objc_msgSend_19adbty = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGRect)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGRect)>();
late final _sel_initWithFrame_styleURL_ =
    objc.registerName("initWithFrame:styleURL:");
final _objc_msgSend_qsq5p6 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGRect,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGRect,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_delegate = objc.registerName("delegate");
late final _sel_setDelegate_ = objc.registerName("setDelegate:");
late final _sel_style = objc.registerName("style");
ffi.Pointer<objc.ObjCObject> _ObjCBlock_MLNStyle_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void> arg0)>>()
        .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<ffi.Void>)>()(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_MLNStyle_ffiVoid_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_MLNStyle_ffiVoid_fnPtrTrampoline)
        .cast();
ffi.Pointer<objc.ObjCObject> _ObjCBlock_MLNStyle_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> arg0) =>
    (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<ffi.Void>))(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_MLNStyle_ffiVoid_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_MLNStyle_ffiVoid_closureTrampoline)
        .cast();

/// Construction methods for `objc.ObjCBlock<MLNStyle? Function(ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_MLNStyle_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<MLNStyle? Function(ffi.Pointer<ffi.Void>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<MLNStyle? Function(ffi.Pointer<ffi.Void>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<MLNStyle? Function(ffi.Pointer<ffi.Void>)> fromFunctionPointer(
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<ffi.Void> arg0)>>
              ptr) =>
      objc.ObjCBlock<MLNStyle? Function(ffi.Pointer<ffi.Void>)>(
          objc.newPointerBlock(
              _ObjCBlock_MLNStyle_ffiVoid_fnPtrCallable, ptr.cast()),
          retain: false,
          release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<MLNStyle? Function(ffi.Pointer<ffi.Void>)> fromFunction(
          MLNStyle? Function(ffi.Pointer<ffi.Void>) fn) =>
      objc.ObjCBlock<MLNStyle? Function(ffi.Pointer<ffi.Void>)>(
          objc.newClosureBlock(
              _ObjCBlock_MLNStyle_ffiVoid_closureCallable,
              (ffi.Pointer<ffi.Void> arg0) =>
                  fn(arg0)?.ref.retainAndAutorelease() ?? ffi.nullptr),
          retain: false,
          release: true);
}

/// Call operator for `objc.ObjCBlock<MLNStyle? Function(ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_MLNStyle_ffiVoid_CallExtension
    on objc.ObjCBlock<MLNStyle? Function(ffi.Pointer<ffi.Void>)> {
  MLNStyle? call(ffi.Pointer<ffi.Void> arg0) => ref.pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Pointer<ffi.Void> arg0)>>()
              .asFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>()
              (ref.pointer, arg0)
              .address ==
          0
      ? null
      : MLNStyle.castFromPointer(
          ref.pointer.ref.invoke
              .cast<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> arg0)>>()
              .asFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>()(ref.pointer, arg0),
          retain: true,
          release: true);
}

late final _sel_styleURL = objc.registerName("styleURL");
late final _sel_setStyleURL_ = objc.registerName("setStyleURL:");
late final _sel_reloadStyle_ = objc.registerName("reloadStyle:");
late final _sel_automaticallyAdjustsContentInset =
    objc.registerName("automaticallyAdjustsContentInset");
late final _sel_setAutomaticallyAdjustsContentInset_ =
    objc.registerName("setAutomaticallyAdjustsContentInset:");
late final _sel_showsScale = objc.registerName("showsScale");
late final _sel_setShowsScale_ = objc.registerName("setShowsScale:");

/// WARNING: MLNScaleBar is a stub. To generate bindings for this class, include
/// MLNScaleBar in your config's objc-interfaces list.
///
/// MLNScaleBar
class MLNScaleBar extends objc.ObjCObjectBase {
  MLNScaleBar._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [MLNScaleBar] that points to the same underlying object as [other].
  MLNScaleBar.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNScaleBar] that wraps the given raw object pointer.
  MLNScaleBar.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);
}

late final _sel_scaleBar = objc.registerName("scaleBar");
late final _sel_scaleBarShouldShowDarkStyles =
    objc.registerName("scaleBarShouldShowDarkStyles");
late final _sel_setScaleBarShouldShowDarkStyles_ =
    objc.registerName("setScaleBarShouldShowDarkStyles:");
late final _sel_scaleBarUsesMetricSystem =
    objc.registerName("scaleBarUsesMetricSystem");
late final _sel_setScaleBarUsesMetricSystem_ =
    objc.registerName("setScaleBarUsesMetricSystem:");
late final _sel_scaleBarPosition = objc.registerName("scaleBarPosition");
final _objc_msgSend_1c31cvt = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setScaleBarPosition_ =
    objc.registerName("setScaleBarPosition:");
final _objc_msgSend_8fd115 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_scaleBarMargins = objc.registerName("scaleBarMargins");
final _objc_msgSend_1uwdhlk = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGPoint Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        CGPoint Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1uwdhlkStret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGPoint>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<CGPoint>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setScaleBarMargins_ = objc.registerName("setScaleBarMargins:");
final _objc_msgSend_iy8iz6 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGPoint)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGPoint)>();
late final _sel_compassView = objc.registerName("compassView");
late final _sel_compassViewPosition = objc.registerName("compassViewPosition");
late final _sel_setCompassViewPosition_ =
    objc.registerName("setCompassViewPosition:");
late final _sel_compassViewMargins = objc.registerName("compassViewMargins");
late final _sel_setCompassViewMargins_ =
    objc.registerName("setCompassViewMargins:");
late final _sel_logoView = objc.registerName("logoView");
final _objc_msgSend_1p5sbp0 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Int> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<ffi.Int> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_logoViewPosition = objc.registerName("logoViewPosition");
late final _sel_setLogoViewPosition_ =
    objc.registerName("setLogoViewPosition:");
late final _sel_logoViewMargins = objc.registerName("logoViewMargins");
late final _sel_setLogoViewMargins_ = objc.registerName("setLogoViewMargins:");
late final _sel_attributionButton = objc.registerName("attributionButton");
late final _sel_attributionButtonPosition =
    objc.registerName("attributionButtonPosition");
late final _sel_setAttributionButtonPosition_ =
    objc.registerName("setAttributionButtonPosition:");
late final _sel_attributionButtonMargins =
    objc.registerName("attributionButtonMargins");
late final _sel_setAttributionButtonMargins_ =
    objc.registerName("setAttributionButtonMargins:");
late final _sel_showAttribution_ = objc.registerName("showAttribution:");
late final _sel_preferredFramesPerSecond =
    objc.registerName("preferredFramesPerSecond");
final _objc_msgSend_1hz7y9r = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPreferredFramesPerSecond_ =
    objc.registerName("setPreferredFramesPerSecond:");
final _objc_msgSend_4sp4xj = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_prefetchesTiles = objc.registerName("prefetchesTiles");
late final _sel_setPrefetchesTiles_ = objc.registerName("setPrefetchesTiles:");
late final _sel_tileCacheEnabled = objc.registerName("tileCacheEnabled");
late final _sel_setTileCacheEnabled_ =
    objc.registerName("setTileCacheEnabled:");
late final _sel_locationManager = objc.registerName("locationManager");
late final _sel_setLocationManager_ = objc.registerName("setLocationManager:");
late final _sel_showsUserLocation = objc.registerName("showsUserLocation");
late final _sel_setShowsUserLocation_ =
    objc.registerName("setShowsUserLocation:");
late final _sel_shouldRequestAuthorizationToUseLocationServices =
    objc.registerName("shouldRequestAuthorizationToUseLocationServices");
late final _sel_setShouldRequestAuthorizationToUseLocationServices_ =
    objc.registerName("setShouldRequestAuthorizationToUseLocationServices:");
late final _sel_isUserLocationVisible =
    objc.registerName("isUserLocationVisible");

/// WARNING: MLNUserLocation is a stub. To generate bindings for this class, include
/// MLNUserLocation in your config's objc-interfaces list.
///
/// MLNUserLocation
class MLNUserLocation extends objc.ObjCObjectBase {
  MLNUserLocation._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [MLNUserLocation] that points to the same underlying object as [other].
  MLNUserLocation.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNUserLocation] that wraps the given raw object pointer.
  MLNUserLocation.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);
}

late final _sel_userLocation = objc.registerName("userLocation");
late final _sel_userTrackingMode = objc.registerName("userTrackingMode");
final _objc_msgSend_1swtepj = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setUserTrackingMode_ =
    objc.registerName("setUserTrackingMode:");
final _objc_msgSend_xoapar = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setUserTrackingMode_animated_ =
    objc.registerName("setUserTrackingMode:animated:");
final _objc_msgSend_7oa3sf = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong, ffi.Bool)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, bool)>();
late final _sel_setUserTrackingMode_animated_completionHandler_ =
    objc.registerName("setUserTrackingMode:animated:completionHandler:");
final _objc_msgSend_1iu40ms = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Bool,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            bool,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_userLocationVerticalAlignment =
    objc.registerName("userLocationVerticalAlignment");
final _objc_msgSend_1m9zum6 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setUserLocationVerticalAlignment_ =
    objc.registerName("setUserLocationVerticalAlignment:");
final _objc_msgSend_47doj4 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setUserLocationVerticalAlignment_animated_ =
    objc.registerName("setUserLocationVerticalAlignment:animated:");
final _objc_msgSend_1qddrus = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong, ffi.Bool)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, bool)>();
late final _sel_updateUserLocationAnnotationView =
    objc.registerName("updateUserLocationAnnotationView");
final _objc_msgSend_1pl9qdv = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_updateUserLocationAnnotationViewAnimatedWithDuration_ =
    objc.registerName("updateUserLocationAnnotationViewAnimatedWithDuration:");
late final _sel_showsUserHeadingIndicator =
    objc.registerName("showsUserHeadingIndicator");
late final _sel_setShowsUserHeadingIndicator_ =
    objc.registerName("setShowsUserHeadingIndicator:");
late final _sel_displayHeadingCalibration =
    objc.registerName("displayHeadingCalibration");
late final _sel_setDisplayHeadingCalibration_ =
    objc.registerName("setDisplayHeadingCalibration:");
late final _sel_targetCoordinate = objc.registerName("targetCoordinate");
late final _sel_setTargetCoordinate_ =
    objc.registerName("setTargetCoordinate:");
late final _sel_setTargetCoordinate_animated_ =
    objc.registerName("setTargetCoordinate:animated:");
final _objc_msgSend_o7hjv2 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CLLocationCoordinate2D,
                ffi.Bool)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CLLocationCoordinate2D, bool)>();
late final _sel_setTargetCoordinate_animated_completionHandler_ =
    objc.registerName("setTargetCoordinate:animated:completionHandler:");
final _objc_msgSend_1pbhom5 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CLLocationCoordinate2D,
                ffi.Bool,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CLLocationCoordinate2D,
            bool,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_isZoomEnabled = objc.registerName("isZoomEnabled");
late final _sel_setZoomEnabled_ = objc.registerName("setZoomEnabled:");
late final _sel_isScrollEnabled = objc.registerName("isScrollEnabled");
late final _sel_setScrollEnabled_ = objc.registerName("setScrollEnabled:");
late final _sel_panScrollingMode = objc.registerName("panScrollingMode");
final _objc_msgSend_1vb5jwj = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPanScrollingMode_ =
    objc.registerName("setPanScrollingMode:");
final _objc_msgSend_k7jknj = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isRotateEnabled = objc.registerName("isRotateEnabled");
late final _sel_setRotateEnabled_ = objc.registerName("setRotateEnabled:");
late final _sel_isPitchEnabled = objc.registerName("isPitchEnabled");
late final _sel_setPitchEnabled_ = objc.registerName("setPitchEnabled:");
late final _sel_anchorRotateOrZoomGesturesToCenterCoordinate =
    objc.registerName("anchorRotateOrZoomGesturesToCenterCoordinate");
late final _sel_setAnchorRotateOrZoomGesturesToCenterCoordinate_ =
    objc.registerName("setAnchorRotateOrZoomGesturesToCenterCoordinate:");
late final _sel_isHapticFeedbackEnabled =
    objc.registerName("isHapticFeedbackEnabled");
late final _sel_setHapticFeedbackEnabled_ =
    objc.registerName("setHapticFeedbackEnabled:");
late final _sel_decelerationRate = objc.registerName("decelerationRate");
late final _sel_setDecelerationRate_ =
    objc.registerName("setDecelerationRate:");
late final _sel_setCenterCoordinate_animated_ =
    objc.registerName("setCenterCoordinate:animated:");
late final _sel_setCenterCoordinate_zoomLevel_animated_ =
    objc.registerName("setCenterCoordinate:zoomLevel:animated:");
final _objc_msgSend_sbs4d5 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CLLocationCoordinate2D,
                ffi.Double,
                ffi.Bool)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CLLocationCoordinate2D,
            double,
            bool)>();
late final _sel_setCenterCoordinate_zoomLevel_direction_animated_ =
    objc.registerName("setCenterCoordinate:zoomLevel:direction:animated:");
final _objc_msgSend_3zczym = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CLLocationCoordinate2D,
                ffi.Double,
                ffi.Double,
                ffi.Bool)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CLLocationCoordinate2D,
            double,
            double,
            bool)>();
late final _sel_setCenterCoordinate_zoomLevel_direction_animated_completionHandler_ =
    objc.registerName(
        "setCenterCoordinate:zoomLevel:direction:animated:completionHandler:");
final _objc_msgSend_d9pvdp = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CLLocationCoordinate2D,
                ffi.Double,
                ffi.Double,
                ffi.Bool,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CLLocationCoordinate2D,
            double,
            double,
            bool,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_zoomLevel = objc.registerName("zoomLevel");
late final _sel_setZoomLevel_ = objc.registerName("setZoomLevel:");
late final _sel_setZoomLevel_animated_ =
    objc.registerName("setZoomLevel:animated:");
final _objc_msgSend_ghxo7e = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double, ffi.Bool)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, bool)>();
late final _sel_minimumZoomLevel = objc.registerName("minimumZoomLevel");
late final _sel_setMinimumZoomLevel_ =
    objc.registerName("setMinimumZoomLevel:");
late final _sel_maximumZoomLevel = objc.registerName("maximumZoomLevel");
late final _sel_setMaximumZoomLevel_ =
    objc.registerName("setMaximumZoomLevel:");
late final _sel_direction = objc.registerName("direction");
late final _sel_setDirection_ = objc.registerName("setDirection:");
late final _sel_setDirection_animated_ =
    objc.registerName("setDirection:animated:");
late final _sel_minimumPitch = objc.registerName("minimumPitch");
late final _sel_setMinimumPitch_ = objc.registerName("setMinimumPitch:");
late final _sel_maximumPitch = objc.registerName("maximumPitch");
late final _sel_setMaximumPitch_ = objc.registerName("setMaximumPitch:");
late final _sel_resetNorth = objc.registerName("resetNorth");
late final _sel_resetPosition = objc.registerName("resetPosition");
late final _sel_visibleCoordinateBounds =
    objc.registerName("visibleCoordinateBounds");
final _objc_msgSend_ygoa6a = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            MLNCoordinateBounds Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        MLNCoordinateBounds Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_ygoa6aStret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<MLNCoordinateBounds>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<MLNCoordinateBounds>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setVisibleCoordinateBounds_ =
    objc.registerName("setVisibleCoordinateBounds:");
final _objc_msgSend_9ay59k = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, MLNCoordinateBounds)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, MLNCoordinateBounds)>();
late final _sel_setVisibleCoordinateBounds_animated_ =
    objc.registerName("setVisibleCoordinateBounds:animated:");
final _objc_msgSend_148tmbg = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                MLNCoordinateBounds,
                ffi.Bool)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, MLNCoordinateBounds, bool)>();
late final _sel_setVisibleCoordinateBounds_edgePadding_animated_ =
    objc.registerName("setVisibleCoordinateBounds:edgePadding:animated:");
final _objc_msgSend_13x0pfk = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                MLNCoordinateBounds,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            MLNCoordinateBounds,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_setVisibleCoordinateBounds_edgePadding_animated_completionHandler_ =
    objc.registerName(
        "setVisibleCoordinateBounds:edgePadding:animated:completionHandler:");
final _objc_msgSend_5ott2b = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                MLNCoordinateBounds,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            MLNCoordinateBounds,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_setVisibleCoordinates_count_edgePadding_animated_ =
    objc.registerName("setVisibleCoordinates:count:edgePadding:animated:");
final _objc_msgSend_9zf1tv = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CLLocationCoordinate2D>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CLLocationCoordinate2D>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_setVisibleCoordinates_count_edgePadding_direction_duration_animationTimingFunction_completionHandler_ =
    objc.registerName(
        "setVisibleCoordinates:count:edgePadding:direction:duration:animationTimingFunction:completionHandler:");
final _objc_msgSend_g22jge = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<CLLocationCoordinate2D>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<CLLocationCoordinate2D>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            double,
            double,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_showAnnotations_animated_ =
    objc.registerName("showAnnotations:animated:");
final _objc_msgSend_gk45w7 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_showAnnotations_edgePadding_animated_ =
    objc.registerName("showAnnotations:edgePadding:animated:");
final _objc_msgSend_k4ykup = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_showAnnotations_edgePadding_animated_completionHandler_ = objc
    .registerName("showAnnotations:edgePadding:animated:completionHandler:");
final _objc_msgSend_1xot3wa = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_setCamera_ = objc.registerName("setCamera:");
late final _sel_setCamera_animated_ = objc.registerName("setCamera:animated:");
late final _sel_setCamera_withDuration_animationTimingFunction_ =
    objc.registerName("setCamera:withDuration:animationTimingFunction:");
final _objc_msgSend_1rg1izw = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setCamera_withDuration_animationTimingFunction_completionHandler_ =
    objc.registerName(
        "setCamera:withDuration:animationTimingFunction:completionHandler:");
final _objc_msgSend_vmwi8n = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_setCamera_withDuration_animationTimingFunction_edgePadding_completionHandler_ =
    objc.registerName(
        "setCamera:withDuration:animationTimingFunction:edgePadding:completionHandler:");
final _objc_msgSend_q6aes3 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_flyToCamera_completionHandler_ =
    objc.registerName("flyToCamera:completionHandler:");
final _objc_msgSend_14pxqbs = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_flyToCamera_withDuration_completionHandler_ =
    objc.registerName("flyToCamera:withDuration:completionHandler:");
final _objc_msgSend_s4h8qz = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_flyToCamera_withDuration_peakAltitude_completionHandler_ = objc
    .registerName("flyToCamera:withDuration:peakAltitude:completionHandler:");
final _objc_msgSend_1oun51c = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double,
                ffi.Double,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            double,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_flyToCamera_edgePadding_withDuration_completionHandler_ = objc
    .registerName("flyToCamera:edgePadding:withDuration:completionHandler:");
final _objc_msgSend_mqlsb9 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_cameraThatFitsCoordinateBounds_ =
    objc.registerName("cameraThatFitsCoordinateBounds:");
final _objc_msgSend_3usbrg = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, MLNCoordinateBounds)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, MLNCoordinateBounds)>();
late final _sel_cameraThatFitsCoordinateBounds_edgePadding_ =
    objc.registerName("cameraThatFitsCoordinateBounds:edgePadding:");
final _objc_msgSend_1z0kiwg = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                MLNCoordinateBounds,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            MLNCoordinateBounds,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_camera_fittingCoordinateBounds_edgePadding_ =
    objc.registerName("camera:fittingCoordinateBounds:edgePadding:");
final _objc_msgSend_1mt4adu = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                MLNCoordinateBounds,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            MLNCoordinateBounds,
            ffi.Pointer<objc.ObjCObject>)>();
late final _class_MLNShape = objc.getClass("MLNShape");
late final _sel_shapeWithData_encoding_error_ =
    objc.registerName("shapeWithData:encoding:error:");
final _objc_msgSend_94cet5 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_title = objc.registerName("title");
late final _sel_setTitle_ = objc.registerName("setTitle:");
late final _sel_subtitle = objc.registerName("subtitle");
late final _sel_setSubtitle_ = objc.registerName("setSubtitle:");
late final _sel_toolTip = objc.registerName("toolTip");
late final _sel_setToolTip_ = objc.registerName("setToolTip:");
late final _sel_geoJSONDataUsingEncoding_ =
    objc.registerName("geoJSONDataUsingEncoding:");
final _objc_msgSend_1qrcblu = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_coordinate = objc.registerName("coordinate");
CLLocationCoordinate2D
    _ObjCBlock_CLLocationCoordinate2D_ffiVoid_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.Void> arg0) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    CLLocationCoordinate2D Function(
                        ffi.Pointer<ffi.Void> arg0)>>()
            .asFunction<
                CLLocationCoordinate2D Function(ffi.Pointer<ffi.Void>)>()(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_CLLocationCoordinate2D_ffiVoid_fnPtrCallable =
    ffi.Pointer.fromFunction<
                CLLocationCoordinate2D Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_CLLocationCoordinate2D_ffiVoid_fnPtrTrampoline)
        .cast();
CLLocationCoordinate2D
    _ObjCBlock_CLLocationCoordinate2D_ffiVoid_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.Void> arg0) =>
        (objc.getBlockClosure(block) as CLLocationCoordinate2D Function(
            ffi.Pointer<ffi.Void>))(arg0);
ffi.Pointer<ffi.Void>
    _ObjCBlock_CLLocationCoordinate2D_ffiVoid_closureCallable =
    ffi.Pointer.fromFunction<
                CLLocationCoordinate2D Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_CLLocationCoordinate2D_ffiVoid_closureTrampoline)
        .cast();

/// Construction methods for `objc.ObjCBlock<CLLocationCoordinate2D Function(ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_CLLocationCoordinate2D_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<CLLocationCoordinate2D Function(ffi.Pointer<ffi.Void>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  CLLocationCoordinate2D Function(ffi.Pointer<ffi.Void>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<CLLocationCoordinate2D Function(ffi.Pointer<ffi.Void>)> fromFunctionPointer(
          ffi.Pointer<
                  ffi.NativeFunction<
                      CLLocationCoordinate2D Function(
                          ffi.Pointer<ffi.Void> arg0)>>
              ptr) =>
      objc.ObjCBlock<CLLocationCoordinate2D Function(ffi.Pointer<ffi.Void>)>(
          objc.newPointerBlock(
              _ObjCBlock_CLLocationCoordinate2D_ffiVoid_fnPtrCallable, ptr.cast()),
          retain: false,
          release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<CLLocationCoordinate2D Function(ffi.Pointer<ffi.Void>)>
      fromFunction(CLLocationCoordinate2D Function(ffi.Pointer<ffi.Void>) fn) =>
          objc.ObjCBlock<
                  CLLocationCoordinate2D Function(ffi.Pointer<ffi.Void>)>(
              objc.newClosureBlock(
                  _ObjCBlock_CLLocationCoordinate2D_ffiVoid_closureCallable,
                  (ffi.Pointer<ffi.Void> arg0) => fn(arg0)),
              retain: false,
              release: true);
}

/// Call operator for `objc.ObjCBlock<CLLocationCoordinate2D Function(ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_CLLocationCoordinate2D_ffiVoid_CallExtension
    on objc.ObjCBlock<CLLocationCoordinate2D Function(ffi.Pointer<ffi.Void>)> {
  CLLocationCoordinate2D call(ffi.Pointer<ffi.Void> arg0) =>
      ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  CLLocationCoordinate2D Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<ffi.Void> arg0)>>()
          .asFunction<
              CLLocationCoordinate2D Function(ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<ffi.Void>)>()(ref.pointer, arg0);
}

/// MLNShape
class MLNShape extends objc.NSObject {
  MLNShape._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNShape] that points to the same underlying object as [other].
  MLNShape.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNShape] that wraps the given raw object pointer.
  MLNShape.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [MLNShape].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_69e0x1(
        obj.ref.pointer, _sel_isKindOfClass_, _class_MLNShape);
  }

  /// Returns an ``MLNShape`` object initialized with the given data interpreted as a
  /// string containing a GeoJSON object.
  ///
  /// If the GeoJSON object is a geometry, the returned value is a kind of
  /// ``MLNShape``. If it is a feature object, the returned value is a kind of
  /// ``MLNShape`` that conforms to the ``MLNShape`` protocol. If it is a feature
  /// collection object, the returned value is an instance of
  /// ``MLNShapeCollectionFeature``.
  ///
  /// ### Example
  ///
  /// ```swift
  /// let url = mainBundle.url(forResource: "amsterdam", withExtension: "geojson")!
  /// let data = try! Data(contentsOf: url)
  /// let feature = try! MLNShape(data: data, encoding: String.Encoding.utf8.rawValue) as!
  /// MLNShapeCollectionFeature
  /// ```
  ///
  /// @param data String data containing GeoJSON source code.
  /// @param encoding The encoding used by `data`.
  /// @param outError Upon return, if an error has occurred, a pointer to an
  /// `NSError` object describing the error. Pass in `NULL` to ignore any error.
  /// @return An ``MLNShape`` object representation of `data`, or `nil` if `data` could
  /// not be parsed as valid GeoJSON source code. If `nil`, `outError` contains an
  /// `NSError` object describing the problem.
  static MLNShape? shapeWithData_encoding_error_(objc.NSData data, int encoding,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_94cet5(
        _class_MLNShape,
        _sel_shapeWithData_encoding_error_,
        data.ref.pointer,
        encoding,
        outError);
    return _ret.address == 0
        ? null
        : MLNShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// The title of the shape annotation.
  ///
  /// The default value of this property is `nil`.
  ///
  /// This property is ignored when the shape is used in an ``MLNShapeSource``. To name
  /// a shape used in a shape source, create an ``MLNFeature`` and add an attribute to
  /// the ``MLNFeature/attributes`` property.
  objc.NSString? get title {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_title);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// The title of the shape annotation.
  ///
  /// The default value of this property is `nil`.
  ///
  /// This property is ignored when the shape is used in an ``MLNShapeSource``. To name
  /// a shape used in a shape source, create an ``MLNFeature`` and add an attribute to
  /// the ``MLNFeature/attributes`` property.
  set title(objc.NSString? value) {
    return _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_setTitle_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// The subtitle of the shape annotation. The default value of this property is
  /// `nil`.
  ///
  /// This property is ignored when the shape is used in an ``MLNShapeSource``. To
  /// provide additional information about a shape used in a shape source, create an
  /// ``MLNFeature`` and add an attribute to the ``MLNFeature/attributes`` property.
  objc.NSString? get subtitle {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_subtitle);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// The subtitle of the shape annotation. The default value of this property is
  /// `nil`.
  ///
  /// This property is ignored when the shape is used in an ``MLNShapeSource``. To
  /// provide additional information about a shape used in a shape source, create an
  /// ``MLNFeature`` and add an attribute to the ``MLNFeature/attributes`` property.
  set subtitle(objc.NSString? value) {
    return _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_setSubtitle_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// The tooltip of the shape annotation.
  ///
  /// The default value of this property is `nil`.
  ///
  /// This property is ignored when the shape is used in an ``MLNShapeSource``.
  objc.NSString? get toolTip {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_toolTip);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// The tooltip of the shape annotation.
  ///
  /// The default value of this property is `nil`.
  ///
  /// This property is ignored when the shape is used in an ``MLNShapeSource``.
  set toolTip(objc.NSString? value) {
    return _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_setToolTip_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// Returns the GeoJSON string representation of the shape encapsulated in a data
  /// object.
  ///
  /// @param encoding The string encoding to use.
  /// @return A data object containing the shape’s GeoJSON string representation.
  objc.NSData geoJSONDataUsingEncoding_(int encoding) {
    final _ret = _objc_msgSend_1qrcblu(
        this.ref.pointer, _sel_geoJSONDataUsingEncoding_, encoding);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  MLNShape init() {
    final _ret =
        _objc_msgSend_1x359cv(this.ref.retainAndReturnPointer(), _sel_init);
    return MLNShape.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static MLNShape new1() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNShape, _sel_new);
    return MLNShape.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static MLNShape allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_hzlb60(_class_MLNShape, _sel_allocWithZone_, zone);
    return MLNShape.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static MLNShape alloc() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNShape, _sel_alloc);
    return MLNShape.castFromPointer(_ret, retain: false, release: true);
  }

  /// self
  MLNShape self() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_self);
    return MLNShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// retain
  MLNShape retain() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_retain);
    return MLNShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// autorelease
  MLNShape autorelease() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_autorelease);
    return MLNShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// The center point (specified as a map coordinate) of the annotation. (required)
  /// (read-only)
  CLLocationCoordinate2D get coordinate {
    final _ptr = pkg_ffi.calloc<CLLocationCoordinate2D>();
    objc.useMsgSendVariants
        ? _objc_msgSend_18o5nokStret(_ptr, this.ref.pointer, _sel_coordinate)
        : _ptr.ref = _objc_msgSend_18o5nok(this.ref.pointer, _sel_coordinate);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<CLLocationCoordinate2D>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<CLLocationCoordinate2D>(_finalizable);
  }

  /// supportsSecureCoding
  static bool getSupportsSecureCoding() {
    return _objc_msgSend_91o635(_class_MLNShape, _sel_supportsSecureCoding);
  }

  /// encodeWithCoder:
  void encodeWithCoder_(objc.NSCoder coder) {
    _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_encodeWithCoder_, coder.ref.pointer);
  }

  /// initWithCoder:
  MLNShape? initWithCoder_(objc.NSCoder coder) {
    final _ret = _objc_msgSend_62nh5j(this.ref.retainAndReturnPointer(),
        _sel_initWithCoder_, coder.ref.pointer);
    return _ret.address == 0
        ? null
        : MLNShape.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _sel_camera_fittingShape_edgePadding_ =
    objc.registerName("camera:fittingShape:edgePadding:");
final _objc_msgSend_582s3n = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cameraThatFitsShape_direction_edgePadding_ =
    objc.registerName("cameraThatFitsShape:direction:edgePadding:");
final _objc_msgSend_45qm9k = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_anchorPointForGesture_ =
    objc.registerName("anchorPointForGesture:");
final _objc_msgSend_11ku3hk = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGPoint Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        CGPoint Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_11ku3hkStret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGPoint>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<CGPoint>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_contentInset = objc.registerName("contentInset");
final _objc_msgSend_13yqbb6 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setContentInset_ = objc.registerName("setContentInset:");
final _objc_msgSend_9o8504 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_cameraEdgeInsets = objc.registerName("cameraEdgeInsets");
late final _sel_setContentInset_animated_ =
    objc.registerName("setContentInset:animated:");
late final _sel_setContentInset_animated_completionHandler_ =
    objc.registerName("setContentInset:animated:completionHandler:");
final _objc_msgSend_3br9h8 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_convertPoint_toCoordinateFromView_ =
    objc.registerName("convertPoint:toCoordinateFromView:");
final _objc_msgSend_13n8ay5 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CLLocationCoordinate2D Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGPoint,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        CLLocationCoordinate2D Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGPoint,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_13n8ay5Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CLLocationCoordinate2D>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGPoint,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CLLocationCoordinate2D>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGPoint,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_convertCoordinate_toPointToView_ =
    objc.registerName("convertCoordinate:toPointToView:");
final _objc_msgSend_1a63hef = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGPoint Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CLLocationCoordinate2D,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        CGPoint Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CLLocationCoordinate2D,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_1a63hefStret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGPoint>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CLLocationCoordinate2D,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CGPoint>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CLLocationCoordinate2D,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_convertRect_toCoordinateBoundsFromView_ =
    objc.registerName("convertRect:toCoordinateBoundsFromView:");
final _objc_msgSend_g6it35 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            MLNCoordinateBounds Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGRect,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        MLNCoordinateBounds Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGRect,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_g6it35Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<MLNCoordinateBounds>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGRect,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<MLNCoordinateBounds>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGRect,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_convertCoordinateBounds_toRectToView_ =
    objc.registerName("convertCoordinateBounds:toRectToView:");
final _objc_msgSend_1nli2vf = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGRect Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                MLNCoordinateBounds,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        CGRect Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            MLNCoordinateBounds,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_1nli2vfStret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGRect>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                MLNCoordinateBounds,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CGRect>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            MLNCoordinateBounds,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_metersPerPointAtLatitude_ =
    objc.registerName("metersPerPointAtLatitude:");
final _objc_msgSend_1tczmpv = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
final _objc_msgSend_1tczmpvFpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _class_MLNMapProjection = objc.getClass("MLNMapProjection");
late final _sel_initWithMapView_ = objc.registerName("initWithMapView:");
late final _sel_setCamera_withEdgeInsets_ =
    objc.registerName("setCamera:withEdgeInsets:");
late final _sel_setVisibleCoordinateBounds_edgePadding_ =
    objc.registerName("setVisibleCoordinateBounds:edgePadding:");
final _objc_msgSend_1h22bw = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                MLNCoordinateBounds,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            MLNCoordinateBounds,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_convertPoint_ = objc.registerName("convertPoint:");
final _objc_msgSend_zdqa7 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CLLocationCoordinate2D Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGPoint)>>()
    .asFunction<
        CLLocationCoordinate2D Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGPoint)>();
final _objc_msgSend_zdqa7Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CLLocationCoordinate2D>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGPoint)>>()
    .asFunction<
        void Function(
            ffi.Pointer<CLLocationCoordinate2D>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGPoint)>();
late final _sel_convertCoordinate_ = objc.registerName("convertCoordinate:");
final _objc_msgSend_p1qkdl = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            CGPoint Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CLLocationCoordinate2D)>>()
    .asFunction<
        CGPoint Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CLLocationCoordinate2D)>();
final _objc_msgSend_p1qkdlStret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<CGPoint>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CLLocationCoordinate2D)>>()
    .asFunction<
        void Function(ffi.Pointer<CGPoint>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CLLocationCoordinate2D)>();
late final _sel_metersPerPoint = objc.registerName("metersPerPoint");

/// MLNMapProjection
class MLNMapProjection extends objc.NSObject {
  MLNMapProjection._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNMapProjection] that points to the same underlying object as [other].
  MLNMapProjection.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNMapProjection] that wraps the given raw object pointer.
  MLNMapProjection.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [MLNMapProjection].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_69e0x1(
        obj.ref.pointer, _sel_isKindOfClass_, _class_MLNMapProjection);
  }

  /// Initializes and returns the new projection object with the current
  /// camera state from the provided map view.
  ///
  /// @param mapView The map view the camera state to use for the initialization.
  /// @return An initialized map projection.
  MLNMapProjection initWithMapView_(MLNMapView mapView) {
    final _ret = _objc_msgSend_62nh5j(this.ref.retainAndReturnPointer(),
        _sel_initWithMapView_, mapView.ref.pointer);
    return MLNMapProjection.castFromPointer(_ret, retain: false, release: true);
  }

  /// A camera representing the current projection state
  MLNMapCamera get camera {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_camera);
    return MLNMapCamera.castFromPointer(_ret, retain: true, release: true);
  }

  /// Change the projection state with camera and padding values.
  ///
  /// @param camera The new camera to be used in the projection calculation.
  /// @param insets The insets applied on top of the camera be used in the projection calculation.
  ///
  /// > Note: ``MLNMapView`` instance frame must not be changed since this projection is initialized,
  /// otherwise the calculation may be wrong.
  void setCamera_withEdgeInsets_(
      MLNMapCamera camera, objc.ObjCObjectBase insets) {
    _objc_msgSend_wjvic9(this.ref.pointer, _sel_setCamera_withEdgeInsets_,
        camera.ref.pointer, insets.ref.pointer);
  }

  /// Change the projection state to make the provided bounds visible with the specified inset.
  ///
  /// @param bounds The bounds that the viewport should fit.
  /// @param insets The insets applied on top of the viewport to be used in the projection calculation.
  ///
  /// > Note: ``MLNMapView`` instance frame must not be changed since this projection is initialized,
  /// otherwise the calculation may be wrong.
  void setVisibleCoordinateBounds_edgePadding_(
      MLNCoordinateBounds bounds, objc.ObjCObjectBase insets) {
    _objc_msgSend_1h22bw(
        this.ref.pointer,
        _sel_setVisibleCoordinateBounds_edgePadding_,
        bounds,
        insets.ref.pointer);
  }

  /// Converts a point in the coordinate system of the map view the projection
  /// was initialized with to the geographical coordinate.
  ///
  /// @param point The point to convert.
  /// @return The geographic coordinate at the given point.
  CLLocationCoordinate2D convertPoint_(CGPoint point) {
    final _ptr = pkg_ffi.calloc<CLLocationCoordinate2D>();
    objc.useMsgSendVariants
        ? _objc_msgSend_zdqa7Stret(
            _ptr, this.ref.pointer, _sel_convertPoint_, point)
        : _ptr.ref =
            _objc_msgSend_zdqa7(this.ref.pointer, _sel_convertPoint_, point);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<CLLocationCoordinate2D>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<CLLocationCoordinate2D>(_finalizable);
  }

  /// Converts a geographic coordinate to a point in the map view's the projection
  /// was initialized with coordinate system.
  ///
  /// @param coordinate The geographic coordinate to convert.
  /// @return The point corresponding to the given geographic coordinate.
  CGPoint convertCoordinate_(CLLocationCoordinate2D coordinate) {
    final _ptr = pkg_ffi.calloc<CGPoint>();
    objc.useMsgSendVariants
        ? _objc_msgSend_p1qkdlStret(
            _ptr, this.ref.pointer, _sel_convertCoordinate_, coordinate)
        : _ptr.ref = _objc_msgSend_p1qkdl(
            this.ref.pointer, _sel_convertCoordinate_, coordinate);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<CGPoint>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<CGPoint>(_finalizable);
  }

  /// The distance in meters spanned by a single point for the current camera.
  double get metersPerPoint {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_metersPerPoint)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_metersPerPoint);
  }

  /// init
  MLNMapProjection init() {
    final _ret =
        _objc_msgSend_1x359cv(this.ref.retainAndReturnPointer(), _sel_init);
    return MLNMapProjection.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static MLNMapProjection new1() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNMapProjection, _sel_new);
    return MLNMapProjection.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static MLNMapProjection allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_hzlb60(
        _class_MLNMapProjection, _sel_allocWithZone_, zone);
    return MLNMapProjection.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static MLNMapProjection alloc() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNMapProjection, _sel_alloc);
    return MLNMapProjection.castFromPointer(_ret, retain: false, release: true);
  }

  /// self
  MLNMapProjection self() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_self);
    return MLNMapProjection.castFromPointer(_ret, retain: true, release: true);
  }

  /// retain
  MLNMapProjection retain() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_retain);
    return MLNMapProjection.castFromPointer(_ret, retain: true, release: true);
  }

  /// autorelease
  MLNMapProjection autorelease() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_autorelease);
    return MLNMapProjection.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _sel_mapProjection = objc.registerName("mapProjection");
late final _sel_annotations = objc.registerName("annotations");
late final _sel_addAnnotation_ = objc.registerName("addAnnotation:");
late final _sel_addAnnotations_ = objc.registerName("addAnnotations:");
late final _sel_removeAnnotation_ = objc.registerName("removeAnnotation:");
late final _sel_removeAnnotations_ = objc.registerName("removeAnnotations:");

/// WARNING: MLNAnnotationView is a stub. To generate bindings for this class, include
/// MLNAnnotationView in your config's objc-interfaces list.
///
/// MLNAnnotationView
class MLNAnnotationView extends objc.ObjCObjectBase {
  MLNAnnotationView._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [MLNAnnotationView] that points to the same underlying object as [other].
  MLNAnnotationView.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNAnnotationView] that wraps the given raw object pointer.
  MLNAnnotationView.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);
}

late final _sel_viewForAnnotation_ = objc.registerName("viewForAnnotation:");

/// WARNING: MLNAnnotationImage is a stub. To generate bindings for this class, include
/// MLNAnnotationImage in your config's objc-interfaces list.
///
/// MLNAnnotationImage
class MLNAnnotationImage extends objc.ObjCObjectBase {
  MLNAnnotationImage._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [MLNAnnotationImage] that points to the same underlying object as [other].
  MLNAnnotationImage.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNAnnotationImage] that wraps the given raw object pointer.
  MLNAnnotationImage.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);
}

late final _sel_dequeueReusableAnnotationImageWithIdentifier_ =
    objc.registerName("dequeueReusableAnnotationImageWithIdentifier:");
late final _sel_dequeueReusableAnnotationViewWithIdentifier_ =
    objc.registerName("dequeueReusableAnnotationViewWithIdentifier:");
late final _sel_visibleAnnotations = objc.registerName("visibleAnnotations");
late final _sel_visibleAnnotationsInRect_ =
    objc.registerName("visibleAnnotationsInRect:");
late final _sel_selectedAnnotations = objc.registerName("selectedAnnotations");
late final _sel_setSelectedAnnotations_ =
    objc.registerName("setSelectedAnnotations:");
late final _sel_selectAnnotation_animated_ =
    objc.registerName("selectAnnotation:animated:");
late final _sel_selectAnnotation_animated_completionHandler_ =
    objc.registerName("selectAnnotation:animated:completionHandler:");
late final _sel_selectAnnotation_moveIntoView_animateSelection_completionHandler_ =
    objc.registerName(
        "selectAnnotation:moveIntoView:animateSelection:completionHandler:");
final _objc_msgSend_11qxhhc = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Bool,
                ffi.Pointer<objc.ObjCBlockImpl>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            bool,
            ffi.Pointer<objc.ObjCBlockImpl>)>();
late final _sel_deselectAnnotation_animated_ =
    objc.registerName("deselectAnnotation:animated:");
late final _sel_overlays = objc.registerName("overlays");
late final _sel_addOverlay_ = objc.registerName("addOverlay:");
late final _sel_addOverlays_ = objc.registerName("addOverlays:");
late final _sel_removeOverlay_ = objc.registerName("removeOverlay:");
late final _sel_removeOverlays_ = objc.registerName("removeOverlays:");
late final _sel_visibleFeaturesAtPoint_ =
    objc.registerName("visibleFeaturesAtPoint:");
final _objc_msgSend_czt8e6 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, CGPoint)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, CGPoint)>();
late final _sel_visibleFeaturesAtPoint_inStyleLayersWithIdentifiers_ =
    objc.registerName("visibleFeaturesAtPoint:inStyleLayersWithIdentifiers:");
final _objc_msgSend_b4j0k2 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGPoint,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGPoint,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_visibleFeaturesAtPoint_inStyleLayersWithIdentifiers_predicate_ =
    objc.registerName(
        "visibleFeaturesAtPoint:inStyleLayersWithIdentifiers:predicate:");
final _objc_msgSend_1htecti = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGPoint,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGPoint,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_visibleFeaturesInRect_ =
    objc.registerName("visibleFeaturesInRect:");
late final _sel_visibleFeaturesInRect_inStyleLayersWithIdentifiers_ =
    objc.registerName("visibleFeaturesInRect:inStyleLayersWithIdentifiers:");
late final _sel_visibleFeaturesInRect_inStyleLayersWithIdentifiers_predicate_ =
    objc.registerName(
        "visibleFeaturesInRect:inStyleLayersWithIdentifiers:predicate:");
final _objc_msgSend_1hrqp72 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                CGRect,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            CGRect,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_debugMask = objc.registerName("debugMask");
final _objc_msgSend_1kwkjor = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDebugMask_ = objc.registerName("setDebugMask:");
final _objc_msgSend_pisvbv = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

/// An interactive, customizable map view with an interface similar to the one
/// provided by Apple’s MapKit.
///
/// Using ``MLNMapView``, you can embed the map inside a view, allow users to
/// manipulate it with standard gestures, animate the map between different
/// viewpoints, and present information in the form of annotations and overlays.
///
/// The map view loads scalable vector tiles that conform to the
/// <a href="https://github.com/mapbox/vector-tile-spec">Mapbox Vector Tile Specification</a>.
/// It styles them with a style that conforms to the
/// <a href="https://maplibre.org/maplibre-style-spec/">MapLibre Style Spec</a>.
/// Such styles can be designed with
/// <a href="https://maplibre.org/maputnik/">Maputnik</a>.
///
///
/// Because ``MLNMapView`` loads asynchronously, several delegate methods are available
/// for receiving map-related updates. These methods can be used to ensure that certain operations
/// have completed before taking any additional actions. Information on these methods is located
/// in the ``MLNMapViewDelegate`` protocol documentation.
///
/// Adding your own gesture recognizer to ``MLNMapView`` will block the corresponding
/// gesture recognizer built into ``MLNMapView``. To avoid conflicts, define which
/// gesture takes precedence. For example, you can create your own
/// `UITapGestureRecognizer` that will be invoked only if the default ``MLNMapView``
/// tap gesture fails:
///
/// ```swift
/// let mapTapGestureRecognizer = UITapGestureRecognizer(target: self, action:
/// #selector(myCustomFunction)) for recognizer in mapView.gestureRecognizers! where recognizer is
/// UITapGestureRecognizer { mapTapGestureRecognizer.require(toFail: recognizer)
/// }
/// mapView.addGestureRecognizer(mapTapGestureRecognizer)
/// ```
///
/// > Note: You are responsible for getting permission to use the map data and for
/// ensuring that your use adheres to the relevant terms of use.
class MLNMapView extends objc.ObjCObjectBase {
  MLNMapView._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [MLNMapView] that points to the same underlying object as [other].
  MLNMapView.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNMapView] that wraps the given raw object pointer.
  MLNMapView.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [MLNMapView].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_69e0x1(
        obj.ref.pointer, _sel_isKindOfClass_, _class_MLNMapView);
  }

  /// Initializes and returns a newly allocated map view with the specified frame
  /// and the default style.
  ///
  /// @param frame The frame for the view, measured in points.
  /// @return An initialized map view.
  MLNMapView initWithFrame_(CGRect frame) {
    final _ret = _objc_msgSend_19adbty(
        this.ref.retainAndReturnPointer(), _sel_initWithFrame_, frame);
    return MLNMapView.castFromPointer(_ret, retain: false, release: true);
  }

  /// Initializes and returns a newly allocated map view with the specified frame
  /// and style URL.
  ///
  /// @param frame The frame for the view, measured in points.
  /// @param styleURL URL of the map style to display. The URL may be a full HTTP
  /// or HTTPS URL, a canonical URL or a path to a local file relative
  /// to the application’s resource path. Specify `nil` for the default style.
  /// @return An initialized map view.
  ///
  /// #### Related examples
  ///
  /// - TODO: initialize an ``MLNMapView`` with a custom style
  /// - TODO: how to initialize an ``MLNMapView`` with a third-party tile source
  MLNMapView initWithFrame_styleURL_(CGRect frame, objc.NSURL? styleURL) {
    final _ret = _objc_msgSend_qsq5p6(
        this.ref.retainAndReturnPointer(),
        _sel_initWithFrame_styleURL_,
        frame,
        styleURL?.ref.pointer ?? ffi.nullptr);
    return MLNMapView.castFromPointer(_ret, retain: false, release: true);
  }

  /// The receiver’s delegate.
  ///
  /// A map view sends messages to its delegate to notify it of changes to its
  /// contents or the viewpoint. The delegate also provides information about
  /// annotations displayed on the map, such as the styles to apply to individual
  /// annotations.
  objc.ObjCObjectBase? get delegate {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// The receiver’s delegate.
  ///
  /// A map view sends messages to its delegate to notify it of changes to its
  /// contents or the viewpoint. The delegate also provides information about
  /// annotations displayed on the map, such as the styles to apply to individual
  /// annotations.
  set delegate(objc.ObjCObjectBase? value) {
    return _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_setDelegate_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// The style currently displayed in the receiver.
  MLNStyle? get style {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_style);
    return _ret.address == 0
        ? null
        : MLNStyle.castFromPointer(_ret, retain: true, release: true);
  }

  /// URL of the style currently displayed in the receiver.
  ///
  /// The URL may be a full HTTP or HTTPS URL, canonical URL, or
  /// a path to a local file relative to the application’s resource path.
  ///
  /// If you set this property to `nil`, the receiver will use the default style
  /// and this property will automatically be set to that style’s URL.
  ///
  /// If you want to modify the current style without replacing it outright, or if
  /// you want to introspect individual style attributes, use the `style` property.
  ///
  /// #### Related examples
  /// - TODO: change the style of a map at runtime.
  objc.NSURL get styleURL {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_styleURL);
    return objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// URL of the style currently displayed in the receiver.
  ///
  /// The URL may be a full HTTP or HTTPS URL, canonical URL, or
  /// a path to a local file relative to the application’s resource path.
  ///
  /// If you set this property to `nil`, the receiver will use the default style
  /// and this property will automatically be set to that style’s URL.
  ///
  /// If you want to modify the current style without replacing it outright, or if
  /// you want to introspect individual style attributes, use the `style` property.
  ///
  /// #### Related examples
  /// - TODO: change the style of a map at runtime.
  set styleURL(objc.NSURL value) {
    return _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_setStyleURL_, value.ref.pointer);
  }

  /// Reloads the style.
  ///
  /// You do not normally need to call this method. The map view automatically
  /// responds to changes in network connectivity by reloading the style.
  ///
  /// This method does not bust the cache. Even if the style has recently changed on
  /// the server, calling this method does not necessarily ensure that the map view
  /// reflects those changes.
  void reloadStyle_(objc.ObjCObjectBase? sender) {
    _objc_msgSend_1jdvcbf(this.ref.pointer, _sel_reloadStyle_,
        sender?.ref.pointer ?? ffi.nullptr);
  }

  /// A boolean value that indicates if whether the map view should automatically
  /// adjust its content insets.
  ///
  /// When this property is set to `YES` the map automatically updates its
  /// `contentInset` property to account for any area not covered by navigation bars,
  /// tab bars, toolbars, and other ancestors that obscure the map view.
  bool get automaticallyAdjustsContentInset {
    return _objc_msgSend_91o635(
        this.ref.pointer, _sel_automaticallyAdjustsContentInset);
  }

  /// A boolean value that indicates if whether the map view should automatically
  /// adjust its content insets.
  ///
  /// When this property is set to `YES` the map automatically updates its
  /// `contentInset` property to account for any area not covered by navigation bars,
  /// tab bars, toolbars, and other ancestors that obscure the map view.
  set automaticallyAdjustsContentInset(bool value) {
    return _objc_msgSend_1s56lr9(
        this.ref.pointer, _sel_setAutomaticallyAdjustsContentInset_, value);
  }

  /// A Boolean value indicating whether the map may display scale information.
  ///
  /// The scale bar may not be shown at all zoom levels. The scale bar becomes visible
  /// when the maximum distance visible on the map view is less than 400 miles (800
  /// kilometers). The zoom level where this occurs depends on the latitude at the map
  /// view’s center coordinate, as well as the device screen width. At latitudes
  /// farther from the equator, the scale bar becomes visible at lower zoom levels.
  ///
  /// The unit of measurement is determined by the user's device locale.
  ///
  /// The view controlled by this property is available at `scaleBar`. The default value
  /// of this property is `NO`.
  bool get showsScale {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_showsScale);
  }

  /// A Boolean value indicating whether the map may display scale information.
  ///
  /// The scale bar may not be shown at all zoom levels. The scale bar becomes visible
  /// when the maximum distance visible on the map view is less than 400 miles (800
  /// kilometers). The zoom level where this occurs depends on the latitude at the map
  /// view’s center coordinate, as well as the device screen width. At latitudes
  /// farther from the equator, the scale bar becomes visible at lower zoom levels.
  ///
  /// The unit of measurement is determined by the user's device locale.
  ///
  /// The view controlled by this property is available at `scaleBar`. The default value
  /// of this property is `NO`.
  set showsScale(bool value) {
    return _objc_msgSend_1s56lr9(this.ref.pointer, _sel_setShowsScale_, value);
  }

  /// A control indicating the scale of the map. The scale bar is positioned in the
  /// upper-left corner. Enable the scale bar via `showsScale`.
  MLNScaleBar get scaleBar {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_scaleBar);
    return MLNScaleBar.castFromPointer(_ret, retain: true, release: true);
  }

  /// Sets whether the scale uses styles that make it easier to read on a dark styled map
  bool get scaleBarShouldShowDarkStyles {
    return _objc_msgSend_91o635(
        this.ref.pointer, _sel_scaleBarShouldShowDarkStyles);
  }

  /// Sets whether the scale uses styles that make it easier to read on a dark styled map
  set scaleBarShouldShowDarkStyles(bool value) {
    return _objc_msgSend_1s56lr9(
        this.ref.pointer, _sel_setScaleBarShouldShowDarkStyles_, value);
  }

  /// Sets whether the scale uses metric
  bool get scaleBarUsesMetricSystem {
    return _objc_msgSend_91o635(
        this.ref.pointer, _sel_scaleBarUsesMetricSystem);
  }

  /// Sets whether the scale uses metric
  set scaleBarUsesMetricSystem(bool value) {
    return _objc_msgSend_1s56lr9(
        this.ref.pointer, _sel_setScaleBarUsesMetricSystem_, value);
  }

  /// The position of the scale bar. The default value is
  /// ``MLNOrnamentPosition/MLNOrnamentPositionTopLeft``.
  MLNOrnamentPosition get scaleBarPosition {
    final _ret = _objc_msgSend_1c31cvt(this.ref.pointer, _sel_scaleBarPosition);
    return MLNOrnamentPosition.fromValue(_ret);
  }

  /// The position of the scale bar. The default value is
  /// ``MLNOrnamentPosition/MLNOrnamentPositionTopLeft``.
  set scaleBarPosition(MLNOrnamentPosition value) {
    return _objc_msgSend_8fd115(
        this.ref.pointer, _sel_setScaleBarPosition_, value.value);
  }

  /// A `CGPoint` indicating the position offset of the scale bar.
  CGPoint get scaleBarMargins {
    final _ptr = pkg_ffi.calloc<CGPoint>();
    objc.useMsgSendVariants
        ? _objc_msgSend_1uwdhlkStret(
            _ptr, this.ref.pointer, _sel_scaleBarMargins)
        : _ptr.ref =
            _objc_msgSend_1uwdhlk(this.ref.pointer, _sel_scaleBarMargins);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<CGPoint>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<CGPoint>(_finalizable);
  }

  /// A `CGPoint` indicating the position offset of the scale bar.
  set scaleBarMargins(CGPoint value) {
    return _objc_msgSend_iy8iz6(
        this.ref.pointer, _sel_setScaleBarMargins_, value);
  }

  /// A control indicating the map’s direction and allowing the user to manipulate
  /// the direction, positioned in the upper-right corner.
  MLNCompassButton get compassView {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_compassView);
    return MLNCompassButton.castFromPointer(_ret, retain: true, release: true);
  }

  /// The position of the compass view. The default value is
  /// ``MLNOrnamentPosition/MLNOrnamentPositionTopRight``.
  MLNOrnamentPosition get compassViewPosition {
    final _ret =
        _objc_msgSend_1c31cvt(this.ref.pointer, _sel_compassViewPosition);
    return MLNOrnamentPosition.fromValue(_ret);
  }

  /// The position of the compass view. The default value is
  /// ``MLNOrnamentPosition/MLNOrnamentPositionTopRight``.
  set compassViewPosition(MLNOrnamentPosition value) {
    return _objc_msgSend_8fd115(
        this.ref.pointer, _sel_setCompassViewPosition_, value.value);
  }

  /// A `CGPoint` indicating the position offset of the compass.
  CGPoint get compassViewMargins {
    final _ptr = pkg_ffi.calloc<CGPoint>();
    objc.useMsgSendVariants
        ? _objc_msgSend_1uwdhlkStret(
            _ptr, this.ref.pointer, _sel_compassViewMargins)
        : _ptr.ref =
            _objc_msgSend_1uwdhlk(this.ref.pointer, _sel_compassViewMargins);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<CGPoint>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<CGPoint>(_finalizable);
  }

  /// A `CGPoint` indicating the position offset of the compass.
  set compassViewMargins(CGPoint value) {
    return _objc_msgSend_iy8iz6(
        this.ref.pointer, _sel_setCompassViewMargins_, value);
  }

  /// A logo, the MapLibre logo by default, positioned in the lower-left corner.
  /// You are not required to display this, but some vector-sources may require attribution.
  ffi.Pointer<ffi.Int> get logoView {
    return _objc_msgSend_1p5sbp0(this.ref.pointer, _sel_logoView);
  }

  /// The position of the logo view. The default value is
  /// ``MLNOrnamentPosition/MLNOrnamentPositionBottomLeft``.
  MLNOrnamentPosition get logoViewPosition {
    final _ret = _objc_msgSend_1c31cvt(this.ref.pointer, _sel_logoViewPosition);
    return MLNOrnamentPosition.fromValue(_ret);
  }

  /// The position of the logo view. The default value is
  /// ``MLNOrnamentPosition/MLNOrnamentPositionBottomLeft``.
  set logoViewPosition(MLNOrnamentPosition value) {
    return _objc_msgSend_8fd115(
        this.ref.pointer, _sel_setLogoViewPosition_, value.value);
  }

  /// A `CGPoint` indicating the position offset of the logo.
  CGPoint get logoViewMargins {
    final _ptr = pkg_ffi.calloc<CGPoint>();
    objc.useMsgSendVariants
        ? _objc_msgSend_1uwdhlkStret(
            _ptr, this.ref.pointer, _sel_logoViewMargins)
        : _ptr.ref =
            _objc_msgSend_1uwdhlk(this.ref.pointer, _sel_logoViewMargins);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<CGPoint>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<CGPoint>(_finalizable);
  }

  /// A `CGPoint` indicating the position offset of the logo.
  set logoViewMargins(CGPoint value) {
    return _objc_msgSend_iy8iz6(
        this.ref.pointer, _sel_setLogoViewMargins_, value);
  }

  /// A view showing legally required copyright notices,
  /// positioned at the bottom-right of the map view.
  ///
  /// If you choose to reimplement this view, assign the `-showAttribution:` method
  /// as the action for your view to present the default notices and settings.
  ///
  /// > Note: Attribution is often required for many vector sources,
  /// OpenStreetMap data, or other data such as satellite or terrain
  /// data. If that applies to this map view, do not hide this view or remove
  /// any notices from it.
  ffi.Pointer<ffi.Int> get attributionButton {
    return _objc_msgSend_1p5sbp0(this.ref.pointer, _sel_attributionButton);
  }

  /// The position of the attribution button. The default value is
  /// ``MLNOrnamentPosition/MLNOrnamentPositionBottomRight``.
  MLNOrnamentPosition get attributionButtonPosition {
    final _ret =
        _objc_msgSend_1c31cvt(this.ref.pointer, _sel_attributionButtonPosition);
    return MLNOrnamentPosition.fromValue(_ret);
  }

  /// The position of the attribution button. The default value is
  /// ``MLNOrnamentPosition/MLNOrnamentPositionBottomRight``.
  set attributionButtonPosition(MLNOrnamentPosition value) {
    return _objc_msgSend_8fd115(
        this.ref.pointer, _sel_setAttributionButtonPosition_, value.value);
  }

  /// A `CGPoint` indicating the position offset of the attribution.
  CGPoint get attributionButtonMargins {
    final _ptr = pkg_ffi.calloc<CGPoint>();
    objc.useMsgSendVariants
        ? _objc_msgSend_1uwdhlkStret(
            _ptr, this.ref.pointer, _sel_attributionButtonMargins)
        : _ptr.ref = _objc_msgSend_1uwdhlk(
            this.ref.pointer, _sel_attributionButtonMargins);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<CGPoint>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<CGPoint>(_finalizable);
  }

  /// A `CGPoint` indicating the position offset of the attribution.
  set attributionButtonMargins(CGPoint value) {
    return _objc_msgSend_iy8iz6(
        this.ref.pointer, _sel_setAttributionButtonMargins_, value);
  }

  /// Show the attribution action sheet.
  ///
  /// This action is performed when the user taps on the attribution button provided
  /// by default via the `attributionButton` property. If you implement a custom
  /// attribution button, you should add this action to the button.
  void showAttribution_(objc.ObjCObjectBase sender) {
    _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_showAttribution_, sender.ref.pointer);
  }

  /// The preferred frame rate at which the map view is rendered.
  ///
  /// The default value for this property is
  /// ``MLNMapViewPreferredFramesPerSecondDefault``, which will adaptively set the
  /// preferred frame rate based on the capability of the user’s device to maintain
  /// a smooth experience.
  ///
  /// In addition to the provided ``MLNMapViewPreferredFramesPerSecond`` options, this
  /// property can be set to arbitrary integer values.
  ///
  /// @see `CADisplayLink.preferredFramesPerSecond`
  int get preferredFramesPerSecond {
    return _objc_msgSend_1hz7y9r(
        this.ref.pointer, _sel_preferredFramesPerSecond);
  }

  /// The preferred frame rate at which the map view is rendered.
  ///
  /// The default value for this property is
  /// ``MLNMapViewPreferredFramesPerSecondDefault``, which will adaptively set the
  /// preferred frame rate based on the capability of the user’s device to maintain
  /// a smooth experience.
  ///
  /// In addition to the provided ``MLNMapViewPreferredFramesPerSecond`` options, this
  /// property can be set to arbitrary integer values.
  ///
  /// @see `CADisplayLink.preferredFramesPerSecond`
  set preferredFramesPerSecond(int value) {
    return _objc_msgSend_4sp4xj(
        this.ref.pointer, _sel_setPreferredFramesPerSecond_, value);
  }

  /// A Boolean value indicating whether the map should prefetch tiles.
  ///
  /// When this property is set to `YES`, the map view prefetches tiles designed for
  /// a low zoom level and displays them until receiving more detailed tiles for the
  /// current zoom level. The prefetched tiles typically contain simplified versions
  /// of each shape, improving the map view’s perceived performance.
  ///
  /// The default value of this property is `YES`.
  bool get prefetchesTiles {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_prefetchesTiles);
  }

  /// A Boolean value indicating whether the map should prefetch tiles.
  ///
  /// When this property is set to `YES`, the map view prefetches tiles designed for
  /// a low zoom level and displays them until receiving more detailed tiles for the
  /// current zoom level. The prefetched tiles typically contain simplified versions
  /// of each shape, improving the map view’s perceived performance.
  ///
  /// The default value of this property is `YES`.
  set prefetchesTiles(bool value) {
    return _objc_msgSend_1s56lr9(
        this.ref.pointer, _sel_setPrefetchesTiles_, value);
  }

  /// A Boolean value indicating whether the map may cache tiles for different zoom levels or not.
  ///
  /// When this property is set to `YES`,  the map view consumes more memory and
  /// provide a smoother user experience when zoom in/out.
  ///
  /// The default value of this property is `YES`.
  bool get tileCacheEnabled {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_tileCacheEnabled);
  }

  /// A Boolean value indicating whether the map may cache tiles for different zoom levels or not.
  ///
  /// When this property is set to `YES`,  the map view consumes more memory and
  /// provide a smoother user experience when zoom in/out.
  ///
  /// The default value of this property is `YES`.
  set tileCacheEnabled(bool value) {
    return _objc_msgSend_1s56lr9(
        this.ref.pointer, _sel_setTileCacheEnabled_, value);
  }

  /// The object that this map view uses to start and stop the delivery of
  /// location-related updates.
  ///
  /// To receive the current user location, implement the
  /// ``MLNMapViewDelegate/mapView:didUpdateUserLocation:`` and
  /// ``MLNMapViewDelegate/mapView:didFailToLocateUserWithError:`` methods.
  ///
  /// If setting this property to `nil` or if no custom manager is provided this
  /// property is set to the default location manager.
  ///
  /// ``MLNMapView`` uses a default location manager. If you want to substitute your
  /// own location manager, you should do so by setting this property before setting
  /// `showsUserLocation` to `YES`. To restore the default location manager,
  /// set this property to `nil`.
  objc.ObjCObjectBase get locationManager {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_locationManager);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// The object that this map view uses to start and stop the delivery of
  /// location-related updates.
  ///
  /// To receive the current user location, implement the
  /// ``MLNMapViewDelegate/mapView:didUpdateUserLocation:`` and
  /// ``MLNMapViewDelegate/mapView:didFailToLocateUserWithError:`` methods.
  ///
  /// If setting this property to `nil` or if no custom manager is provided this
  /// property is set to the default location manager.
  ///
  /// ``MLNMapView`` uses a default location manager. If you want to substitute your
  /// own location manager, you should do so by setting this property before setting
  /// `showsUserLocation` to `YES`. To restore the default location manager,
  /// set this property to `nil`.
  set locationManager(objc.ObjCObjectBase value) {
    return _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_setLocationManager_, value.ref.pointer);
  }

  /// A Boolean value indicating whether the map may display the user location.
  ///
  /// Setting this property to `YES` causes the map view to use the Core Location
  /// framework to find the current location. As long as this property is `YES`, the
  /// map view continues to track the user’s location and update it periodically.
  ///
  /// This property does not indicate whether the user’s position is actually visible
  /// on the map, only whether the map view is allowed to display it. To determine
  /// whether the user’s position is visible, use the `userLocationVisible` property.
  /// The default value of this property is `NO`.
  ///
  /// Your app must specify a value for `NSLocationWhenInUseUsageDescription` or
  /// `NSLocationAlwaysUsageDescription` in its `Info.plist` to satisfy the
  /// requirements of the underlying Core Location framework when enabling this
  /// property.
  ///
  /// If you implement a custom location manager, set the `locationManager` before
  /// calling `showsUserLocation`.
  bool get showsUserLocation {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_showsUserLocation);
  }

  /// A Boolean value indicating whether the map may display the user location.
  ///
  /// Setting this property to `YES` causes the map view to use the Core Location
  /// framework to find the current location. As long as this property is `YES`, the
  /// map view continues to track the user’s location and update it periodically.
  ///
  /// This property does not indicate whether the user’s position is actually visible
  /// on the map, only whether the map view is allowed to display it. To determine
  /// whether the user’s position is visible, use the `userLocationVisible` property.
  /// The default value of this property is `NO`.
  ///
  /// Your app must specify a value for `NSLocationWhenInUseUsageDescription` or
  /// `NSLocationAlwaysUsageDescription` in its `Info.plist` to satisfy the
  /// requirements of the underlying Core Location framework when enabling this
  /// property.
  ///
  /// If you implement a custom location manager, set the `locationManager` before
  /// calling `showsUserLocation`.
  set showsUserLocation(bool value) {
    return _objc_msgSend_1s56lr9(
        this.ref.pointer, _sel_setShowsUserLocation_, value);
  }

  /// A Boolean value indicating whether the map may request authorization to use location services.
  ///
  /// Setting this property to `YES` causes the map view to use the Core Location
  /// framework to request authorization when authorizationStatus == kCLAuthorizationStatusNotDetermined.
  ///
  /// The default value of this property is `YES`.
  bool get shouldRequestAuthorizationToUseLocationServices {
    return _objc_msgSend_91o635(
        this.ref.pointer, _sel_shouldRequestAuthorizationToUseLocationServices);
  }

  /// A Boolean value indicating whether the map may request authorization to use location services.
  ///
  /// Setting this property to `YES` causes the map view to use the Core Location
  /// framework to request authorization when authorizationStatus == kCLAuthorizationStatusNotDetermined.
  ///
  /// The default value of this property is `YES`.
  set shouldRequestAuthorizationToUseLocationServices(bool value) {
    return _objc_msgSend_1s56lr9(this.ref.pointer,
        _sel_setShouldRequestAuthorizationToUseLocationServices_, value);
  }

  /// A Boolean value indicating whether the device’s current location is visible in
  /// the map view.
  ///
  /// Use `showsUserLocation` to control the visibility of the on-screen user
  /// location annotation.
  bool get userLocationVisible {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_isUserLocationVisible);
  }

  /// Returns the annotation object indicating the user’s current location.
  MLNUserLocation? get userLocation {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_userLocation);
    return _ret.address == 0
        ? null
        : MLNUserLocation.castFromPointer(_ret, retain: true, release: true);
  }

  /// The mode used to track the user location. The default value is
  /// ``MLNUserTrackingMode/MLNUserTrackingModeNone``.
  ///
  /// Changing the value of this property updates the map view with an animated
  /// transition. If you don’t want to animate the change, use the
  /// `-setUserTrackingMode:animated:` method instead.
  ///
  /// #### Related examples
  /// - TODO: Customize the user location annotation and learn how to customize the
  /// default user location annotation shown by ``MLNUserTrackingMode``.
  MLNUserTrackingMode get userTrackingMode {
    final _ret = _objc_msgSend_1swtepj(this.ref.pointer, _sel_userTrackingMode);
    return MLNUserTrackingMode.fromValue(_ret);
  }

  /// The mode used to track the user location. The default value is
  /// ``MLNUserTrackingMode/MLNUserTrackingModeNone``.
  ///
  /// Changing the value of this property updates the map view with an animated
  /// transition. If you don’t want to animate the change, use the
  /// `-setUserTrackingMode:animated:` method instead.
  ///
  /// #### Related examples
  /// - TODO: Customize the user location annotation and learn how to customize the
  /// default user location annotation shown by ``MLNUserTrackingMode``.
  set userTrackingMode(MLNUserTrackingMode value) {
    return _objc_msgSend_xoapar(
        this.ref.pointer, _sel_setUserTrackingMode_, value.value);
  }

  /// Deprecated. Sets the mode used to track the user location, with an optional transition.
  ///
  /// To specify a completion handler to execute after the animation finishes, use
  /// the `-setUserTrackingMode:animated:completionHandler:` method.
  ///
  /// @param mode The mode used to track the user location.
  /// @param animated If `YES`, there is an animated transition from the current
  /// viewport to a viewport that results from the change to `mode`. If `NO`, the
  /// map view instantaneously changes to the new viewport. This parameter only
  /// affects the initial transition; subsequent changes to the user location or
  /// heading are always animated.
  void setUserTrackingMode_animated_(MLNUserTrackingMode mode, bool animated) {
    _objc_msgSend_7oa3sf(this.ref.pointer, _sel_setUserTrackingMode_animated_,
        mode.value, animated);
  }

  /// Sets the mode used to track the user location, with an optional transition and
  /// completion handler.
  ///
  /// @param mode The mode used to track the user location.
  /// @param animated If `YES`, there is an animated transition from the current
  /// viewport to a viewport that results from the change to `mode`. If `NO`, the
  /// map view instantaneously changes to the new viewport. This parameter only
  /// affects the initial transition; subsequent changes to the user location or
  /// heading are always animated.
  /// @param completion The block executed after the animation finishes.
  void setUserTrackingMode_animated_completionHandler_(MLNUserTrackingMode mode,
      bool animated, objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_1iu40ms(
        this.ref.pointer,
        _sel_setUserTrackingMode_animated_completionHandler_,
        mode.value,
        animated,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// The vertical alignment of the user location annotation within the receiver. The
  /// default value is ``MLNAnnotationVerticalAlignment/MLNAnnotationVerticalAlignmentCenter``.
  ///
  /// Changing the value of this property updates the map view with an animated
  /// transition. If you don’t want to animate the change, use the
  /// `-setUserLocationVerticalAlignment:animated:` method instead.
  MLNAnnotationVerticalAlignment get userLocationVerticalAlignment {
    final _ret = _objc_msgSend_1m9zum6(
        this.ref.pointer, _sel_userLocationVerticalAlignment);
    return MLNAnnotationVerticalAlignment.fromValue(_ret);
  }

  /// The vertical alignment of the user location annotation within the receiver. The
  /// default value is ``MLNAnnotationVerticalAlignment/MLNAnnotationVerticalAlignmentCenter``.
  ///
  /// Changing the value of this property updates the map view with an animated
  /// transition. If you don’t want to animate the change, use the
  /// `-setUserLocationVerticalAlignment:animated:` method instead.
  set userLocationVerticalAlignment(MLNAnnotationVerticalAlignment value) {
    return _objc_msgSend_47doj4(
        this.ref.pointer, _sel_setUserLocationVerticalAlignment_, value.value);
  }

  /// Sets the vertical alignment of the user location annotation within the
  /// receiver, with an optional transition.
  ///
  /// @param alignment The vertical alignment of the user location annotation.
  /// @param animated If `YES`, the user location annotation animates to its new
  /// position within the map view. If `NO`, the user location annotation
  /// instantaneously moves to its new position.
  void setUserLocationVerticalAlignment_animated_(
      MLNAnnotationVerticalAlignment alignment, bool animated) {
    _objc_msgSend_1qddrus(
        this.ref.pointer,
        _sel_setUserLocationVerticalAlignment_animated_,
        alignment.value,
        animated);
  }

  /// Updates the position of the user location annotation view by retreiving the user's last
  /// known location.
  void updateUserLocationAnnotationView() {
    _objc_msgSend_1pl9qdv(
        this.ref.pointer, _sel_updateUserLocationAnnotationView);
  }

  /// Updates the position of the user location annotation view by retreiving the user's last
  /// known location with a specified duration.
  /// @param duration The duration to animate the change in seconds.
  void updateUserLocationAnnotationViewAnimatedWithDuration_(double duration) {
    _objc_msgSend_hwm8nu(this.ref.pointer,
        _sel_updateUserLocationAnnotationViewAnimatedWithDuration_, duration);
  }

  /// A Boolean value indicating whether the user location annotation may display a
  /// permanent heading indicator.
  ///
  /// Setting this property to `YES` causes the default user location annotation to
  /// appear and always show an arrow-shaped heading indicator, if heading is
  /// available. This property does not rotate the map; for that, see
  /// ``MLNUserTrackingMode/MLNUserTrackingModeFollowWithHeading``.
  ///
  /// This property has no effect when ``userTrackingMode`` is
  /// ``MLNUserTrackingMode/MLNUserTrackingModeFollowWithHeading`` or
  /// ``MLNUserTrackingMode/MLNUserTrackingModeFollowWithCourse``.
  ///
  /// The default value of this property is `NO`.
  bool get showsUserHeadingIndicator {
    return _objc_msgSend_91o635(
        this.ref.pointer, _sel_showsUserHeadingIndicator);
  }

  /// A Boolean value indicating whether the user location annotation may display a
  /// permanent heading indicator.
  ///
  /// Setting this property to `YES` causes the default user location annotation to
  /// appear and always show an arrow-shaped heading indicator, if heading is
  /// available. This property does not rotate the map; for that, see
  /// ``MLNUserTrackingMode/MLNUserTrackingModeFollowWithHeading``.
  ///
  /// This property has no effect when ``userTrackingMode`` is
  /// ``MLNUserTrackingMode/MLNUserTrackingModeFollowWithHeading`` or
  /// ``MLNUserTrackingMode/MLNUserTrackingModeFollowWithCourse``.
  ///
  /// The default value of this property is `NO`.
  set showsUserHeadingIndicator(bool value) {
    return _objc_msgSend_1s56lr9(
        this.ref.pointer, _sel_setShowsUserHeadingIndicator_, value);
  }

  /// Whether the map view should display a heading calibration alert when necessary.
  /// The default value is `YES`.
  bool get displayHeadingCalibration {
    return _objc_msgSend_91o635(
        this.ref.pointer, _sel_displayHeadingCalibration);
  }

  /// Whether the map view should display a heading calibration alert when necessary.
  /// The default value is `YES`.
  set displayHeadingCalibration(bool value) {
    return _objc_msgSend_1s56lr9(
        this.ref.pointer, _sel_setDisplayHeadingCalibration_, value);
  }

  /// The geographic coordinate that is the subject of observation as the user
  /// location is being tracked.
  ///
  /// By default, this property is set to an invalid coordinate, indicating that
  /// there is no target. In course tracking mode, the target forms one of two foci
  /// in the viewport, the other being the user location annotation. Typically, this
  /// property is set to a destination or waypoint in a real-time navigation scene.
  /// As the user annotation moves toward the target, the map automatically zooms in
  /// to fit both foci optimally within the viewport.
  ///
  /// This property has no effect if the `userTrackingMode` property is set to a
  /// value other than ``MLNUserTrackingMode/MLNUserTrackingModeFollowWithCourse``.
  ///
  /// Changing the value of this property updates the map view with an animated
  /// transition. If you don’t want to animate the change, use the
  /// `-setTargetCoordinate:animated:` method instead.
  CLLocationCoordinate2D get targetCoordinate {
    final _ptr = pkg_ffi.calloc<CLLocationCoordinate2D>();
    objc.useMsgSendVariants
        ? _objc_msgSend_18o5nokStret(
            _ptr, this.ref.pointer, _sel_targetCoordinate)
        : _ptr.ref =
            _objc_msgSend_18o5nok(this.ref.pointer, _sel_targetCoordinate);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<CLLocationCoordinate2D>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<CLLocationCoordinate2D>(_finalizable);
  }

  /// The geographic coordinate that is the subject of observation as the user
  /// location is being tracked.
  ///
  /// By default, this property is set to an invalid coordinate, indicating that
  /// there is no target. In course tracking mode, the target forms one of two foci
  /// in the viewport, the other being the user location annotation. Typically, this
  /// property is set to a destination or waypoint in a real-time navigation scene.
  /// As the user annotation moves toward the target, the map automatically zooms in
  /// to fit both foci optimally within the viewport.
  ///
  /// This property has no effect if the `userTrackingMode` property is set to a
  /// value other than ``MLNUserTrackingMode/MLNUserTrackingModeFollowWithCourse``.
  ///
  /// Changing the value of this property updates the map view with an animated
  /// transition. If you don’t want to animate the change, use the
  /// `-setTargetCoordinate:animated:` method instead.
  set targetCoordinate(CLLocationCoordinate2D value) {
    return _objc_msgSend_1zv0am(
        this.ref.pointer, _sel_setTargetCoordinate_, value);
  }

  /// Deprecated. Sets the geographic coordinate that is the subject of observation as
  /// the user location is being tracked, with an optional transition animation.
  ///
  /// By default, the target coordinate is set to an invalid coordinate, indicating
  /// that there is no target. In course tracking mode, the target forms one of two
  /// foci in the viewport, the other being the user location annotation. Typically,
  /// the target is set to a destination or waypoint in a real-time navigation scene.
  /// As the user annotation moves toward the target, the map automatically zooms in
  /// to fit both foci optimally within the viewport.
  ///
  /// This method has no effect if the `userTrackingMode` property is set to a value
  /// other than ``MLNUserTrackingMode/MLNUserTrackingModeFollowWithCourse``.
  ///
  /// To specify a completion handler to execute after the animation finishes, use
  /// the `-setTargetCoordinate:animated:completionHandler:` method.
  ///
  /// @param targetCoordinate The target coordinate to fit within the viewport.
  /// @param animated If `YES`, the map animates to fit the target within the map
  /// view. If `NO`, the map fits the target instantaneously.
  void setTargetCoordinate_animated_(
      CLLocationCoordinate2D targetCoordinate, bool animated) {
    _objc_msgSend_o7hjv2(this.ref.pointer, _sel_setTargetCoordinate_animated_,
        targetCoordinate, animated);
  }

  /// Sets the geographic coordinate that is the subject of observation as the user
  /// location is being tracked, with an optional transition animation and completion
  /// handler.
  ///
  /// By default, the target coordinate is set to an invalid coordinate, indicating
  /// that there is no target. In course tracking mode, the target forms one of two
  /// foci in the viewport, the other being the user location annotation. Typically,
  /// the target is set to a destination or waypoint in a real-time navigation scene.
  /// As the user annotation moves toward the target, the map automatically zooms in
  /// to fit both foci optimally within the viewport.
  ///
  /// This method has no effect if the `userTrackingMode` property is set to a value
  /// other than ``MLNUserTrackingMode/MLNUserTrackingModeFollowWithCourse``.
  ///
  /// @param targetCoordinate The target coordinate to fit within the viewport.
  /// @param animated If `YES`, the map animates to fit the target within the map
  /// view. If `NO`, the map fits the target instantaneously.
  /// @param completion The block executed after the animation finishes.
  void setTargetCoordinate_animated_completionHandler_(
      CLLocationCoordinate2D targetCoordinate,
      bool animated,
      objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_1pbhom5(
        this.ref.pointer,
        _sel_setTargetCoordinate_animated_completionHandler_,
        targetCoordinate,
        animated,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// A Boolean value that determines whether the user may zoom the map in and
  /// out, changing the zoom level.
  ///
  /// When this property is set to `YES`, the default, the user may zoom the map
  /// in and out by pinching two fingers or by double tapping, holding, and moving
  /// the finger up and down.
  ///
  /// This property controls only user interactions with the map. If you set the
  /// value of this property to `NO`, you may still change the map zoom
  /// programmatically.
  bool get zoomEnabled {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_isZoomEnabled);
  }

  /// A Boolean value that determines whether the user may zoom the map in and
  /// out, changing the zoom level.
  ///
  /// When this property is set to `YES`, the default, the user may zoom the map
  /// in and out by pinching two fingers or by double tapping, holding, and moving
  /// the finger up and down.
  ///
  /// This property controls only user interactions with the map. If you set the
  /// value of this property to `NO`, you may still change the map zoom
  /// programmatically.
  set zoomEnabled(bool value) {
    return _objc_msgSend_1s56lr9(this.ref.pointer, _sel_setZoomEnabled_, value);
  }

  /// A Boolean value that determines whether the user may scroll around the map,
  /// changing the center coordinate.
  ///
  /// When this property is set to `YES`, the default, the user may scroll the map
  /// by dragging or swiping with one finger.
  ///
  /// This property controls only user interactions with the map. If you set the
  /// value of this property to `NO`, you may still change the map location
  /// programmatically.
  bool get scrollEnabled {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_isScrollEnabled);
  }

  /// A Boolean value that determines whether the user may scroll around the map,
  /// changing the center coordinate.
  ///
  /// When this property is set to `YES`, the default, the user may scroll the map
  /// by dragging or swiping with one finger.
  ///
  /// This property controls only user interactions with the map. If you set the
  /// value of this property to `NO`, you may still change the map location
  /// programmatically.
  set scrollEnabled(bool value) {
    return _objc_msgSend_1s56lr9(
        this.ref.pointer, _sel_setScrollEnabled_, value);
  }

  /// The scrolling mode the user is allowed to use to interact with the map.
  ///
  /// `MLNPanScrollingModeHorizontal` only allows the user to scroll horizontally on the map,
  /// restricting a user's ability to scroll vertically.
  /// `MLNPanScrollingModeVertical` only allows the user to scroll vertically on the map,
  /// restricting a user's ability to scroll horizontally.
  /// ``MLNPanScrollingMode/MLNPanScrollingModeDefault`` allows the user to scroll both horizontally and
  /// vertically on the map.
  ///
  /// By default, this property is set to ``MLNPanScrollingMode/MLNPanScrollingModeDefault``.
  MLNPanScrollingMode get panScrollingMode {
    final _ret = _objc_msgSend_1vb5jwj(this.ref.pointer, _sel_panScrollingMode);
    return MLNPanScrollingMode.fromValue(_ret);
  }

  /// The scrolling mode the user is allowed to use to interact with the map.
  ///
  /// `MLNPanScrollingModeHorizontal` only allows the user to scroll horizontally on the map,
  /// restricting a user's ability to scroll vertically.
  /// `MLNPanScrollingModeVertical` only allows the user to scroll vertically on the map,
  /// restricting a user's ability to scroll horizontally.
  /// ``MLNPanScrollingMode/MLNPanScrollingModeDefault`` allows the user to scroll both horizontally and
  /// vertically on the map.
  ///
  /// By default, this property is set to ``MLNPanScrollingMode/MLNPanScrollingModeDefault``.
  set panScrollingMode(MLNPanScrollingMode value) {
    return _objc_msgSend_k7jknj(
        this.ref.pointer, _sel_setPanScrollingMode_, value.value);
  }

  /// A Boolean value that determines whether the user may rotate the map,
  /// changing the direction.
  ///
  /// When this property is set to `YES`, the default, the user may rotate the map
  /// by moving two fingers in a circular motion.
  ///
  /// This property controls only user interactions with the map. If you set the
  /// value of this property to `NO`, you may still rotate the map
  /// programmatically.
  bool get rotateEnabled {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_isRotateEnabled);
  }

  /// A Boolean value that determines whether the user may rotate the map,
  /// changing the direction.
  ///
  /// When this property is set to `YES`, the default, the user may rotate the map
  /// by moving two fingers in a circular motion.
  ///
  /// This property controls only user interactions with the map. If you set the
  /// value of this property to `NO`, you may still rotate the map
  /// programmatically.
  set rotateEnabled(bool value) {
    return _objc_msgSend_1s56lr9(
        this.ref.pointer, _sel_setRotateEnabled_, value);
  }

  /// A Boolean value that determines whether the user may change the pitch (tilt) of
  /// the map.
  ///
  /// When this property is set to `YES`, the default, the user may tilt the map by
  /// vertically dragging two fingers.
  ///
  /// This property controls only user interactions with the map. If you set the
  /// value of this property to `NO`, you may still change the pitch of the map
  /// programmatically.
  ///
  /// The default value of this property is `YES`.
  bool get pitchEnabled {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_isPitchEnabled);
  }

  /// A Boolean value that determines whether the user may change the pitch (tilt) of
  /// the map.
  ///
  /// When this property is set to `YES`, the default, the user may tilt the map by
  /// vertically dragging two fingers.
  ///
  /// This property controls only user interactions with the map. If you set the
  /// value of this property to `NO`, you may still change the pitch of the map
  /// programmatically.
  ///
  /// The default value of this property is `YES`.
  set pitchEnabled(bool value) {
    return _objc_msgSend_1s56lr9(
        this.ref.pointer, _sel_setPitchEnabled_, value);
  }

  /// A Boolean value that determines whether gestures are anchored to the center coordinate of the map
  /// while rotating or zooming. Default value is set to NO.
  bool get anchorRotateOrZoomGesturesToCenterCoordinate {
    return _objc_msgSend_91o635(
        this.ref.pointer, _sel_anchorRotateOrZoomGesturesToCenterCoordinate);
  }

  /// A Boolean value that determines whether gestures are anchored to the center coordinate of the map
  /// while rotating or zooming. Default value is set to NO.
  set anchorRotateOrZoomGesturesToCenterCoordinate(bool value) {
    return _objc_msgSend_1s56lr9(this.ref.pointer,
        _sel_setAnchorRotateOrZoomGesturesToCenterCoordinate_, value);
  }

  /// A Boolean value that determines whether the user will receive haptic feedback
  /// for certain interactions with the map.
  ///
  /// When this property is set to `YES`, the default, a `UIImpactFeedbackStyleLight`
  /// haptic feedback event be played when the user rotates the map to due north
  /// (0°).
  ///
  /// This feature requires a device that supports haptic feedback, running iOS 10 or
  /// newer.
  bool get hapticFeedbackEnabled {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_isHapticFeedbackEnabled);
  }

  /// A Boolean value that determines whether the user will receive haptic feedback
  /// for certain interactions with the map.
  ///
  /// When this property is set to `YES`, the default, a `UIImpactFeedbackStyleLight`
  /// haptic feedback event be played when the user rotates the map to due north
  /// (0°).
  ///
  /// This feature requires a device that supports haptic feedback, running iOS 10 or
  /// newer.
  set hapticFeedbackEnabled(bool value) {
    return _objc_msgSend_1s56lr9(
        this.ref.pointer, _sel_setHapticFeedbackEnabled_, value);
  }

  /// A floating-point value that determines the rate of deceleration after the user
  /// lifts their finger.
  ///
  /// Your application can use the ``MLNMapViewDecelerationRateNormal`` and
  /// ``MLNMapViewDecelerationRateFast`` constants as reference points for reasonable
  /// deceleration rates. ``MLNMapViewDecelerationRateImmediate`` can be used to
  /// disable deceleration entirely.
  double get decelerationRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_decelerationRate)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_decelerationRate);
  }

  /// A floating-point value that determines the rate of deceleration after the user
  /// lifts their finger.
  ///
  /// Your application can use the ``MLNMapViewDecelerationRateNormal`` and
  /// ``MLNMapViewDecelerationRateFast`` constants as reference points for reasonable
  /// deceleration rates. ``MLNMapViewDecelerationRateImmediate`` can be used to
  /// disable deceleration entirely.
  set decelerationRate(double value) {
    return _objc_msgSend_hwm8nu(
        this.ref.pointer, _sel_setDecelerationRate_, value);
  }

  /// The geographic coordinate at the center of the map view.
  ///
  /// Changing the value of this property centers the map on the new coordinate
  /// without changing the current zoom level.
  ///
  /// Changing the value of this property updates the map view immediately. If you
  /// want to animate the change, use the `-setCenterCoordinate:animated:` method
  /// instead.
  CLLocationCoordinate2D get centerCoordinate {
    final _ptr = pkg_ffi.calloc<CLLocationCoordinate2D>();
    objc.useMsgSendVariants
        ? _objc_msgSend_18o5nokStret(
            _ptr, this.ref.pointer, _sel_centerCoordinate)
        : _ptr.ref =
            _objc_msgSend_18o5nok(this.ref.pointer, _sel_centerCoordinate);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<CLLocationCoordinate2D>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<CLLocationCoordinate2D>(_finalizable);
  }

  /// The geographic coordinate at the center of the map view.
  ///
  /// Changing the value of this property centers the map on the new coordinate
  /// without changing the current zoom level.
  ///
  /// Changing the value of this property updates the map view immediately. If you
  /// want to animate the change, use the `-setCenterCoordinate:animated:` method
  /// instead.
  set centerCoordinate(CLLocationCoordinate2D value) {
    return _objc_msgSend_1zv0am(
        this.ref.pointer, _sel_setCenterCoordinate_, value);
  }

  /// Changes the center coordinate of the map and optionally animates the change.
  ///
  /// Changing the center coordinate centers the map on the new coordinate without
  /// changing the current zoom level. For animated changes, wait until the map view has
  /// finished loading before calling this method.
  ///
  /// @param coordinate The new center coordinate for the map.
  /// @param animated Specify `YES` if you want the map view to scroll to the new
  /// location or `NO` if you want the map to display the new location
  /// immediately.
  ///
  /// > Note: The behavior of this method is undefined if called in response to
  /// `UIApplicationWillTerminateNotification`.
  void setCenterCoordinate_animated_(
      CLLocationCoordinate2D coordinate, bool animated) {
    _objc_msgSend_o7hjv2(this.ref.pointer, _sel_setCenterCoordinate_animated_,
        coordinate, animated);
  }

  /// Changes the center coordinate and zoom level of the map and optionally animates
  /// the change. For animated changes, wait until the map view has
  /// finished loading before calling this method.
  ///
  /// @param centerCoordinate The new center coordinate for the map.
  /// @param zoomLevel The new zoom level for the map.
  /// @param animated Specify `YES` if you want the map view to animate scrolling and
  /// zooming to the new location or `NO` if you want the map to display the new
  /// location immediately.
  ///
  /// > Note: The behavior of this method is undefined if called in response to
  /// `UIApplicationWillTerminateNotification`.
  void setCenterCoordinate_zoomLevel_animated_(
      CLLocationCoordinate2D centerCoordinate,
      double zoomLevel,
      bool animated) {
    _objc_msgSend_sbs4d5(
        this.ref.pointer,
        _sel_setCenterCoordinate_zoomLevel_animated_,
        centerCoordinate,
        zoomLevel,
        animated);
  }

  /// Changes the center coordinate, zoom level, and direction of the map and
  /// optionally animates the change. For animated changes, wait until the map view has
  /// finished loading before calling this method.
  ///
  /// @param centerCoordinate The new center coordinate for the map.
  /// @param zoomLevel The new zoom level for the map.
  /// @param direction The new direction for the map, measured in degrees relative to
  /// true north. A negative value leaves the map’s direction unchanged.
  /// @param animated Specify `YES` if you want the map view to animate scrolling,
  /// zooming, and rotating to the new location or `NO` if you want the map to
  /// display the new location immediately.
  ///
  /// > Note: The behavior of this method is undefined if called in response to
  /// `UIApplicationWillTerminateNotification`.
  void setCenterCoordinate_zoomLevel_direction_animated_(
      CLLocationCoordinate2D centerCoordinate,
      double zoomLevel,
      double direction,
      bool animated) {
    _objc_msgSend_3zczym(
        this.ref.pointer,
        _sel_setCenterCoordinate_zoomLevel_direction_animated_,
        centerCoordinate,
        zoomLevel,
        direction,
        animated);
  }

  /// Changes the center coordinate, zoom level, and direction of the map, calling a
  /// completion handler at the end of an optional animation. For animated changes,
  /// wait until the map view has finished loading before calling this method.
  ///
  /// @param centerCoordinate The new center coordinate for the map.
  /// @param zoomLevel The new zoom level for the map.
  /// @param direction The new direction for the map, measured in degrees relative to
  /// true north. A negative value leaves the map’s direction unchanged.
  /// @param animated Specify `YES` if you want the map view to animate scrolling,
  /// zooming, and rotating to the new location or `NO` if you want the map to
  /// display the new location immediately.
  /// @param completion The block executed after the animation finishes.
  ///
  /// > Note: The behavior of this method is undefined if called in response to
  /// `UIApplicationWillTerminateNotification`.
  void setCenterCoordinate_zoomLevel_direction_animated_completionHandler_(
      CLLocationCoordinate2D centerCoordinate,
      double zoomLevel,
      double direction,
      bool animated,
      objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_d9pvdp(
        this.ref.pointer,
        _sel_setCenterCoordinate_zoomLevel_direction_animated_completionHandler_,
        centerCoordinate,
        zoomLevel,
        direction,
        animated,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// The zoom level of the receiver.
  ///
  /// In addition to affecting the visual size and detail of features on the map,
  /// the zoom level affects the size of the vector tiles that are loaded. At zoom
  /// level 0, each tile covers the entire world map; at zoom level 1, it covers ¼
  /// of the world; at zoom level 2, <sup>1</sup>⁄<sub>16</sub> of the world, and
  /// so on.
  ///
  /// Changing the value of this property updates the map view immediately. If you
  /// want to animate the change, use the `-setZoomLevel:animated:` method instead.
  double get zoomLevel {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_zoomLevel)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_zoomLevel);
  }

  /// The zoom level of the receiver.
  ///
  /// In addition to affecting the visual size and detail of features on the map,
  /// the zoom level affects the size of the vector tiles that are loaded. At zoom
  /// level 0, each tile covers the entire world map; at zoom level 1, it covers ¼
  /// of the world; at zoom level 2, <sup>1</sup>⁄<sub>16</sub> of the world, and
  /// so on.
  ///
  /// Changing the value of this property updates the map view immediately. If you
  /// want to animate the change, use the `-setZoomLevel:animated:` method instead.
  set zoomLevel(double value) {
    return _objc_msgSend_hwm8nu(this.ref.pointer, _sel_setZoomLevel_, value);
  }

  /// Changes the zoom level of the map and optionally animates the change.
  ///
  /// Changing the zoom level scales the map without changing the current center
  /// coordinate.
  ///
  /// @param zoomLevel The new zoom level for the map.
  /// @param animated Specify `YES` if you want the map view to animate the change
  /// to the new zoom level or `NO` if you want the map to display the new
  /// zoom level immediately.
  void setZoomLevel_animated_(double zoomLevel, bool animated) {
    _objc_msgSend_ghxo7e(
        this.ref.pointer, _sel_setZoomLevel_animated_, zoomLevel, animated);
  }

  /// The minimum zoom level at which the map can be shown.
  ///
  /// Depending on the map view’s aspect ratio, the map view may be prevented
  /// from reaching the minimum zoom level, in order to keep the map from
  /// repeating within the current viewport.
  ///
  /// If the value of this property is greater than that of the
  /// maximumZoomLevel property, the behavior is undefined.
  ///
  /// The default minimumZoomLevel is 0.
  double get minimumZoomLevel {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_minimumZoomLevel)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_minimumZoomLevel);
  }

  /// The minimum zoom level at which the map can be shown.
  ///
  /// Depending on the map view’s aspect ratio, the map view may be prevented
  /// from reaching the minimum zoom level, in order to keep the map from
  /// repeating within the current viewport.
  ///
  /// If the value of this property is greater than that of the
  /// maximumZoomLevel property, the behavior is undefined.
  ///
  /// The default minimumZoomLevel is 0.
  set minimumZoomLevel(double value) {
    return _objc_msgSend_hwm8nu(
        this.ref.pointer, _sel_setMinimumZoomLevel_, value);
  }

  /// The maximum zoom level the map can be shown at.
  ///
  /// If the value of this property is smaller than that of the
  /// minimumZoomLevel property, the behavior is undefined.
  ///
  /// The default maximumZoomLevel is 22. The upper bound for this property
  /// is 25.5.
  double get maximumZoomLevel {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_maximumZoomLevel)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_maximumZoomLevel);
  }

  /// The maximum zoom level the map can be shown at.
  ///
  /// If the value of this property is smaller than that of the
  /// minimumZoomLevel property, the behavior is undefined.
  ///
  /// The default maximumZoomLevel is 22. The upper bound for this property
  /// is 25.5.
  set maximumZoomLevel(double value) {
    return _objc_msgSend_hwm8nu(
        this.ref.pointer, _sel_setMaximumZoomLevel_, value);
  }

  /// The heading of the map, measured in degrees clockwise from true north.
  ///
  /// The value `0` means that the top edge of the map view corresponds to true
  /// north. The value `90` means the top of the map is pointing due east. The
  /// value `180` means the top of the map points due south, and so on.
  ///
  /// Changing the value of this property updates the map view immediately. If you
  /// want to animate the change, use the `-setDirection:animated:` method instead.
  double get direction {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_direction)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_direction);
  }

  /// The heading of the map, measured in degrees clockwise from true north.
  ///
  /// The value `0` means that the top edge of the map view corresponds to true
  /// north. The value `90` means the top of the map is pointing due east. The
  /// value `180` means the top of the map points due south, and so on.
  ///
  /// Changing the value of this property updates the map view immediately. If you
  /// want to animate the change, use the `-setDirection:animated:` method instead.
  set direction(double value) {
    return _objc_msgSend_hwm8nu(this.ref.pointer, _sel_setDirection_, value);
  }

  /// Changes the heading of the map and optionally animates the change.
  ///
  /// @param direction The heading of the map, measured in degrees clockwise from
  /// true north.
  /// @param animated Specify `YES` if you want the map view to animate the change
  /// to the new heading or `NO` if you want the map to display the new
  /// heading immediately.
  ///
  /// Changing the heading rotates the map without changing the current center
  /// coordinate or zoom level.
  void setDirection_animated_(double direction, bool animated) {
    _objc_msgSend_ghxo7e(
        this.ref.pointer, _sel_setDirection_animated_, direction, animated);
  }

  /// The minimum pitch of the map’s camera toward the horizon measured in degrees.
  ///
  /// If the value of this property is greater than that of the `maximumPitch`
  /// property, the behavior is undefined. The pitch may not be less than 0
  /// regardless of this property.
  ///
  /// The default value of this property is 0 degrees, allowing the map to appear
  /// two-dimensional.
  double get minimumPitch {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_minimumPitch)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_minimumPitch);
  }

  /// The minimum pitch of the map’s camera toward the horizon measured in degrees.
  ///
  /// If the value of this property is greater than that of the `maximumPitch`
  /// property, the behavior is undefined. The pitch may not be less than 0
  /// regardless of this property.
  ///
  /// The default value of this property is 0 degrees, allowing the map to appear
  /// two-dimensional.
  set minimumPitch(double value) {
    return _objc_msgSend_hwm8nu(this.ref.pointer, _sel_setMinimumPitch_, value);
  }

  /// The maximum pitch of the map’s camera toward the horizon measured in degrees.
  ///
  /// If the value of this property is smaller than that of the `minimumPitch`
  /// property, the behavior is undefined. The pitch may not exceed 60 degrees
  /// regardless of this property.
  ///
  /// The default value of this property is 60 degrees.
  double get maximumPitch {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_maximumPitch)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_maximumPitch);
  }

  /// The maximum pitch of the map’s camera toward the horizon measured in degrees.
  ///
  /// If the value of this property is smaller than that of the `minimumPitch`
  /// property, the behavior is undefined. The pitch may not exceed 60 degrees
  /// regardless of this property.
  ///
  /// The default value of this property is 60 degrees.
  set maximumPitch(double value) {
    return _objc_msgSend_hwm8nu(this.ref.pointer, _sel_setMaximumPitch_, value);
  }

  /// Resets the map rotation to a northern heading — a `direction` of `0` degrees.
  void resetNorth() {
    _objc_msgSend_1pl9qdv(this.ref.pointer, _sel_resetNorth);
  }

  /// Resets the map to the current style’s default viewport.
  ///
  /// If the style doesn’t specify a default viewport, the map resets to a minimum
  /// zoom level, a center coordinate of (0, 0), and a northern heading.
  void resetPosition() {
    _objc_msgSend_1pl9qdv(this.ref.pointer, _sel_resetPosition);
  }

  /// The coordinate bounds visible in the receiver’s viewport.
  ///
  /// Changing the value of this property updates the receiver immediately. If you
  /// want to animate the change, call `-setVisibleCoordinateBounds:animated:`
  /// instead.
  ///
  /// If a longitude is less than −180 degrees or greater than 180 degrees, the
  /// visible bounds straddles the antimeridian or international date line. For
  /// example, if both Tokyo and San Francisco are visible, the visible bounds might
  /// extend from (35.68476, −220.24257) to (37.78428, −122.41310).
  MLNCoordinateBounds get visibleCoordinateBounds {
    final _ptr = pkg_ffi.calloc<MLNCoordinateBounds>();
    objc.useMsgSendVariants
        ? _objc_msgSend_ygoa6aStret(
            _ptr, this.ref.pointer, _sel_visibleCoordinateBounds)
        : _ptr.ref = _objc_msgSend_ygoa6a(
            this.ref.pointer, _sel_visibleCoordinateBounds);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<MLNCoordinateBounds>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<MLNCoordinateBounds>(_finalizable);
  }

  /// The coordinate bounds visible in the receiver’s viewport.
  ///
  /// Changing the value of this property updates the receiver immediately. If you
  /// want to animate the change, call `-setVisibleCoordinateBounds:animated:`
  /// instead.
  ///
  /// If a longitude is less than −180 degrees or greater than 180 degrees, the
  /// visible bounds straddles the antimeridian or international date line. For
  /// example, if both Tokyo and San Francisco are visible, the visible bounds might
  /// extend from (35.68476, −220.24257) to (37.78428, −122.41310).
  set visibleCoordinateBounds(MLNCoordinateBounds value) {
    return _objc_msgSend_9ay59k(
        this.ref.pointer, _sel_setVisibleCoordinateBounds_, value);
  }

  /// Changes the receiver’s viewport to fit the given coordinate bounds,
  /// optionally animating the change.
  ///
  /// To bring both sides of the antimeridian or international date line into view,
  /// specify some longitudes less than −180 degrees or greater than 180 degrees. For
  /// example, to show both Tokyo and San Francisco simultaneously, you could set the
  /// visible bounds to extend from (35.68476, −220.24257) to (37.78428, −122.41310).
  ///
  /// @param bounds The bounds that the viewport will show in its entirety.
  /// @param animated Specify `YES` to animate the change by smoothly scrolling
  /// and zooming or `NO` to immediately display the given bounds.
  void setVisibleCoordinateBounds_animated_(
      MLNCoordinateBounds bounds, bool animated) {
    _objc_msgSend_148tmbg(this.ref.pointer,
        _sel_setVisibleCoordinateBounds_animated_, bounds, animated);
  }

  /// Deprecated. Changes the receiver’s viewport to fit the given coordinate bounds with
  /// some additional padding on each side.
  ///
  /// To bring both sides of the antimeridian or international date line into view,
  /// specify some longitudes less than −180 degrees or greater than 180 degrees. For
  /// example, to show both Tokyo and San Francisco simultaneously, you could set the
  /// visible bounds to extend from (35.68476, −220.24257) to (37.78428, −122.41310).
  ///
  /// To specify a completion handler to execute after the animation finishes, use
  /// the `-setVisibleCoordinateBounds:edgePadding:animated:completionHandler:` method.
  ///
  /// @param bounds The bounds that the viewport will show in its entirety.
  /// @param insets The minimum padding (in screen points) that will be visible
  /// around the given coordinate bounds.
  /// @param animated Specify `YES` to animate the change by smoothly scrolling and
  /// zooming or `NO` to immediately display the given bounds.
  void setVisibleCoordinateBounds_edgePadding_animated_(
      MLNCoordinateBounds bounds, objc.ObjCObjectBase insets, bool animated) {
    _objc_msgSend_13x0pfk(
        this.ref.pointer,
        _sel_setVisibleCoordinateBounds_edgePadding_animated_,
        bounds,
        insets.ref.pointer,
        animated);
  }

  /// Changes the receiver’s viewport to fit the given coordinate bounds with some
  /// additional padding on each side, optionally calling a completion handler.
  ///
  /// To bring both sides of the antimeridian or international date line into view,
  /// specify some longitudes less than −180 degrees or greater than 180 degrees. For
  /// example, to show both Tokyo and San Francisco simultaneously, you could set the
  /// visible bounds to extend from (35.68476, −220.24257) to (37.78428, −122.41310).
  ///
  /// @param bounds The bounds that the viewport will show in its entirety.
  /// @param insets The minimum padding (in screen points) that will be visible
  /// around the given coordinate bounds.
  /// @param animated Specify `YES` to animate the change by smoothly scrolling and
  /// zooming or `NO` to immediately display the given bounds.
  /// @param completion The block executed after the animation finishes.
  void setVisibleCoordinateBounds_edgePadding_animated_completionHandler_(
      MLNCoordinateBounds bounds,
      objc.ObjCObjectBase insets,
      bool animated,
      objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_5ott2b(
        this.ref.pointer,
        _sel_setVisibleCoordinateBounds_edgePadding_animated_completionHandler_,
        bounds,
        insets.ref.pointer,
        animated,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// Changes the receiver’s viewport to fit all of the given coordinates with some
  /// additional padding on each side.
  ///
  /// To bring both sides of the antimeridian or international date line into view,
  /// specify some longitudes less than −180 degrees or greater than 180 degrees. For
  /// example, to show both Tokyo and San Francisco simultaneously, you could set the
  /// visible coordinates to (35.68476, −220.24257) and (37.78428, −122.41310).
  ///
  /// @param coordinates The coordinates that the viewport will show.
  /// @param count The number of coordinates. This number must not be greater than
  /// the number of elements in `coordinates`.
  /// @param insets The minimum padding (in screen points) that will be visible
  /// around the given coordinate bounds.
  /// @param animated Specify `YES` to animate the change by smoothly scrolling and
  /// zooming or `NO` to immediately display the given bounds.
  void setVisibleCoordinates_count_edgePadding_animated_(
      ffi.Pointer<CLLocationCoordinate2D> coordinates,
      int count,
      objc.ObjCObjectBase insets,
      bool animated) {
    _objc_msgSend_9zf1tv(
        this.ref.pointer,
        _sel_setVisibleCoordinates_count_edgePadding_animated_,
        coordinates,
        count,
        insets.ref.pointer,
        animated);
  }

  /// Changes the receiver’s viewport to fit all of the given coordinates with some
  /// additional padding on each side, optionally calling a completion handler.
  ///
  /// To bring both sides of the antimeridian or international date line into view,
  /// specify some longitudes less than −180 degrees or greater than 180 degrees. For
  /// example, to show both Tokyo and San Francisco simultaneously, you could set the
  /// visible coordinates to (35.68476, −220.24257) and (37.78428, −122.41310).
  ///
  /// @param coordinates The coordinates that the viewport will show.
  /// @param count The number of coordinates. This number must not be greater than
  /// the number of elements in `coordinates`.
  /// @param insets The minimum padding (in screen points) that will be visible
  /// around the given coordinate bounds.
  /// @param direction The direction to rotate the map to, measured in degrees
  /// relative to true north. A negative value leaves the map’s direction
  /// unchanged.
  /// @param duration The duration to animate the change in seconds.
  /// @param function The timing function to animate the change.
  /// @param completion The block executed after the animation finishes.
  void
      setVisibleCoordinates_count_edgePadding_direction_duration_animationTimingFunction_completionHandler_(
          ffi.Pointer<CLLocationCoordinate2D> coordinates,
          int count,
          objc.ObjCObjectBase insets,
          double direction,
          double duration,
          objc.ObjCObjectBase function,
          objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_g22jge(
        this.ref.pointer,
        _sel_setVisibleCoordinates_count_edgePadding_direction_duration_animationTimingFunction_completionHandler_,
        coordinates,
        count,
        insets.ref.pointer,
        direction,
        duration,
        function.ref.pointer,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// Sets the visible region so that the map displays the specified annotations.
  ///
  /// Calling this method updates the value in the `visibleCoordinateBounds` property
  /// and potentially other properties to reflect the new map region. A small amount
  /// of padding is reserved around the edges of the map view. To specify a different
  /// amount of padding, use the `-showAnnotations:edgePadding:animated:` method.
  ///
  /// @param annotations The annotations that you want to be visible in the map.
  /// @param animated `YES` if you want the map region change to be animated, or `NO`
  /// if you want the map to display the new region immediately without animations.
  void showAnnotations_animated_(objc.NSArray annotations, bool animated) {
    _objc_msgSend_gk45w7(this.ref.pointer, _sel_showAnnotations_animated_,
        annotations.ref.pointer, animated);
  }

  /// Deprecated. Sets the visible region so that the map displays the specified
  /// annotations with the specified amount of padding on each side.
  ///
  /// Calling this method updates the value in the `visibleCoordinateBounds` property
  /// and potentially other properties to reflect the new map region.
  ///
  /// To specify a completion handler to execute after the animation finishes, use
  /// the `-showAnnotations:edgePadding:animated:completionHandler:` method.
  ///
  /// @param annotations The annotations that you want to be visible in the map.
  /// @param insets The minimum padding (in screen points) around the edges of the
  /// map view to keep clear of annotations.
  /// @param animated `YES` if you want the map region change to be animated, or `NO`
  /// if you want the map to display the new region immediately without animations.
  void showAnnotations_edgePadding_animated_(
      objc.NSArray annotations, objc.ObjCObjectBase insets, bool animated) {
    _objc_msgSend_k4ykup(
        this.ref.pointer,
        _sel_showAnnotations_edgePadding_animated_,
        annotations.ref.pointer,
        insets.ref.pointer,
        animated);
  }

  /// Sets the visible region so that the map displays the specified annotations with
  /// the specified amount of padding on each side and an optional completion
  /// handler.
  ///
  /// Calling this method updates the value in the `visibleCoordinateBounds` property
  /// and potentially other properties to reflect the new map region.
  ///
  /// @param annotations The annotations that you want to be visible in the map.
  /// @param insets The minimum padding (in screen points) around the edges of the
  /// map view to keep clear of annotations.
  /// @param animated `YES` if you want the map region change to be animated, or `NO`
  /// if you want the map to display the new region immediately without animations.
  /// @param completion The block executed after the animation finishes.
  void showAnnotations_edgePadding_animated_completionHandler_(
      objc.NSArray annotations,
      objc.ObjCObjectBase insets,
      bool animated,
      objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_1xot3wa(
        this.ref.pointer,
        _sel_showAnnotations_edgePadding_animated_completionHandler_,
        annotations.ref.pointer,
        insets.ref.pointer,
        animated,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// A camera representing the current viewpoint of the map.
  MLNMapCamera get camera {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_camera);
    return MLNMapCamera.castFromPointer(_ret, retain: true, release: true);
  }

  /// A camera representing the current viewpoint of the map.
  set camera(MLNMapCamera value) {
    return _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_setCamera_, value.ref.pointer);
  }

  /// Moves the viewpoint to a different location with respect to the map with an
  /// optional transition animation. For animated changes, wait until the map view has
  /// finished loading before calling this method.
  ///
  /// @param camera The new viewpoint.
  /// @param animated Specify `YES` if you want the map view to animate the change to
  /// the new viewpoint or `NO` if you want the map to display the new viewpoint
  /// immediately.
  ///
  /// #### Related examples
  /// - TODO: Camera animation: learn how to trigger an animation that rotates around a central point.
  void setCamera_animated_(MLNMapCamera camera, bool animated) {
    _objc_msgSend_gk45w7(this.ref.pointer, _sel_setCamera_animated_,
        camera.ref.pointer, animated);
  }

  /// Moves the viewpoint to a different location with respect to the map with an
  /// optional transition duration and timing function. For animated changes, wait
  /// until the map view has finished loading before calling this method.
  ///
  /// @param camera The new viewpoint.
  /// @param duration The amount of time, measured in seconds, that the transition
  /// animation should take. Specify `0` to jump to the new viewpoint
  /// instantaneously.
  /// @param function A timing function used for the animation. Set this parameter to
  /// `nil` for a transition that matches most system animations. If the duration
  /// is `0`, this parameter is ignored.
  ///
  /// #### Related examples
  /// - TODO: Camera animation: learn how to create a timed animation that
  /// rotates around a central point for a specific duration.
  void setCamera_withDuration_animationTimingFunction_(
      MLNMapCamera camera, double duration, objc.ObjCObjectBase function) {
    _objc_msgSend_1rg1izw(
        this.ref.pointer,
        _sel_setCamera_withDuration_animationTimingFunction_,
        camera.ref.pointer,
        duration,
        function.ref.pointer);
  }

  /// Moves the viewpoint to a different location with respect to the map with an
  /// optional transition duration and timing function. For animated changes, wait
  /// until the map view has finished loading before calling this method.
  ///
  /// @param camera The new viewpoint.
  /// @param duration The amount of time, measured in seconds, that the transition
  /// animation should take. Specify `0` to jump to the new viewpoint
  /// instantaneously.
  /// @param function A timing function used for the animation. Set this parameter to
  /// `nil` for a transition that matches most system animations. If the duration
  /// is `0`, this parameter is ignored.
  /// @param completion The block to execute after the animation finishes.
  void setCamera_withDuration_animationTimingFunction_completionHandler_(
      MLNMapCamera camera,
      double duration,
      objc.ObjCObjectBase function,
      objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_vmwi8n(
        this.ref.pointer,
        _sel_setCamera_withDuration_animationTimingFunction_completionHandler_,
        camera.ref.pointer,
        duration,
        function.ref.pointer,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// Moves the viewpoint to a different location with respect to the map with an
  /// optional transition duration and timing function, and optionally some additional
  /// padding on each side. For animated changes, wait until the map view has
  /// finished loading before calling this method.
  ///
  /// @param camera The new viewpoint.
  /// @param duration The amount of time, measured in seconds, that the transition
  /// animation should take. Specify `0` to jump to the new viewpoint
  /// instantaneously.
  /// @param function A timing function used for the animation. Set this parameter to
  /// `nil` for a transition that matches most system animations. If the duration
  /// is `0`, this parameter is ignored.
  /// @param edgePadding The minimum padding (in screen points) that would be visible
  /// around the returned camera object if it were set as the receiver’s camera.
  /// @param completion The block to execute after the animation finishes.
  void
      setCamera_withDuration_animationTimingFunction_edgePadding_completionHandler_(
          MLNMapCamera camera,
          double duration,
          objc.ObjCObjectBase function,
          objc.ObjCObjectBase edgePadding,
          objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_q6aes3(
        this.ref.pointer,
        _sel_setCamera_withDuration_animationTimingFunction_edgePadding_completionHandler_,
        camera.ref.pointer,
        duration,
        function.ref.pointer,
        edgePadding.ref.pointer,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// Moves the viewpoint to a different location using a transition animation that
  /// evokes powered flight and a default duration based on the length of the flight
  /// path.
  ///
  /// The transition animation seamlessly incorporates zooming and panning to help
  /// the user find his or her bearings even after traversing a great distance.
  ///
  /// @param camera The new viewpoint.
  /// @param completion The block to execute after the animation finishes.
  void flyToCamera_completionHandler_(
      MLNMapCamera camera, objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_14pxqbs(this.ref.pointer, _sel_flyToCamera_completionHandler_,
        camera.ref.pointer, completion?.ref.pointer ?? ffi.nullptr);
  }

  /// Moves the viewpoint to a different location using a transition animation that
  /// evokes powered flight and an optional transition duration.
  ///
  /// The transition animation seamlessly incorporates zooming and panning to help
  /// the user find his or her bearings even after traversing a great distance.
  ///
  /// @param camera The new viewpoint.
  /// @param duration The amount of time, measured in seconds, that the transition
  /// animation should take. Specify `0` to jump to the new viewpoint
  /// instantaneously. Specify a negative value to use the default duration, which
  /// is based on the length of the flight path.
  /// @param completion The block to execute after the animation finishes.
  void flyToCamera_withDuration_completionHandler_(MLNMapCamera camera,
      double duration, objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_s4h8qz(
        this.ref.pointer,
        _sel_flyToCamera_withDuration_completionHandler_,
        camera.ref.pointer,
        duration,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// Moves the viewpoint to a different location using a transition animation that
  /// evokes powered flight and an optional transition duration and peak altitude.
  ///
  /// The transition animation seamlessly incorporates zooming and panning to help
  /// the user find his or her bearings even after traversing a great distance.
  ///
  /// @param camera The new viewpoint.
  /// @param duration The amount of time, measured in seconds, that the transition
  /// animation should take. Specify `0` to jump to the new viewpoint
  /// instantaneously. Specify a negative value to use the default duration, which
  /// is based on the length of the flight path.
  /// @param peakAltitude The altitude, measured in meters, at the midpoint of the
  /// animation. The value of this parameter is ignored if it is negative or if
  /// the animation transition resulting from a similar call to
  /// `-setCamera:animated:` would have a midpoint at a higher altitude.
  /// @param completion The block to execute after the animation finishes.
  void flyToCamera_withDuration_peakAltitude_completionHandler_(
      MLNMapCamera camera,
      double duration,
      double peakAltitude,
      objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_1oun51c(
        this.ref.pointer,
        _sel_flyToCamera_withDuration_peakAltitude_completionHandler_,
        camera.ref.pointer,
        duration,
        peakAltitude,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// Moves the viewpoint to a different location using a transition animation that
  /// evokes powered flight.
  ///
  /// The transition animation seamlessly incorporates zooming and panning to help
  /// the user find his or her bearings even after traversing a great distance.
  ///
  /// @param camera The new viewpoint.
  /// @param duration The amount of time, measured in seconds, that the transition
  /// animation should take. Specify `0` to jump to the new viewpoint
  /// instantaneously. Specify a negative value to use the default duration, which
  /// is based on the length of the flight path.
  /// @param edgePadding The minimum padding (in screen points) that would be visible
  /// around the returned camera object if it were set as the receiver’s camera.
  /// @param completion The block to execute after the animation finishes.
  void flyToCamera_edgePadding_withDuration_completionHandler_(
      MLNMapCamera camera,
      objc.ObjCObjectBase insets,
      double duration,
      objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_mqlsb9(
        this.ref.pointer,
        _sel_flyToCamera_edgePadding_withDuration_completionHandler_,
        camera.ref.pointer,
        insets.ref.pointer,
        duration,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// Returns the camera that best fits the given coordinate bounds.
  ///
  /// @param bounds The coordinate bounds to fit to the receiver’s viewport.
  /// @return A camera object centered on the same location as the coordinate
  /// bounds with zoom level as high (close to the ground) as possible while still
  /// including the entire coordinate bounds. The camera object uses the current
  /// direction and pitch.
  ///
  /// > Note: The behavior of this method is undefined if called in response to
  /// `UIApplicationWillTerminateNotification`; you may receive a `nil` return value
  /// depending on the order of notification delivery.
  MLNMapCamera cameraThatFitsCoordinateBounds_(MLNCoordinateBounds bounds) {
    final _ret = _objc_msgSend_3usbrg(
        this.ref.pointer, _sel_cameraThatFitsCoordinateBounds_, bounds);
    return MLNMapCamera.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns the camera that best fits the given coordinate bounds with some
  /// additional padding on each side.
  ///
  /// @param bounds The coordinate bounds to fit to the receiver’s viewport.
  /// @param insets The minimum padding (in screen points) that would be visible
  /// around the returned camera object if it were set as the receiver’s camera.
  /// @return A camera object centered on the same location as the coordinate bounds
  /// with zoom level as high (close to the ground) as possible while still
  /// including the entire coordinate bounds. The camera object uses the current
  /// direction and pitch.
  ///
  /// > Note: The behavior of this method is undefined if called in response to
  /// `UIApplicationWillTerminateNotification`; you may receive a `nil` return value
  /// depending on the order of notification delivery.
  MLNMapCamera cameraThatFitsCoordinateBounds_edgePadding_(
      MLNCoordinateBounds bounds, objc.ObjCObjectBase insets) {
    final _ret = _objc_msgSend_1z0kiwg(
        this.ref.pointer,
        _sel_cameraThatFitsCoordinateBounds_edgePadding_,
        bounds,
        insets.ref.pointer);
    return MLNMapCamera.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns the camera that best fits the given coordinate bounds with some
  /// additional padding on each side, matching an existing camera as much as
  /// possible.
  ///
  /// @param camera The camera that the return camera should adhere to. All values
  /// on this camera will be manipulated except for pitch and direction.
  /// @param bounds The coordinate bounds to fit to the receiver’s viewport.
  /// @param insets The minimum padding (in screen points) that would be visible
  /// around the returned camera object if it were set as the receiver’s camera.
  /// @return A camera object centered on the same location as the coordinate bounds
  /// with zoom level as high (close to the ground) as possible while still
  /// including the entire coordinate bounds. The initial camera's pitch and
  /// direction will be honored.
  ///
  /// > Note: The behavior of this method is undefined if called in response to
  /// `UIApplicationWillTerminateNotification`; you may receive a `nil` return value
  /// depending on the order of notification delivery.
  MLNMapCamera camera_fittingCoordinateBounds_edgePadding_(MLNMapCamera camera,
      MLNCoordinateBounds bounds, objc.ObjCObjectBase insets) {
    final _ret = _objc_msgSend_1mt4adu(
        this.ref.pointer,
        _sel_camera_fittingCoordinateBounds_edgePadding_,
        camera.ref.pointer,
        bounds,
        insets.ref.pointer);
    return MLNMapCamera.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns the camera that best fits the given shape with some additional padding
  /// on each side, matching an existing camera as much as possible.
  ///
  /// @param camera The camera that the return camera should adhere to. All values
  /// on this camera will be manipulated except for pitch and direction.
  /// @param shape The shape to fit to the receiver’s viewport.
  /// @param insets The minimum padding (in screen points) that would be visible
  /// around the returned camera object if it were set as the receiver’s camera.
  /// @return A camera object centered on the shape's center with zoom level as high
  /// (close to the ground) as possible while still including the entire shape.
  /// The initial camera's pitch and direction will be honored.
  ///
  /// > Note: The behavior of this method is undefined if called in response to
  /// `UIApplicationWillTerminateNotification`; you may receive a `nil` return value
  /// depending on the order of notification delivery.
  MLNMapCamera camera_fittingShape_edgePadding_(
      MLNMapCamera camera, MLNShape shape, objc.ObjCObjectBase insets) {
    final _ret = _objc_msgSend_582s3n(
        this.ref.pointer,
        _sel_camera_fittingShape_edgePadding_,
        camera.ref.pointer,
        shape.ref.pointer,
        insets.ref.pointer);
    return MLNMapCamera.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns the camera that best fits the given shape with some additional padding
  /// on each side while looking in the specified direction.
  ///
  /// @param shape The shape to fit to the receiver’s viewport.
  /// @param direction The direction of the viewport, measured in degrees clockwise
  /// from true north.
  /// @param insets The minimum padding (in screen points) that would be visible
  /// around the returned camera object if it were set as the receiver’s camera.
  /// @return A camera object centered on the shape's center with zoom level as high
  /// (close to the ground) as possible while still including the entire shape.
  /// The camera object uses the current pitch.
  ///
  /// > Note: The behavior of this method is undefined if called in response to
  /// `UIApplicationWillTerminateNotification`; you may receive a `nil` return value
  /// depending on the order of notification delivery.
  MLNMapCamera cameraThatFitsShape_direction_edgePadding_(
      MLNShape shape, double direction, objc.ObjCObjectBase insets) {
    final _ret = _objc_msgSend_45qm9k(
        this.ref.pointer,
        _sel_cameraThatFitsShape_direction_edgePadding_,
        shape.ref.pointer,
        direction,
        insets.ref.pointer);
    return MLNMapCamera.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns the point in this view’s coordinate system on which to “anchor” in
  /// response to a user-initiated gesture.
  ///
  /// For example, a pinch-to-zoom gesture would anchor the map at the midpoint of
  /// the pinch.
  ///
  /// If the ``userTrackingMode`` property is not ``MLNUserTrackingMode/MLNUserTrackingModeNone``, the
  /// user annotation is used as the anchor point.
  ///
  /// Subclasses may override this method to provide specialized behavior - for
  /// example, anchoring on the map’s center point to provide a "locked" zooming
  /// mode.
  ///
  /// @param gesture An anchorable user gesture.
  /// @return The point on which to anchor in response to the gesture.
  CGPoint anchorPointForGesture_(objc.ObjCObjectBase gesture) {
    final _ptr = pkg_ffi.calloc<CGPoint>();
    objc.useMsgSendVariants
        ? _objc_msgSend_11ku3hkStret(_ptr, this.ref.pointer,
            _sel_anchorPointForGesture_, gesture.ref.pointer)
        : _ptr.ref = _objc_msgSend_11ku3hk(
            this.ref.pointer, _sel_anchorPointForGesture_, gesture.ref.pointer);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<CGPoint>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<CGPoint>(_finalizable);
  }

  /// The distance from the edges of the map view’s frame to the edges of the map
  /// view’s logical viewport.
  ///
  /// When the value of this property is equal to `UIEdgeInsetsZero`, viewport
  /// properties such as `centerCoordinate` assume a viewport that matches the map
  /// view’s frame. Otherwise, those properties are inset, excluding part of the
  /// frame from the viewport. For instance, if the only the top edge is inset, the
  /// map center is effectively shifted downward.
  ///
  /// When the map view’s superview is an instance of `UIViewController` whose
  /// `automaticallyAdjustsScrollViewInsets` property is `YES`, the value of this
  /// property may be overridden at any time.
  ///
  /// The usage of `automaticallyAdjustsScrollViewInsets` has been deprecated
  /// use the map view’s property ``MLNMapView/automaticallyAdjustsContentInset``instead.
  ///
  /// Changing the value of this property updates the map view immediately. If you
  /// want to animate the change, use the `-setContentInset:animated:completionHandler:`
  /// method instead.
  int get contentInset {
    return _objc_msgSend_13yqbb6(this.ref.pointer, _sel_contentInset);
  }

  /// The distance from the edges of the map view’s frame to the edges of the map
  /// view’s logical viewport.
  ///
  /// When the value of this property is equal to `UIEdgeInsetsZero`, viewport
  /// properties such as `centerCoordinate` assume a viewport that matches the map
  /// view’s frame. Otherwise, those properties are inset, excluding part of the
  /// frame from the viewport. For instance, if the only the top edge is inset, the
  /// map center is effectively shifted downward.
  ///
  /// When the map view’s superview is an instance of `UIViewController` whose
  /// `automaticallyAdjustsScrollViewInsets` property is `YES`, the value of this
  /// property may be overridden at any time.
  ///
  /// The usage of `automaticallyAdjustsScrollViewInsets` has been deprecated
  /// use the map view’s property ``MLNMapView/automaticallyAdjustsContentInset``instead.
  ///
  /// Changing the value of this property updates the map view immediately. If you
  /// want to animate the change, use the `-setContentInset:animated:completionHandler:`
  /// method instead.
  set contentInset(int value) {
    return _objc_msgSend_9o8504(this.ref.pointer, _sel_setContentInset_, value);
  }

  /// The current edge insets of the current map view’s camera.
  ///
  /// Camera edge insets are formed as accumulation of map view's content insets
  /// and the edge padding passed to the method like `seCamera:...edgePadding:`,
  /// `setVisibleCoordinates:...edgePadding:`, `showAnnotations:...edgePadding:` etc.
  ///
  /// The camera edge insets influences the `centerCoordinate` of the viewport.
  /// This value is read-only, in order to apply paddings,  use either persistent
  /// `contentInset`, either transient `edgePadding` parameter of the `set...` methods.
  int get cameraEdgeInsets {
    return _objc_msgSend_13yqbb6(this.ref.pointer, _sel_cameraEdgeInsets);
  }

  /// Deprecated. Sets the distance from the edges of the map view’s frame to the edges
  /// of the map view’s logical viewport with an optional transition animation.
  ///
  /// When the value of this property is equal to `UIEdgeInsetsZero`, viewport
  /// properties such as `centerCoordinate` assume a viewport that matches the map
  /// view’s frame. Otherwise, those properties are inset, excluding part of the
  /// frame from the viewport. For instance, if the only the top edge is inset, the
  /// map center is effectively shifted downward.
  ///
  /// When the map view’s superview is an instance of `UIViewController` whose
  /// `automaticallyAdjustsScrollViewInsets` property is `YES`, the value of this
  /// property may be overridden at any time.
  ///
  /// The usage of `automaticallyAdjustsScrollViewInsets` has been deprecated
  /// use the map view’s property ``MLNMapView/automaticallyAdjustsContentInset``instead.
  ///
  /// To specify a completion handler to execute after the animation finishes, use
  /// the `-setContentInset:animated:completionHandler:` method.
  ///
  /// @param contentInset The new values to inset the content by.
  /// @param animated Specify `YES` if you want the map view to animate the change to
  /// the content inset or `NO` if you want the map to inset the content
  /// immediately.
  void setContentInset_animated_(
      objc.ObjCObjectBase contentInset, bool animated) {
    _objc_msgSend_gk45w7(this.ref.pointer, _sel_setContentInset_animated_,
        contentInset.ref.pointer, animated);
  }

  /// Sets the distance from the edges of the map view’s frame to the edges of the
  /// map view’s logical viewport with an optional transition animation and
  /// completion handler.
  ///
  /// When the value of this property is equal to `UIEdgeInsetsZero`, viewport
  /// properties such as `centerCoordinate` assume a viewport that matches the map
  /// view’s frame. Otherwise, those properties are inset, excluding part of the
  /// frame from the viewport. For instance, if the only the top edge is inset, the
  /// map center is effectively shifted downward.
  ///
  /// When the map view’s superview is an instance of `UIViewController` whose
  /// `automaticallyAdjustsScrollViewInsets` property is `YES`, the value of this
  /// property may be overridden at any time.
  ///
  /// The usage of `automaticallyAdjustsScrollViewInsets` has been deprecated
  /// use the map view’s property ``MLNMapView/automaticallyAdjustsContentInset``instead.
  ///
  /// @param contentInset The new values to inset the content by.
  /// @param animated Specify `YES` if you want the map view to animate the change to
  /// the content inset or `NO` if you want the map to inset the content
  /// immediately.
  /// @param completion The block executed after the animation finishes.
  void setContentInset_animated_completionHandler_(
      objc.ObjCObjectBase contentInset,
      bool animated,
      objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_3br9h8(
        this.ref.pointer,
        _sel_setContentInset_animated_completionHandler_,
        contentInset.ref.pointer,
        animated,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// Converts a point in the given view’s coordinate system to a geographic
  /// coordinate.
  ///
  /// @param point The point to convert.
  /// @param view The view in whose coordinate system the point is expressed.
  /// @return The geographic coordinate at the given point.
  ///
  /// #### Related examples
  /// - TODO: Point conversion example to learn how to convert a `CGPoint` to a map coordinate.
  CLLocationCoordinate2D convertPoint_toCoordinateFromView_(
      CGPoint point, objc.ObjCObjectBase view) {
    final _ptr = pkg_ffi.calloc<CLLocationCoordinate2D>();
    objc.useMsgSendVariants
        ? _objc_msgSend_13n8ay5Stret(_ptr, this.ref.pointer,
            _sel_convertPoint_toCoordinateFromView_, point, view.ref.pointer)
        : _ptr.ref = _objc_msgSend_13n8ay5(this.ref.pointer,
            _sel_convertPoint_toCoordinateFromView_, point, view.ref.pointer);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<CLLocationCoordinate2D>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<CLLocationCoordinate2D>(_finalizable);
  }

  /// Converts a geographic coordinate to a point in the given view’s coordinate
  /// system.
  ///
  /// @param coordinate The geographic coordinate to convert.
  /// @param view The view in whose coordinate system the returned point should be
  /// expressed. If this parameter is `nil`, the returned point is expressed
  /// in the window’s coordinate system. If `view` is not `nil`, it must
  /// belong to the same window as the map view.
  /// @return The point (in the appropriate view or window coordinate system)
  /// corresponding to the given geographic coordinate.
  ///
  /// #### Related examples
  /// - TODO: Point conversion: learn how to convert a map coordinate to a `CGPoint` object.
  CGPoint convertCoordinate_toPointToView_(
      CLLocationCoordinate2D coordinate, objc.ObjCObjectBase view) {
    final _ptr = pkg_ffi.calloc<CGPoint>();
    objc.useMsgSendVariants
        ? _objc_msgSend_1a63hefStret(_ptr, this.ref.pointer,
            _sel_convertCoordinate_toPointToView_, coordinate, view.ref.pointer)
        : _ptr.ref = _objc_msgSend_1a63hef(
            this.ref.pointer,
            _sel_convertCoordinate_toPointToView_,
            coordinate,
            view.ref.pointer);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<CGPoint>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<CGPoint>(_finalizable);
  }

  /// Converts a rectangle in the given view’s coordinate system to a geographic
  /// bounding box.
  ///
  /// If the returned coordinate bounds contains a longitude is less than −180 degrees
  /// or greater than 180 degrees, the bounding box straddles the antimeridian or
  /// international date line.
  ///
  /// @param rect The rectangle to convert.
  /// @param view The view in whose coordinate system the rectangle is expressed.
  /// @return The geographic bounding box coextensive with the given rectangle.
  MLNCoordinateBounds convertRect_toCoordinateBoundsFromView_(
      CGRect rect, objc.ObjCObjectBase view) {
    final _ptr = pkg_ffi.calloc<MLNCoordinateBounds>();
    objc.useMsgSendVariants
        ? _objc_msgSend_g6it35Stret(
            _ptr,
            this.ref.pointer,
            _sel_convertRect_toCoordinateBoundsFromView_,
            rect,
            view.ref.pointer)
        : _ptr.ref = _objc_msgSend_g6it35(
            this.ref.pointer,
            _sel_convertRect_toCoordinateBoundsFromView_,
            rect,
            view.ref.pointer);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<MLNCoordinateBounds>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<MLNCoordinateBounds>(_finalizable);
  }

  /// Converts a geographic bounding box to a rectangle in the given view’s
  /// coordinate system.
  ///
  /// To bring both sides of the antimeridian or international date line into view,
  /// specify some longitudes less than −180 degrees or greater than 180 degrees. For
  /// example, to show both Tokyo and San Francisco simultaneously, you could set the
  /// visible bounds to extend from (35.68476, −220.24257) to (37.78428, −122.41310).
  ///
  /// @param bounds The geographic bounding box to convert.
  /// @param view The view in whose coordinate system the returned rectangle should
  /// be expressed. If this parameter is `nil`, the returned rectangle is
  /// expressed in the window’s coordinate system. If `view` is not `nil`, it must
  /// belong to the same window as the map view.
  CGRect convertCoordinateBounds_toRectToView_(
      MLNCoordinateBounds bounds, objc.ObjCObjectBase view) {
    final _ptr = pkg_ffi.calloc<CGRect>();
    objc.useMsgSendVariants
        ? _objc_msgSend_1nli2vfStret(
            _ptr,
            this.ref.pointer,
            _sel_convertCoordinateBounds_toRectToView_,
            bounds,
            view.ref.pointer)
        : _ptr.ref = _objc_msgSend_1nli2vf(
            this.ref.pointer,
            _sel_convertCoordinateBounds_toRectToView_,
            bounds,
            view.ref.pointer);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<CGRect>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<CGRect>(_finalizable);
  }

  /// Returns the distance spanned by one point in the map view’s coordinate system
  /// at the given latitude and current zoom level.
  ///
  /// The distance between points decreases as the latitude approaches the poles.
  /// This relationship parallels the relationship between longitudinal coordinates
  /// at different latitudes.
  ///
  /// @param latitude The latitude of the geographic coordinate represented by the
  /// point.
  /// @return The distance in meters spanned by a single point.
  double metersPerPointAtLatitude_(double latitude) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1tczmpvFpret(
            this.ref.pointer, _sel_metersPerPointAtLatitude_, latitude)
        : _objc_msgSend_1tczmpv(
            this.ref.pointer, _sel_metersPerPointAtLatitude_, latitude);
  }

  /// Returns the new map projection instance initialized with the map view,
  /// i.e. with the current camera state.
  MLNMapProjection mapProjection() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_mapProjection);
    return MLNMapProjection.castFromPointer(_ret, retain: true, release: true);
  }

  /// The complete list of annotations associated with the receiver. (read-only)
  ///
  /// The objects in this array must adopt the ``MLNAnnotation`` protocol. If no
  /// annotations are associated with the map view, the value of this property is
  /// `nil`.
  objc.NSArray? get annotations {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_annotations);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// Adds an annotation to the map view.
  ///
  /// > Note: ``MLNMultiPolyline``, ``MLNMultiPolyline``, ``MLNMultiPolyline``, and
  /// ``MLNPointCollection`` objects cannot be added to the map view at this time.
  /// Any multipoint, multipolyline, multipolygon, shape or point collection
  /// object that is specified is silently ignored.
  ///
  /// @param annotation The annotation object to add to the receiver. This object
  /// must conform to the ``MLNAnnotation`` protocol. The map view retains the
  /// annotation object.
  ///
  /// #### Related examples
  /// - TODO: add a line annotation from GeoJSON.
  /// - TODO: add an annotation to an ``MLNMapView`` object.
  void addAnnotation_(objc.ObjCObjectBase annotation) {
    _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_addAnnotation_, annotation.ref.pointer);
  }

  /// Adds an array of annotations to the map view.
  ///
  /// > Note: ``MLNMultiPolyline``, ``MLNMultiPolyline``, and ``MLNMultiPolyline`` objects
  /// cannot be added to the map view at this time. Nor can ``MLNMultiPoint``
  /// objects that are not instances of ``MLNPolyline`` or ``MLNPolyline``. Any
  /// multipoint, multipolyline, multipolygon, or shape collection objects that
  /// are specified are silently ignored.
  ///
  /// @param annotations An array of annotation objects. Each object in the array
  /// must conform to the ``MLNAnnotation`` protocol. The map view retains each
  /// individual annotation object.
  void addAnnotations_(objc.NSArray annotations) {
    _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_addAnnotations_, annotations.ref.pointer);
  }

  /// Removes an annotation from the map view, deselecting it if it is selected.
  ///
  /// Removing an annotation object dissociates it from the map view entirely,
  /// preventing it from being displayed on the map. Thus you would typically call
  /// this method only when you want to hide or delete a given annotation.
  ///
  /// @param annotation The annotation object to remove. This object must conform
  /// to the ``MLNAnnotation`` protocol
  void removeAnnotation_(objc.ObjCObjectBase annotation) {
    _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_removeAnnotation_, annotation.ref.pointer);
  }

  /// Removes an array of annotations from the map view, deselecting any selected
  /// annotations in the array.
  ///
  /// Removing annotation objects dissociates them from the map view entirely,
  /// preventing them from being displayed on the map. Thus you would typically
  /// call this method only when you want to hide or delete the given annotations.
  ///
  /// @param annotations The array of annotation objects to remove. Objects in the
  /// array must conform to the ``MLNAnnotation`` protocol.
  void removeAnnotations_(objc.NSArray annotations) {
    _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_removeAnnotations_, annotations.ref.pointer);
  }

  /// Returns an ``MLNAnnotationView`` if the given annotation is currently associated
  /// with a view, otherwise nil.
  ///
  /// @param annotation The annotation associated with the view.
  /// Annotation must conform to the ``MLNAnnotation`` protocol.
  MLNAnnotationView? viewForAnnotation_(objc.ObjCObjectBase annotation) {
    final _ret = _objc_msgSend_62nh5j(
        this.ref.pointer, _sel_viewForAnnotation_, annotation.ref.pointer);
    return _ret.address == 0
        ? null
        : MLNAnnotationView.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns a reusable annotation image object associated with its identifier.
  ///
  /// For performance reasons, you should generally reuse ``MLNAnnotationImage``
  /// objects for identical-looking annotations in your map views. Dequeueing
  /// saves time and memory during performance-critical operations such as
  /// scrolling.
  ///
  /// @param identifier A string identifying the annotation image to be reused.
  /// This string is the same one you specify when initially returning the
  /// annotation image object using the `-mapView:imageForAnnotation:` method.
  /// @return An annotation image object with the given identifier, or `nil` if no
  /// such object exists in the reuse queue.
  ///
  /// #### Related examples
  /// - TODO: Add annotation views and images: learn how to most efficiently
  /// reuse an ``MLNAnnotationImage``.
  MLNAnnotationImage? dequeueReusableAnnotationImageWithIdentifier_(
      objc.NSString identifier) {
    final _ret = _objc_msgSend_62nh5j(
        this.ref.pointer,
        _sel_dequeueReusableAnnotationImageWithIdentifier_,
        identifier.ref.pointer);
    return _ret.address == 0
        ? null
        : MLNAnnotationImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns a reusable annotation view object associated with its identifier.
  ///
  /// For performance reasons, you should generally reuse ``MLNAnnotationView``
  /// objects for identical-looking annotations in your map views. Dequeueing
  /// saves time and memory during performance-critical operations such as
  /// scrolling.
  ///
  /// @param identifier A string identifying the annotation view to be reused.
  /// This string is the same one you specify when initially returning the
  /// annotation view object using the `-mapView:viewForAnnotation:` method.
  /// @return An annotation view object with the given identifier, or `nil` if no
  /// such object exists in the reuse queue.
  MLNAnnotationView? dequeueReusableAnnotationViewWithIdentifier_(
      objc.NSString identifier) {
    final _ret = _objc_msgSend_62nh5j(
        this.ref.pointer,
        _sel_dequeueReusableAnnotationViewWithIdentifier_,
        identifier.ref.pointer);
    return _ret.address == 0
        ? null
        : MLNAnnotationView.castFromPointer(_ret, retain: true, release: true);
  }

  /// The complete list of annotations associated with the receiver that are
  /// currently visible.
  ///
  /// The objects in this array must adopt the ``MLNAnnotation`` protocol. If no
  /// annotations are associated with the map view or if no annotations associated
  /// with the map view are currently visible, the value of this property is `nil`.
  objc.NSArray? get visibleAnnotations {
    final _ret =
        _objc_msgSend_1x359cv(this.ref.pointer, _sel_visibleAnnotations);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns the list of annotations associated with the receiver that intersect with
  /// the given rectangle.
  ///
  /// @param rect A rectangle expressed in the map view’s coordinate system.
  /// @return An array of objects that adopt the ``MLNAnnotation`` protocol or `nil` if
  /// no annotations associated with the map view are currently visible in the
  /// rectangle.
  objc.NSArray? visibleAnnotationsInRect_(CGRect rect) {
    final _ret = _objc_msgSend_19adbty(
        this.ref.pointer, _sel_visibleAnnotationsInRect_, rect);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// The currently selected annotations.
  ///
  /// Assigning a new array to this property selects only the first annotation in
  /// the array.
  ///
  /// If the annotation is of type ``MLNPointAnnotation`` and is offscreen, the camera
  /// will animate to bring the annotation and its callout just on screen. If you
  /// need finer control, consider using `-selectAnnotation:animated:`.
  ///
  /// > Note: In versions prior to `4.0.0` if the annotation was offscreen it was not
  /// selected.
  objc.NSArray get selectedAnnotations {
    final _ret =
        _objc_msgSend_1x359cv(this.ref.pointer, _sel_selectedAnnotations);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// The currently selected annotations.
  ///
  /// Assigning a new array to this property selects only the first annotation in
  /// the array.
  ///
  /// If the annotation is of type ``MLNPointAnnotation`` and is offscreen, the camera
  /// will animate to bring the annotation and its callout just on screen. If you
  /// need finer control, consider using `-selectAnnotation:animated:`.
  ///
  /// > Note: In versions prior to `4.0.0` if the annotation was offscreen it was not
  /// selected.
  set selectedAnnotations(objc.NSArray value) {
    return _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_setSelectedAnnotations_, value.ref.pointer);
  }

  /// Deprecated. Selects an annotation and displays its callout view.
  ///
  /// The `animated` parameter determines whether the selection is animated including whether the map is
  /// panned to bring the annotation into view, specifically:
  ///
  /// | `animated` parameter | Effect |
  /// |------------------|--------|
  /// | `NO`             | The annotation is selected, and the callout is presented. However the map is
  /// not panned to bring the annotation or callout into view. The presentation of the callout is NOT
  /// animated. | | `YES`            | The annotation is selected, and the callout is presented. If the
  /// annotation is not visible (or is partially visible) *and* is of type ``MLNPointAnnotation``, the
  /// map is panned so that the annotation and its callout are brought into view. The annotation is *not*
  /// centered within the viewport. |
  ///
  /// Note that a selection initiated by a single tap gesture is always animated.
  ///
  /// To specify a completion handler to execute after the animation finishes, use
  /// the `-selectAnnotation:animated:completionHandler:` method.
  ///
  /// @param annotation The annotation object to select.
  /// @param animated If `YES`, the annotation and callout view are animated on-screen.
  ///
  /// > Note: In versions prior to `4.0.0` selecting an offscreen annotation did not
  /// change the camera.
  void selectAnnotation_animated_(
      objc.ObjCObjectBase annotation, bool animated) {
    _objc_msgSend_gk45w7(this.ref.pointer, _sel_selectAnnotation_animated_,
        annotation.ref.pointer, animated);
  }

  /// Selects an annotation and displays its callout view with an optional completion
  /// handler.
  ///
  /// The `animated` parameter determines whether the selection is animated including whether the map is
  /// panned to bring the annotation into view, specifically:
  ///
  /// | `animated` parameter | Effect |
  /// |------------------|--------|
  /// | `NO`             | The annotation is selected, and the callout is presented. However the map is
  /// not panned to bring the annotation or callout into view. The presentation of the callout is NOT
  /// animated. | | `YES`            | The annotation is selected, and the callout is presented. If the
  /// annotation is not visible (or is partially visible) *and* is of type ``MLNPointAnnotation``, the
  /// map is panned so that the annotation and its callout are brought into view. The annotation is *not*
  /// centered within the viewport. |
  ///
  /// Note that a selection initiated by a single tap gesture is always animated.
  ///
  /// @param annotation The annotation object to select.
  /// @param animated If `YES`, the annotation and callout view are animated on-screen.
  /// @param completion The block executed after the animation finishes.
  ///
  /// > Note: In versions prior to `4.0.0` selecting an offscreen annotation did not
  /// change the camera.
  void selectAnnotation_animated_completionHandler_(
      objc.ObjCObjectBase annotation,
      bool animated,
      objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_3br9h8(
        this.ref.pointer,
        _sel_selectAnnotation_animated_completionHandler_,
        annotation.ref.pointer,
        animated,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// :nodoc:
  /// Selects an annotation and displays its callout view with an optional completion
  /// handler. This method should be considered "alpha" and as such is subject to
  /// change.
  ///
  /// @param annotation The annotation object to select.
  /// @param moveIntoView If the annotation is not visible (or is partially visible) *and* is of type
  /// ``MLNPointAnnotation``, the map is panned so that the annotation and its callout are brought into
  /// view. The annotation is *not* centered within the viewport.
  /// @param animateSelection If `YES`, the annotation's selection state and callout view's presentation
  /// are animated.
  /// @param completion The block executed after the animation finishes.
  void selectAnnotation_moveIntoView_animateSelection_completionHandler_(
      objc.ObjCObjectBase annotation,
      bool moveIntoView,
      bool animateSelection,
      objc.ObjCBlock<ffi.Void Function()>? completion) {
    _objc_msgSend_11qxhhc(
        this.ref.pointer,
        _sel_selectAnnotation_moveIntoView_animateSelection_completionHandler_,
        annotation.ref.pointer,
        moveIntoView,
        animateSelection,
        completion?.ref.pointer ?? ffi.nullptr);
  }

  /// Deselects an annotation and hides its callout view.
  ///
  /// @param annotation The annotation object to deselect.
  /// @param animated If `YES`, the callout view is animated offscreen.
  void deselectAnnotation_animated_(
      objc.ObjCObjectBase? annotation, bool animated) {
    _objc_msgSend_gk45w7(this.ref.pointer, _sel_deselectAnnotation_animated_,
        annotation?.ref.pointer ?? ffi.nullptr, animated);
  }

  /// The complete list of overlays associated with the receiver. (read-only)
  ///
  /// The objects in this array must adopt the ``MLNOverlay`` protocol. If no
  /// overlays are associated with the map view, the value of this property is
  /// empty array.
  objc.NSArray get overlays {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_overlays);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// Adds a single overlay object to the map.
  ///
  /// To remove an overlay from a map, use the `-removeOverlay:` method.
  ///
  /// @param overlay The overlay object to add. This object must conform to the
  /// ``MLNOverlay`` protocol.
  void addOverlay_(objc.ObjCObjectBase overlay) {
    _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_addOverlay_, overlay.ref.pointer);
  }

  /// Adds an array of overlay objects to the map.
  ///
  /// To remove multiple overlays from a map, use the `-removeOverlays:` method.
  ///
  /// @param overlays An array of objects, each of which must conform to the
  /// ``MLNOverlay`` protocol.
  void addOverlays_(objc.NSArray overlays) {
    _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_addOverlays_, overlays.ref.pointer);
  }

  /// Removes a single overlay object from the map.
  ///
  /// If the specified overlay is not currently associated with the map view, this
  /// method does nothing.
  ///
  /// @param overlay The overlay object to remove.
  void removeOverlay_(objc.ObjCObjectBase overlay) {
    _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_removeOverlay_, overlay.ref.pointer);
  }

  /// Removes one or more overlay objects from the map.
  ///
  /// If a given overlay object is not associated with the map view, it is ignored.
  ///
  /// @param overlays An array of objects, each of which conforms to the ``MLNOverlay``
  /// protocol.
  void removeOverlays_(objc.NSArray overlays) {
    _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_removeOverlays_, overlays.ref.pointer);
  }

  /// Returns an array of rendered map features that intersect with a given point.
  ///
  /// This method may return features from any of the map’s style layers. To restrict
  /// the search to a particular layer or layers, use the
  /// `-visibleFeaturesAtPoint:inStyleLayersWithIdentifiers:` method. For more
  /// information about searching for map features, see that method’s documentation.
  ///
  /// @param point A point expressed in the map view’s coordinate system.
  /// @return An array of objects conforming to the ``MLNFeature`` protocol that
  /// represent features in the sources used by the current style.
  ///
  /// #### Related examples
  /// - TODO: Select a feature within a layer: to learn how to query an
  /// ``MLNMapView`` object for visible ``MLNMapView`` objects.
  objc.NSArray visibleFeaturesAtPoint_(CGPoint point) {
    final _ret = _objc_msgSend_czt8e6(
        this.ref.pointer, _sel_visibleFeaturesAtPoint_, point);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns an array of rendered map features that intersect with a given point,
  /// restricted to the given style layers.
  ///
  /// This method returns all the intersecting features from the specified layers. To
  /// filter the returned features, use the
  /// `-visibleFeaturesAtPoint:inStyleLayersWithIdentifiers:predicate:` method. For
  /// more information about searching for map features, see that method’s
  /// documentation.
  ///
  /// @param point A point expressed in the map view’s coordinate system.
  /// @param styleLayerIdentifiers A set of strings that correspond to the names
  /// of layers defined in the current style. Only the features contained in
  /// these layers are included in the returned array.
  /// @return An array of objects conforming to the ``MLNFeature`` protocol that
  /// represent features in the sources used by the current style.
  objc.NSArray visibleFeaturesAtPoint_inStyleLayersWithIdentifiers_(
      CGPoint point, objc.NSSet? styleLayerIdentifiers) {
    final _ret = _objc_msgSend_b4j0k2(
        this.ref.pointer,
        _sel_visibleFeaturesAtPoint_inStyleLayersWithIdentifiers_,
        point,
        styleLayerIdentifiers?.ref.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns an array of rendered map features that intersect with a given point,
  /// restricted to the given style layers and filtered by the given predicate.
  ///
  /// Each object in the returned array represents a feature rendered by the
  /// current style and provides access to attributes specified by the relevant map
  /// content sources. The returned array includes features loaded by
  /// ``MLNShapeSource`` and ``MLNShapeSource`` objects but does not include
  /// anything from ``MLNRasterTileSource`` objects, or from video or canvas sources,
  /// which are unsupported by this SDK.
  ///
  /// The returned features are drawn by a style layer in the current style. For
  /// example, suppose the current style uses the
  /// <a href="https://www.mapbox.com/vector-tiles/mapbox-streets/">Mapbox Streets source</a>,
  /// but none of the specified style layers includes features that have the `maki`
  /// property set to `bus`. If you pass a point corresponding to the location of a
  /// bus stop into this method, the bus stop feature does not appear in the
  /// resulting array. On the other hand, if the style does include bus stops, an
  /// ``MLNFeature`` object representing that bus stop is returned and its
  /// `featureAttributes` dictionary has the `maki` key set to `bus` (along with
  /// other attributes). The dictionary contains only the attributes provided by the
  /// tile source; it does not include computed attribute values or rules about how
  /// the feature is rendered by the current style.
  ///
  /// The returned array is sorted by z-order, starting with the topmost rendered
  /// feature and ending with the bottommost rendered feature. A feature that is
  /// rendered multiple times due to wrapping across the antimeridian at low zoom
  /// levels is included only once, subject to the caveat that follows.
  ///
  /// Features come from tiled vector data or GeoJSON data that is converted to tiles
  /// internally, so feature geometries are clipped at tile boundaries and features
  /// may appear duplicated across tiles. For example, suppose the specified point
  /// lies along a road that spans the screen. The resulting array includes those
  /// parts of the road that lie within the map tile that contain the specified
  /// point, even if the road extends into other tiles.
  ///
  /// To find out the layer names in a particular style, view the style in
  /// <a href="https://maplibre.org/maputnik">Maputnik</a>.
  ///
  /// Only visible features are returned. To obtain features regardless of
  /// visibility, use the
  /// ``MLNVectorTileSource/featuresInSourceLayersWithIdentifiers:predicate:`` and
  /// ``MLNShapeSource/featuresMatchingPredicate:`` methods on the relevant sources.
  ///
  /// The returned features may also include features corresponding to annotations.
  /// These features are not object-equal to the ``MLNAnnotation`` objects that were
  /// originally added to the map. To query the map for annotations, use
  /// `visibleAnnotations` or ``MLNMapView/visibleAnnotationsInRect:``.
  ///
  ///
  /// @param point A point expressed in the map view’s coordinate system.
  /// @param styleLayerIdentifiers A set of strings that correspond to the names of
  /// layers defined in the current style. Only the features contained in these
  /// layers are included in the returned array.
  /// @param predicate A predicate to filter the returned features.
  /// @return An array of objects conforming to the ``MLNFeature`` protocol that
  /// represent features in the sources used by the current style.
  objc.NSArray visibleFeaturesAtPoint_inStyleLayersWithIdentifiers_predicate_(
      CGPoint point,
      objc.NSSet? styleLayerIdentifiers,
      NSPredicate? predicate) {
    final _ret = _objc_msgSend_1htecti(
        this.ref.pointer,
        _sel_visibleFeaturesAtPoint_inStyleLayersWithIdentifiers_predicate_,
        point,
        styleLayerIdentifiers?.ref.pointer ?? ffi.nullptr,
        predicate?.ref.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns an array of rendered map features that intersect with the given
  /// rectangle.
  ///
  /// This method may return features from any of the map’s style layers. To restrict
  /// the search to a particular layer or layers, use the
  /// `-visibleFeaturesAtPoint:inStyleLayersWithIdentifiers:` method. For more
  /// information about searching for map features, see that method’s documentation.
  ///
  /// @param rect A rectangle expressed in the map view’s coordinate system.
  /// @return An array of objects conforming to the ``MLNFeature`` protocol that
  /// represent features in the sources used by the current style.
  objc.NSArray visibleFeaturesInRect_(CGRect rect) {
    final _ret = _objc_msgSend_19adbty(
        this.ref.pointer, _sel_visibleFeaturesInRect_, rect);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns an array of rendered map features that intersect with the given
  /// rectangle, restricted to the given style layers.
  ///
  /// This method returns all the intersecting features from the specified layers. To
  /// filter the returned features, use the
  /// `-visibleFeaturesAtPoint:inStyleLayersWithIdentifiers:predicate:` method. For
  /// more information about searching for map features, see that method’s
  /// documentation.
  ///
  /// @param rect A rectangle expressed in the map view’s coordinate system.
  /// @param styleLayerIdentifiers A set of strings that correspond to the names of
  /// layers defined in the current style. Only the features contained in these
  /// layers are included in the returned array.
  /// @return An array of objects conforming to the ``MLNFeature`` protocol that
  /// represent features in the sources used by the current style.
  objc.NSArray visibleFeaturesInRect_inStyleLayersWithIdentifiers_(
      CGRect rect, objc.NSSet? styleLayerIdentifiers) {
    final _ret = _objc_msgSend_qsq5p6(
        this.ref.pointer,
        _sel_visibleFeaturesInRect_inStyleLayersWithIdentifiers_,
        rect,
        styleLayerIdentifiers?.ref.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns an array of rendered map features that intersect with the given
  /// rectangle, restricted to the given style layers and filtered by the given
  /// predicate.
  ///
  /// Each object in the returned array represents a feature rendered by the
  /// current style and provides access to attributes specified by the relevant map
  /// content sources. The returned array includes features loaded by
  /// ``MLNShapeSource`` and ``MLNShapeSource`` objects but does not include
  /// anything from ``MLNRasterTileSource`` objects, or from video or canvas sources,
  /// which are unsupported by this SDK.
  ///
  /// The returned features are drawn by a style layer in the current style. For
  /// example, suppose the current style uses a particular source,
  /// but none of the specified style layers includes features that have the `maki`
  /// property set to `bus`. If you pass a rectangle containing the location of a bus
  /// stop into this method, the bus stop feature does not appear in the resulting
  /// array. On the other hand, if the style does include bus stops, an ``MLNFeature``
  /// object representing that bus stop is returned and its `featureAttributes`
  /// dictionary has the `maki` key set to `bus` (along with other attributes). The
  /// dictionary contains only the attributes provided by the tile source; it does
  /// not include computed attribute values or rules about how the feature is
  /// rendered by the current style.
  ///
  /// The returned array is sorted by z-order, starting with the topmost rendered
  /// feature and ending with the bottommost rendered feature. A feature that is
  /// rendered multiple times due to wrapping across the antimeridian at low zoom
  /// levels is included only once, subject to the caveat that follows.
  ///
  /// Features come from tiled vector data or GeoJSON data that is converted to tiles
  /// internally, so feature geometries are clipped at tile boundaries and features
  /// may appear duplicated across tiles. For example, suppose the specified
  /// rectangle intersects with a road that spans the screen. The resulting array
  /// includes those parts of the road that lie within the map tiles covering the
  /// specified rectangle, even if the road extends into other tiles. The portion of
  /// the road within each map tile is included individually.
  ///
  /// To find out the layer names in a particular style, view the style in
  /// <a href="https://maplibre.org/maputnik">Maputnik</a>.
  ///
  /// Only visible features are returned. To obtain features regardless of
  /// visibility, use the
  /// ``MLNVectorTileSource/featuresInSourceLayersWithIdentifiers:predicate:`` and
  /// ``MLNShapeSource/featuresMatchingPredicate:`` methods on the relevant sources.
  ///
  /// @param rect A rectangle expressed in the map view’s coordinate system.
  /// @param styleLayerIdentifiers A set of strings that correspond to the names of
  /// layers defined in the current style. Only the features contained in these
  /// layers are included in the returned array.
  /// @param predicate A predicate to filter the returned features.
  /// @return An array of objects conforming to the ``MLNFeature`` protocol that
  /// represent features in the sources used by the current style.
  objc.NSArray visibleFeaturesInRect_inStyleLayersWithIdentifiers_predicate_(
      CGRect rect, objc.NSSet? styleLayerIdentifiers, NSPredicate? predicate) {
    final _ret = _objc_msgSend_1hrqp72(
        this.ref.pointer,
        _sel_visibleFeaturesInRect_inStyleLayersWithIdentifiers_predicate_,
        rect,
        styleLayerIdentifiers?.ref.pointer ?? ffi.nullptr,
        predicate?.ref.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// The options that determine which debugging aids are shown on the map.
  ///
  /// These options are all disabled by default and should remain disabled in
  /// released software for performance and aesthetic reasons.
  MLNMapDebugMaskOptions get debugMask {
    final _ret = _objc_msgSend_1kwkjor(this.ref.pointer, _sel_debugMask);
    return MLNMapDebugMaskOptions.fromValue(_ret);
  }

  /// The options that determine which debugging aids are shown on the map.
  ///
  /// These options are all disabled by default and should remain disabled in
  /// released software for performance and aesthetic reasons.
  set debugMask(MLNMapDebugMaskOptions value) {
    return _objc_msgSend_pisvbv(
        this.ref.pointer, _sel_setDebugMask_, value.value);
  }
}

/// WARNING: MLNPointAnnotation is a stub. To generate bindings for this class, include
/// MLNPointAnnotation in your config's objc-interfaces list.
///
/// An ``MLNPointAnnotation`` object represents a one-dimensional shape located at a
/// single geographical coordinate. Depending on how it is used, an
/// ``MLNPointAnnotation`` object is known as a point annotation or point shape. For
/// example, you could use a point shape to represent a city at low zoom levels, an
/// address at high zoom levels, or the location of a long press gesture.
///
/// You can add point shapes to the map by adding them to an ``MLNShapeSource``
/// object. Configure the appearance of an ``MLNShapeSource``’s or
/// ``MLNVectorTileSource``’s point shapes collectively using an ``MLNVectorTileSource`` or
/// ``MLNSymbolStyleLayer`` object.
///
/// For more interactivity, add a selectable point annotation to a map view using
/// the ``MLNMapView/addAnnotation:`` method. Alternatively, define your own model
/// class that conforms to the ``MLNAnnotation`` protocol. Configure a point
/// annotation’s appearance using
/// ``MLNMapViewDelegate/mapView:imageForAnnotation:`` or
/// ``MLNMapViewDelegate/mapView:viewForAnnotation:`` (iOS only). A point
/// annotation’s ``MLNShape/title`` and ``MLNShape/title`` properties define the
/// default content of the annotation’s callout (on iOS) or popover (on macOS).
///
/// To group multiple related points together in one shape, use an
/// ``MLNPointCollection`` or ``MLNPointCollection`` object. To access
/// a point’s attributes, use an ``MLNPointFeature`` object.
///
/// A point shape is known as a
/// <a href="https://tools.ietf.org/html/rfc7946#section-3.1.2">Point</a> geometry
/// in GeoJSON.
///
/// #### Related examples
/// TODO: Mark a place on the map with an annotation
/// TODO: Mark a place on the map with an image
/// TODO: Default callout usage
/// Learn how to add ``MLNPointAnnotation`` objects to your map.
class MLNPointAnnotation extends MLNShape {
  MLNPointAnnotation._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNPointAnnotation] that points to the same underlying object as [other].
  MLNPointAnnotation.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNPointAnnotation] that wraps the given raw object pointer.
  MLNPointAnnotation.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);
}

/// WARNING: MLNPointFeature is a stub. To generate bindings for this class, include
/// MLNPointFeature in your config's objc-interfaces list.
///
/// An ``MLNPointFeature`` object associates a point shape with an optional
/// identifier and attributes.
///
/// #### Related examples
/// - <doc:WebAPIDataExample>
class MLNPointFeature extends MLNPointAnnotation {
  MLNPointFeature._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNPointFeature] that points to the same underlying object as [other].
  MLNPointFeature.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNPointFeature] that wraps the given raw object pointer.
  MLNPointFeature.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);
}

/// WARNING: MLNPointFeatureCluster is a stub. To generate bindings for this class, include
/// MLNPointFeatureCluster in your config's objc-interfaces list.
///
/// An ``MLNPointFeatureCluster`` object associates a point shape (with an optional
/// identifier and attributes) and represents a point cluster.
///
/// @see ``MLNCluster``
///
/// #### Related examples
/// TODO: Clustering point data, learn how to initialize
/// clusters and add them to your map.
class MLNPointFeatureCluster extends MLNPointFeature {
  MLNPointFeatureCluster._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNPointFeatureCluster] that points to the same underlying object as [other].
  MLNPointFeatureCluster.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNPointFeatureCluster] that wraps the given raw object pointer.
  MLNPointFeatureCluster.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);
}

late final _class_MLNTileSource = objc.getClass("MLNTileSource");
late final _sel_configurationURL = objc.registerName("configurationURL");
late final _sel_attributionInfos = objc.registerName("attributionInfos");

/// ``MLNTileSource`` is a map content source that supplies map tiles to be shown on
/// the map. The location of and metadata about the tiles are defined either by an
/// option dictionary or by an external file that conforms to the
/// <a href="https://github.com/mapbox/tilejson-spec/">TileJSON specification</a>.
/// A tile source is added to an ``MLNStyle`` object along with one or more
/// ``MLNRasterStyleLayer`` or ``MLNRasterStyleLayer`` objects. Use a style layer to
/// control the appearance of content supplied by the tile source.
///
/// A tile source is also known as a tile set. To learn about the structure of a
/// Mapbox-hosted tile set, view it in
/// <a href="https://www.mapbox.com/studio/tilesets/">Mapbox Studio’s Tilesets editor</a>.
///
/// Create instances of ``MLNRasterTileSource`` and ``MLNRasterTileSource`` in order
/// to use ``MLNTileSource``'s properties and methods. Do not create instances of
/// ``MLNTileSource`` directly, and do not create your own subclasses of this class.
class MLNTileSource extends MLNSource {
  MLNTileSource._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNTileSource] that points to the same underlying object as [other].
  MLNTileSource.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNTileSource] that wraps the given raw object pointer.
  MLNTileSource.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [MLNTileSource].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_69e0x1(
        obj.ref.pointer, _sel_isKindOfClass_, _class_MLNTileSource);
  }

  /// The URL to the TileJSON configuration file that specifies the contents of the
  /// source.
  ///
  /// If the receiver was initialized using
  /// `-initWithIdentifier:tileURLTemplates:options`, this property is set to `nil`.
  objc.NSURL? get configurationURL {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_configurationURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// An array of ``MLNAttributionInfo`` objects that define the attribution
  /// statements to be displayed when the map is shown to the user.
  ///
  /// By default, this array is empty. If the source is initialized with a
  /// configuration URL, this array is also empty until the configuration JSON file
  /// is loaded.
  objc.NSArray get attributionInfos {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_attributionInfos);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  MLNTileSource init() {
    final _ret =
        _objc_msgSend_1x359cv(this.ref.retainAndReturnPointer(), _sel_init);
    return MLNTileSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// Returns a source initialized with an identifier.
  ///
  /// After initializing and configuring the source, add it to a map view’s style
  /// using the ``MLNStyle/addSource:`` method.
  ///
  /// @param identifier A string that uniquely identifies the source in the style to
  /// which it is added.
  /// @return An initialized source.
  MLNTileSource initWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_62nh5j(this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_, identifier.ref.pointer);
    return MLNTileSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static MLNTileSource new1() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNTileSource, _sel_new);
    return MLNTileSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static MLNTileSource allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_hzlb60(_class_MLNTileSource, _sel_allocWithZone_, zone);
    return MLNTileSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static MLNTileSource alloc() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNTileSource, _sel_alloc);
    return MLNTileSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// self
  MLNTileSource self() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_self);
    return MLNTileSource.castFromPointer(_ret, retain: true, release: true);
  }

  /// retain
  MLNTileSource retain() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_retain);
    return MLNTileSource.castFromPointer(_ret, retain: true, release: true);
  }

  /// autorelease
  MLNTileSource autorelease() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_autorelease);
    return MLNTileSource.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_MLNVectorTileSource =
    objc.getClass("MapLibre.MLNVectorTileSource");
late final _sel_initWithIdentifier_configurationURL_ =
    objc.registerName("initWithIdentifier:configurationURL:");
final _objc_msgSend_rsfdlh = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithIdentifier_tileURLTemplates_options_ =
    objc.registerName("initWithIdentifier:tileURLTemplates:options:");
late final _sel_featuresInSourceLayersWithIdentifiers_predicate_ =
    objc.registerName("featuresInSourceLayersWithIdentifiers:predicate:");

/// ``MLNVectorTileSource`` is a map content source that supplies tiled vector data
/// in <a href="https://www.mapbox.com/vector-tiles/">Mapbox Vector Tile</a> format
/// to be shown on the map. The location of and metadata about the tiles are
/// defined either by an option dictionary or by an external file that conforms to
/// the
/// <a href="https://github.com/mapbox/tilejson-spec/">TileJSON specification</a>.
/// A vector tile source is added to an ``MLNStyle`` object along with one or more
/// ``MLNVectorStyleLayer`` objects. A vector style layer defines the appearance of
/// any content supplied by the vector tile source.
///
/// ``MLNVectorTileSource`` is optimized for data sets that are too large to fit
/// completely in memory, such as vector tile sets or data sets managed in
/// <a href="https://www.mapbox.com/studio/">Mapbox Studio</a>. For
/// <a href="http://geojson.org/">GeoJSON</a> data, use the ``MLNShapeSource``
/// class. For tiled data that changes dynamically, the ``MLNComputedShapeSource``
/// class may be a suitable alternative.
///
/// Each
/// <a href="https://maplibre.org/maplibre-style-spec/sources/#vector"><code>vector</code></a>
/// source defined by the style JSON file is represented at runtime by an
/// ``MLNVectorTileSource`` object that you can use to initialize new style layers.
/// You can also add and remove sources dynamically using methods such as
/// ``MLNStyle/addSource:`` and ``MLNStyle/sourceWithIdentifier:``.
///
/// Within each vector tile, each geometric coordinate must lie between
/// −1&nbsp;×&nbsp;<var>extent</var> and
/// (<var>extent</var>&nbsp;×&nbsp;2)&nbsp;−&nbsp;1, inclusive. Any vector style
/// layer initialized with a vector tile source must have a non-`nil` value in its
/// `sourceLayerIdentifier` property.
///
/// Commonly used vector tile sources include
/// <a href="https://www.mapbox.com/vector-tiles/mapbox-streets/">Mapbox Streets</a>,
/// <a href="https://www.mapbox.com/vector-tiles/mapbox-terrain/">Mapbox Terrain</a>,
/// and
/// <a href="https://www.mapbox.com/vector-tiles/mapbox-traffic-v1/">Mapbox Traffic</a>.
///
/// ### Example
///
/// ```swift
/// let source = MLNVectorTileSource(identifier: "pois", tileURLTemplates:
/// ["https://example.com/vector-tiles/{z}/{x}/{y}.mvt"], options: [ .minimumZoomLevel: 9,
/// .maximumZoomLevel: 16,
/// .attributionInfos: [
/// MLNAttributionInfo(title: NSAttributedString(string: "© Mapbox"), url: URL(string:
/// "https://mapbox.com"))
/// ]
/// ])
/// mapView.style?.addSource(source)
/// ```
///
/// #### Related examples
/// TODO: Data-driven circles, learn how to add data to your map using
/// an ``MLNVectorTileSource`` object.
class MLNVectorTileSource extends MLNTileSource {
  MLNVectorTileSource._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNVectorTileSource] that points to the same underlying object as [other].
  MLNVectorTileSource.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNVectorTileSource] that wraps the given raw object pointer.
  MLNVectorTileSource.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [MLNVectorTileSource].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_69e0x1(
        obj.ref.pointer, _sel_isKindOfClass_, _class_MLNVectorTileSource);
  }

  /// Returns a vector tile source initialized with an identifier and configuration
  /// URL.
  ///
  /// After initializing and configuring the source, add it to a map view’s style
  /// using the ``MLNStyle/addSource:`` method.
  ///
  /// The URL may be a full HTTP or HTTPS URL or a canonical
  /// URL. The URL should point to a JSON file that conforms to the
  /// <a href="https://github.com/mapbox/tilejson-spec/">TileJSON specification</a>.
  ///
  /// @param identifier A string that uniquely identifies the source in the style to
  /// which it is added.
  /// @param configurationURL A URL to a TileJSON configuration file describing the
  /// source’s contents and other metadata.
  /// @return An initialized vector tile source.
  MLNVectorTileSource initWithIdentifier_configurationURL_(
      objc.NSString identifier, objc.NSURL configurationURL) {
    final _ret = _objc_msgSend_rsfdlh(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_configurationURL_,
        identifier.ref.pointer,
        configurationURL.ref.pointer);
    return MLNVectorTileSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// Returns a vector tile source initialized an identifier, tile URL templates, and
  /// options.
  ///
  /// Tile URL templates are strings that specify the URLs of the vector tiles to
  /// load. See the “<a href="../tile-url-templates.html">Tile URL Templates</a>”
  /// guide for information about the format of a tile URL template.
  ///
  /// After initializing and configuring the source, add it to a map view’s style
  /// using the ``MLNStyle/addSource:`` method.
  ///
  /// @param identifier A string that uniquely identifies the source in the style to
  /// which it is added.
  /// @param tileURLTemplates An array of tile URL template strings. Only the first
  /// string is used; any additional strings are ignored.
  /// @param options A dictionary containing configuration options. See
  /// ``MLNTileSourceOption`` for available keys and values. Pass in `nil` to use
  /// the default values.
  /// @return An initialized tile source.
  MLNVectorTileSource initWithIdentifier_tileURLTemplates_options_(
      objc.NSString identifier,
      objc.NSArray tileURLTemplates,
      objc.NSDictionary? options) {
    final _ret = _objc_msgSend_582s3n(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_tileURLTemplates_options_,
        identifier.ref.pointer,
        tileURLTemplates.ref.pointer,
        options?.ref.pointer ?? ffi.nullptr);
    return MLNVectorTileSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// Returns an array of map features loaded by this source, restricted to the given
  /// source layers and filtered by the given predicate.
  ///
  /// Each object in the returned array represents a feature loaded by the source and
  /// provides access to attributes specified as part of the loaded feature. The
  /// source loads a feature if the source is added to an ``MLNMapView``’s style; that
  /// style has a layer that uses the source; and the map view has recently scrolled
  /// to the region containing the feature.
  ///
  /// Features come from tiled vector data that is converted to tiles internally, so
  /// feature geometries are clipped at tile boundaries and features may appear
  /// duplicated across tiles. For example, suppose part of a lengthy polyline
  /// representing a road has recently scrolled into view. The resulting array
  /// includes those parts of the road that lie within the map tiles that the source
  /// has loaded, even if the road extends into other tiles. The portion of the road
  /// within each map tile is included individually.
  ///
  /// Returned features may not necessarily be visible to the user at the time they
  /// are loaded: the style may contain a layer that forces the source’s tiles to
  /// load but filters out the features in question, preventing them from being
  /// drawn. To obtain only _visible_ features, use the
  /// ``MLNMapView/visibleFeaturesAtPoint:inStyleLayersWithIdentifiers:predicate:``
  /// or
  /// ``MLNMapView/visibleFeaturesInRect:inStyleLayersWithIdentifiers:predicate:``
  /// method.
  ///
  /// @param sourceLayerIdentifiers The source layers to include in the query. Only
  /// the features contained in these source layers are included in the returned
  /// array. This array may not be empty.
  /// @param predicate A predicate to filter the returned features. Use `nil` to
  /// include all loaded features.
  /// @return An array of objects conforming to the ``MLNFeature`` protocol that
  /// represent features loaded by the source that match the predicate.
  objc.NSArray featuresInSourceLayersWithIdentifiers_predicate_(
      objc.NSSet sourceLayerIdentifiers, NSPredicate? predicate) {
    final _ret = _objc_msgSend_rsfdlh(
        this.ref.pointer,
        _sel_featuresInSourceLayersWithIdentifiers_predicate_,
        sourceLayerIdentifiers.ref.pointer,
        predicate?.ref.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  MLNVectorTileSource init() {
    final _ret =
        _objc_msgSend_1x359cv(this.ref.retainAndReturnPointer(), _sel_init);
    return MLNVectorTileSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// Returns a source initialized with an identifier.
  ///
  /// After initializing and configuring the source, add it to a map view’s style
  /// using the ``MLNStyle/addSource:`` method.
  ///
  /// @param identifier A string that uniquely identifies the source in the style to
  /// which it is added.
  /// @return An initialized source.
  MLNVectorTileSource initWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_62nh5j(this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_, identifier.ref.pointer);
    return MLNVectorTileSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static MLNVectorTileSource new1() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNVectorTileSource, _sel_new);
    return MLNVectorTileSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static MLNVectorTileSource allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_hzlb60(
        _class_MLNVectorTileSource, _sel_allocWithZone_, zone);
    return MLNVectorTileSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static MLNVectorTileSource alloc() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNVectorTileSource, _sel_alloc);
    return MLNVectorTileSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// self
  MLNVectorTileSource self() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_self);
    return MLNVectorTileSource.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// retain
  MLNVectorTileSource retain() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_retain);
    return MLNVectorTileSource.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// autorelease
  MLNVectorTileSource autorelease() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_autorelease);
    return MLNVectorTileSource.castFromPointer(_ret,
        retain: true, release: true);
  }
}

late final _class_MLNShapeSource = objc.getClass("MLNShapeSource");
late final _sel_initWithIdentifier_URL_options_ =
    objc.registerName("initWithIdentifier:URL:options:");
late final _sel_initWithIdentifier_shape_options_ =
    objc.registerName("initWithIdentifier:shape:options:");
late final _sel_initWithIdentifier_features_options_ =
    objc.registerName("initWithIdentifier:features:options:");
late final _sel_initWithIdentifier_shapes_options_ =
    objc.registerName("initWithIdentifier:shapes:options:");
late final _sel_shape = objc.registerName("shape");
late final _sel_setShape_ = objc.registerName("setShape:");
late final _sel_URL = objc.registerName("URL");
late final _sel_setURL_ = objc.registerName("setURL:");
late final _sel_featuresMatchingPredicate_ =
    objc.registerName("featuresMatchingPredicate:");
late final _sel_leavesOfCluster_offset_limit_ =
    objc.registerName("leavesOfCluster:offset:limit:");
final _objc_msgSend_x2b4hx = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int)>();
late final _sel_childrenOfCluster_ = objc.registerName("childrenOfCluster:");
late final _sel_zoomLevelForExpandingCluster_ =
    objc.registerName("zoomLevelForExpandingCluster:");
final _objc_msgSend_hlyk7w = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_hlyk7wFpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

/// ``MLNShapeSource`` is a map content source that supplies vector shapes to be
/// shown on the map. The shapes may be instances of ``MLNShape`` or ``MLNShape``,
/// or they may be defined by local or external
/// <a href="http://geojson.org/">GeoJSON</a> code. A shape source is added to an
/// ``MLNStyle`` object along with an ``MLNStyle`` object. The vector style
/// layer defines the appearance of any content supplied by the shape source. You
/// can update a shape source by setting its `shape` or `URL` property.
///
/// ``MLNShapeSource`` is optimized for data sets that change dynamically and fit
/// completely in memory. For large data sets that do not fit completely in memory,
/// use the ``MLNComputedShapeSource`` or ``MLNComputedShapeSource`` class.
///
/// Each
/// <a href="https://maplibre.org/maplibre-style-spec/#sources-geojson"><code>geojson</code></a>
/// source defined by the style JSON file is represented at runtime by an
/// ``MLNShapeSource`` object that you can use to refine the map’s content and
/// initialize new style layers. You can also add and remove sources dynamically
/// using methods such as ``MLNStyle/addSource:`` and
/// ``MLNStyle/sourceWithIdentifier:``.
///
/// Any vector style layer initialized with a shape source should have a `nil`
/// value in its `sourceLayerIdentifier` property.
///
/// ### Example
///
/// ```swift
/// var coordinates: [CLLocationCoordinate2D] = [
/// CLLocationCoordinate2D(latitude: 37.77, longitude: -122.42),
/// CLLocationCoordinate2D(latitude: 38.91, longitude: -77.04),
/// ]
/// let polyline = MLNPolylineFeature(coordinates: &coordinates, count: UInt(coordinates.count))
/// let source = MLNShapeSource(identifier: "lines", features: [polyline], options: nil)
/// mapView.style?.addSource(source)
/// ```
///
/// #### Related examples
/// TODO: Cluster point data
/// TODO: Use images to cluster point data
/// TODO: Add live data
/// Learn how to add data to your map using this ``MLNSource`` object.
class MLNShapeSource extends MLNSource {
  MLNShapeSource._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNShapeSource] that points to the same underlying object as [other].
  MLNShapeSource.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNShapeSource] that wraps the given raw object pointer.
  MLNShapeSource.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [MLNShapeSource].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_69e0x1(
        obj.ref.pointer, _sel_isKindOfClass_, _class_MLNShapeSource);
  }

  /// Returns a shape source with an identifier, URL, and dictionary of options for
  /// the source.
  ///
  /// This class supports the following options: ``MLNShapeSourceOptionClustered``,
  /// ``MLNShapeSourceOptionClusterRadius``,
  /// ``MLNShapeSourceOptionMaximumZoomLevelForClustering``,
  /// ``MLNShapeSourceOptionMinimumZoomLevel``, ``MLNShapeSourceOptionMinimumZoomLevel``,
  /// ``MLNShapeSourceOptionBuffer``, and
  /// ``MLNShapeSourceOptionSimplificationTolerance``. Shapes provided by a shape
  /// source are not clipped or wrapped automatically.
  ///
  /// @param identifier A string that uniquely identifies the source.
  /// @param url An HTTP(S) URL, absolute file URL, or local file URL relative to the
  /// current application’s resource bundle.
  /// @param options An `NSDictionary` of options for this source.
  /// @return An initialized shape source.
  ///
  /// #### Related examples
  /// TODO: Add live data, learn how to add live data to your map by
  /// updating the an ``MLNShapeSource`` object's `URL` property.
  MLNShapeSource initWithIdentifier_URL_options_(
      objc.NSString identifier, objc.NSURL url, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_582s3n(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_URL_options_,
        identifier.ref.pointer,
        url.ref.pointer,
        options?.ref.pointer ?? ffi.nullptr);
    return MLNShapeSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// Returns a shape source with an identifier, a shape, and dictionary of options
  /// for the source.
  ///
  /// This class supports the following options: ``MLNShapeSourceOptionClustered``,
  /// ``MLNShapeSourceOptionClusterRadius``,
  /// ``MLNShapeSourceOptionMaximumZoomLevelForClustering``,
  /// ``MLNShapeSourceOptionMinimumZoomLevel``, ``MLNShapeSourceOptionMinimumZoomLevel``,
  /// ``MLNShapeSourceOptionBuffer``, and
  /// ``MLNShapeSourceOptionSimplificationTolerance``. Shapes provided by a shape
  /// source are not clipped or wrapped automatically.
  ///
  /// To specify attributes about the shape, use an instance of an ``MLNShape``
  /// subclass that conforms to the ``MLNFeature`` protocol, such as ``MLNFeature``.
  /// To include multiple shapes in the source, use an ``MLNShapeCollection`` or
  /// ``MLNShapeCollectionFeature`` object, or use the
  /// `-initWithIdentifier:features:options:` or
  /// `-initWithIdentifier:shapes:options:` methods.
  ///
  /// To create a shape from GeoJSON source code, use the
  /// ``MLNShape/shapeWithData:encoding:error:`` method.
  ///
  /// @param identifier A string that uniquely identifies the source.
  /// @param shape A concrete subclass of ``MLNShape``
  /// @param options An `NSDictionary` of options for this source.
  /// @return An initialized shape source.
  ///
  /// #### Related examples
  /// TODO: Animate a line, learn how to animate line data by continously
  /// updating an ``MLNShapeSource``'s `shape` attribute.
  MLNShapeSource initWithIdentifier_shape_options_(
      objc.NSString identifier, MLNShape? shape, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_582s3n(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_shape_options_,
        identifier.ref.pointer,
        shape?.ref.pointer ?? ffi.nullptr,
        options?.ref.pointer ?? ffi.nullptr);
    return MLNShapeSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// Returns a shape source with an identifier, an array of features, and a dictionary
  /// of options for the source.
  ///
  /// This class supports the following options: ``MLNShapeSourceOptionClustered``,
  /// ``MLNShapeSourceOptionClusterRadius``,
  /// ``MLNShapeSourceOptionMaximumZoomLevelForClustering``,
  /// ``MLNShapeSourceOptionMinimumZoomLevel``, ``MLNShapeSourceOptionMinimumZoomLevel``,
  /// ``MLNShapeSourceOptionBuffer``, and
  /// ``MLNShapeSourceOptionSimplificationTolerance``. Shapes provided by a shape
  /// source are not clipped or wrapped automatically.
  ///
  /// Unlike `-initWithIdentifier:shapes:options:`, this method accepts ``MLNFeature``
  /// instances, such as ``MLNPointFeature`` objects, whose attributes you can use when
  /// applying a predicate to ``MLNVectorStyleLayer`` or configuring a style layer’s
  /// appearance.
  ///
  /// To create a shape from GeoJSON source code, use the
  /// ``MLNShape/shapeWithData:encoding:error:`` method.
  ///
  /// @param identifier A string that uniquely identifies the source.
  /// @param features An array of objects that conform to the MLNFeature protocol.
  /// @param options An `NSDictionary` of options for this source.
  /// @return An initialized shape source.
  MLNShapeSource initWithIdentifier_features_options_(objc.NSString identifier,
      objc.NSArray features, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_582s3n(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_features_options_,
        identifier.ref.pointer,
        features.ref.pointer,
        options?.ref.pointer ?? ffi.nullptr);
    return MLNShapeSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// Returns a shape source with an identifier, an array of shapes, and a dictionary of
  /// options for the source.
  ///
  /// This class supports the following options: ``MLNShapeSourceOptionClustered``,
  /// ``MLNShapeSourceOptionClusterRadius``,
  /// ``MLNShapeSourceOptionMaximumZoomLevelForClustering``,
  /// ``MLNShapeSourceOptionMinimumZoomLevel``, ``MLNShapeSourceOptionMinimumZoomLevel``,
  /// ``MLNShapeSourceOptionBuffer``, and
  /// ``MLNShapeSourceOptionSimplificationTolerance``. Shapes provided by a shape
  /// source are not clipped or wrapped automatically.
  ///
  /// Any ``MLNFeature`` instance passed into this initializer is treated as an ordinary
  /// shape, causing any attributes to be inaccessible to an ``MLNVectorStyleLayer`` when
  /// evaluating a predicate or configuring certain layout or paint attributes. To
  /// preserve the attributes associated with each feature, use the
  /// `-initWithIdentifier:features:options:` method instead.
  ///
  /// To create a shape from GeoJSON source code, use the
  /// ``MLNShape/shapeWithData:encoding:error:`` method.
  ///
  /// @param identifier A string that uniquely identifies the source.
  /// @param shapes An array of shapes; each shape is a member of a concrete subclass of MLNShape.
  /// @param options An `NSDictionary` of options for this source.
  /// @return An initialized shape source.
  MLNShapeSource initWithIdentifier_shapes_options_(objc.NSString identifier,
      objc.NSArray shapes, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_582s3n(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_shapes_options_,
        identifier.ref.pointer,
        shapes.ref.pointer,
        options?.ref.pointer ?? ffi.nullptr);
    return MLNShapeSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// The contents of the source. A shape can represent a GeoJSON geometry, a
  /// feature, or a collection of features.
  ///
  /// If the receiver was initialized using `-initWithIdentifier:URL:options:`, this
  /// property is set to `nil`. This property is unavailable until the receiver is
  /// passed into ``MLNStyle/addSource:``.
  ///
  /// You can get/set the shapes within a collection via this property. Actions must
  /// be performed on the application's main thread.
  MLNShape? get shape {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_shape);
    return _ret.address == 0
        ? null
        : MLNShape.castFromPointer(_ret, retain: true, release: true);
  }

  /// The contents of the source. A shape can represent a GeoJSON geometry, a
  /// feature, or a collection of features.
  ///
  /// If the receiver was initialized using `-initWithIdentifier:URL:options:`, this
  /// property is set to `nil`. This property is unavailable until the receiver is
  /// passed into ``MLNStyle/addSource:``.
  ///
  /// You can get/set the shapes within a collection via this property. Actions must
  /// be performed on the application's main thread.
  set shape(MLNShape? value) {
    return _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_setShape_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// The URL to the GeoJSON document that specifies the contents of the source.
  ///
  /// If the receiver was initialized using `-initWithIdentifier:shape:options:`,
  /// this property is set to `nil`.
  objc.NSURL? get URL {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_URL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// The URL to the GeoJSON document that specifies the contents of the source.
  ///
  /// If the receiver was initialized using `-initWithIdentifier:shape:options:`,
  /// this property is set to `nil`.
  set URL(objc.NSURL? value) {
    return _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_setURL_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// Returns an array of map features for this source, filtered by the given
  /// predicate.
  ///
  /// Each object in the returned array represents a feature for the current style
  /// and provides access to attributes specified via the `shape` property.
  ///
  /// Features come from tiled GeoJSON data that is converted to tiles internally,
  /// so feature geometries are clipped at tile boundaries and features
  /// may appear duplicated across tiles. For example, suppose this source contains a
  /// long polyline representing a road. The resulting array includes those parts of
  /// the road that lie within the map tiles that the source has loaded, even if the
  /// road extends into other tiles. The portion of the road within each map tile is
  /// included individually.
  ///
  /// Returned features may not necessarily be visible to the user at the time they
  /// are loaded: the style may lack a layer that draws the features in question. To
  /// obtain only _visible_ features, use the
  /// ``MLNMapView/visibleFeaturesAtPoint:inStyleLayersWithIdentifiers:predicate:``
  /// or
  /// ``MLNMapView/visibleFeaturesInRect:inStyleLayersWithIdentifiers:predicate:``
  /// method.
  ///
  /// @param predicate A predicate to filter the returned features. Use `nil` to
  /// include all features in the source.
  /// @return An array of objects conforming to the ``MLNFeature`` protocol that
  /// represent features in the source that match the predicate.
  objc.NSArray featuresMatchingPredicate_(NSPredicate? predicate) {
    final _ret = _objc_msgSend_62nh5j(this.ref.pointer,
        _sel_featuresMatchingPredicate_, predicate?.ref.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns an array of map features that are the leaves of the specified cluster.
  /// ("Leaves" are the original points that belong to the cluster.)
  ///
  /// This method supports pagination; you supply an offset (number of features to skip)
  /// and a maximum number of features to return.
  ///
  /// @param cluster An object of type ``MLNPointFeatureCluster`` (that conforms to the
  /// ``MLNPointFeatureCluster`` protocol).
  /// @param offset Number of features to skip.
  /// @param limit The maximum number of features to return
  ///
  /// @return An array of objects that conform to the ``MLNFeature`` protocol.
  objc.NSArray leavesOfCluster_offset_limit_(
      MLNPointFeatureCluster cluster, int offset, int limit) {
    final _ret = _objc_msgSend_x2b4hx(this.ref.pointer,
        _sel_leavesOfCluster_offset_limit_, cluster.ref.pointer, offset, limit);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns an array of map features that are the immediate children of the specified
  /// cluster *on the next zoom level*. The may include features that also conform to
  /// the ``MLNCluster`` protocol (currently only objects of type ``MLNCluster``).
  ///
  /// @param cluster An object of type ``MLNPointFeatureCluster`` (that conforms to the
  /// ``MLNPointFeatureCluster`` protocol).
  ///
  /// @return An array of objects that conform to the ``MLNFeature`` protocol.
  ///
  /// > Note: The returned array may contain the `cluster` that was passed in, if the next
  /// zoom level doesn't match the zoom level for expanding that cluster. See
  /// ``MLNShapeSource/zoomLevelForExpandingCluster:``.
  objc.NSArray childrenOfCluster_(MLNPointFeatureCluster cluster) {
    final _ret = _objc_msgSend_62nh5j(
        this.ref.pointer, _sel_childrenOfCluster_, cluster.ref.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns the zoom level at which the given cluster expands.
  ///
  /// @param cluster An object of type ``MLNPointFeatureCluster`` (that conforms to the
  /// ``MLNPointFeatureCluster`` protocol).
  ///
  /// @return Zoom level. This should be >= 0; any negative return value should be
  /// considered an error.
  double zoomLevelForExpandingCluster_(MLNPointFeatureCluster cluster) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_hlyk7wFpret(this.ref.pointer,
            _sel_zoomLevelForExpandingCluster_, cluster.ref.pointer)
        : _objc_msgSend_hlyk7w(this.ref.pointer,
            _sel_zoomLevelForExpandingCluster_, cluster.ref.pointer);
  }

  /// init
  MLNShapeSource init() {
    final _ret =
        _objc_msgSend_1x359cv(this.ref.retainAndReturnPointer(), _sel_init);
    return MLNShapeSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// Returns a source initialized with an identifier.
  ///
  /// After initializing and configuring the source, add it to a map view’s style
  /// using the ``MLNStyle/addSource:`` method.
  ///
  /// @param identifier A string that uniquely identifies the source in the style to
  /// which it is added.
  /// @return An initialized source.
  MLNShapeSource initWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_62nh5j(this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_, identifier.ref.pointer);
    return MLNShapeSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static MLNShapeSource new1() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNShapeSource, _sel_new);
    return MLNShapeSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static MLNShapeSource allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_hzlb60(_class_MLNShapeSource, _sel_allocWithZone_, zone);
    return MLNShapeSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static MLNShapeSource alloc() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNShapeSource, _sel_alloc);
    return MLNShapeSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// self
  MLNShapeSource self() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_self);
    return MLNShapeSource.castFromPointer(_ret, retain: true, release: true);
  }

  /// retain
  MLNShapeSource retain() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_retain);
    return MLNShapeSource.castFromPointer(_ret, retain: true, release: true);
  }

  /// autorelease
  MLNShapeSource autorelease() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_autorelease);
    return MLNShapeSource.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_MLNComputedShapeSource =
    objc.getClass("MLNComputedShapeSource");
late final _sel_initWithIdentifier_options_ =
    objc.registerName("initWithIdentifier:options:");
late final _sel_initWithIdentifier_dataSource_options_ =
    objc.registerName("initWithIdentifier:dataSource:options:");
late final _sel_invalidateBounds_ = objc.registerName("invalidateBounds:");
late final _sel_invalidateTileAtX_y_zoomLevel_ =
    objc.registerName("invalidateTileAtX:y:zoomLevel:");
final _objc_msgSend_1r0ktp8 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int, int)>();
late final _sel_setFeatures_inTileAtX_y_zoomLevel_ =
    objc.registerName("setFeatures:inTileAtX:y:zoomLevel:");
final _objc_msgSend_6vicua = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            int)>();
late final _sel_dataSource = objc.registerName("dataSource");
late final _sel_setDataSource_ = objc.registerName("setDataSource:");
late final _sel_requestQueue = objc.registerName("requestQueue");

/// ``MLNComputedShapeSource`` is a map content source that supplies vector shapes,
/// one tile at a time, to be shown on the map on demand. You implement a class
/// conforming to the ``MLNComputedShapeSourceDataSource`` protocol that returns
/// instances of ``MLNShape`` or ``MLNShape``, then add a computed shape source to an
/// ``MLNStyle`` object along with an ``MLNStyle`` object. The vector style
/// layer defines the appearance of any content supplied by the computed shape
/// source.
///
/// ``MLNComputedShapeSource`` is similar to ``MLNComputedShapeSource`` but is optimized for
/// data sets that change dynamically or are too large to fit completely in memory.
/// It is also useful for data that is divided into tiles in a format other than
/// <a href="https://www.mapbox.com/vector-tiles/">Mapbox Vector Tiles</a>. For
/// <a href="http://geojson.org/">GeoJSON</a> data, use the ``MLNShapeSource`` class.
/// For static tiles or Mapbox Vector Tiles, use the ``MLNVectorTileSource`` class.
///
/// You can add and remove sources dynamically using methods such as
/// ``MLNStyle/addSource:`` and ``MLNStyle/sourceWithIdentifier:``. This class
/// cannot be represented in a style JSON file; you must add it ot the style at
/// runtime.
class MLNComputedShapeSource extends MLNSource {
  MLNComputedShapeSource._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNComputedShapeSource] that points to the same underlying object as [other].
  MLNComputedShapeSource.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNComputedShapeSource] that wraps the given raw object pointer.
  MLNComputedShapeSource.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [MLNComputedShapeSource].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_69e0x1(
        obj.ref.pointer, _sel_isKindOfClass_, _class_MLNComputedShapeSource);
  }

  /// Returns a custom shape data source initialized with an identifier, and a
  /// dictionary of options for the source according to the
  /// <a href="https://maplibre.org/maplibre-style-spec/#sources-geojson">style
  /// specification</a>.
  ///
  /// This class supports the following options:
  /// ``MLNShapeSourceOptionMinimumZoomLevel``, ``MLNShapeSourceOptionMinimumZoomLevel``,
  /// ``MLNShapeSourceOptionBuffer``,
  /// ``MLNShapeSourceOptionSimplificationTolerance``,
  /// ``MLNShapeSourceOptionWrapsCoordinates``, and
  /// ``MLNShapeSourceOptionClipsCoordinates``. Shapes provided by a computed
  /// shape source cannot be clustered.
  ///
  /// @param identifier A string that uniquely identifies the source.
  /// @param options An `NSDictionary` of options for this source.
  MLNComputedShapeSource initWithIdentifier_options_(
      objc.NSString identifier, objc.NSDictionary? options) {
    final _ret = _objc_msgSend_rsfdlh(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_options_,
        identifier.ref.pointer,
        options?.ref.pointer ?? ffi.nullptr);
    return MLNComputedShapeSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// Returns a custom shape data source initialized with an identifier, data source, and a
  /// dictionary of options for the source according to the
  /// <a href="https://maplibre.org/maplibre-style-spec/#sources-geojson">style
  /// specification</a>.
  ///
  /// This class supports the following options:
  /// ``MLNShapeSourceOptionMinimumZoomLevel``, ``MLNShapeSourceOptionMinimumZoomLevel``,
  /// ``MLNShapeSourceOptionBuffer``,
  /// ``MLNShapeSourceOptionSimplificationTolerance``,
  /// ``MLNShapeSourceOptionWrapsCoordinates``, and
  /// ``MLNShapeSourceOptionClipsCoordinates``. Shapes provided by a computed shape
  /// source cannot be clustered.
  ///
  /// @param identifier A string that uniquely identifies the source.
  /// @param options An `NSDictionary` of options for this source.
  MLNComputedShapeSource initWithIdentifier_dataSource_options_(
      objc.NSString identifier,
      objc.ObjCObjectBase dataSource,
      objc.NSDictionary? options) {
    final _ret = _objc_msgSend_582s3n(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_dataSource_options_,
        identifier.ref.pointer,
        dataSource.ref.pointer,
        options?.ref.pointer ?? ffi.nullptr);
    return MLNComputedShapeSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// Invalidates all the features and properties intersecting with or contained in
  /// the specified bounds. New fetch requests will immediately be invoked on the
  /// ``MLNComputedShapeSourceDataSource``.
  /// @param bounds  Coordinate bounds to invalidate.
  void invalidateBounds_(MLNCoordinateBounds bounds) {
    _objc_msgSend_9ay59k(this.ref.pointer, _sel_invalidateBounds_, bounds);
  }

  /// Invalidates all the feautres and properties of a given tile. A new fetch request
  /// will immediately be invoked on the ``MLNComputedShapeSourceDataSource``.
  /// @param x Tile X coordinate.
  /// @param y Tile Y coordinate.
  /// @param zoomLevel Tile zoom level.
  void invalidateTileAtX_y_zoomLevel_(int x, int y, int zoomLevel) {
    _objc_msgSend_1r0ktp8(
        this.ref.pointer, _sel_invalidateTileAtX_y_zoomLevel_, x, y, zoomLevel);
  }

  /// Set a new set of features for a tile. This method can be invkoed from background threads.
  /// For best performance, use this method only to update tiles that have already been requested
  /// through ``MLNComputedShapeSourceDataSource/``
  /// @param features  Features for the tile.
  /// @param x         Tile X coordinate.
  /// @param y         Tile Y coordinate.
  /// @param zoomLevel Tile zoom level.
  void setFeatures_inTileAtX_y_zoomLevel_(
      objc.NSArray features, int x, int y, int zoomLevel) {
    _objc_msgSend_6vicua(
        this.ref.pointer,
        _sel_setFeatures_inTileAtX_y_zoomLevel_,
        features.ref.pointer,
        x,
        y,
        zoomLevel);
  }

  /// An object that implements the ``MLNComputedShapeSourceDataSource`` protocol that will be queried
  /// for tile data.
  objc.ObjCObjectBase? get dataSource {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_dataSource);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// An object that implements the ``MLNComputedShapeSourceDataSource`` protocol that will be queried
  /// for tile data.
  set dataSource(objc.ObjCObjectBase? value) {
    return _objc_msgSend_1jdvcbf(this.ref.pointer, _sel_setDataSource_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// A queue that calls to the data source will be made on.
  NSOperationQueue get requestQueue {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_requestQueue);
    return NSOperationQueue.castFromPointer(_ret, retain: true, release: true);
  }

  /// init
  MLNComputedShapeSource init() {
    final _ret =
        _objc_msgSend_1x359cv(this.ref.retainAndReturnPointer(), _sel_init);
    return MLNComputedShapeSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// Returns a source initialized with an identifier.
  ///
  /// After initializing and configuring the source, add it to a map view’s style
  /// using the ``MLNStyle/addSource:`` method.
  ///
  /// @param identifier A string that uniquely identifies the source in the style to
  /// which it is added.
  /// @return An initialized source.
  MLNComputedShapeSource initWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_62nh5j(this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_, identifier.ref.pointer);
    return MLNComputedShapeSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static MLNComputedShapeSource new1() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNComputedShapeSource, _sel_new);
    return MLNComputedShapeSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static MLNComputedShapeSource allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_hzlb60(
        _class_MLNComputedShapeSource, _sel_allocWithZone_, zone);
    return MLNComputedShapeSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static MLNComputedShapeSource alloc() {
    final _ret =
        _objc_msgSend_1x359cv(_class_MLNComputedShapeSource, _sel_alloc);
    return MLNComputedShapeSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// self
  MLNComputedShapeSource self() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_self);
    return MLNComputedShapeSource.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// retain
  MLNComputedShapeSource retain() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_retain);
    return MLNComputedShapeSource.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// autorelease
  MLNComputedShapeSource autorelease() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_autorelease);
    return MLNComputedShapeSource.castFromPointer(_ret,
        retain: true, release: true);
  }
}

late final _class_MLNImageSource = objc.getClass("MLNImageSource");
late final _sel_initWithIdentifier_coordinateQuad_URL_ =
    objc.registerName("initWithIdentifier:coordinateQuad:URL:");
final _objc_msgSend_1d4cwk4 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                MLNCoordinateQuad,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            MLNCoordinateQuad,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithIdentifier_coordinateQuad_image_ =
    objc.registerName("initWithIdentifier:coordinateQuad:image:");
late final _sel_image = objc.registerName("image");
late final _sel_setImage_ = objc.registerName("setImage:");
late final _sel_coordinates = objc.registerName("coordinates");
final _objc_msgSend_1ua371c = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            MLNCoordinateQuad Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        MLNCoordinateQuad Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1ua371cStret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<MLNCoordinateQuad>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<MLNCoordinateQuad>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCoordinates_ = objc.registerName("setCoordinates:");
final _objc_msgSend_1wvd2xm = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, MLNCoordinateQuad)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, MLNCoordinateQuad)>();

/// ``MLNImageSource`` is a content source that is used for a georeferenced raster
/// image to be shown on the map. The georeferenced image scales and rotates as the
/// user zooms and rotates the map. Images may also be used as icons or patterns
/// in a style layer. To register an image for use as an icon or pattern,
/// use the ``MLNStyle/setImage:forName:`` method. To configure a point
/// annotation’s image, use the ``MLNAnnotationImage`` class.
///
/// The geographic location of the raster image content, supplied with
/// ``MLNCoordinateQuad``, can be non-axis aligned.
/// ``MLNImageSource`` supports raster content from `NSURL`, `NSImage` (macOS), or
/// `UIImage` (iOS).
/// An image source is added to an ``MLNStyle`` object along with one or more
/// ``MLNRasterStyleLayer`` objects. Use a raster style layer to control the
/// appearance of content supplied by the image source.
///
/// Each
/// <a href="https://maplibre.org/maplibre-style-spec/#sources-image"><code>image</code></a>
/// source defined by the style JSON file is represented at runtime by an
/// ``MLNImageSource`` object that you can use to initialize new style layers. You
/// can also add and remove sources dynamically using methods such as
/// ``MLNStyle/addSource:`` and ``MLNStyle/sourceWithIdentifier:``.
///
/// ### Example
///
/// ```swift
/// let coordinates = MLNCoordinateQuad(
/// topLeft: CLLocationCoordinate2D(latitude: 46.437, longitude: -80.425),
/// bottomLeft: CLLocationCoordinate2D(latitude: 37.936, longitude: -80.425),
/// bottomRight: CLLocationCoordinate2D(latitude: 37.936, longitude: -71.516),
/// topRight: CLLocationCoordinate2D(latitude: 46.437, longitude: -71.516))
/// let source = MLNImageSource(identifier: "radar", coordinateQuad: coordinates, url: URL(string:
/// "https://maplibre.org/maplibre-gl-js-docs/assets/radar.gif")!) mapView.style?.addSource(source)
/// ```
///
/// #### Related examples
/// TODO: Add an image, learn how to add an image to your map using ``MLNImageSource``.
class MLNImageSource extends MLNSource {
  MLNImageSource._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNImageSource] that points to the same underlying object as [other].
  MLNImageSource.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNImageSource] that wraps the given raw object pointer.
  MLNImageSource.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [MLNImageSource].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_69e0x1(
        obj.ref.pointer, _sel_isKindOfClass_, _class_MLNImageSource);
  }

  /// Returns a georeferenced image source with an identifier, coordinates and a URL.
  ///
  /// @param identifier A string that uniquely identifies the source.
  /// @param coordinateQuad the top left, top right, bottom right, and bottom left coordinates for the
  /// image.
  /// @param url An HTTP(S) URL, absolute file URL, or local file URL relative to the
  /// current application’s resource bundle.
  /// @return An initialized shape source.
  MLNImageSource initWithIdentifier_coordinateQuad_URL_(
      objc.NSString identifier,
      MLNCoordinateQuad coordinateQuad,
      objc.NSURL url) {
    final _ret = _objc_msgSend_1d4cwk4(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_coordinateQuad_URL_,
        identifier.ref.pointer,
        coordinateQuad,
        url.ref.pointer);
    return MLNImageSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// Returns a georeferenced image source with an identifier, coordinates and an image.
  ///
  /// @param identifier A string that uniquely identifies the source.
  /// @param coordinateQuad The top left, top right, bottom right, and bottom left coordinates for the
  /// image.
  /// @param image The image to display for the source.
  /// @return An initialized shape source.
  MLNImageSource initWithIdentifier_coordinateQuad_image_(
      objc.NSString identifier,
      MLNCoordinateQuad coordinateQuad,
      NSImage image) {
    final _ret = _objc_msgSend_1d4cwk4(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_coordinateQuad_image_,
        identifier.ref.pointer,
        coordinateQuad,
        image.ref.pointer);
    return MLNImageSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// The URL to the source image.
  ///
  /// If the receiver was initialized using `-initWithIdentifier:coordinateQuad:image:` or
  /// the `image` property is set, this property is set to `nil`.
  objc.NSURL? get URL {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_URL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// The URL to the source image.
  ///
  /// If the receiver was initialized using `-initWithIdentifier:coordinateQuad:image:` or
  /// the `image` property is set, this property is set to `nil`.
  set URL(objc.NSURL? value) {
    return _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_setURL_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// The source image.
  ///
  /// If the receiver was initialized using `-initWithIdentifier:coordinateQuad:URL:` or if the `URL`
  /// property is set, this property is set to `nil`.
  NSImage? get image {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_image);
    return _ret.address == 0
        ? null
        : NSImage.castFromPointer(_ret, retain: true, release: true);
  }

  /// The source image.
  ///
  /// If the receiver was initialized using `-initWithIdentifier:coordinateQuad:URL:` or if the `URL`
  /// property is set, this property is set to `nil`.
  set image(NSImage? value) {
    return _objc_msgSend_1jdvcbf(
        this.ref.pointer, _sel_setImage_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// The coordinates at which the corners of the source image will be placed.
  MLNCoordinateQuad get coordinates {
    final _ptr = pkg_ffi.calloc<MLNCoordinateQuad>();
    objc.useMsgSendVariants
        ? _objc_msgSend_1ua371cStret(_ptr, this.ref.pointer, _sel_coordinates)
        : _ptr.ref = _objc_msgSend_1ua371c(this.ref.pointer, _sel_coordinates);
    final _finalizable = _ptr.cast<ffi.Uint8>().asTypedList(
        ffi.sizeOf<MLNCoordinateQuad>(),
        finalizer: pkg_ffi.calloc.nativeFree);
    return ffi.Struct.create<MLNCoordinateQuad>(_finalizable);
  }

  /// The coordinates at which the corners of the source image will be placed.
  set coordinates(MLNCoordinateQuad value) {
    return _objc_msgSend_1wvd2xm(this.ref.pointer, _sel_setCoordinates_, value);
  }

  /// init
  MLNImageSource init() {
    final _ret =
        _objc_msgSend_1x359cv(this.ref.retainAndReturnPointer(), _sel_init);
    return MLNImageSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// Returns a source initialized with an identifier.
  ///
  /// After initializing and configuring the source, add it to a map view’s style
  /// using the ``MLNStyle/addSource:`` method.
  ///
  /// @param identifier A string that uniquely identifies the source in the style to
  /// which it is added.
  /// @return An initialized source.
  MLNImageSource initWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_62nh5j(this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_, identifier.ref.pointer);
    return MLNImageSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static MLNImageSource new1() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNImageSource, _sel_new);
    return MLNImageSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static MLNImageSource allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_hzlb60(_class_MLNImageSource, _sel_allocWithZone_, zone);
    return MLNImageSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static MLNImageSource alloc() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNImageSource, _sel_alloc);
    return MLNImageSource.castFromPointer(_ret, retain: false, release: true);
  }

  /// self
  MLNImageSource self() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_self);
    return MLNImageSource.castFromPointer(_ret, retain: true, release: true);
  }

  /// retain
  MLNImageSource retain() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_retain);
    return MLNImageSource.castFromPointer(_ret, retain: true, release: true);
  }

  /// autorelease
  MLNImageSource autorelease() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_autorelease);
    return MLNImageSource.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_MLNRasterTileSource = objc.getClass("MLNRasterTileSource");
late final _sel_initWithIdentifier_configurationURL_tileSize_ =
    objc.registerName("initWithIdentifier:configurationURL:tileSize:");
final _objc_msgSend_1xdeq9e = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            double)>();

/// ``MLNRasterTileSource`` is a map content source that supplies raster image tiles
/// to be shown on the map. The location of and metadata about the tiles are
/// defined either by an option dictionary or by an external file that conforms to
/// the
/// <a href="https://github.com/mapbox/tilejson-spec/">TileJSON specification</a>.
/// A raster tile source is added to an ``MLNStyle`` object along with one or more
/// ``MLNRasterStyleLayer`` objects. Use a raster style layer to control the
/// appearance of content supplied by the raster tile source.
///
/// Each
/// <a href="https://maplibre.org/maplibre-style-spec/#sources-raster"><code>raster</code></a>
/// source defined by the style JSON file is represented at runtime by an
/// ``MLNRasterTileSource`` object that you can use to initialize new style layers. You
/// can also add and remove sources dynamically using methods such as
/// ``MLNStyle/addSource:`` and ``MLNStyle/sourceWithIdentifier:``.
///
/// ### Example
///
/// ```swift
/// let source = MLNRasterTileSource(identifier: "clouds", tileURLTemplates:
/// ["https://example.com/raster-tiles/{z}/{x}/{y}.png"], options: [ .minimumZoomLevel: 9,
/// .maximumZoomLevel: 16,
/// .tileSize: 512,
/// .attributionInfos: [
/// MLNAttributionInfo(title: NSAttributedString(string: "© Mapbox"), url: URL(string:
/// "https://mapbox.com"))
/// ]
/// ])
/// mapView.style?.addSource(source)
/// ```
///
/// #### Related examples
/// TODO: Add raster imagery, learn how to add a ``MLNRasterStyleLayer``
/// to your map using an ``MLNRasterTileSource``.
class MLNRasterTileSource extends MLNTileSource {
  MLNRasterTileSource._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNRasterTileSource] that points to the same underlying object as [other].
  MLNRasterTileSource.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNRasterTileSource] that wraps the given raw object pointer.
  MLNRasterTileSource.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [MLNRasterTileSource].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_69e0x1(
        obj.ref.pointer, _sel_isKindOfClass_, _class_MLNRasterTileSource);
  }

  /// Returns a raster tile source initialized with an identifier and configuration
  /// URL.
  ///
  /// After initializing and configuring the source, add it to a map view’s style
  /// using the ``MLNStyle/addSource:`` method.
  ///
  /// The URL may be a full HTTP or HTTPS URL or canonical URL. The URL should
  /// point to a JSON file that conforms to the
  /// <a href="https://github.com/mapbox/tilejson-spec/">TileJSON specification</a>.
  ///
  /// If a Mapbox URL is specified, this source uses a tile size of 256. For all
  /// other tilesets, the default value is 512. (See the
  /// ``MLNTileSourceOptionTileSize`` documentation for more information about tile
  /// sizes.) If you need to use a tile size other than the default, use the
  /// `-initWithIdentifier:configurationURL:tileSize:` method.
  ///
  /// @param identifier A string that uniquely identifies the source in the style to
  /// which it is added.
  /// @param configurationURL A URL to a TileJSON configuration file describing the
  /// source’s contents and other metadata.
  /// @return An initialized raster tile source.
  MLNRasterTileSource initWithIdentifier_configurationURL_(
      objc.NSString identifier, objc.NSURL configurationURL) {
    final _ret = _objc_msgSend_rsfdlh(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_configurationURL_,
        identifier.ref.pointer,
        configurationURL.ref.pointer);
    return MLNRasterTileSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// Returns a raster tile source initialized with an identifier, configuration URL,
  /// and tile size.
  ///
  /// After initializing and configuring the source, add it to a map view’s style
  /// using the ``MLNStyle/addSource:`` method.
  ///
  /// The URL may be a full HTTP or HTTPS URL or, canonical URL. The URL should
  /// point to a JSON file that conforms to the
  /// <a href="https://github.com/mapbox/tilejson-spec/">TileJSON specification</a>.
  ///
  /// @param identifier A string that uniquely identifies the source in the style to
  /// which it is added.
  /// @param configurationURL A URL to a TileJSON configuration file describing the
  /// source’s contents and other metadata.
  /// @param tileSize The width and height (measured in points) of each tiled image
  /// in the raster tile source. See the ``MLNTileSourceOptionTileSize``
  /// documentation for details.
  /// @return An initialized raster tile source.
  MLNRasterTileSource initWithIdentifier_configurationURL_tileSize_(
      objc.NSString identifier, objc.NSURL configurationURL, double tileSize) {
    final _ret = _objc_msgSend_1xdeq9e(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_configurationURL_tileSize_,
        identifier.ref.pointer,
        configurationURL.ref.pointer,
        tileSize);
    return MLNRasterTileSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// Returns a raster tile source initialized an identifier, tile URL templates, and
  /// options.
  ///
  /// Tile URL templates are strings that specify the URLs of the raster tile images
  /// to load. See the “<a href="../tile-url-templates.html">Tile URL Templates</a>”
  /// guide for information about the format of a tile URL template.
  ///
  /// After initializing and configuring the source, add it to a map view’s style
  /// using the ``MLNStyle/addSource:`` method.
  ///
  /// @param identifier A string that uniquely identifies the source in the style to
  /// which it is added.
  /// @param tileURLTemplates An array of tile URL template strings. Only the first
  /// string is used; any additional strings are ignored.
  /// @param options A dictionary containing configuration options. See
  /// ``MLNTileSourceOption`` for available keys and values. Pass in `nil` to use
  /// the default values.
  /// @return An initialized tile source.
  MLNRasterTileSource initWithIdentifier_tileURLTemplates_options_(
      objc.NSString identifier,
      objc.NSArray tileURLTemplates,
      objc.NSDictionary? options) {
    final _ret = _objc_msgSend_582s3n(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_tileURLTemplates_options_,
        identifier.ref.pointer,
        tileURLTemplates.ref.pointer,
        options?.ref.pointer ?? ffi.nullptr);
    return MLNRasterTileSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// init
  MLNRasterTileSource init() {
    final _ret =
        _objc_msgSend_1x359cv(this.ref.retainAndReturnPointer(), _sel_init);
    return MLNRasterTileSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// Returns a source initialized with an identifier.
  ///
  /// After initializing and configuring the source, add it to a map view’s style
  /// using the ``MLNStyle/addSource:`` method.
  ///
  /// @param identifier A string that uniquely identifies the source in the style to
  /// which it is added.
  /// @return An initialized source.
  MLNRasterTileSource initWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_62nh5j(this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_, identifier.ref.pointer);
    return MLNRasterTileSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static MLNRasterTileSource new1() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNRasterTileSource, _sel_new);
    return MLNRasterTileSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static MLNRasterTileSource allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_hzlb60(
        _class_MLNRasterTileSource, _sel_allocWithZone_, zone);
    return MLNRasterTileSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static MLNRasterTileSource alloc() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNRasterTileSource, _sel_alloc);
    return MLNRasterTileSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// self
  MLNRasterTileSource self() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_self);
    return MLNRasterTileSource.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// retain
  MLNRasterTileSource retain() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_retain);
    return MLNRasterTileSource.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// autorelease
  MLNRasterTileSource autorelease() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_autorelease);
    return MLNRasterTileSource.castFromPointer(_ret,
        retain: true, release: true);
  }
}

late final _class_MLNRasterDEMSource = objc.getClass("MLNRasterDEMSource");

/// ``MLNRasterDEMSource`` is a map content source that supplies rasterized
/// <a href="https://en.wikipedia.org/wiki/Digital_elevation_model">digital elevation model</a>
/// (DEM) tiles to be shown on the map. The location of and metadata about the
/// tiles are defined either by an option dictionary or by an external file that
/// conforms to the
/// <a href="https://github.com/mapbox/tilejson-spec/">TileJSON specification</a>.
/// A raster DEM source is added to an ``MLNStyle`` object along with one or more
/// ``MLNHillshadeStyleLayer`` objects. Use a hillshade style layer to control the
/// appearance of content supplied by the raster DEM source.
///
/// Each
/// <a href="https://maplibre.org/maplibre-style-spec/#sources-raster-dem"><code>raster-dem</code></a>
/// source defined by the style JSON file is represented at runtime by an
/// ``MLNRasterDEMSource`` object that you can use to initialize new style layers.
/// You can also add and remove sources dynamically using methods such as
/// ``MLNStyle/addSource:`` and ``MLNStyle/sourceWithIdentifier:``.
///
/// Currently, raster DEM sources only support the format used by
/// <a
/// href="https://docs.mapbox.com/help/troubleshooting/access-elevation-data/#mapbox-terrain-rgb">Mapbox
/// Terrain-RGB</a>.
///
/// ### Example
///
/// ```swift
/// let terrainRGBURL = URL(string: "maptiler://sources/terrain-rgb")!
/// let source = MLNRasterDEMSource(identifier: "hills", configurationURL: terrainRGBURL)
/// mapView.style?.addSource(source)
/// ```
class MLNRasterDEMSource extends MLNRasterTileSource {
  MLNRasterDEMSource._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [MLNRasterDEMSource] that points to the same underlying object as [other].
  MLNRasterDEMSource.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [MLNRasterDEMSource] that wraps the given raw object pointer.
  MLNRasterDEMSource.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [MLNRasterDEMSource].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_69e0x1(
        obj.ref.pointer, _sel_isKindOfClass_, _class_MLNRasterDEMSource);
  }

  /// Returns a raster tile source initialized with an identifier and configuration
  /// URL.
  ///
  /// After initializing and configuring the source, add it to a map view’s style
  /// using the ``MLNStyle/addSource:`` method.
  ///
  /// The URL may be a full HTTP or HTTPS URL or canonical URL. The URL should
  /// point to a JSON file that conforms to the
  /// <a href="https://github.com/mapbox/tilejson-spec/">TileJSON specification</a>.
  ///
  /// If a Mapbox URL is specified, this source uses a tile size of 256. For all
  /// other tilesets, the default value is 512. (See the
  /// ``MLNTileSourceOptionTileSize`` documentation for more information about tile
  /// sizes.) If you need to use a tile size other than the default, use the
  /// `-initWithIdentifier:configurationURL:tileSize:` method.
  ///
  /// @param identifier A string that uniquely identifies the source in the style to
  /// which it is added.
  /// @param configurationURL A URL to a TileJSON configuration file describing the
  /// source’s contents and other metadata.
  /// @return An initialized raster tile source.
  MLNRasterDEMSource initWithIdentifier_configurationURL_(
      objc.NSString identifier, objc.NSURL configurationURL) {
    final _ret = _objc_msgSend_rsfdlh(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_configurationURL_,
        identifier.ref.pointer,
        configurationURL.ref.pointer);
    return MLNRasterDEMSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// Returns a raster tile source initialized with an identifier, configuration URL,
  /// and tile size.
  ///
  /// After initializing and configuring the source, add it to a map view’s style
  /// using the ``MLNStyle/addSource:`` method.
  ///
  /// The URL may be a full HTTP or HTTPS URL or, canonical URL. The URL should
  /// point to a JSON file that conforms to the
  /// <a href="https://github.com/mapbox/tilejson-spec/">TileJSON specification</a>.
  ///
  /// @param identifier A string that uniquely identifies the source in the style to
  /// which it is added.
  /// @param configurationURL A URL to a TileJSON configuration file describing the
  /// source’s contents and other metadata.
  /// @param tileSize The width and height (measured in points) of each tiled image
  /// in the raster tile source. See the ``MLNTileSourceOptionTileSize``
  /// documentation for details.
  /// @return An initialized raster tile source.
  MLNRasterDEMSource initWithIdentifier_configurationURL_tileSize_(
      objc.NSString identifier, objc.NSURL configurationURL, double tileSize) {
    final _ret = _objc_msgSend_1xdeq9e(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_configurationURL_tileSize_,
        identifier.ref.pointer,
        configurationURL.ref.pointer,
        tileSize);
    return MLNRasterDEMSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// Returns a raster tile source initialized an identifier, tile URL templates, and
  /// options.
  ///
  /// Tile URL templates are strings that specify the URLs of the raster tile images
  /// to load. See the “<a href="../tile-url-templates.html">Tile URL Templates</a>”
  /// guide for information about the format of a tile URL template.
  ///
  /// After initializing and configuring the source, add it to a map view’s style
  /// using the ``MLNStyle/addSource:`` method.
  ///
  /// @param identifier A string that uniquely identifies the source in the style to
  /// which it is added.
  /// @param tileURLTemplates An array of tile URL template strings. Only the first
  /// string is used; any additional strings are ignored.
  /// @param options A dictionary containing configuration options. See
  /// ``MLNTileSourceOption`` for available keys and values. Pass in `nil` to use
  /// the default values.
  /// @return An initialized tile source.
  MLNRasterDEMSource initWithIdentifier_tileURLTemplates_options_(
      objc.NSString identifier,
      objc.NSArray tileURLTemplates,
      objc.NSDictionary? options) {
    final _ret = _objc_msgSend_582s3n(
        this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_tileURLTemplates_options_,
        identifier.ref.pointer,
        tileURLTemplates.ref.pointer,
        options?.ref.pointer ?? ffi.nullptr);
    return MLNRasterDEMSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// init
  MLNRasterDEMSource init() {
    final _ret =
        _objc_msgSend_1x359cv(this.ref.retainAndReturnPointer(), _sel_init);
    return MLNRasterDEMSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// Returns a source initialized with an identifier.
  ///
  /// After initializing and configuring the source, add it to a map view’s style
  /// using the ``MLNStyle/addSource:`` method.
  ///
  /// @param identifier A string that uniquely identifies the source in the style to
  /// which it is added.
  /// @return An initialized source.
  MLNRasterDEMSource initWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_62nh5j(this.ref.retainAndReturnPointer(),
        _sel_initWithIdentifier_, identifier.ref.pointer);
    return MLNRasterDEMSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static MLNRasterDEMSource new1() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNRasterDEMSource, _sel_new);
    return MLNRasterDEMSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static MLNRasterDEMSource allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_hzlb60(
        _class_MLNRasterDEMSource, _sel_allocWithZone_, zone);
    return MLNRasterDEMSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static MLNRasterDEMSource alloc() {
    final _ret = _objc_msgSend_1x359cv(_class_MLNRasterDEMSource, _sel_alloc);
    return MLNRasterDEMSource.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// self
  MLNRasterDEMSource self() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_self);
    return MLNRasterDEMSource.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// retain
  MLNRasterDEMSource retain() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_retain);
    return MLNRasterDEMSource.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// autorelease
  MLNRasterDEMSource autorelease() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_autorelease);
    return MLNRasterDEMSource.castFromPointer(_ret,
        retain: true, release: true);
  }
}
