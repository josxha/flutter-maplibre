// Autogenerated from Pigeon (v22.4.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Influences the y direction of the tile coordinates.
enum TileScheme: Int {
  /// Slippy map tilenames scheme.
  case xyz = 0
  /// OSGeo spec scheme.
  case tms = 1
}

/// The encoding used by this source. Mapbox Terrain RGB is used by default.
enum RasterDemEncoding: Int {
  /// Terrarium format PNG tiles.
  case terrarium = 0
  /// Mapbox Terrain RGB tiles.
  case mapbox = 1
  /// Decodes tiles using the redFactor, blueFactor, greenFactor, baseShift
  /// parameters.
  case custom = 2
}

/// A longitude/latitude coordinate object.
///
/// Generated class from Pigeon that represents data sent in messages.
struct LngLat {
  /// The longitude
  var lng: Double
  /// The latitude
  var lat: Double



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> LngLat? {
    let lng = pigeonVar_list[0] as! Double
    let lat = pigeonVar_list[1] as! Double

    return LngLat(
      lng: lng,
      lat: lat
    )
  }
  func toList() -> [Any?] {
    return [
      lng,
      lat,
    ]
  }
}

/// A pixel location / location on the device screen.
///
/// Generated class from Pigeon that represents data sent in messages.
struct ScreenLocation {
  /// The x coordinate
  var x: Double
  /// The y coordinate
  var y: Double



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ScreenLocation? {
    let x = pigeonVar_list[0] as! Double
    let y = pigeonVar_list[1] as! Double

    return ScreenLocation(
      x: x,
      y: y
    )
  }
  func toList() -> [Any?] {
    return [
      x,
      y,
    ]
  }
}

/// The current position of the map camera.
///
/// Generated class from Pigeon that represents data sent in messages.
struct MapCamera {
  var center: LngLat
  var zoom: Double
  var tilt: Double
  var bearing: Double



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MapCamera? {
    let center = pigeonVar_list[0] as! LngLat
    let zoom = pigeonVar_list[1] as! Double
    let tilt = pigeonVar_list[2] as! Double
    let bearing = pigeonVar_list[3] as! Double

    return MapCamera(
      center: center,
      zoom: zoom,
      tilt: tilt,
      bearing: bearing
    )
  }
  func toList() -> [Any?] {
    return [
      center,
      zoom,
      tilt,
      bearing,
    ]
  }
}

/// LatLng bound object
///
/// Generated class from Pigeon that represents data sent in messages.
struct LngLatBounds {
  var longitudeWest: Double
  var longitudeEast: Double
  var latitudeSouth: Double
  var latitudeNorth: Double



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> LngLatBounds? {
    let longitudeWest = pigeonVar_list[0] as! Double
    let longitudeEast = pigeonVar_list[1] as! Double
    let latitudeSouth = pigeonVar_list[2] as! Double
    let latitudeNorth = pigeonVar_list[3] as! Double

    return LngLatBounds(
      longitudeWest: longitudeWest,
      longitudeEast: longitudeEast,
      latitudeSouth: latitudeSouth,
      latitudeNorth: latitudeNorth
    )
  }
  func toList() -> [Any?] {
    return [
      longitudeWest,
      longitudeEast,
      latitudeSouth,
      latitudeNorth,
    ]
  }
}

private class PigeonPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return TileScheme(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return RasterDemEncoding(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      return LngLat.fromList(self.readValue() as! [Any?])
    case 132:
      return ScreenLocation.fromList(self.readValue() as! [Any?])
    case 133:
      return MapCamera.fromList(self.readValue() as! [Any?])
    case 134:
      return LngLatBounds.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class PigeonPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? TileScheme {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? RasterDemEncoding {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? LngLat {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? ScreenLocation {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? MapCamera {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? LngLatBounds {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class PigeonPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PigeonPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PigeonPigeonCodecWriter(data: data)
  }
}

class PigeonPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PigeonPigeonCodec(readerWriter: PigeonPigeonCodecReaderWriter())
}

