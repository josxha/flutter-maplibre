// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: type=lint

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../../../../io/flutter/plugin/platform/PlatformView.dart'
    as platformview$_;

/// from: `com.github.josxha.maplibre.FlutterApi`
class FlutterApi extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<FlutterApi> $type;

  @jni$_.internal
  FlutterApi.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'com/github/josxha/maplibre/FlutterApi',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $FlutterApi$NullableType();
  static const type = $FlutterApi$Type();
  static final _id_createPlatformView = _class.instanceMethodId(
    r'createPlatformView',
    r'(I)Lio/flutter/plugin/platform/PlatformView;',
  );

  static final _createPlatformView =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public abstract io.flutter.plugin.platform.PlatformView createPlatformView(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  platformview$_.PlatformView createPlatformView(
    int i,
  ) {
    return _createPlatformView(
      reference.pointer,
      _id_createPlatformView as jni$_.JMethodIDPtr,
      i,
    ).object<platformview$_.PlatformView>(
      const platformview$_.$PlatformView$Type(),
    );
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $FlutterApi> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'createPlatformView(I)Lio/flutter/plugin/platform/PlatformView;') {
        final $r = _$impls[$p]!.createPlatformView(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $FlutterApi $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'com.github.josxha.maplibre.FlutterApi',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory FlutterApi.implement(
    $FlutterApi $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return FlutterApi.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $FlutterApi {
  factory $FlutterApi({
    required platformview$_.PlatformView Function(int i) createPlatformView,
  }) = _$FlutterApi;

  platformview$_.PlatformView createPlatformView(int i);
}

final class _$FlutterApi with $FlutterApi {
  _$FlutterApi({
    required platformview$_.PlatformView Function(int i) createPlatformView,
  }) : _createPlatformView = createPlatformView;

  final platformview$_.PlatformView Function(int i) _createPlatformView;

  platformview$_.PlatformView createPlatformView(int i) {
    return _createPlatformView(i);
  }
}

final class $FlutterApi$NullableType extends jni$_.JObjType<FlutterApi?> {
  @jni$_.internal
  const $FlutterApi$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/github/josxha/maplibre/FlutterApi;';

  @jni$_.internal
  @core$_.override
  FlutterApi? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : FlutterApi.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FlutterApi?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($FlutterApi$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FlutterApi$NullableType) &&
        other is $FlutterApi$NullableType;
  }
}

final class $FlutterApi$Type extends jni$_.JObjType<FlutterApi> {
  @jni$_.internal
  const $FlutterApi$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/github/josxha/maplibre/FlutterApi;';

  @jni$_.internal
  @core$_.override
  FlutterApi fromReference(jni$_.JReference reference) =>
      FlutterApi.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FlutterApi?> get nullableType =>
      const $FlutterApi$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($FlutterApi$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FlutterApi$Type) && other is $FlutterApi$Type;
  }
}
