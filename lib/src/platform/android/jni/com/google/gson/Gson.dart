// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: type=lint

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `com.google.gson.Gson`
class Gson extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Gson> $type;

  @jni$_.internal
  Gson.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'com/google/gson/Gson');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Gson$NullableType();
  static const type = $Gson$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Gson() {
    return Gson.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_newBuilder = _class.instanceMethodId(
    r'newBuilder',
    r'()Lcom/google/gson/GsonBuilder;',
  );

  static final _newBuilder =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public com.google.gson.GsonBuilder newBuilder()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? newBuilder() {
    return _newBuilder(
      reference.pointer,
      _id_newBuilder as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_excluder = _class.instanceMethodId(
    r'excluder',
    r'()Lcom/google/gson/internal/Excluder;',
  );

  static final _excluder =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public com.google.gson.internal.Excluder excluder()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? excluder() {
    return _excluder(
      reference.pointer,
      _id_excluder as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_fieldNamingStrategy = _class.instanceMethodId(
    r'fieldNamingStrategy',
    r'()Lcom/google/gson/FieldNamingStrategy;',
  );

  static final _fieldNamingStrategy =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public com.google.gson.FieldNamingStrategy fieldNamingStrategy()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? fieldNamingStrategy() {
    return _fieldNamingStrategy(
      reference.pointer,
      _id_fieldNamingStrategy as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_serializeNulls = _class.instanceMethodId(
    r'serializeNulls',
    r'()Z',
  );

  static final _serializeNulls =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean serializeNulls()`
  bool serializeNulls() {
    return _serializeNulls(
      reference.pointer,
      _id_serializeNulls as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_htmlSafe = _class.instanceMethodId(
    r'htmlSafe',
    r'()Z',
  );

  static final _htmlSafe =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean htmlSafe()`
  bool htmlSafe() {
    return _htmlSafe(
      reference.pointer,
      _id_htmlSafe as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_getAdapter = _class.instanceMethodId(
    r'getAdapter',
    r'(Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;',
  );

  static final _getAdapter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public com.google.gson.TypeAdapter<T> getAdapter(com.google.gson.reflect.TypeToken<T> typeToken)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getAdapter<$T extends jni$_.JObject?>(
    jni$_.JObject? typeToken, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$typeToken = typeToken?.reference ?? jni$_.jNullReference;
    return _getAdapter(
      reference.pointer,
      _id_getAdapter as jni$_.JMethodIDPtr,
      _$typeToken.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDelegateAdapter = _class.instanceMethodId(
    r'getDelegateAdapter',
    r'(Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;',
  );

  static final _getDelegateAdapter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory typeAdapterFactory, com.google.gson.reflect.TypeToken<T> typeToken)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDelegateAdapter<$T extends jni$_.JObject?>(
    jni$_.JObject? typeAdapterFactory,
    jni$_.JObject? typeToken, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$typeAdapterFactory =
        typeAdapterFactory?.reference ?? jni$_.jNullReference;
    final _$typeToken = typeToken?.reference ?? jni$_.jNullReference;
    return _getDelegateAdapter(
      reference.pointer,
      _id_getDelegateAdapter as jni$_.JMethodIDPtr,
      _$typeAdapterFactory.pointer,
      _$typeToken.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getAdapter$1 = _class.instanceMethodId(
    r'getAdapter',
    r'(Ljava/lang/Class;)Lcom/google/gson/TypeAdapter;',
  );

  static final _getAdapter$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public com.google.gson.TypeAdapter<T> getAdapter(java.lang.Class<T> class)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getAdapter$1<$T extends jni$_.JObject?>(
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getAdapter$1(
      reference.pointer,
      _id_getAdapter$1 as jni$_.JMethodIDPtr,
      _$class$.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_toJsonTree = _class.instanceMethodId(
    r'toJsonTree',
    r'(Ljava/lang/Object;)Lcom/google/gson/JsonElement;',
  );

  static final _toJsonTree =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public com.google.gson.JsonElement toJsonTree(java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toJsonTree(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _toJsonTree(
      reference.pointer,
      _id_toJsonTree as jni$_.JMethodIDPtr,
      _$object.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_toJsonTree$1 = _class.instanceMethodId(
    r'toJsonTree',
    r'(Ljava/lang/Object;Ljava/lang/reflect/Type;)Lcom/google/gson/JsonElement;',
  );

  static final _toJsonTree$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public com.google.gson.JsonElement toJsonTree(java.lang.Object object, java.lang.reflect.Type type)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toJsonTree$1(
    jni$_.JObject? object,
    jni$_.JObject? type,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    final _$type = type?.reference ?? jni$_.jNullReference;
    return _toJsonTree$1(
      reference.pointer,
      _id_toJsonTree$1 as jni$_.JMethodIDPtr,
      _$object.pointer,
      _$type.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_toJson = _class.instanceMethodId(
    r'toJson',
    r'(Ljava/lang/Object;)Ljava/lang/String;',
  );

  static final _toJson =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public java.lang.String toJson(java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toJson(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _toJson(
      reference.pointer,
      _id_toJson as jni$_.JMethodIDPtr,
      _$object.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_toJson$1 = _class.instanceMethodId(
    r'toJson',
    r'(Ljava/lang/Object;Ljava/lang/reflect/Type;)Ljava/lang/String;',
  );

  static final _toJson$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public java.lang.String toJson(java.lang.Object object, java.lang.reflect.Type type)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toJson$1(
    jni$_.JObject? object,
    jni$_.JObject? type,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    final _$type = type?.reference ?? jni$_.jNullReference;
    return _toJson$1(
      reference.pointer,
      _id_toJson$1 as jni$_.JMethodIDPtr,
      _$object.pointer,
      _$type.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_toJson$2 = _class.instanceMethodId(
    r'toJson',
    r'(Ljava/lang/Object;Ljava/lang/Appendable;)V',
  );

  static final _toJson$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void toJson(java.lang.Object object, java.lang.Appendable appendable)`
  void toJson$2(
    jni$_.JObject? object,
    jni$_.JObject? appendable,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    final _$appendable = appendable?.reference ?? jni$_.jNullReference;
    _toJson$2(
      reference.pointer,
      _id_toJson$2 as jni$_.JMethodIDPtr,
      _$object.pointer,
      _$appendable.pointer,
    ).check();
  }

  static final _id_toJson$3 = _class.instanceMethodId(
    r'toJson',
    r'(Ljava/lang/Object;Ljava/lang/reflect/Type;Ljava/lang/Appendable;)V',
  );

  static final _toJson$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void toJson(java.lang.Object object, java.lang.reflect.Type type, java.lang.Appendable appendable)`
  void toJson$3(
    jni$_.JObject? object,
    jni$_.JObject? type,
    jni$_.JObject? appendable,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    final _$type = type?.reference ?? jni$_.jNullReference;
    final _$appendable = appendable?.reference ?? jni$_.jNullReference;
    _toJson$3(
      reference.pointer,
      _id_toJson$3 as jni$_.JMethodIDPtr,
      _$object.pointer,
      _$type.pointer,
      _$appendable.pointer,
    ).check();
  }

  static final _id_toJson$4 = _class.instanceMethodId(
    r'toJson',
    r'(Ljava/lang/Object;Ljava/lang/reflect/Type;Lcom/google/gson/stream/JsonWriter;)V',
  );

  static final _toJson$4 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void toJson(java.lang.Object object, java.lang.reflect.Type type, com.google.gson.stream.JsonWriter jsonWriter)`
  void toJson$4(
    jni$_.JObject? object,
    jni$_.JObject? type,
    jni$_.JObject? jsonWriter,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    final _$type = type?.reference ?? jni$_.jNullReference;
    final _$jsonWriter = jsonWriter?.reference ?? jni$_.jNullReference;
    _toJson$4(
      reference.pointer,
      _id_toJson$4 as jni$_.JMethodIDPtr,
      _$object.pointer,
      _$type.pointer,
      _$jsonWriter.pointer,
    ).check();
  }

  static final _id_toJson$5 = _class.instanceMethodId(
    r'toJson',
    r'(Lcom/google/gson/JsonElement;)Ljava/lang/String;',
  );

  static final _toJson$5 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public java.lang.String toJson(com.google.gson.JsonElement jsonElement)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toJson$5(
    jni$_.JObject? jsonElement,
  ) {
    final _$jsonElement = jsonElement?.reference ?? jni$_.jNullReference;
    return _toJson$5(
      reference.pointer,
      _id_toJson$5 as jni$_.JMethodIDPtr,
      _$jsonElement.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_toJson$6 = _class.instanceMethodId(
    r'toJson',
    r'(Lcom/google/gson/JsonElement;Ljava/lang/Appendable;)V',
  );

  static final _toJson$6 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable appendable)`
  void toJson$6(
    jni$_.JObject? jsonElement,
    jni$_.JObject? appendable,
  ) {
    final _$jsonElement = jsonElement?.reference ?? jni$_.jNullReference;
    final _$appendable = appendable?.reference ?? jni$_.jNullReference;
    _toJson$6(
      reference.pointer,
      _id_toJson$6 as jni$_.JMethodIDPtr,
      _$jsonElement.pointer,
      _$appendable.pointer,
    ).check();
  }

  static final _id_newJsonWriter = _class.instanceMethodId(
    r'newJsonWriter',
    r'(Ljava/io/Writer;)Lcom/google/gson/stream/JsonWriter;',
  );

  static final _newJsonWriter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? newJsonWriter(
    jni$_.JObject? writer,
  ) {
    final _$writer = writer?.reference ?? jni$_.jNullReference;
    return _newJsonWriter(
      reference.pointer,
      _id_newJsonWriter as jni$_.JMethodIDPtr,
      _$writer.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_newJsonReader = _class.instanceMethodId(
    r'newJsonReader',
    r'(Ljava/io/Reader;)Lcom/google/gson/stream/JsonReader;',
  );

  static final _newJsonReader =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public com.google.gson.stream.JsonReader newJsonReader(java.io.Reader reader)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? newJsonReader(
    jni$_.JObject? reader,
  ) {
    final _$reader = reader?.reference ?? jni$_.jNullReference;
    return _newJsonReader(
      reference.pointer,
      _id_newJsonReader as jni$_.JMethodIDPtr,
      _$reader.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_toJson$7 = _class.instanceMethodId(
    r'toJson',
    r'(Lcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonWriter;)V',
  );

  static final _toJson$7 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter jsonWriter)`
  void toJson$7(
    jni$_.JObject? jsonElement,
    jni$_.JObject? jsonWriter,
  ) {
    final _$jsonElement = jsonElement?.reference ?? jni$_.jNullReference;
    final _$jsonWriter = jsonWriter?.reference ?? jni$_.jNullReference;
    _toJson$7(
      reference.pointer,
      _id_toJson$7 as jni$_.JMethodIDPtr,
      _$jsonElement.pointer,
      _$jsonWriter.pointer,
    ).check();
  }

  static final _id_fromJson = _class.instanceMethodId(
    r'fromJson',
    r'(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _fromJson =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public T fromJson(java.lang.String string, java.lang.Class<T> class)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? fromJson<$T extends jni$_.JObject?>(
    jni$_.JString? string,
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _fromJson(
      reference.pointer,
      _id_fromJson as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$class$.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_fromJson$1 = _class.instanceMethodId(
    r'fromJson',
    r'(Ljava/lang/String;Ljava/lang/reflect/Type;)Ljava/lang/Object;',
  );

  static final _fromJson$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public T fromJson(java.lang.String string, java.lang.reflect.Type type)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? fromJson$1<$T extends jni$_.JObject?>(
    jni$_.JString? string,
    jni$_.JObject? type, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$type = type?.reference ?? jni$_.jNullReference;
    return _fromJson$1(
      reference.pointer,
      _id_fromJson$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$type.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_fromJson$2 = _class.instanceMethodId(
    r'fromJson',
    r'(Ljava/lang/String;Lcom/google/gson/reflect/TypeToken;)Ljava/lang/Object;',
  );

  static final _fromJson$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public T fromJson(java.lang.String string, com.google.gson.reflect.TypeToken<T> typeToken)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? fromJson$2<$T extends jni$_.JObject?>(
    jni$_.JString? string,
    jni$_.JObject? typeToken, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$typeToken = typeToken?.reference ?? jni$_.jNullReference;
    return _fromJson$2(
      reference.pointer,
      _id_fromJson$2 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$typeToken.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_fromJson$3 = _class.instanceMethodId(
    r'fromJson',
    r'(Ljava/io/Reader;Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _fromJson$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public T fromJson(java.io.Reader reader, java.lang.Class<T> class)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? fromJson$3<$T extends jni$_.JObject?>(
    jni$_.JObject? reader,
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$reader = reader?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _fromJson$3(
      reference.pointer,
      _id_fromJson$3 as jni$_.JMethodIDPtr,
      _$reader.pointer,
      _$class$.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_fromJson$4 = _class.instanceMethodId(
    r'fromJson',
    r'(Ljava/io/Reader;Ljava/lang/reflect/Type;)Ljava/lang/Object;',
  );

  static final _fromJson$4 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public T fromJson(java.io.Reader reader, java.lang.reflect.Type type)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? fromJson$4<$T extends jni$_.JObject?>(
    jni$_.JObject? reader,
    jni$_.JObject? type, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$reader = reader?.reference ?? jni$_.jNullReference;
    final _$type = type?.reference ?? jni$_.jNullReference;
    return _fromJson$4(
      reference.pointer,
      _id_fromJson$4 as jni$_.JMethodIDPtr,
      _$reader.pointer,
      _$type.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_fromJson$5 = _class.instanceMethodId(
    r'fromJson',
    r'(Ljava/io/Reader;Lcom/google/gson/reflect/TypeToken;)Ljava/lang/Object;',
  );

  static final _fromJson$5 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public T fromJson(java.io.Reader reader, com.google.gson.reflect.TypeToken<T> typeToken)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? fromJson$5<$T extends jni$_.JObject?>(
    jni$_.JObject? reader,
    jni$_.JObject? typeToken, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$reader = reader?.reference ?? jni$_.jNullReference;
    final _$typeToken = typeToken?.reference ?? jni$_.jNullReference;
    return _fromJson$5(
      reference.pointer,
      _id_fromJson$5 as jni$_.JMethodIDPtr,
      _$reader.pointer,
      _$typeToken.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_fromJson$6 = _class.instanceMethodId(
    r'fromJson',
    r'(Lcom/google/gson/stream/JsonReader;Ljava/lang/reflect/Type;)Ljava/lang/Object;',
  );

  static final _fromJson$6 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public T fromJson(com.google.gson.stream.JsonReader jsonReader, java.lang.reflect.Type type)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? fromJson$6<$T extends jni$_.JObject?>(
    jni$_.JObject? jsonReader,
    jni$_.JObject? type, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$jsonReader = jsonReader?.reference ?? jni$_.jNullReference;
    final _$type = type?.reference ?? jni$_.jNullReference;
    return _fromJson$6(
      reference.pointer,
      _id_fromJson$6 as jni$_.JMethodIDPtr,
      _$jsonReader.pointer,
      _$type.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_fromJson$7 = _class.instanceMethodId(
    r'fromJson',
    r'(Lcom/google/gson/stream/JsonReader;Lcom/google/gson/reflect/TypeToken;)Ljava/lang/Object;',
  );

  static final _fromJson$7 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public T fromJson(com.google.gson.stream.JsonReader jsonReader, com.google.gson.reflect.TypeToken<T> typeToken)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? fromJson$7<$T extends jni$_.JObject?>(
    jni$_.JObject? jsonReader,
    jni$_.JObject? typeToken, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$jsonReader = jsonReader?.reference ?? jni$_.jNullReference;
    final _$typeToken = typeToken?.reference ?? jni$_.jNullReference;
    return _fromJson$7(
      reference.pointer,
      _id_fromJson$7 as jni$_.JMethodIDPtr,
      _$jsonReader.pointer,
      _$typeToken.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_fromJson$8 = _class.instanceMethodId(
    r'fromJson',
    r'(Lcom/google/gson/JsonElement;Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _fromJson$8 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public T fromJson(com.google.gson.JsonElement jsonElement, java.lang.Class<T> class)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? fromJson$8<$T extends jni$_.JObject?>(
    jni$_.JObject? jsonElement,
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$jsonElement = jsonElement?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _fromJson$8(
      reference.pointer,
      _id_fromJson$8 as jni$_.JMethodIDPtr,
      _$jsonElement.pointer,
      _$class$.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_fromJson$9 = _class.instanceMethodId(
    r'fromJson',
    r'(Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;)Ljava/lang/Object;',
  );

  static final _fromJson$9 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public T fromJson(com.google.gson.JsonElement jsonElement, java.lang.reflect.Type type)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? fromJson$9<$T extends jni$_.JObject?>(
    jni$_.JObject? jsonElement,
    jni$_.JObject? type, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$jsonElement = jsonElement?.reference ?? jni$_.jNullReference;
    final _$type = type?.reference ?? jni$_.jNullReference;
    return _fromJson$9(
      reference.pointer,
      _id_fromJson$9 as jni$_.JMethodIDPtr,
      _$jsonElement.pointer,
      _$type.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_fromJson$10 = _class.instanceMethodId(
    r'fromJson',
    r'(Lcom/google/gson/JsonElement;Lcom/google/gson/reflect/TypeToken;)Ljava/lang/Object;',
  );

  static final _fromJson$10 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public T fromJson(com.google.gson.JsonElement jsonElement, com.google.gson.reflect.TypeToken<T> typeToken)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? fromJson$10<$T extends jni$_.JObject?>(
    jni$_.JObject? jsonElement,
    jni$_.JObject? typeToken, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$jsonElement = jsonElement?.reference ?? jni$_.jNullReference;
    final _$typeToken = typeToken?.reference ?? jni$_.jNullReference;
    return _fromJson$10(
      reference.pointer,
      _id_fromJson$10 as jni$_.JMethodIDPtr,
      _$jsonElement.pointer,
      _$typeToken.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(
      reference.pointer,
      _id_toString$1 as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }
}

final class $Gson$NullableType extends jni$_.JObjType<Gson?> {
  @jni$_.internal
  const $Gson$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/google/gson/Gson;';

  @jni$_.internal
  @core$_.override
  Gson? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Gson.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Gson?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Gson$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Gson$NullableType) &&
        other is $Gson$NullableType;
  }
}

final class $Gson$Type extends jni$_.JObjType<Gson> {
  @jni$_.internal
  const $Gson$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/google/gson/Gson;';

  @jni$_.internal
  @core$_.override
  Gson fromReference(jni$_.JReference reference) => Gson.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Gson?> get nullableType => const $Gson$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Gson$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Gson$Type) && other is $Gson$Type;
  }
}
