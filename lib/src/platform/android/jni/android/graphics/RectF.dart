// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: type=lint

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `android.graphics.RectF`
class RectF extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<RectF> $type;

  @jni$_.internal
  RectF.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/graphics/RectF');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $RectF$NullableType();
  static const type = $RectF$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator<android.graphics.RectF> CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  static final _id_bottom = _class.instanceFieldId(
    r'bottom',
    r'F',
  );

  /// from: `public float bottom`
  double get bottom => _id_bottom.get(this, const jni$_.jfloatType());

  /// from: `public float bottom`
  set bottom(double value) =>
      _id_bottom.set(this, const jni$_.jfloatType(), value);

  static final _id_left = _class.instanceFieldId(
    r'left',
    r'F',
  );

  /// from: `public float left`
  double get left => _id_left.get(this, const jni$_.jfloatType());

  /// from: `public float left`
  set left(double value) => _id_left.set(this, const jni$_.jfloatType(), value);

  static final _id_right = _class.instanceFieldId(
    r'right',
    r'F',
  );

  /// from: `public float right`
  double get right => _id_right.get(this, const jni$_.jfloatType());

  /// from: `public float right`
  set right(double value) =>
      _id_right.set(this, const jni$_.jfloatType(), value);

  static final _id_top = _class.instanceFieldId(
    r'top',
    r'F',
  );

  /// from: `public float top`
  double get top => _id_top.get(this, const jni$_.jfloatType());

  /// from: `public float top`
  set top(double value) => _id_top.set(this, const jni$_.jfloatType(), value);

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory RectF() {
    return RectF.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/graphics/Rect;)V',
  );

  static final _new$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.graphics.Rect rect)`
  /// The returned object must be released after use, by calling the [release] method.
  factory RectF.new$1(
    jni$_.JObject? rect,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    return RectF.fromReference(
      _new$1(
        _class.reference.pointer,
        _id_new$1 as jni$_.JMethodIDPtr,
        _$rect.pointer,
      ).reference,
    );
  }

  static final _id_new$2 = _class.constructorId(
    r'(Landroid/graphics/RectF;)V',
  );

  static final _new$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.graphics.RectF rectF)`
  /// The returned object must be released after use, by calling the [release] method.
  factory RectF.new$2(
    RectF? rectF,
  ) {
    final _$rectF = rectF?.reference ?? jni$_.jNullReference;
    return RectF.fromReference(
      _new$2(
        _class.reference.pointer,
        _id_new$2 as jni$_.JMethodIDPtr,
        _$rectF.pointer,
      ).reference,
    );
  }

  static final _id_new$3 = _class.constructorId(
    r'(FFFF)V',
  );

  static final _new$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Double, jni$_.Double, jni$_.Double, jni$_.Double)
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
              double,
              double,
            )
          >();

  /// from: `public void <init>(float f, float f1, float f2, float f3)`
  /// The returned object must be released after use, by calling the [release] method.
  factory RectF.new$3(
    double f,
    double f1,
    double f2,
    double f3,
  ) {
    return RectF.fromReference(
      _new$3(
        _class.reference.pointer,
        _id_new$3 as jni$_.JMethodIDPtr,
        f,
        f1,
        f2,
        f3,
      ).reference,
    );
  }

  static final _id_centerX = _class.instanceMethodId(
    r'centerX',
    r'()F',
  );

  static final _centerX =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallFloatMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final float centerX()`
  double centerX() {
    return _centerX(reference.pointer, _id_centerX as jni$_.JMethodIDPtr).float;
  }

  static final _id_centerY = _class.instanceMethodId(
    r'centerY',
    r'()F',
  );

  static final _centerY =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallFloatMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final float centerY()`
  double centerY() {
    return _centerY(reference.pointer, _id_centerY as jni$_.JMethodIDPtr).float;
  }

  static final _id_contains = _class.instanceMethodId(
    r'contains',
    r'(Landroid/graphics/RectF;)Z',
  );

  static final _contains =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean contains(android.graphics.RectF rectF)`
  bool contains(
    RectF? rectF,
  ) {
    final _$rectF = rectF?.reference ?? jni$_.jNullReference;
    return _contains(
      reference.pointer,
      _id_contains as jni$_.JMethodIDPtr,
      _$rectF.pointer,
    ).boolean;
  }

  static final _id_contains$1 = _class.instanceMethodId(
    r'contains',
    r'(FF)Z',
  );

  static final _contains$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double, jni$_.Double)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
            )
          >();

  /// from: `public boolean contains(float f, float f1)`
  bool contains$1(
    double f,
    double f1,
  ) {
    return _contains$1(
      reference.pointer,
      _id_contains$1 as jni$_.JMethodIDPtr,
      f,
      f1,
    ).boolean;
  }

  static final _id_contains$2 = _class.instanceMethodId(
    r'contains',
    r'(FFFF)Z',
  );

  static final _contains$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Double, jni$_.Double, jni$_.Double, jni$_.Double)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
              double,
              double,
            )
          >();

  /// from: `public boolean contains(float f, float f1, float f2, float f3)`
  bool contains$2(
    double f,
    double f1,
    double f2,
    double f3,
  ) {
    return _contains$2(
      reference.pointer,
      _id_contains$2 as jni$_.JMethodIDPtr,
      f,
      f1,
      f2,
      f3,
    ).boolean;
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
      reference.pointer,
      _id_describeContents as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(
      reference.pointer,
      _id_equals as jni$_.JMethodIDPtr,
      _$object.pointer,
    ).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(
      reference.pointer,
      _id_hashCode$1 as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_height = _class.instanceMethodId(
    r'height',
    r'()F',
  );

  static final _height =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallFloatMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final float height()`
  double height() {
    return _height(reference.pointer, _id_height as jni$_.JMethodIDPtr).float;
  }

  static final _id_inset = _class.instanceMethodId(
    r'inset',
    r'(FF)V',
  );

  static final _inset =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double, jni$_.Double)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
            )
          >();

  /// from: `public void inset(float f, float f1)`
  void inset(
    double f,
    double f1,
  ) {
    _inset(reference.pointer, _id_inset as jni$_.JMethodIDPtr, f, f1).check();
  }

  static final _id_intersect = _class.instanceMethodId(
    r'intersect',
    r'(Landroid/graphics/RectF;)Z',
  );

  static final _intersect =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean intersect(android.graphics.RectF rectF)`
  bool intersect(
    RectF? rectF,
  ) {
    final _$rectF = rectF?.reference ?? jni$_.jNullReference;
    return _intersect(
      reference.pointer,
      _id_intersect as jni$_.JMethodIDPtr,
      _$rectF.pointer,
    ).boolean;
  }

  static final _id_intersect$1 = _class.instanceMethodId(
    r'intersect',
    r'(FFFF)Z',
  );

  static final _intersect$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Double, jni$_.Double, jni$_.Double, jni$_.Double)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
              double,
              double,
            )
          >();

  /// from: `public boolean intersect(float f, float f1, float f2, float f3)`
  bool intersect$1(
    double f,
    double f1,
    double f2,
    double f3,
  ) {
    return _intersect$1(
      reference.pointer,
      _id_intersect$1 as jni$_.JMethodIDPtr,
      f,
      f1,
      f2,
      f3,
    ).boolean;
  }

  static final _id_intersects = _class.staticMethodId(
    r'intersects',
    r'(Landroid/graphics/RectF;Landroid/graphics/RectF;)Z',
  );

  static final _intersects =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public boolean intersects(android.graphics.RectF rectF, android.graphics.RectF rectF1)`
  static bool intersects(
    RectF? rectF,
    RectF? rectF1,
  ) {
    final _$rectF = rectF?.reference ?? jni$_.jNullReference;
    final _$rectF1 = rectF1?.reference ?? jni$_.jNullReference;
    return _intersects(
      _class.reference.pointer,
      _id_intersects as jni$_.JMethodIDPtr,
      _$rectF.pointer,
      _$rectF1.pointer,
    ).boolean;
  }

  static final _id_intersects$1 = _class.instanceMethodId(
    r'intersects',
    r'(FFFF)Z',
  );

  static final _intersects$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Double, jni$_.Double, jni$_.Double, jni$_.Double)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
              double,
              double,
            )
          >();

  /// from: `public boolean intersects(float f, float f1, float f2, float f3)`
  bool intersects$1(
    double f,
    double f1,
    double f2,
    double f3,
  ) {
    return _intersects$1(
      reference.pointer,
      _id_intersects$1 as jni$_.JMethodIDPtr,
      f,
      f1,
      f2,
      f3,
    ).boolean;
  }

  static final _id_isEmpty = _class.instanceMethodId(
    r'isEmpty',
    r'()Z',
  );

  static final _isEmpty =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final boolean isEmpty()`
  bool isEmpty() {
    return _isEmpty(
      reference.pointer,
      _id_isEmpty as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_offset = _class.instanceMethodId(
    r'offset',
    r'(FF)V',
  );

  static final _offset =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double, jni$_.Double)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
            )
          >();

  /// from: `public void offset(float f, float f1)`
  void offset(
    double f,
    double f1,
  ) {
    _offset(reference.pointer, _id_offset as jni$_.JMethodIDPtr, f, f1).check();
  }

  static final _id_offsetTo = _class.instanceMethodId(
    r'offsetTo',
    r'(FF)V',
  );

  static final _offsetTo =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double, jni$_.Double)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
            )
          >();

  /// from: `public void offsetTo(float f, float f1)`
  void offsetTo(
    double f,
    double f1,
  ) {
    _offsetTo(
      reference.pointer,
      _id_offsetTo as jni$_.JMethodIDPtr,
      f,
      f1,
    ).check();
  }

  static final _id_readFromParcel = _class.instanceMethodId(
    r'readFromParcel',
    r'(Landroid/os/Parcel;)V',
  );

  static final _readFromParcel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void readFromParcel(android.os.Parcel parcel)`
  void readFromParcel(
    jni$_.JObject? parcel,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _readFromParcel(
      reference.pointer,
      _id_readFromParcel as jni$_.JMethodIDPtr,
      _$parcel.pointer,
    ).check();
  }

  static final _id_round = _class.instanceMethodId(
    r'round',
    r'(Landroid/graphics/Rect;)V',
  );

  static final _round =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void round(android.graphics.Rect rect)`
  void round(
    jni$_.JObject? rect,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    _round(
      reference.pointer,
      _id_round as jni$_.JMethodIDPtr,
      _$rect.pointer,
    ).check();
  }

  static final _id_roundOut = _class.instanceMethodId(
    r'roundOut',
    r'(Landroid/graphics/Rect;)V',
  );

  static final _roundOut =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void roundOut(android.graphics.Rect rect)`
  void roundOut(
    jni$_.JObject? rect,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    _roundOut(
      reference.pointer,
      _id_roundOut as jni$_.JMethodIDPtr,
      _$rect.pointer,
    ).check();
  }

  static final _id_set = _class.instanceMethodId(
    r'set',
    r'(Landroid/graphics/Rect;)V',
  );

  static final _set =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void set(android.graphics.Rect rect)`
  void set(
    jni$_.JObject? rect,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    _set(
      reference.pointer,
      _id_set as jni$_.JMethodIDPtr,
      _$rect.pointer,
    ).check();
  }

  static final _id_set$1 = _class.instanceMethodId(
    r'set',
    r'(Landroid/graphics/RectF;)V',
  );

  static final _set$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void set(android.graphics.RectF rectF)`
  void set$1(
    RectF? rectF,
  ) {
    final _$rectF = rectF?.reference ?? jni$_.jNullReference;
    _set$1(
      reference.pointer,
      _id_set$1 as jni$_.JMethodIDPtr,
      _$rectF.pointer,
    ).check();
  }

  static final _id_set$2 = _class.instanceMethodId(
    r'set',
    r'(FFFF)V',
  );

  static final _set$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Double, jni$_.Double, jni$_.Double, jni$_.Double)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
              double,
              double,
            )
          >();

  /// from: `public void set(float f, float f1, float f2, float f3)`
  void set$2(
    double f,
    double f1,
    double f2,
    double f3,
  ) {
    _set$2(
      reference.pointer,
      _id_set$2 as jni$_.JMethodIDPtr,
      f,
      f1,
      f2,
      f3,
    ).check();
  }

  static final _id_setEmpty = _class.instanceMethodId(
    r'setEmpty',
    r'()V',
  );

  static final _setEmpty =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void setEmpty()`
  void setEmpty() {
    _setEmpty(reference.pointer, _id_setEmpty as jni$_.JMethodIDPtr).check();
  }

  static final _id_setIntersect = _class.instanceMethodId(
    r'setIntersect',
    r'(Landroid/graphics/RectF;Landroid/graphics/RectF;)Z',
  );

  static final _setIntersect =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean setIntersect(android.graphics.RectF rectF, android.graphics.RectF rectF1)`
  bool setIntersect(
    RectF? rectF,
    RectF? rectF1,
  ) {
    final _$rectF = rectF?.reference ?? jni$_.jNullReference;
    final _$rectF1 = rectF1?.reference ?? jni$_.jNullReference;
    return _setIntersect(
      reference.pointer,
      _id_setIntersect as jni$_.JMethodIDPtr,
      _$rectF.pointer,
      _$rectF1.pointer,
    ).boolean;
  }

  static final _id_sort = _class.instanceMethodId(
    r'sort',
    r'()V',
  );

  static final _sort =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void sort()`
  void sort() {
    _sort(reference.pointer, _id_sort as jni$_.JMethodIDPtr).check();
  }

  static final _id_toShortString = _class.instanceMethodId(
    r'toShortString',
    r'()Ljava/lang/String;',
  );

  static final _toShortString =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toShortString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toShortString() {
    return _toShortString(
      reference.pointer,
      _id_toShortString as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(
      reference.pointer,
      _id_toString$1 as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_union = _class.instanceMethodId(
    r'union',
    r'(Landroid/graphics/RectF;)V',
  );

  static final _union =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void union(android.graphics.RectF rectF)`
  void union(
    RectF? rectF,
  ) {
    final _$rectF = rectF?.reference ?? jni$_.jNullReference;
    _union(
      reference.pointer,
      _id_union as jni$_.JMethodIDPtr,
      _$rectF.pointer,
    ).check();
  }

  static final _id_union$1 = _class.instanceMethodId(
    r'union',
    r'(FF)V',
  );

  static final _union$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double, jni$_.Double)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
            )
          >();

  /// from: `public void union(float f, float f1)`
  void union$1(
    double f,
    double f1,
  ) {
    _union$1(
      reference.pointer,
      _id_union$1 as jni$_.JMethodIDPtr,
      f,
      f1,
    ).check();
  }

  static final _id_union$2 = _class.instanceMethodId(
    r'union',
    r'(FFFF)V',
  );

  static final _union$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Double, jni$_.Double, jni$_.Double, jni$_.Double)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
              double,
              double,
            )
          >();

  /// from: `public void union(float f, float f1, float f2, float f3)`
  void union$2(
    double f,
    double f1,
    double f2,
    double f3,
  ) {
    _union$2(
      reference.pointer,
      _id_union$2 as jni$_.JMethodIDPtr,
      f,
      f1,
      f2,
      f3,
    ).check();
  }

  static final _id_width = _class.instanceMethodId(
    r'width',
    r'()F',
  );

  static final _width =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallFloatMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final float width()`
  double width() {
    return _width(reference.pointer, _id_width as jni$_.JMethodIDPtr).float;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni$_.JObject? parcel,
    int i,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(
      reference.pointer,
      _id_writeToParcel as jni$_.JMethodIDPtr,
      _$parcel.pointer,
      i,
    ).check();
  }
}

final class $RectF$NullableType extends jni$_.JObjType<RectF?> {
  @jni$_.internal
  const $RectF$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/graphics/RectF;';

  @jni$_.internal
  @core$_.override
  RectF? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : RectF.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<RectF?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($RectF$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($RectF$NullableType) &&
        other is $RectF$NullableType;
  }
}

final class $RectF$Type extends jni$_.JObjType<RectF> {
  @jni$_.internal
  const $RectF$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/graphics/RectF;';

  @jni$_.internal
  @core$_.override
  RectF fromReference(jni$_.JReference reference) => RectF.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<RectF?> get nullableType => const $RectF$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($RectF$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($RectF$Type) && other is $RectF$Type;
  }
}
