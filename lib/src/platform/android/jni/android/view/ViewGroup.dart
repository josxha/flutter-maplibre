// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: type=lint

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../content/Context.dart' as context$_;

/// from: `android.view.ViewGroup$LayoutParams`
class ViewGroup$LayoutParams extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ViewGroup$LayoutParams> $type;

  @jni$_.internal
  ViewGroup$LayoutParams.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/view/ViewGroup$LayoutParams',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ViewGroup$LayoutParams$NullableType();
  static const type = $ViewGroup$LayoutParams$Type();

  /// from: `static public final int FILL_PARENT`
  static const FILL_PARENT = -1;

  /// from: `static public final int MATCH_PARENT`
  static const MATCH_PARENT = -1;

  /// from: `static public final int WRAP_CONTENT`
  static const WRAP_CONTENT = -2;
  static final _id_height = _class.instanceFieldId(
    r'height',
    r'I',
  );

  /// from: `public int height`
  int get height => _id_height.get(this, const jni$_.jintType());

  /// from: `public int height`
  set height(int value) => _id_height.set(this, const jni$_.jintType(), value);

  static final _id_layoutAnimationParameters = _class.instanceFieldId(
    r'layoutAnimationParameters',
    r'Landroid/view/animation/LayoutAnimationController$AnimationParameters;',
  );

  /// from: `public android.view.animation.LayoutAnimationController$AnimationParameters layoutAnimationParameters`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get layoutAnimationParameters => _id_layoutAnimationParameters
      .get(this, const jni$_.JObjectNullableType());

  /// from: `public android.view.animation.LayoutAnimationController$AnimationParameters layoutAnimationParameters`
  /// The returned object must be released after use, by calling the [release] method.
  set layoutAnimationParameters(jni$_.JObject? value) =>
      _id_layoutAnimationParameters.set(
        this,
        const jni$_.JObjectNullableType(),
        value,
      );

  static final _id_width = _class.instanceFieldId(
    r'width',
    r'I',
  );

  /// from: `public int width`
  int get width => _id_width.get(this, const jni$_.jintType());

  /// from: `public int width`
  set width(int value) => _id_width.set(this, const jni$_.jintType(), value);

  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ViewGroup$LayoutParams(
    context$_.Context? context,
    jni$_.JObject? attributeSet,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return ViewGroup$LayoutParams.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$context.pointer,
        _$attributeSet.pointer,
      ).reference,
    );
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/view/ViewGroup$LayoutParams;)V',
  );

  static final _new$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.view.ViewGroup$LayoutParams layoutParams)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ViewGroup$LayoutParams.new$1(
    ViewGroup$LayoutParams? layoutParams,
  ) {
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    return ViewGroup$LayoutParams.fromReference(
      _new$1(
        _class.reference.pointer,
        _id_new$1 as jni$_.JMethodIDPtr,
        _$layoutParams.pointer,
      ).reference,
    );
  }

  static final _id_new$2 = _class.constructorId(
    r'(II)V',
  );

  static final _new$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
            )
          >();

  /// from: `public void <init>(int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ViewGroup$LayoutParams.new$2(
    int i,
    int i1,
  ) {
    return ViewGroup$LayoutParams.fromReference(
      _new$2(
        _class.reference.pointer,
        _id_new$2 as jni$_.JMethodIDPtr,
        i,
        i1,
      ).reference,
    );
  }

  static final _id_resolveLayoutDirection = _class.instanceMethodId(
    r'resolveLayoutDirection',
    r'(I)V',
  );

  static final _resolveLayoutDirection =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void resolveLayoutDirection(int i)`
  void resolveLayoutDirection(
    int i,
  ) {
    _resolveLayoutDirection(
      reference.pointer,
      _id_resolveLayoutDirection as jni$_.JMethodIDPtr,
      i,
    ).check();
  }
}

final class $ViewGroup$LayoutParams$NullableType
    extends jni$_.JObjType<ViewGroup$LayoutParams?> {
  @jni$_.internal
  const $ViewGroup$LayoutParams$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/view/ViewGroup$LayoutParams;';

  @jni$_.internal
  @core$_.override
  ViewGroup$LayoutParams? fromReference(jni$_.JReference reference) =>
      reference.isNull
      ? null
      : ViewGroup$LayoutParams.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ViewGroup$LayoutParams?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ViewGroup$LayoutParams$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ViewGroup$LayoutParams$NullableType) &&
        other is $ViewGroup$LayoutParams$NullableType;
  }
}

final class $ViewGroup$LayoutParams$Type
    extends jni$_.JObjType<ViewGroup$LayoutParams> {
  @jni$_.internal
  const $ViewGroup$LayoutParams$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/view/ViewGroup$LayoutParams;';

  @jni$_.internal
  @core$_.override
  ViewGroup$LayoutParams fromReference(jni$_.JReference reference) =>
      ViewGroup$LayoutParams.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ViewGroup$LayoutParams?> get nullableType =>
      const $ViewGroup$LayoutParams$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ViewGroup$LayoutParams$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ViewGroup$LayoutParams$Type) &&
        other is $ViewGroup$LayoutParams$Type;
  }
}

/// from: `android.view.ViewGroup$MarginLayoutParams`
class ViewGroup$MarginLayoutParams extends ViewGroup$LayoutParams {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ViewGroup$MarginLayoutParams> $type;

  @jni$_.internal
  ViewGroup$MarginLayoutParams.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/view/ViewGroup$MarginLayoutParams',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ViewGroup$MarginLayoutParams$NullableType();
  static const type = $ViewGroup$MarginLayoutParams$Type();
  static final _id_bottomMargin = _class.instanceFieldId(
    r'bottomMargin',
    r'I',
  );

  /// from: `public int bottomMargin`
  int get bottomMargin => _id_bottomMargin.get(this, const jni$_.jintType());

  /// from: `public int bottomMargin`
  set bottomMargin(int value) =>
      _id_bottomMargin.set(this, const jni$_.jintType(), value);

  static final _id_leftMargin = _class.instanceFieldId(
    r'leftMargin',
    r'I',
  );

  /// from: `public int leftMargin`
  int get leftMargin => _id_leftMargin.get(this, const jni$_.jintType());

  /// from: `public int leftMargin`
  set leftMargin(int value) =>
      _id_leftMargin.set(this, const jni$_.jintType(), value);

  static final _id_rightMargin = _class.instanceFieldId(
    r'rightMargin',
    r'I',
  );

  /// from: `public int rightMargin`
  int get rightMargin => _id_rightMargin.get(this, const jni$_.jintType());

  /// from: `public int rightMargin`
  set rightMargin(int value) =>
      _id_rightMargin.set(this, const jni$_.jintType(), value);

  static final _id_topMargin = _class.instanceFieldId(
    r'topMargin',
    r'I',
  );

  /// from: `public int topMargin`
  int get topMargin => _id_topMargin.get(this, const jni$_.jintType());

  /// from: `public int topMargin`
  set topMargin(int value) =>
      _id_topMargin.set(this, const jni$_.jintType(), value);

  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ViewGroup$MarginLayoutParams(
    context$_.Context? context,
    jni$_.JObject? attributeSet,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return ViewGroup$MarginLayoutParams.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$context.pointer,
        _$attributeSet.pointer,
      ).reference,
    );
  }

  static final _id_new1 = _class.constructorId(
    r'(Landroid/view/ViewGroup$LayoutParams;)V',
  );

  static final _new1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.view.ViewGroup$LayoutParams layoutParams)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ViewGroup$MarginLayoutParams.new1(
    ViewGroup$LayoutParams? layoutParams,
  ) {
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    return ViewGroup$MarginLayoutParams.fromReference(
      _new1(
        _class.reference.pointer,
        _id_new1 as jni$_.JMethodIDPtr,
        _$layoutParams.pointer,
      ).reference,
    );
  }

  static final _id_new$3 = _class.constructorId(
    r'(Landroid/view/ViewGroup$MarginLayoutParams;)V',
  );

  static final _new$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.view.ViewGroup$MarginLayoutParams marginLayoutParams)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ViewGroup$MarginLayoutParams.new$3(
    ViewGroup$MarginLayoutParams? marginLayoutParams,
  ) {
    final _$marginLayoutParams =
        marginLayoutParams?.reference ?? jni$_.jNullReference;
    return ViewGroup$MarginLayoutParams.fromReference(
      _new$3(
        _class.reference.pointer,
        _id_new$3 as jni$_.JMethodIDPtr,
        _$marginLayoutParams.pointer,
      ).reference,
    );
  }

  static final _id_new2 = _class.constructorId(
    r'(II)V',
  );

  static final _new2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
            )
          >();

  /// from: `public void <init>(int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ViewGroup$MarginLayoutParams.new2(
    int i,
    int i1,
  ) {
    return ViewGroup$MarginLayoutParams.fromReference(
      _new2(
        _class.reference.pointer,
        _id_new2 as jni$_.JMethodIDPtr,
        i,
        i1,
      ).reference,
    );
  }

  static final _id_getLayoutDirection = _class.instanceMethodId(
    r'getLayoutDirection',
    r'()I',
  );

  static final _getLayoutDirection =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getLayoutDirection()`
  int getLayoutDirection() {
    return _getLayoutDirection(
      reference.pointer,
      _id_getLayoutDirection as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getMarginEnd = _class.instanceMethodId(
    r'getMarginEnd',
    r'()I',
  );

  static final _getMarginEnd =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getMarginEnd()`
  int getMarginEnd() {
    return _getMarginEnd(
      reference.pointer,
      _id_getMarginEnd as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getMarginStart = _class.instanceMethodId(
    r'getMarginStart',
    r'()I',
  );

  static final _getMarginStart =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getMarginStart()`
  int getMarginStart() {
    return _getMarginStart(
      reference.pointer,
      _id_getMarginStart as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_isMarginRelative = _class.instanceMethodId(
    r'isMarginRelative',
    r'()Z',
  );

  static final _isMarginRelative =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isMarginRelative()`
  bool isMarginRelative() {
    return _isMarginRelative(
      reference.pointer,
      _id_isMarginRelative as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_resolveLayoutDirection = _class.instanceMethodId(
    r'resolveLayoutDirection',
    r'(I)V',
  );

  static final _resolveLayoutDirection =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void resolveLayoutDirection(int i)`
  void resolveLayoutDirection(
    int i,
  ) {
    _resolveLayoutDirection(
      reference.pointer,
      _id_resolveLayoutDirection as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_setLayoutDirection = _class.instanceMethodId(
    r'setLayoutDirection',
    r'(I)V',
  );

  static final _setLayoutDirection =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setLayoutDirection(int i)`
  void setLayoutDirection(
    int i,
  ) {
    _setLayoutDirection(
      reference.pointer,
      _id_setLayoutDirection as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_setMarginEnd = _class.instanceMethodId(
    r'setMarginEnd',
    r'(I)V',
  );

  static final _setMarginEnd =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setMarginEnd(int i)`
  void setMarginEnd(
    int i,
  ) {
    _setMarginEnd(
      reference.pointer,
      _id_setMarginEnd as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_setMarginStart = _class.instanceMethodId(
    r'setMarginStart',
    r'(I)V',
  );

  static final _setMarginStart =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setMarginStart(int i)`
  void setMarginStart(
    int i,
  ) {
    _setMarginStart(
      reference.pointer,
      _id_setMarginStart as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_setMargins = _class.instanceMethodId(
    r'setMargins',
    r'(IIII)V',
  );

  static final _setMargins =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Int32, jni$_.Int32, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              int,
              int,
            )
          >();

  /// from: `public void setMargins(int i, int i1, int i2, int i3)`
  void setMargins(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _setMargins(
      reference.pointer,
      _id_setMargins as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
      i3,
    ).check();
  }
}

final class $ViewGroup$MarginLayoutParams$NullableType
    extends jni$_.JObjType<ViewGroup$MarginLayoutParams?> {
  @jni$_.internal
  const $ViewGroup$MarginLayoutParams$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/view/ViewGroup$MarginLayoutParams;';

  @jni$_.internal
  @core$_.override
  ViewGroup$MarginLayoutParams? fromReference(jni$_.JReference reference) =>
      reference.isNull
      ? null
      : ViewGroup$MarginLayoutParams.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $ViewGroup$LayoutParams$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ViewGroup$MarginLayoutParams?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($ViewGroup$MarginLayoutParams$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ViewGroup$MarginLayoutParams$NullableType) &&
        other is $ViewGroup$MarginLayoutParams$NullableType;
  }
}

final class $ViewGroup$MarginLayoutParams$Type
    extends jni$_.JObjType<ViewGroup$MarginLayoutParams> {
  @jni$_.internal
  const $ViewGroup$MarginLayoutParams$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/view/ViewGroup$MarginLayoutParams;';

  @jni$_.internal
  @core$_.override
  ViewGroup$MarginLayoutParams fromReference(jni$_.JReference reference) =>
      ViewGroup$MarginLayoutParams.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $ViewGroup$LayoutParams$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ViewGroup$MarginLayoutParams?> get nullableType =>
      const $ViewGroup$MarginLayoutParams$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($ViewGroup$MarginLayoutParams$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ViewGroup$MarginLayoutParams$Type) &&
        other is $ViewGroup$MarginLayoutParams$Type;
  }
}

/// from: `android.view.ViewGroup$OnHierarchyChangeListener`
class ViewGroup$OnHierarchyChangeListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ViewGroup$OnHierarchyChangeListener> $type;

  @jni$_.internal
  ViewGroup$OnHierarchyChangeListener.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/view/ViewGroup$OnHierarchyChangeListener',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $ViewGroup$OnHierarchyChangeListener$NullableType();
  static const type = $ViewGroup$OnHierarchyChangeListener$Type();
  static final _id_onChildViewAdded = _class.instanceMethodId(
    r'onChildViewAdded',
    r'(Landroid/view/View;Landroid/view/View;)V',
  );

  static final _onChildViewAdded =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void onChildViewAdded(android.view.View view, android.view.View view1)`
  void onChildViewAdded(
    jni$_.JObject? view,
    jni$_.JObject? view1,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$view1 = view1?.reference ?? jni$_.jNullReference;
    _onChildViewAdded(
      reference.pointer,
      _id_onChildViewAdded as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$view1.pointer,
    ).check();
  }

  static final _id_onChildViewRemoved = _class.instanceMethodId(
    r'onChildViewRemoved',
    r'(Landroid/view/View;Landroid/view/View;)V',
  );

  static final _onChildViewRemoved =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void onChildViewRemoved(android.view.View view, android.view.View view1)`
  void onChildViewRemoved(
    jni$_.JObject? view,
    jni$_.JObject? view1,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$view1 = view1?.reference ?? jni$_.jNullReference;
    _onChildViewRemoved(
      reference.pointer,
      _id_onChildViewRemoved as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$view1.pointer,
    ).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $ViewGroup$OnHierarchyChangeListener> _$impls =
      {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onChildViewAdded(Landroid/view/View;Landroid/view/View;)V') {
        _$impls[$p]!.onChildViewAdded(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'onChildViewRemoved(Landroid/view/View;Landroid/view/View;)V') {
        _$impls[$p]!.onChildViewRemoved(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $ViewGroup$OnHierarchyChangeListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.view.ViewGroup$OnHierarchyChangeListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onChildViewAdded$async)
          r'onChildViewAdded(Landroid/view/View;Landroid/view/View;)V',
        if ($impl.onChildViewRemoved$async)
          r'onChildViewRemoved(Landroid/view/View;Landroid/view/View;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ViewGroup$OnHierarchyChangeListener.implement(
    $ViewGroup$OnHierarchyChangeListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return ViewGroup$OnHierarchyChangeListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ViewGroup$OnHierarchyChangeListener {
  factory $ViewGroup$OnHierarchyChangeListener({
    required void Function(jni$_.JObject? view, jni$_.JObject? view1)
    onChildViewAdded,
    bool onChildViewAdded$async,
    required void Function(jni$_.JObject? view, jni$_.JObject? view1)
    onChildViewRemoved,
    bool onChildViewRemoved$async,
  }) = _$ViewGroup$OnHierarchyChangeListener;

  void onChildViewAdded(jni$_.JObject? view, jni$_.JObject? view1);
  bool get onChildViewAdded$async => false;
  void onChildViewRemoved(jni$_.JObject? view, jni$_.JObject? view1);
  bool get onChildViewRemoved$async => false;
}

final class _$ViewGroup$OnHierarchyChangeListener
    with $ViewGroup$OnHierarchyChangeListener {
  _$ViewGroup$OnHierarchyChangeListener({
    required void Function(jni$_.JObject? view, jni$_.JObject? view1)
    onChildViewAdded,
    this.onChildViewAdded$async = false,
    required void Function(jni$_.JObject? view, jni$_.JObject? view1)
    onChildViewRemoved,
    this.onChildViewRemoved$async = false,
  }) : _onChildViewAdded = onChildViewAdded,
       _onChildViewRemoved = onChildViewRemoved;

  final void Function(jni$_.JObject? view, jni$_.JObject? view1)
  _onChildViewAdded;
  final bool onChildViewAdded$async;
  final void Function(jni$_.JObject? view, jni$_.JObject? view1)
  _onChildViewRemoved;
  final bool onChildViewRemoved$async;

  void onChildViewAdded(jni$_.JObject? view, jni$_.JObject? view1) {
    return _onChildViewAdded(view, view1);
  }

  void onChildViewRemoved(jni$_.JObject? view, jni$_.JObject? view1) {
    return _onChildViewRemoved(view, view1);
  }
}

final class $ViewGroup$OnHierarchyChangeListener$NullableType
    extends jni$_.JObjType<ViewGroup$OnHierarchyChangeListener?> {
  @jni$_.internal
  const $ViewGroup$OnHierarchyChangeListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/view/ViewGroup$OnHierarchyChangeListener;';

  @jni$_.internal
  @core$_.override
  ViewGroup$OnHierarchyChangeListener? fromReference(
    jni$_.JReference reference,
  ) => reference.isNull
      ? null
      : ViewGroup$OnHierarchyChangeListener.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ViewGroup$OnHierarchyChangeListener?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($ViewGroup$OnHierarchyChangeListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($ViewGroup$OnHierarchyChangeListener$NullableType) &&
        other is $ViewGroup$OnHierarchyChangeListener$NullableType;
  }
}

final class $ViewGroup$OnHierarchyChangeListener$Type
    extends jni$_.JObjType<ViewGroup$OnHierarchyChangeListener> {
  @jni$_.internal
  const $ViewGroup$OnHierarchyChangeListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/view/ViewGroup$OnHierarchyChangeListener;';

  @jni$_.internal
  @core$_.override
  ViewGroup$OnHierarchyChangeListener fromReference(
    jni$_.JReference reference,
  ) => ViewGroup$OnHierarchyChangeListener.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ViewGroup$OnHierarchyChangeListener?> get nullableType =>
      const $ViewGroup$OnHierarchyChangeListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ViewGroup$OnHierarchyChangeListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ViewGroup$OnHierarchyChangeListener$Type) &&
        other is $ViewGroup$OnHierarchyChangeListener$Type;
  }
}

/// from: `android.view.ViewGroup`
class ViewGroup extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ViewGroup> $type;

  @jni$_.internal
  ViewGroup.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/view/ViewGroup');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ViewGroup$NullableType();
  static const type = $ViewGroup$Type();

  /// from: `static public final int FOCUS_AFTER_DESCENDANTS`
  static const FOCUS_AFTER_DESCENDANTS = 262144;

  /// from: `static public final int FOCUS_BEFORE_DESCENDANTS`
  static const FOCUS_BEFORE_DESCENDANTS = 131072;

  /// from: `static public final int FOCUS_BLOCK_DESCENDANTS`
  static const FOCUS_BLOCK_DESCENDANTS = 393216;

  /// from: `static public final int LAYOUT_MODE_CLIP_BOUNDS`
  static const LAYOUT_MODE_CLIP_BOUNDS = 0;

  /// from: `static public final int LAYOUT_MODE_OPTICAL_BOUNDS`
  static const LAYOUT_MODE_OPTICAL_BOUNDS = 1;

  /// from: `static public final int PERSISTENT_ALL_CACHES`
  static const PERSISTENT_ALL_CACHES = 3;

  /// from: `static public final int PERSISTENT_ANIMATION_CACHE`
  static const PERSISTENT_ANIMATION_CACHE = 1;

  /// from: `static public final int PERSISTENT_NO_CACHE`
  static const PERSISTENT_NO_CACHE = 0;

  /// from: `static public final int PERSISTENT_SCROLLING_CACHE`
  static const PERSISTENT_SCROLLING_CACHE = 2;
  static final _id_addChildrenForAccessibility = _class.instanceMethodId(
    r'addChildrenForAccessibility',
    r'(Ljava/util/ArrayList;)V',
  );

  static final _addChildrenForAccessibility =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addChildrenForAccessibility(java.util.ArrayList<android.view.View> arrayList)`
  void addChildrenForAccessibility(
    jni$_.JObject? arrayList,
  ) {
    final _$arrayList = arrayList?.reference ?? jni$_.jNullReference;
    _addChildrenForAccessibility(
      reference.pointer,
      _id_addChildrenForAccessibility as jni$_.JMethodIDPtr,
      _$arrayList.pointer,
    ).check();
  }

  static final _id_addExtraDataToAccessibilityNodeInfo = _class.instanceMethodId(
    r'addExtraDataToAccessibilityNodeInfo',
    r'(Landroid/view/accessibility/AccessibilityNodeInfo;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _addExtraDataToAccessibilityNodeInfo =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo accessibilityNodeInfo, java.lang.String string, android.os.Bundle bundle)`
  void addExtraDataToAccessibilityNodeInfo(
    jni$_.JObject? accessibilityNodeInfo,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$accessibilityNodeInfo =
        accessibilityNodeInfo?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _addExtraDataToAccessibilityNodeInfo(
      reference.pointer,
      _id_addExtraDataToAccessibilityNodeInfo as jni$_.JMethodIDPtr,
      _$accessibilityNodeInfo.pointer,
      _$string.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_addFocusables = _class.instanceMethodId(
    r'addFocusables',
    r'(Ljava/util/ArrayList;II)V',
  );

  static final _addFocusables =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public void addFocusables(java.util.ArrayList<android.view.View> arrayList, int i, int i1)`
  void addFocusables(
    jni$_.JObject? arrayList,
    int i,
    int i1,
  ) {
    final _$arrayList = arrayList?.reference ?? jni$_.jNullReference;
    _addFocusables(
      reference.pointer,
      _id_addFocusables as jni$_.JMethodIDPtr,
      _$arrayList.pointer,
      i,
      i1,
    ).check();
  }

  static final _id_addKeyboardNavigationClusters = _class.instanceMethodId(
    r'addKeyboardNavigationClusters',
    r'(Ljava/util/Collection;I)V',
  );

  static final _addKeyboardNavigationClusters =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void addKeyboardNavigationClusters(java.util.Collection<android.view.View> collection, int i)`
  void addKeyboardNavigationClusters(
    jni$_.JObject? collection,
    int i,
  ) {
    final _$collection = collection?.reference ?? jni$_.jNullReference;
    _addKeyboardNavigationClusters(
      reference.pointer,
      _id_addKeyboardNavigationClusters as jni$_.JMethodIDPtr,
      _$collection.pointer,
      i,
    ).check();
  }

  static final _id_addStatesFromChildren = _class.instanceMethodId(
    r'addStatesFromChildren',
    r'()Z',
  );

  static final _addStatesFromChildren =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean addStatesFromChildren()`
  bool addStatesFromChildren() {
    return _addStatesFromChildren(
      reference.pointer,
      _id_addStatesFromChildren as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_addTouchables = _class.instanceMethodId(
    r'addTouchables',
    r'(Ljava/util/ArrayList;)V',
  );

  static final _addTouchables =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addTouchables(java.util.ArrayList<android.view.View> arrayList)`
  void addTouchables(
    jni$_.JObject? arrayList,
  ) {
    final _$arrayList = arrayList?.reference ?? jni$_.jNullReference;
    _addTouchables(
      reference.pointer,
      _id_addTouchables as jni$_.JMethodIDPtr,
      _$arrayList.pointer,
    ).check();
  }

  static final _id_addView = _class.instanceMethodId(
    r'addView',
    r'(Landroid/view/View;)V',
  );

  static final _addView =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addView(android.view.View view)`
  void addView(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _addView(
      reference.pointer,
      _id_addView as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_addView$1 = _class.instanceMethodId(
    r'addView',
    r'(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V',
  );

  static final _addView$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)`
  void addView$1(
    jni$_.JObject? view,
    ViewGroup$LayoutParams? layoutParams,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    _addView$1(
      reference.pointer,
      _id_addView$1 as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$layoutParams.pointer,
    ).check();
  }

  static final _id_addView$2 = _class.instanceMethodId(
    r'addView',
    r'(Landroid/view/View;I)V',
  );

  static final _addView$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void addView(android.view.View view, int i)`
  void addView$2(
    jni$_.JObject? view,
    int i,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _addView$2(
      reference.pointer,
      _id_addView$2 as jni$_.JMethodIDPtr,
      _$view.pointer,
      i,
    ).check();
  }

  static final _id_addView$3 = _class.instanceMethodId(
    r'addView',
    r'(Landroid/view/View;ILandroid/view/ViewGroup$LayoutParams;)V',
  );

  static final _addView$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addView(android.view.View view, int i, android.view.ViewGroup$LayoutParams layoutParams)`
  void addView$3(
    jni$_.JObject? view,
    int i,
    ViewGroup$LayoutParams? layoutParams,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    _addView$3(
      reference.pointer,
      _id_addView$3 as jni$_.JMethodIDPtr,
      _$view.pointer,
      i,
      _$layoutParams.pointer,
    ).check();
  }

  static final _id_addView$4 = _class.instanceMethodId(
    r'addView',
    r'(Landroid/view/View;II)V',
  );

  static final _addView$4 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public void addView(android.view.View view, int i, int i1)`
  void addView$4(
    jni$_.JObject? view,
    int i,
    int i1,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _addView$4(
      reference.pointer,
      _id_addView$4 as jni$_.JMethodIDPtr,
      _$view.pointer,
      i,
      i1,
    ).check();
  }

  static final _id_bringChildToFront = _class.instanceMethodId(
    r'bringChildToFront',
    r'(Landroid/view/View;)V',
  );

  static final _bringChildToFront =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void bringChildToFront(android.view.View view)`
  void bringChildToFront(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _bringChildToFront(
      reference.pointer,
      _id_bringChildToFront as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_childDrawableStateChanged = _class.instanceMethodId(
    r'childDrawableStateChanged',
    r'(Landroid/view/View;)V',
  );

  static final _childDrawableStateChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void childDrawableStateChanged(android.view.View view)`
  void childDrawableStateChanged(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _childDrawableStateChanged(
      reference.pointer,
      _id_childDrawableStateChanged as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_childHasTransientStateChanged = _class.instanceMethodId(
    r'childHasTransientStateChanged',
    r'(Landroid/view/View;Z)V',
  );

  static final _childHasTransientStateChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void childHasTransientStateChanged(android.view.View view, boolean z)`
  void childHasTransientStateChanged(
    jni$_.JObject? view,
    bool z,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _childHasTransientStateChanged(
      reference.pointer,
      _id_childHasTransientStateChanged as jni$_.JMethodIDPtr,
      _$view.pointer,
      z ? 1 : 0,
    ).check();
  }

  static final _id_clearChildFocus = _class.instanceMethodId(
    r'clearChildFocus',
    r'(Landroid/view/View;)V',
  );

  static final _clearChildFocus =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void clearChildFocus(android.view.View view)`
  void clearChildFocus(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _clearChildFocus(
      reference.pointer,
      _id_clearChildFocus as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_clearDisappearingChildren = _class.instanceMethodId(
    r'clearDisappearingChildren',
    r'()V',
  );

  static final _clearDisappearingChildren =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void clearDisappearingChildren()`
  void clearDisappearingChildren() {
    _clearDisappearingChildren(
      reference.pointer,
      _id_clearDisappearingChildren as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_clearFocus = _class.instanceMethodId(
    r'clearFocus',
    r'()V',
  );

  static final _clearFocus =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void clearFocus()`
  void clearFocus() {
    _clearFocus(
      reference.pointer,
      _id_clearFocus as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_dispatchApplyWindowInsets = _class.instanceMethodId(
    r'dispatchApplyWindowInsets',
    r'(Landroid/view/WindowInsets;)Landroid/view/WindowInsets;',
  );

  static final _dispatchApplyWindowInsets =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets windowInsets)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? dispatchApplyWindowInsets(
    jni$_.JObject? windowInsets,
  ) {
    final _$windowInsets = windowInsets?.reference ?? jni$_.jNullReference;
    return _dispatchApplyWindowInsets(
      reference.pointer,
      _id_dispatchApplyWindowInsets as jni$_.JMethodIDPtr,
      _$windowInsets.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_dispatchCapturedPointerEvent = _class.instanceMethodId(
    r'dispatchCapturedPointerEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _dispatchCapturedPointerEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean dispatchCapturedPointerEvent(android.view.MotionEvent motionEvent)`
  bool dispatchCapturedPointerEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _dispatchCapturedPointerEvent(
      reference.pointer,
      _id_dispatchCapturedPointerEvent as jni$_.JMethodIDPtr,
      _$motionEvent.pointer,
    ).boolean;
  }

  static final _id_dispatchConfigurationChanged = _class.instanceMethodId(
    r'dispatchConfigurationChanged',
    r'(Landroid/content/res/Configuration;)V',
  );

  static final _dispatchConfigurationChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void dispatchConfigurationChanged(android.content.res.Configuration configuration)`
  void dispatchConfigurationChanged(
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    _dispatchConfigurationChanged(
      reference.pointer,
      _id_dispatchConfigurationChanged as jni$_.JMethodIDPtr,
      _$configuration.pointer,
    ).check();
  }

  static final _id_dispatchCreateViewTranslationRequest = _class.instanceMethodId(
    r'dispatchCreateViewTranslationRequest',
    r'(Ljava/util/Map;[ILandroid/view/translation/TranslationCapability;Ljava/util/List;)V',
  );

  static final _dispatchCreateViewTranslationRequest =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void dispatchCreateViewTranslationRequest(java.util.Map<android.view.autofill.AutofillId, long[]> map, int[] is, android.view.translation.TranslationCapability translationCapability, java.util.List<android.view.translation.ViewTranslationRequest> list)`
  void dispatchCreateViewTranslationRequest(
    jni$_.JMap<jni$_.JObject?, jni$_.JLongArray?>? map,
    jni$_.JIntArray? is$,
    jni$_.JObject? translationCapability,
    jni$_.JList<jni$_.JObject?>? list,
  ) {
    final _$map = map?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    final _$translationCapability =
        translationCapability?.reference ?? jni$_.jNullReference;
    final _$list = list?.reference ?? jni$_.jNullReference;
    _dispatchCreateViewTranslationRequest(
      reference.pointer,
      _id_dispatchCreateViewTranslationRequest as jni$_.JMethodIDPtr,
      _$map.pointer,
      _$is$.pointer,
      _$translationCapability.pointer,
      _$list.pointer,
    ).check();
  }

  static final _id_dispatchDisplayHint = _class.instanceMethodId(
    r'dispatchDisplayHint',
    r'(I)V',
  );

  static final _dispatchDisplayHint =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void dispatchDisplayHint(int i)`
  void dispatchDisplayHint(
    int i,
  ) {
    _dispatchDisplayHint(
      reference.pointer,
      _id_dispatchDisplayHint as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_dispatchDragEvent = _class.instanceMethodId(
    r'dispatchDragEvent',
    r'(Landroid/view/DragEvent;)Z',
  );

  static final _dispatchDragEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean dispatchDragEvent(android.view.DragEvent dragEvent)`
  bool dispatchDragEvent(
    jni$_.JObject? dragEvent,
  ) {
    final _$dragEvent = dragEvent?.reference ?? jni$_.jNullReference;
    return _dispatchDragEvent(
      reference.pointer,
      _id_dispatchDragEvent as jni$_.JMethodIDPtr,
      _$dragEvent.pointer,
    ).boolean;
  }

  static final _id_dispatchDrawableHotspotChanged = _class.instanceMethodId(
    r'dispatchDrawableHotspotChanged',
    r'(FF)V',
  );

  static final _dispatchDrawableHotspotChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double, jni$_.Double)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
            )
          >();

  /// from: `public void dispatchDrawableHotspotChanged(float f, float f1)`
  void dispatchDrawableHotspotChanged(
    double f,
    double f1,
  ) {
    _dispatchDrawableHotspotChanged(
      reference.pointer,
      _id_dispatchDrawableHotspotChanged as jni$_.JMethodIDPtr,
      f,
      f1,
    ).check();
  }

  static final _id_dispatchFinishTemporaryDetach = _class.instanceMethodId(
    r'dispatchFinishTemporaryDetach',
    r'()V',
  );

  static final _dispatchFinishTemporaryDetach =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void dispatchFinishTemporaryDetach()`
  void dispatchFinishTemporaryDetach() {
    _dispatchFinishTemporaryDetach(
      reference.pointer,
      _id_dispatchFinishTemporaryDetach as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_dispatchKeyEvent = _class.instanceMethodId(
    r'dispatchKeyEvent',
    r'(Landroid/view/KeyEvent;)Z',
  );

  static final _dispatchKeyEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean dispatchKeyEvent(android.view.KeyEvent keyEvent)`
  bool dispatchKeyEvent(
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _dispatchKeyEvent(
      reference.pointer,
      _id_dispatchKeyEvent as jni$_.JMethodIDPtr,
      _$keyEvent.pointer,
    ).boolean;
  }

  static final _id_dispatchKeyEventPreIme = _class.instanceMethodId(
    r'dispatchKeyEventPreIme',
    r'(Landroid/view/KeyEvent;)Z',
  );

  static final _dispatchKeyEventPreIme =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean dispatchKeyEventPreIme(android.view.KeyEvent keyEvent)`
  bool dispatchKeyEventPreIme(
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _dispatchKeyEventPreIme(
      reference.pointer,
      _id_dispatchKeyEventPreIme as jni$_.JMethodIDPtr,
      _$keyEvent.pointer,
    ).boolean;
  }

  static final _id_dispatchKeyShortcutEvent = _class.instanceMethodId(
    r'dispatchKeyShortcutEvent',
    r'(Landroid/view/KeyEvent;)Z',
  );

  static final _dispatchKeyShortcutEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean dispatchKeyShortcutEvent(android.view.KeyEvent keyEvent)`
  bool dispatchKeyShortcutEvent(
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _dispatchKeyShortcutEvent(
      reference.pointer,
      _id_dispatchKeyShortcutEvent as jni$_.JMethodIDPtr,
      _$keyEvent.pointer,
    ).boolean;
  }

  static final _id_dispatchPointerCaptureChanged = _class.instanceMethodId(
    r'dispatchPointerCaptureChanged',
    r'(Z)V',
  );

  static final _dispatchPointerCaptureChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void dispatchPointerCaptureChanged(boolean z)`
  void dispatchPointerCaptureChanged(
    bool z,
  ) {
    _dispatchPointerCaptureChanged(
      reference.pointer,
      _id_dispatchPointerCaptureChanged as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_dispatchProvideAutofillStructure = _class.instanceMethodId(
    r'dispatchProvideAutofillStructure',
    r'(Landroid/view/ViewStructure;I)V',
  );

  static final _dispatchProvideAutofillStructure =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void dispatchProvideAutofillStructure(android.view.ViewStructure viewStructure, int i)`
  void dispatchProvideAutofillStructure(
    jni$_.JObject? viewStructure,
    int i,
  ) {
    final _$viewStructure = viewStructure?.reference ?? jni$_.jNullReference;
    _dispatchProvideAutofillStructure(
      reference.pointer,
      _id_dispatchProvideAutofillStructure as jni$_.JMethodIDPtr,
      _$viewStructure.pointer,
      i,
    ).check();
  }

  static final _id_dispatchProvideStructure = _class.instanceMethodId(
    r'dispatchProvideStructure',
    r'(Landroid/view/ViewStructure;)V',
  );

  static final _dispatchProvideStructure =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void dispatchProvideStructure(android.view.ViewStructure viewStructure)`
  void dispatchProvideStructure(
    jni$_.JObject? viewStructure,
  ) {
    final _$viewStructure = viewStructure?.reference ?? jni$_.jNullReference;
    _dispatchProvideStructure(
      reference.pointer,
      _id_dispatchProvideStructure as jni$_.JMethodIDPtr,
      _$viewStructure.pointer,
    ).check();
  }

  static final _id_dispatchScrollCaptureSearch = _class.instanceMethodId(
    r'dispatchScrollCaptureSearch',
    r'(Landroid/graphics/Rect;Landroid/graphics/Point;Ljava/util/function/Consumer;)V',
  );

  static final _dispatchScrollCaptureSearch =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void dispatchScrollCaptureSearch(android.graphics.Rect rect, android.graphics.Point point, java.util.function.Consumer<android.view.ScrollCaptureTarget> consumer)`
  void dispatchScrollCaptureSearch(
    jni$_.JObject? rect,
    jni$_.JObject? point,
    jni$_.JObject? consumer,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    final _$point = point?.reference ?? jni$_.jNullReference;
    final _$consumer = consumer?.reference ?? jni$_.jNullReference;
    _dispatchScrollCaptureSearch(
      reference.pointer,
      _id_dispatchScrollCaptureSearch as jni$_.JMethodIDPtr,
      _$rect.pointer,
      _$point.pointer,
      _$consumer.pointer,
    ).check();
  }

  static final _id_dispatchSetActivated = _class.instanceMethodId(
    r'dispatchSetActivated',
    r'(Z)V',
  );

  static final _dispatchSetActivated =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void dispatchSetActivated(boolean z)`
  void dispatchSetActivated(
    bool z,
  ) {
    _dispatchSetActivated(
      reference.pointer,
      _id_dispatchSetActivated as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_dispatchSetSelected = _class.instanceMethodId(
    r'dispatchSetSelected',
    r'(Z)V',
  );

  static final _dispatchSetSelected =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void dispatchSetSelected(boolean z)`
  void dispatchSetSelected(
    bool z,
  ) {
    _dispatchSetSelected(
      reference.pointer,
      _id_dispatchSetSelected as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_dispatchStartTemporaryDetach = _class.instanceMethodId(
    r'dispatchStartTemporaryDetach',
    r'()V',
  );

  static final _dispatchStartTemporaryDetach =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void dispatchStartTemporaryDetach()`
  void dispatchStartTemporaryDetach() {
    _dispatchStartTemporaryDetach(
      reference.pointer,
      _id_dispatchStartTemporaryDetach as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_dispatchSystemUiVisibilityChanged = _class.instanceMethodId(
    r'dispatchSystemUiVisibilityChanged',
    r'(I)V',
  );

  static final _dispatchSystemUiVisibilityChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void dispatchSystemUiVisibilityChanged(int i)`
  void dispatchSystemUiVisibilityChanged(
    int i,
  ) {
    _dispatchSystemUiVisibilityChanged(
      reference.pointer,
      _id_dispatchSystemUiVisibilityChanged as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_dispatchTouchEvent = _class.instanceMethodId(
    r'dispatchTouchEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _dispatchTouchEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean dispatchTouchEvent(android.view.MotionEvent motionEvent)`
  bool dispatchTouchEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _dispatchTouchEvent(
      reference.pointer,
      _id_dispatchTouchEvent as jni$_.JMethodIDPtr,
      _$motionEvent.pointer,
    ).boolean;
  }

  static final _id_dispatchTrackballEvent = _class.instanceMethodId(
    r'dispatchTrackballEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _dispatchTrackballEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean dispatchTrackballEvent(android.view.MotionEvent motionEvent)`
  bool dispatchTrackballEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _dispatchTrackballEvent(
      reference.pointer,
      _id_dispatchTrackballEvent as jni$_.JMethodIDPtr,
      _$motionEvent.pointer,
    ).boolean;
  }

  static final _id_dispatchUnhandledMove = _class.instanceMethodId(
    r'dispatchUnhandledMove',
    r'(Landroid/view/View;I)Z',
  );

  static final _dispatchUnhandledMove =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public boolean dispatchUnhandledMove(android.view.View view, int i)`
  bool dispatchUnhandledMove(
    jni$_.JObject? view,
    int i,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    return _dispatchUnhandledMove(
      reference.pointer,
      _id_dispatchUnhandledMove as jni$_.JMethodIDPtr,
      _$view.pointer,
      i,
    ).boolean;
  }

  static final _id_dispatchWindowFocusChanged = _class.instanceMethodId(
    r'dispatchWindowFocusChanged',
    r'(Z)V',
  );

  static final _dispatchWindowFocusChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void dispatchWindowFocusChanged(boolean z)`
  void dispatchWindowFocusChanged(
    bool z,
  ) {
    _dispatchWindowFocusChanged(
      reference.pointer,
      _id_dispatchWindowFocusChanged as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_dispatchWindowInsetsAnimationEnd = _class.instanceMethodId(
    r'dispatchWindowInsetsAnimationEnd',
    r'(Landroid/view/WindowInsetsAnimation;)V',
  );

  static final _dispatchWindowInsetsAnimationEnd =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void dispatchWindowInsetsAnimationEnd(android.view.WindowInsetsAnimation windowInsetsAnimation)`
  void dispatchWindowInsetsAnimationEnd(
    jni$_.JObject? windowInsetsAnimation,
  ) {
    final _$windowInsetsAnimation =
        windowInsetsAnimation?.reference ?? jni$_.jNullReference;
    _dispatchWindowInsetsAnimationEnd(
      reference.pointer,
      _id_dispatchWindowInsetsAnimationEnd as jni$_.JMethodIDPtr,
      _$windowInsetsAnimation.pointer,
    ).check();
  }

  static final _id_dispatchWindowInsetsAnimationPrepare = _class
      .instanceMethodId(
        r'dispatchWindowInsetsAnimationPrepare',
        r'(Landroid/view/WindowInsetsAnimation;)V',
      );

  static final _dispatchWindowInsetsAnimationPrepare =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void dispatchWindowInsetsAnimationPrepare(android.view.WindowInsetsAnimation windowInsetsAnimation)`
  void dispatchWindowInsetsAnimationPrepare(
    jni$_.JObject? windowInsetsAnimation,
  ) {
    final _$windowInsetsAnimation =
        windowInsetsAnimation?.reference ?? jni$_.jNullReference;
    _dispatchWindowInsetsAnimationPrepare(
      reference.pointer,
      _id_dispatchWindowInsetsAnimationPrepare as jni$_.JMethodIDPtr,
      _$windowInsetsAnimation.pointer,
    ).check();
  }

  static final _id_dispatchWindowInsetsAnimationProgress = _class.instanceMethodId(
    r'dispatchWindowInsetsAnimationProgress',
    r'(Landroid/view/WindowInsets;Ljava/util/List;)Landroid/view/WindowInsets;',
  );

  static final _dispatchWindowInsetsAnimationProgress =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.view.WindowInsets dispatchWindowInsetsAnimationProgress(android.view.WindowInsets windowInsets, java.util.List<android.view.WindowInsetsAnimation> list)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? dispatchWindowInsetsAnimationProgress(
    jni$_.JObject? windowInsets,
    jni$_.JList<jni$_.JObject?>? list,
  ) {
    final _$windowInsets = windowInsets?.reference ?? jni$_.jNullReference;
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _dispatchWindowInsetsAnimationProgress(
      reference.pointer,
      _id_dispatchWindowInsetsAnimationProgress as jni$_.JMethodIDPtr,
      _$windowInsets.pointer,
      _$list.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_dispatchWindowInsetsAnimationStart = _class.instanceMethodId(
    r'dispatchWindowInsetsAnimationStart',
    r'(Landroid/view/WindowInsetsAnimation;Landroid/view/WindowInsetsAnimation$Bounds;)Landroid/view/WindowInsetsAnimation$Bounds;',
  );

  static final _dispatchWindowInsetsAnimationStart =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.view.WindowInsetsAnimation$Bounds dispatchWindowInsetsAnimationStart(android.view.WindowInsetsAnimation windowInsetsAnimation, android.view.WindowInsetsAnimation$Bounds bounds)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? dispatchWindowInsetsAnimationStart(
    jni$_.JObject? windowInsetsAnimation,
    jni$_.JObject? bounds,
  ) {
    final _$windowInsetsAnimation =
        windowInsetsAnimation?.reference ?? jni$_.jNullReference;
    final _$bounds = bounds?.reference ?? jni$_.jNullReference;
    return _dispatchWindowInsetsAnimationStart(
      reference.pointer,
      _id_dispatchWindowInsetsAnimationStart as jni$_.JMethodIDPtr,
      _$windowInsetsAnimation.pointer,
      _$bounds.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_dispatchWindowSystemUiVisiblityChanged = _class
      .instanceMethodId(
        r'dispatchWindowSystemUiVisiblityChanged',
        r'(I)V',
      );

  static final _dispatchWindowSystemUiVisiblityChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void dispatchWindowSystemUiVisiblityChanged(int i)`
  void dispatchWindowSystemUiVisiblityChanged(
    int i,
  ) {
    _dispatchWindowSystemUiVisiblityChanged(
      reference.pointer,
      _id_dispatchWindowSystemUiVisiblityChanged as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_dispatchWindowVisibilityChanged = _class.instanceMethodId(
    r'dispatchWindowVisibilityChanged',
    r'(I)V',
  );

  static final _dispatchWindowVisibilityChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void dispatchWindowVisibilityChanged(int i)`
  void dispatchWindowVisibilityChanged(
    int i,
  ) {
    _dispatchWindowVisibilityChanged(
      reference.pointer,
      _id_dispatchWindowVisibilityChanged as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_endViewTransition = _class.instanceMethodId(
    r'endViewTransition',
    r'(Landroid/view/View;)V',
  );

  static final _endViewTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void endViewTransition(android.view.View view)`
  void endViewTransition(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _endViewTransition(
      reference.pointer,
      _id_endViewTransition as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_findFocus = _class.instanceMethodId(
    r'findFocus',
    r'()Landroid/view/View;',
  );

  static final _findFocus =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.View findFocus()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? findFocus() {
    return _findFocus(
      reference.pointer,
      _id_findFocus as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_findOnBackInvokedDispatcherForChild = _class.instanceMethodId(
    r'findOnBackInvokedDispatcherForChild',
    r'(Landroid/view/View;Landroid/view/View;)Landroid/window/OnBackInvokedDispatcher;',
  );

  static final _findOnBackInvokedDispatcherForChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.window.OnBackInvokedDispatcher findOnBackInvokedDispatcherForChild(android.view.View view, android.view.View view1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? findOnBackInvokedDispatcherForChild(
    jni$_.JObject? view,
    jni$_.JObject? view1,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$view1 = view1?.reference ?? jni$_.jNullReference;
    return _findOnBackInvokedDispatcherForChild(
      reference.pointer,
      _id_findOnBackInvokedDispatcherForChild as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$view1.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_findViewsWithText = _class.instanceMethodId(
    r'findViewsWithText',
    r'(Ljava/util/ArrayList;Ljava/lang/CharSequence;I)V',
  );

  static final _findViewsWithText =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void findViewsWithText(java.util.ArrayList<android.view.View> arrayList, java.lang.CharSequence charSequence, int i)`
  void findViewsWithText(
    jni$_.JObject? arrayList,
    jni$_.JObject? charSequence,
    int i,
  ) {
    final _$arrayList = arrayList?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    _findViewsWithText(
      reference.pointer,
      _id_findViewsWithText as jni$_.JMethodIDPtr,
      _$arrayList.pointer,
      _$charSequence.pointer,
      i,
    ).check();
  }

  static final _id_focusSearch = _class.instanceMethodId(
    r'focusSearch',
    r'(Landroid/view/View;I)Landroid/view/View;',
  );

  static final _focusSearch =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public android.view.View focusSearch(android.view.View view, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? focusSearch(
    jni$_.JObject? view,
    int i,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    return _focusSearch(
      reference.pointer,
      _id_focusSearch as jni$_.JMethodIDPtr,
      _$view.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_focusableViewAvailable = _class.instanceMethodId(
    r'focusableViewAvailable',
    r'(Landroid/view/View;)V',
  );

  static final _focusableViewAvailable =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void focusableViewAvailable(android.view.View view)`
  void focusableViewAvailable(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _focusableViewAvailable(
      reference.pointer,
      _id_focusableViewAvailable as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_gatherTransparentRegion = _class.instanceMethodId(
    r'gatherTransparentRegion',
    r'(Landroid/graphics/Region;)Z',
  );

  static final _gatherTransparentRegion =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean gatherTransparentRegion(android.graphics.Region region)`
  bool gatherTransparentRegion(
    jni$_.JObject? region,
  ) {
    final _$region = region?.reference ?? jni$_.jNullReference;
    return _gatherTransparentRegion(
      reference.pointer,
      _id_gatherTransparentRegion as jni$_.JMethodIDPtr,
      _$region.pointer,
    ).boolean;
  }

  static final _id_generateLayoutParams = _class.instanceMethodId(
    r'generateLayoutParams',
    r'(Landroid/util/AttributeSet;)Landroid/view/ViewGroup$LayoutParams;',
  );

  static final _generateLayoutParams =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  ViewGroup$LayoutParams? generateLayoutParams(
    jni$_.JObject? attributeSet,
  ) {
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return _generateLayoutParams(
      reference.pointer,
      _id_generateLayoutParams as jni$_.JMethodIDPtr,
      _$attributeSet.pointer,
    ).object<ViewGroup$LayoutParams?>(
      const $ViewGroup$LayoutParams$NullableType(),
    );
  }

  static final _id_getAccessibilityClassName = _class.instanceMethodId(
    r'getAccessibilityClassName',
    r'()Ljava/lang/CharSequence;',
  );

  static final _getAccessibilityClassName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.CharSequence getAccessibilityClassName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getAccessibilityClassName() {
    return _getAccessibilityClassName(
      reference.pointer,
      _id_getAccessibilityClassName as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getChildAt = _class.instanceMethodId(
    r'getChildAt',
    r'(I)Landroid/view/View;',
  );

  static final _getChildAt =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public android.view.View getChildAt(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getChildAt(
    int i,
  ) {
    return _getChildAt(
      reference.pointer,
      _id_getChildAt as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getChildCount = _class.instanceMethodId(
    r'getChildCount',
    r'()I',
  );

  static final _getChildCount =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getChildCount()`
  int getChildCount() {
    return _getChildCount(
      reference.pointer,
      _id_getChildCount as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getChildDrawingOrder = _class.instanceMethodId(
    r'getChildDrawingOrder',
    r'(I)I',
  );

  static final _getChildDrawingOrder =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public final int getChildDrawingOrder(int i)`
  int getChildDrawingOrder(
    int i,
  ) {
    return _getChildDrawingOrder(
      reference.pointer,
      _id_getChildDrawingOrder as jni$_.JMethodIDPtr,
      i,
    ).integer;
  }

  static final _id_getChildMeasureSpec = _class.staticMethodId(
    r'getChildMeasureSpec',
    r'(III)I',
  );

  static final _getChildMeasureSpec =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              int,
            )
          >();

  /// from: `static public int getChildMeasureSpec(int i, int i1, int i2)`
  static int getChildMeasureSpec(
    int i,
    int i1,
    int i2,
  ) {
    return _getChildMeasureSpec(
      _class.reference.pointer,
      _id_getChildMeasureSpec as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
    ).integer;
  }

  static final _id_getChildVisibleRect = _class.instanceMethodId(
    r'getChildVisibleRect',
    r'(Landroid/view/View;Landroid/graphics/Rect;Landroid/graphics/Point;)Z',
  );

  static final _getChildVisibleRect =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean getChildVisibleRect(android.view.View view, android.graphics.Rect rect, android.graphics.Point point)`
  bool getChildVisibleRect(
    jni$_.JObject? view,
    jni$_.JObject? rect,
    jni$_.JObject? point,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    final _$point = point?.reference ?? jni$_.jNullReference;
    return _getChildVisibleRect(
      reference.pointer,
      _id_getChildVisibleRect as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$rect.pointer,
      _$point.pointer,
    ).boolean;
  }

  static final _id_getClipChildren = _class.instanceMethodId(
    r'getClipChildren',
    r'()Z',
  );

  static final _getClipChildren =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean getClipChildren()`
  bool getClipChildren() {
    return _getClipChildren(
      reference.pointer,
      _id_getClipChildren as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_getClipToPadding = _class.instanceMethodId(
    r'getClipToPadding',
    r'()Z',
  );

  static final _getClipToPadding =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean getClipToPadding()`
  bool getClipToPadding() {
    return _getClipToPadding(
      reference.pointer,
      _id_getClipToPadding as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_getDescendantFocusability = _class.instanceMethodId(
    r'getDescendantFocusability',
    r'()I',
  );

  static final _getDescendantFocusability =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getDescendantFocusability()`
  int getDescendantFocusability() {
    return _getDescendantFocusability(
      reference.pointer,
      _id_getDescendantFocusability as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getFocusedChild = _class.instanceMethodId(
    r'getFocusedChild',
    r'()Landroid/view/View;',
  );

  static final _getFocusedChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.View getFocusedChild()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFocusedChild() {
    return _getFocusedChild(
      reference.pointer,
      _id_getFocusedChild as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getLayoutAnimation = _class.instanceMethodId(
    r'getLayoutAnimation',
    r'()Landroid/view/animation/LayoutAnimationController;',
  );

  static final _getLayoutAnimation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.animation.LayoutAnimationController getLayoutAnimation()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getLayoutAnimation() {
    return _getLayoutAnimation(
      reference.pointer,
      _id_getLayoutAnimation as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getLayoutAnimationListener = _class.instanceMethodId(
    r'getLayoutAnimationListener',
    r'()Landroid/view/animation/Animation$AnimationListener;',
  );

  static final _getLayoutAnimationListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.animation.Animation$AnimationListener getLayoutAnimationListener()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getLayoutAnimationListener() {
    return _getLayoutAnimationListener(
      reference.pointer,
      _id_getLayoutAnimationListener as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getLayoutMode = _class.instanceMethodId(
    r'getLayoutMode',
    r'()I',
  );

  static final _getLayoutMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getLayoutMode()`
  int getLayoutMode() {
    return _getLayoutMode(
      reference.pointer,
      _id_getLayoutMode as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getLayoutTransition = _class.instanceMethodId(
    r'getLayoutTransition',
    r'()Landroid/animation/LayoutTransition;',
  );

  static final _getLayoutTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.animation.LayoutTransition getLayoutTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getLayoutTransition() {
    return _getLayoutTransition(
      reference.pointer,
      _id_getLayoutTransition as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getNestedScrollAxes = _class.instanceMethodId(
    r'getNestedScrollAxes',
    r'()I',
  );

  static final _getNestedScrollAxes =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getNestedScrollAxes()`
  int getNestedScrollAxes() {
    return _getNestedScrollAxes(
      reference.pointer,
      _id_getNestedScrollAxes as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getOverlay = _class.instanceMethodId(
    r'getOverlay',
    r'()Landroid/view/ViewGroupOverlay;',
  );

  static final _getOverlay =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.ViewGroupOverlay getOverlay()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getOverlay() {
    return _getOverlay(
      reference.pointer,
      _id_getOverlay as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPersistentDrawingCache = _class.instanceMethodId(
    r'getPersistentDrawingCache',
    r'()I',
  );

  static final _getPersistentDrawingCache =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getPersistentDrawingCache()`
  int getPersistentDrawingCache() {
    return _getPersistentDrawingCache(
      reference.pointer,
      _id_getPersistentDrawingCache as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getTouchscreenBlocksFocus = _class.instanceMethodId(
    r'getTouchscreenBlocksFocus',
    r'()Z',
  );

  static final _getTouchscreenBlocksFocus =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean getTouchscreenBlocksFocus()`
  bool getTouchscreenBlocksFocus() {
    return _getTouchscreenBlocksFocus(
      reference.pointer,
      _id_getTouchscreenBlocksFocus as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_hasFocus = _class.instanceMethodId(
    r'hasFocus',
    r'()Z',
  );

  static final _hasFocus =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean hasFocus()`
  bool hasFocus() {
    return _hasFocus(
      reference.pointer,
      _id_hasFocus as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_hasTransientState = _class.instanceMethodId(
    r'hasTransientState',
    r'()Z',
  );

  static final _hasTransientState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean hasTransientState()`
  bool hasTransientState() {
    return _hasTransientState(
      reference.pointer,
      _id_hasTransientState as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_indexOfChild = _class.instanceMethodId(
    r'indexOfChild',
    r'(Landroid/view/View;)I',
  );

  static final _indexOfChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public int indexOfChild(android.view.View view)`
  int indexOfChild(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    return _indexOfChild(
      reference.pointer,
      _id_indexOfChild as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).integer;
  }

  static final _id_invalidateChild = _class.instanceMethodId(
    r'invalidateChild',
    r'(Landroid/view/View;Landroid/graphics/Rect;)V',
  );

  static final _invalidateChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final void invalidateChild(android.view.View view, android.graphics.Rect rect)`
  void invalidateChild(
    jni$_.JObject? view,
    jni$_.JObject? rect,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    _invalidateChild(
      reference.pointer,
      _id_invalidateChild as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$rect.pointer,
    ).check();
  }

  static final _id_invalidateChildInParent = _class.instanceMethodId(
    r'invalidateChildInParent',
    r'([ILandroid/graphics/Rect;)Landroid/view/ViewParent;',
  );

  static final _invalidateChildInParent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.view.ViewParent invalidateChildInParent(int[] is, android.graphics.Rect rect)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? invalidateChildInParent(
    jni$_.JIntArray? is$,
    jni$_.JObject? rect,
  ) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    return _invalidateChildInParent(
      reference.pointer,
      _id_invalidateChildInParent as jni$_.JMethodIDPtr,
      _$is$.pointer,
      _$rect.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_isAlwaysDrawnWithCacheEnabled = _class.instanceMethodId(
    r'isAlwaysDrawnWithCacheEnabled',
    r'()Z',
  );

  static final _isAlwaysDrawnWithCacheEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isAlwaysDrawnWithCacheEnabled()`
  bool isAlwaysDrawnWithCacheEnabled() {
    return _isAlwaysDrawnWithCacheEnabled(
      reference.pointer,
      _id_isAlwaysDrawnWithCacheEnabled as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isAnimationCacheEnabled = _class.instanceMethodId(
    r'isAnimationCacheEnabled',
    r'()Z',
  );

  static final _isAnimationCacheEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isAnimationCacheEnabled()`
  bool isAnimationCacheEnabled() {
    return _isAnimationCacheEnabled(
      reference.pointer,
      _id_isAnimationCacheEnabled as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isLayoutSuppressed = _class.instanceMethodId(
    r'isLayoutSuppressed',
    r'()Z',
  );

  static final _isLayoutSuppressed =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isLayoutSuppressed()`
  bool isLayoutSuppressed() {
    return _isLayoutSuppressed(
      reference.pointer,
      _id_isLayoutSuppressed as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isMotionEventSplittingEnabled = _class.instanceMethodId(
    r'isMotionEventSplittingEnabled',
    r'()Z',
  );

  static final _isMotionEventSplittingEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isMotionEventSplittingEnabled()`
  bool isMotionEventSplittingEnabled() {
    return _isMotionEventSplittingEnabled(
      reference.pointer,
      _id_isMotionEventSplittingEnabled as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isTransitionGroup = _class.instanceMethodId(
    r'isTransitionGroup',
    r'()Z',
  );

  static final _isTransitionGroup =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isTransitionGroup()`
  bool isTransitionGroup() {
    return _isTransitionGroup(
      reference.pointer,
      _id_isTransitionGroup as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_jumpDrawablesToCurrentState = _class.instanceMethodId(
    r'jumpDrawablesToCurrentState',
    r'()V',
  );

  static final _jumpDrawablesToCurrentState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void jumpDrawablesToCurrentState()`
  void jumpDrawablesToCurrentState() {
    _jumpDrawablesToCurrentState(
      reference.pointer,
      _id_jumpDrawablesToCurrentState as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_layout = _class.instanceMethodId(
    r'layout',
    r'(IIII)V',
  );

  static final _layout =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Int32, jni$_.Int32, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              int,
              int,
            )
          >();

  /// from: `public final void layout(int i, int i1, int i2, int i3)`
  void layout(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _layout(
      reference.pointer,
      _id_layout as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
      i3,
    ).check();
  }

  static final _id_notifySubtreeAccessibilityStateChanged = _class
      .instanceMethodId(
        r'notifySubtreeAccessibilityStateChanged',
        r'(Landroid/view/View;Landroid/view/View;I)V',
      );

  static final _notifySubtreeAccessibilityStateChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void notifySubtreeAccessibilityStateChanged(android.view.View view, android.view.View view1, int i)`
  void notifySubtreeAccessibilityStateChanged(
    jni$_.JObject? view,
    jni$_.JObject? view1,
    int i,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$view1 = view1?.reference ?? jni$_.jNullReference;
    _notifySubtreeAccessibilityStateChanged(
      reference.pointer,
      _id_notifySubtreeAccessibilityStateChanged as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$view1.pointer,
      i,
    ).check();
  }

  static final _id_offsetDescendantRectToMyCoords = _class.instanceMethodId(
    r'offsetDescendantRectToMyCoords',
    r'(Landroid/view/View;Landroid/graphics/Rect;)V',
  );

  static final _offsetDescendantRectToMyCoords =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final void offsetDescendantRectToMyCoords(android.view.View view, android.graphics.Rect rect)`
  void offsetDescendantRectToMyCoords(
    jni$_.JObject? view,
    jni$_.JObject? rect,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    _offsetDescendantRectToMyCoords(
      reference.pointer,
      _id_offsetDescendantRectToMyCoords as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$rect.pointer,
    ).check();
  }

  static final _id_offsetRectIntoDescendantCoords = _class.instanceMethodId(
    r'offsetRectIntoDescendantCoords',
    r'(Landroid/view/View;Landroid/graphics/Rect;)V',
  );

  static final _offsetRectIntoDescendantCoords =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final void offsetRectIntoDescendantCoords(android.view.View view, android.graphics.Rect rect)`
  void offsetRectIntoDescendantCoords(
    jni$_.JObject? view,
    jni$_.JObject? rect,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    _offsetRectIntoDescendantCoords(
      reference.pointer,
      _id_offsetRectIntoDescendantCoords as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$rect.pointer,
    ).check();
  }

  static final _id_onDescendantInvalidated = _class.instanceMethodId(
    r'onDescendantInvalidated',
    r'(Landroid/view/View;Landroid/view/View;)V',
  );

  static final _onDescendantInvalidated =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onDescendantInvalidated(android.view.View view, android.view.View view1)`
  void onDescendantInvalidated(
    jni$_.JObject? view,
    jni$_.JObject? view1,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$view1 = view1?.reference ?? jni$_.jNullReference;
    _onDescendantInvalidated(
      reference.pointer,
      _id_onDescendantInvalidated as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$view1.pointer,
    ).check();
  }

  static final _id_onInterceptHoverEvent = _class.instanceMethodId(
    r'onInterceptHoverEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onInterceptHoverEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean onInterceptHoverEvent(android.view.MotionEvent motionEvent)`
  bool onInterceptHoverEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _onInterceptHoverEvent(
      reference.pointer,
      _id_onInterceptHoverEvent as jni$_.JMethodIDPtr,
      _$motionEvent.pointer,
    ).boolean;
  }

  static final _id_onInterceptTouchEvent = _class.instanceMethodId(
    r'onInterceptTouchEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onInterceptTouchEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean onInterceptTouchEvent(android.view.MotionEvent motionEvent)`
  bool onInterceptTouchEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _onInterceptTouchEvent(
      reference.pointer,
      _id_onInterceptTouchEvent as jni$_.JMethodIDPtr,
      _$motionEvent.pointer,
    ).boolean;
  }

  static final _id_onNestedFling = _class.instanceMethodId(
    r'onNestedFling',
    r'(Landroid/view/View;FFZ)Z',
  );

  static final _onNestedFling =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Double,
                    jni$_.Double,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              double,
              double,
              int,
            )
          >();

  /// from: `public boolean onNestedFling(android.view.View view, float f, float f1, boolean z)`
  bool onNestedFling(
    jni$_.JObject? view,
    double f,
    double f1,
    bool z,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    return _onNestedFling(
      reference.pointer,
      _id_onNestedFling as jni$_.JMethodIDPtr,
      _$view.pointer,
      f,
      f1,
      z ? 1 : 0,
    ).boolean;
  }

  static final _id_onNestedPreFling = _class.instanceMethodId(
    r'onNestedPreFling',
    r'(Landroid/view/View;FF)Z',
  );

  static final _onNestedPreFling =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Double, jni$_.Double)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              double,
              double,
            )
          >();

  /// from: `public boolean onNestedPreFling(android.view.View view, float f, float f1)`
  bool onNestedPreFling(
    jni$_.JObject? view,
    double f,
    double f1,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    return _onNestedPreFling(
      reference.pointer,
      _id_onNestedPreFling as jni$_.JMethodIDPtr,
      _$view.pointer,
      f,
      f1,
    ).boolean;
  }

  static final _id_onNestedPrePerformAccessibilityAction = _class
      .instanceMethodId(
        r'onNestedPrePerformAccessibilityAction',
        r'(Landroid/view/View;ILandroid/os/Bundle;)Z',
      );

  static final _onNestedPrePerformAccessibilityAction =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean onNestedPrePerformAccessibilityAction(android.view.View view, int i, android.os.Bundle bundle)`
  bool onNestedPrePerformAccessibilityAction(
    jni$_.JObject? view,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _onNestedPrePerformAccessibilityAction(
      reference.pointer,
      _id_onNestedPrePerformAccessibilityAction as jni$_.JMethodIDPtr,
      _$view.pointer,
      i,
      _$bundle.pointer,
    ).boolean;
  }

  static final _id_onNestedPreScroll = _class.instanceMethodId(
    r'onNestedPreScroll',
    r'(Landroid/view/View;II[I)V',
  );

  static final _onNestedPreScroll =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onNestedPreScroll(android.view.View view, int i, int i1, int[] is)`
  void onNestedPreScroll(
    jni$_.JObject? view,
    int i,
    int i1,
    jni$_.JIntArray? is$,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    _onNestedPreScroll(
      reference.pointer,
      _id_onNestedPreScroll as jni$_.JMethodIDPtr,
      _$view.pointer,
      i,
      i1,
      _$is$.pointer,
    ).check();
  }

  static final _id_onNestedScroll = _class.instanceMethodId(
    r'onNestedScroll',
    r'(Landroid/view/View;IIII)V',
  );

  static final _onNestedScroll =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              int,
            )
          >();

  /// from: `public void onNestedScroll(android.view.View view, int i, int i1, int i2, int i3)`
  void onNestedScroll(
    jni$_.JObject? view,
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _onNestedScroll(
      reference.pointer,
      _id_onNestedScroll as jni$_.JMethodIDPtr,
      _$view.pointer,
      i,
      i1,
      i2,
      i3,
    ).check();
  }

  static final _id_onNestedScrollAccepted = _class.instanceMethodId(
    r'onNestedScrollAccepted',
    r'(Landroid/view/View;Landroid/view/View;I)V',
  );

  static final _onNestedScrollAccepted =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void onNestedScrollAccepted(android.view.View view, android.view.View view1, int i)`
  void onNestedScrollAccepted(
    jni$_.JObject? view,
    jni$_.JObject? view1,
    int i,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$view1 = view1?.reference ?? jni$_.jNullReference;
    _onNestedScrollAccepted(
      reference.pointer,
      _id_onNestedScrollAccepted as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$view1.pointer,
      i,
    ).check();
  }

  static final _id_onRequestSendAccessibilityEvent = _class.instanceMethodId(
    r'onRequestSendAccessibilityEvent',
    r'(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)Z',
  );

  static final _onRequestSendAccessibilityEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean onRequestSendAccessibilityEvent(android.view.View view, android.view.accessibility.AccessibilityEvent accessibilityEvent)`
  bool onRequestSendAccessibilityEvent(
    jni$_.JObject? view,
    jni$_.JObject? accessibilityEvent,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$accessibilityEvent =
        accessibilityEvent?.reference ?? jni$_.jNullReference;
    return _onRequestSendAccessibilityEvent(
      reference.pointer,
      _id_onRequestSendAccessibilityEvent as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$accessibilityEvent.pointer,
    ).boolean;
  }

  static final _id_onResolvePointerIcon = _class.instanceMethodId(
    r'onResolvePointerIcon',
    r'(Landroid/view/MotionEvent;I)Landroid/view/PointerIcon;',
  );

  static final _onResolvePointerIcon =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent motionEvent, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onResolvePointerIcon(
    jni$_.JObject? motionEvent,
    int i,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _onResolvePointerIcon(
      reference.pointer,
      _id_onResolvePointerIcon as jni$_.JMethodIDPtr,
      _$motionEvent.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onStartNestedScroll = _class.instanceMethodId(
    r'onStartNestedScroll',
    r'(Landroid/view/View;Landroid/view/View;I)Z',
  );

  static final _onStartNestedScroll =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public boolean onStartNestedScroll(android.view.View view, android.view.View view1, int i)`
  bool onStartNestedScroll(
    jni$_.JObject? view,
    jni$_.JObject? view1,
    int i,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$view1 = view1?.reference ?? jni$_.jNullReference;
    return _onStartNestedScroll(
      reference.pointer,
      _id_onStartNestedScroll as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$view1.pointer,
      i,
    ).boolean;
  }

  static final _id_onStopNestedScroll = _class.instanceMethodId(
    r'onStopNestedScroll',
    r'(Landroid/view/View;)V',
  );

  static final _onStopNestedScroll =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onStopNestedScroll(android.view.View view)`
  void onStopNestedScroll(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _onStopNestedScroll(
      reference.pointer,
      _id_onStopNestedScroll as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_onViewAdded = _class.instanceMethodId(
    r'onViewAdded',
    r'(Landroid/view/View;)V',
  );

  static final _onViewAdded =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onViewAdded(android.view.View view)`
  void onViewAdded(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _onViewAdded(
      reference.pointer,
      _id_onViewAdded as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_onViewRemoved = _class.instanceMethodId(
    r'onViewRemoved',
    r'(Landroid/view/View;)V',
  );

  static final _onViewRemoved =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onViewRemoved(android.view.View view)`
  void onViewRemoved(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _onViewRemoved(
      reference.pointer,
      _id_onViewRemoved as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_propagateRequestedFrameRate = _class.instanceMethodId(
    r'propagateRequestedFrameRate',
    r'(FZ)V',
  );

  static final _propagateRequestedFrameRate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              int,
            )
          >();

  /// from: `public void propagateRequestedFrameRate(float f, boolean z)`
  void propagateRequestedFrameRate(
    double f,
    bool z,
  ) {
    _propagateRequestedFrameRate(
      reference.pointer,
      _id_propagateRequestedFrameRate as jni$_.JMethodIDPtr,
      f,
      z ? 1 : 0,
    ).check();
  }

  static final _id_recomputeViewAttributes = _class.instanceMethodId(
    r'recomputeViewAttributes',
    r'(Landroid/view/View;)V',
  );

  static final _recomputeViewAttributes =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void recomputeViewAttributes(android.view.View view)`
  void recomputeViewAttributes(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _recomputeViewAttributes(
      reference.pointer,
      _id_recomputeViewAttributes as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_removeAllViews = _class.instanceMethodId(
    r'removeAllViews',
    r'()V',
  );

  static final _removeAllViews =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void removeAllViews()`
  void removeAllViews() {
    _removeAllViews(
      reference.pointer,
      _id_removeAllViews as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_removeAllViewsInLayout = _class.instanceMethodId(
    r'removeAllViewsInLayout',
    r'()V',
  );

  static final _removeAllViewsInLayout =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void removeAllViewsInLayout()`
  void removeAllViewsInLayout() {
    _removeAllViewsInLayout(
      reference.pointer,
      _id_removeAllViewsInLayout as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_removeView = _class.instanceMethodId(
    r'removeView',
    r'(Landroid/view/View;)V',
  );

  static final _removeView =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void removeView(android.view.View view)`
  void removeView(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _removeView(
      reference.pointer,
      _id_removeView as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_removeViewAt = _class.instanceMethodId(
    r'removeViewAt',
    r'(I)V',
  );

  static final _removeViewAt =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void removeViewAt(int i)`
  void removeViewAt(
    int i,
  ) {
    _removeViewAt(
      reference.pointer,
      _id_removeViewAt as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_removeViewInLayout = _class.instanceMethodId(
    r'removeViewInLayout',
    r'(Landroid/view/View;)V',
  );

  static final _removeViewInLayout =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void removeViewInLayout(android.view.View view)`
  void removeViewInLayout(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _removeViewInLayout(
      reference.pointer,
      _id_removeViewInLayout as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_removeViews = _class.instanceMethodId(
    r'removeViews',
    r'(II)V',
  );

  static final _removeViews =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
            )
          >();

  /// from: `public void removeViews(int i, int i1)`
  void removeViews(
    int i,
    int i1,
  ) {
    _removeViews(
      reference.pointer,
      _id_removeViews as jni$_.JMethodIDPtr,
      i,
      i1,
    ).check();
  }

  static final _id_removeViewsInLayout = _class.instanceMethodId(
    r'removeViewsInLayout',
    r'(II)V',
  );

  static final _removeViewsInLayout =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
            )
          >();

  /// from: `public void removeViewsInLayout(int i, int i1)`
  void removeViewsInLayout(
    int i,
    int i1,
  ) {
    _removeViewsInLayout(
      reference.pointer,
      _id_removeViewsInLayout as jni$_.JMethodIDPtr,
      i,
      i1,
    ).check();
  }

  static final _id_requestChildFocus = _class.instanceMethodId(
    r'requestChildFocus',
    r'(Landroid/view/View;Landroid/view/View;)V',
  );

  static final _requestChildFocus =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void requestChildFocus(android.view.View view, android.view.View view1)`
  void requestChildFocus(
    jni$_.JObject? view,
    jni$_.JObject? view1,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$view1 = view1?.reference ?? jni$_.jNullReference;
    _requestChildFocus(
      reference.pointer,
      _id_requestChildFocus as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$view1.pointer,
    ).check();
  }

  static final _id_requestChildRectangleOnScreen = _class.instanceMethodId(
    r'requestChildRectangleOnScreen',
    r'(Landroid/view/View;Landroid/graphics/Rect;Z)Z',
  );

  static final _requestChildRectangleOnScreen =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public boolean requestChildRectangleOnScreen(android.view.View view, android.graphics.Rect rect, boolean z)`
  bool requestChildRectangleOnScreen(
    jni$_.JObject? view,
    jni$_.JObject? rect,
    bool z,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    return _requestChildRectangleOnScreen(
      reference.pointer,
      _id_requestChildRectangleOnScreen as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$rect.pointer,
      z ? 1 : 0,
    ).boolean;
  }

  static final _id_requestDisallowInterceptTouchEvent = _class.instanceMethodId(
    r'requestDisallowInterceptTouchEvent',
    r'(Z)V',
  );

  static final _requestDisallowInterceptTouchEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void requestDisallowInterceptTouchEvent(boolean z)`
  void requestDisallowInterceptTouchEvent(
    bool z,
  ) {
    _requestDisallowInterceptTouchEvent(
      reference.pointer,
      _id_requestDisallowInterceptTouchEvent as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_requestFocus = _class.instanceMethodId(
    r'requestFocus',
    r'(ILandroid/graphics/Rect;)Z',
  );

  static final _requestFocus =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean requestFocus(int i, android.graphics.Rect rect)`
  bool requestFocus(
    int i,
    jni$_.JObject? rect,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    return _requestFocus(
      reference.pointer,
      _id_requestFocus as jni$_.JMethodIDPtr,
      i,
      _$rect.pointer,
    ).boolean;
  }

  static final _id_requestSendAccessibilityEvent = _class.instanceMethodId(
    r'requestSendAccessibilityEvent',
    r'(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)Z',
  );

  static final _requestSendAccessibilityEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean requestSendAccessibilityEvent(android.view.View view, android.view.accessibility.AccessibilityEvent accessibilityEvent)`
  bool requestSendAccessibilityEvent(
    jni$_.JObject? view,
    jni$_.JObject? accessibilityEvent,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$accessibilityEvent =
        accessibilityEvent?.reference ?? jni$_.jNullReference;
    return _requestSendAccessibilityEvent(
      reference.pointer,
      _id_requestSendAccessibilityEvent as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$accessibilityEvent.pointer,
    ).boolean;
  }

  static final _id_requestTransparentRegion = _class.instanceMethodId(
    r'requestTransparentRegion',
    r'(Landroid/view/View;)V',
  );

  static final _requestTransparentRegion =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void requestTransparentRegion(android.view.View view)`
  void requestTransparentRegion(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _requestTransparentRegion(
      reference.pointer,
      _id_requestTransparentRegion as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_restoreDefaultFocus = _class.instanceMethodId(
    r'restoreDefaultFocus',
    r'()Z',
  );

  static final _restoreDefaultFocus =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean restoreDefaultFocus()`
  bool restoreDefaultFocus() {
    return _restoreDefaultFocus(
      reference.pointer,
      _id_restoreDefaultFocus as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_scheduleLayoutAnimation = _class.instanceMethodId(
    r'scheduleLayoutAnimation',
    r'()V',
  );

  static final _scheduleLayoutAnimation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void scheduleLayoutAnimation()`
  void scheduleLayoutAnimation() {
    _scheduleLayoutAnimation(
      reference.pointer,
      _id_scheduleLayoutAnimation as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_setAddStatesFromChildren = _class.instanceMethodId(
    r'setAddStatesFromChildren',
    r'(Z)V',
  );

  static final _setAddStatesFromChildren =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setAddStatesFromChildren(boolean z)`
  void setAddStatesFromChildren(
    bool z,
  ) {
    _setAddStatesFromChildren(
      reference.pointer,
      _id_setAddStatesFromChildren as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_setAlwaysDrawnWithCacheEnabled = _class.instanceMethodId(
    r'setAlwaysDrawnWithCacheEnabled',
    r'(Z)V',
  );

  static final _setAlwaysDrawnWithCacheEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setAlwaysDrawnWithCacheEnabled(boolean z)`
  void setAlwaysDrawnWithCacheEnabled(
    bool z,
  ) {
    _setAlwaysDrawnWithCacheEnabled(
      reference.pointer,
      _id_setAlwaysDrawnWithCacheEnabled as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_setAnimationCacheEnabled = _class.instanceMethodId(
    r'setAnimationCacheEnabled',
    r'(Z)V',
  );

  static final _setAnimationCacheEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setAnimationCacheEnabled(boolean z)`
  void setAnimationCacheEnabled(
    bool z,
  ) {
    _setAnimationCacheEnabled(
      reference.pointer,
      _id_setAnimationCacheEnabled as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_setClipChildren = _class.instanceMethodId(
    r'setClipChildren',
    r'(Z)V',
  );

  static final _setClipChildren =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setClipChildren(boolean z)`
  void setClipChildren(
    bool z,
  ) {
    _setClipChildren(
      reference.pointer,
      _id_setClipChildren as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_setClipToPadding = _class.instanceMethodId(
    r'setClipToPadding',
    r'(Z)V',
  );

  static final _setClipToPadding =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setClipToPadding(boolean z)`
  void setClipToPadding(
    bool z,
  ) {
    _setClipToPadding(
      reference.pointer,
      _id_setClipToPadding as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_setDescendantFocusability = _class.instanceMethodId(
    r'setDescendantFocusability',
    r'(I)V',
  );

  static final _setDescendantFocusability =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setDescendantFocusability(int i)`
  void setDescendantFocusability(
    int i,
  ) {
    _setDescendantFocusability(
      reference.pointer,
      _id_setDescendantFocusability as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_setLayoutAnimation = _class.instanceMethodId(
    r'setLayoutAnimation',
    r'(Landroid/view/animation/LayoutAnimationController;)V',
  );

  static final _setLayoutAnimation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setLayoutAnimation(android.view.animation.LayoutAnimationController layoutAnimationController)`
  void setLayoutAnimation(
    jni$_.JObject? layoutAnimationController,
  ) {
    final _$layoutAnimationController =
        layoutAnimationController?.reference ?? jni$_.jNullReference;
    _setLayoutAnimation(
      reference.pointer,
      _id_setLayoutAnimation as jni$_.JMethodIDPtr,
      _$layoutAnimationController.pointer,
    ).check();
  }

  static final _id_setLayoutAnimationListener = _class.instanceMethodId(
    r'setLayoutAnimationListener',
    r'(Landroid/view/animation/Animation$AnimationListener;)V',
  );

  static final _setLayoutAnimationListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener animationListener)`
  void setLayoutAnimationListener(
    jni$_.JObject? animationListener,
  ) {
    final _$animationListener =
        animationListener?.reference ?? jni$_.jNullReference;
    _setLayoutAnimationListener(
      reference.pointer,
      _id_setLayoutAnimationListener as jni$_.JMethodIDPtr,
      _$animationListener.pointer,
    ).check();
  }

  static final _id_setLayoutMode = _class.instanceMethodId(
    r'setLayoutMode',
    r'(I)V',
  );

  static final _setLayoutMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setLayoutMode(int i)`
  void setLayoutMode(
    int i,
  ) {
    _setLayoutMode(
      reference.pointer,
      _id_setLayoutMode as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_setLayoutTransition = _class.instanceMethodId(
    r'setLayoutTransition',
    r'(Landroid/animation/LayoutTransition;)V',
  );

  static final _setLayoutTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setLayoutTransition(android.animation.LayoutTransition layoutTransition)`
  void setLayoutTransition(
    jni$_.JObject? layoutTransition,
  ) {
    final _$layoutTransition =
        layoutTransition?.reference ?? jni$_.jNullReference;
    _setLayoutTransition(
      reference.pointer,
      _id_setLayoutTransition as jni$_.JMethodIDPtr,
      _$layoutTransition.pointer,
    ).check();
  }

  static final _id_setMotionEventSplittingEnabled = _class.instanceMethodId(
    r'setMotionEventSplittingEnabled',
    r'(Z)V',
  );

  static final _setMotionEventSplittingEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setMotionEventSplittingEnabled(boolean z)`
  void setMotionEventSplittingEnabled(
    bool z,
  ) {
    _setMotionEventSplittingEnabled(
      reference.pointer,
      _id_setMotionEventSplittingEnabled as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_setOnHierarchyChangeListener = _class.instanceMethodId(
    r'setOnHierarchyChangeListener',
    r'(Landroid/view/ViewGroup$OnHierarchyChangeListener;)V',
  );

  static final _setOnHierarchyChangeListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener onHierarchyChangeListener)`
  void setOnHierarchyChangeListener(
    ViewGroup$OnHierarchyChangeListener? onHierarchyChangeListener,
  ) {
    final _$onHierarchyChangeListener =
        onHierarchyChangeListener?.reference ?? jni$_.jNullReference;
    _setOnHierarchyChangeListener(
      reference.pointer,
      _id_setOnHierarchyChangeListener as jni$_.JMethodIDPtr,
      _$onHierarchyChangeListener.pointer,
    ).check();
  }

  static final _id_setPersistentDrawingCache = _class.instanceMethodId(
    r'setPersistentDrawingCache',
    r'(I)V',
  );

  static final _setPersistentDrawingCache =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setPersistentDrawingCache(int i)`
  void setPersistentDrawingCache(
    int i,
  ) {
    _setPersistentDrawingCache(
      reference.pointer,
      _id_setPersistentDrawingCache as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_setRequestedFrameRate = _class.instanceMethodId(
    r'setRequestedFrameRate',
    r'(F)V',
  );

  static final _setRequestedFrameRate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
            )
          >();

  /// from: `public void setRequestedFrameRate(float f)`
  void setRequestedFrameRate(
    double f,
  ) {
    _setRequestedFrameRate(
      reference.pointer,
      _id_setRequestedFrameRate as jni$_.JMethodIDPtr,
      f,
    ).check();
  }

  static final _id_setTouchscreenBlocksFocus = _class.instanceMethodId(
    r'setTouchscreenBlocksFocus',
    r'(Z)V',
  );

  static final _setTouchscreenBlocksFocus =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setTouchscreenBlocksFocus(boolean z)`
  void setTouchscreenBlocksFocus(
    bool z,
  ) {
    _setTouchscreenBlocksFocus(
      reference.pointer,
      _id_setTouchscreenBlocksFocus as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_setTransitionGroup = _class.instanceMethodId(
    r'setTransitionGroup',
    r'(Z)V',
  );

  static final _setTransitionGroup =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setTransitionGroup(boolean z)`
  void setTransitionGroup(
    bool z,
  ) {
    _setTransitionGroup(
      reference.pointer,
      _id_setTransitionGroup as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_setWindowInsetsAnimationCallback = _class.instanceMethodId(
    r'setWindowInsetsAnimationCallback',
    r'(Landroid/view/WindowInsetsAnimation$Callback;)V',
  );

  static final _setWindowInsetsAnimationCallback =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setWindowInsetsAnimationCallback(android.view.WindowInsetsAnimation$Callback callback)`
  void setWindowInsetsAnimationCallback(
    jni$_.JObject? callback,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    _setWindowInsetsAnimationCallback(
      reference.pointer,
      _id_setWindowInsetsAnimationCallback as jni$_.JMethodIDPtr,
      _$callback.pointer,
    ).check();
  }

  static final _id_shouldDelayChildPressedState = _class.instanceMethodId(
    r'shouldDelayChildPressedState',
    r'()Z',
  );

  static final _shouldDelayChildPressedState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean shouldDelayChildPressedState()`
  bool shouldDelayChildPressedState() {
    return _shouldDelayChildPressedState(
      reference.pointer,
      _id_shouldDelayChildPressedState as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_showContextMenuForChild = _class.instanceMethodId(
    r'showContextMenuForChild',
    r'(Landroid/view/View;)Z',
  );

  static final _showContextMenuForChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean showContextMenuForChild(android.view.View view)`
  bool showContextMenuForChild(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    return _showContextMenuForChild(
      reference.pointer,
      _id_showContextMenuForChild as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).boolean;
  }

  static final _id_showContextMenuForChild$1 = _class.instanceMethodId(
    r'showContextMenuForChild',
    r'(Landroid/view/View;FF)Z',
  );

  static final _showContextMenuForChild$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Double, jni$_.Double)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              double,
              double,
            )
          >();

  /// from: `public boolean showContextMenuForChild(android.view.View view, float f, float f1)`
  bool showContextMenuForChild$1(
    jni$_.JObject? view,
    double f,
    double f1,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    return _showContextMenuForChild$1(
      reference.pointer,
      _id_showContextMenuForChild$1 as jni$_.JMethodIDPtr,
      _$view.pointer,
      f,
      f1,
    ).boolean;
  }

  static final _id_startActionModeForChild = _class.instanceMethodId(
    r'startActionModeForChild',
    r'(Landroid/view/View;Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;',
  );

  static final _startActionModeForChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.view.ActionMode startActionModeForChild(android.view.View view, android.view.ActionMode$Callback callback)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startActionModeForChild(
    jni$_.JObject? view,
    jni$_.JObject? callback,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _startActionModeForChild(
      reference.pointer,
      _id_startActionModeForChild as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$callback.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startActionModeForChild$1 = _class.instanceMethodId(
    r'startActionModeForChild',
    r'(Landroid/view/View;Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;',
  );

  static final _startActionModeForChild$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public android.view.ActionMode startActionModeForChild(android.view.View view, android.view.ActionMode$Callback callback, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startActionModeForChild$1(
    jni$_.JObject? view,
    jni$_.JObject? callback,
    int i,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _startActionModeForChild$1(
      reference.pointer,
      _id_startActionModeForChild$1 as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$callback.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startLayoutAnimation = _class.instanceMethodId(
    r'startLayoutAnimation',
    r'()V',
  );

  static final _startLayoutAnimation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void startLayoutAnimation()`
  void startLayoutAnimation() {
    _startLayoutAnimation(
      reference.pointer,
      _id_startLayoutAnimation as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_startViewTransition = _class.instanceMethodId(
    r'startViewTransition',
    r'(Landroid/view/View;)V',
  );

  static final _startViewTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startViewTransition(android.view.View view)`
  void startViewTransition(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _startViewTransition(
      reference.pointer,
      _id_startViewTransition as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_suppressLayout = _class.instanceMethodId(
    r'suppressLayout',
    r'(Z)V',
  );

  static final _suppressLayout =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void suppressLayout(boolean z)`
  void suppressLayout(
    bool z,
  ) {
    _suppressLayout(
      reference.pointer,
      _id_suppressLayout as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_updateViewLayout = _class.instanceMethodId(
    r'updateViewLayout',
    r'(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V',
  );

  static final _updateViewLayout =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void updateViewLayout(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)`
  void updateViewLayout(
    jni$_.JObject? view,
    ViewGroup$LayoutParams? layoutParams,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    _updateViewLayout(
      reference.pointer,
      _id_updateViewLayout as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$layoutParams.pointer,
    ).check();
  }
}

final class $ViewGroup$NullableType extends jni$_.JObjType<ViewGroup?> {
  @jni$_.internal
  const $ViewGroup$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/view/ViewGroup;';

  @jni$_.internal
  @core$_.override
  ViewGroup? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ViewGroup.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ViewGroup?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ViewGroup$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ViewGroup$NullableType) &&
        other is $ViewGroup$NullableType;
  }
}

final class $ViewGroup$Type extends jni$_.JObjType<ViewGroup> {
  @jni$_.internal
  const $ViewGroup$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/view/ViewGroup;';

  @jni$_.internal
  @core$_.override
  ViewGroup fromReference(jni$_.JReference reference) =>
      ViewGroup.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ViewGroup?> get nullableType =>
      const $ViewGroup$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ViewGroup$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ViewGroup$Type) && other is $ViewGroup$Type;
  }
}
