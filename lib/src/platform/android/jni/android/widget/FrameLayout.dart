// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: type=lint

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../content/Context.dart' as context$_;

import '../view/ViewGroup.dart' as viewgroup$_;

/// from: `android.widget.FrameLayout$LayoutParams`
class FrameLayout$LayoutParams
    extends viewgroup$_.ViewGroup$MarginLayoutParams {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<FrameLayout$LayoutParams> $type;

  @jni$_.internal
  FrameLayout$LayoutParams.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/widget/FrameLayout$LayoutParams',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $FrameLayout$LayoutParams$NullableType();
  static const type = $FrameLayout$LayoutParams$Type();

  /// from: `static public final int UNSPECIFIED_GRAVITY`
  static const UNSPECIFIED_GRAVITY = -1;
  static final _id_gravity = _class.instanceFieldId(
    r'gravity',
    r'I',
  );

  /// from: `public int gravity`
  int get gravity => _id_gravity.get(this, const jni$_.jintType());

  /// from: `public int gravity`
  set gravity(int value) =>
      _id_gravity.set(this, const jni$_.jintType(), value);

  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FrameLayout$LayoutParams(
    context$_.Context? context,
    jni$_.JObject? attributeSet,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return FrameLayout$LayoutParams.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$context.pointer,
        _$attributeSet.pointer,
      ).reference,
    );
  }

  static final _id_new1 = _class.constructorId(
    r'(Landroid/view/ViewGroup$LayoutParams;)V',
  );

  static final _new1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.view.ViewGroup$LayoutParams layoutParams)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FrameLayout$LayoutParams.new1(
    viewgroup$_.ViewGroup$LayoutParams? layoutParams,
  ) {
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    return FrameLayout$LayoutParams.fromReference(
      _new1(
        _class.reference.pointer,
        _id_new1 as jni$_.JMethodIDPtr,
        _$layoutParams.pointer,
      ).reference,
    );
  }

  static final _id_new3 = _class.constructorId(
    r'(Landroid/view/ViewGroup$MarginLayoutParams;)V',
  );

  static final _new3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.view.ViewGroup$MarginLayoutParams marginLayoutParams)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FrameLayout$LayoutParams.new3(
    viewgroup$_.ViewGroup$MarginLayoutParams? marginLayoutParams,
  ) {
    final _$marginLayoutParams =
        marginLayoutParams?.reference ?? jni$_.jNullReference;
    return FrameLayout$LayoutParams.fromReference(
      _new3(
        _class.reference.pointer,
        _id_new3 as jni$_.JMethodIDPtr,
        _$marginLayoutParams.pointer,
      ).reference,
    );
  }

  static final _id_new$4 = _class.constructorId(
    r'(Landroid/widget/FrameLayout$LayoutParams;)V',
  );

  static final _new$4 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.widget.FrameLayout$LayoutParams layoutParams)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FrameLayout$LayoutParams.new$4(
    FrameLayout$LayoutParams? layoutParams,
  ) {
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    return FrameLayout$LayoutParams.fromReference(
      _new$4(
        _class.reference.pointer,
        _id_new$4 as jni$_.JMethodIDPtr,
        _$layoutParams.pointer,
      ).reference,
    );
  }

  static final _id_new2 = _class.constructorId(
    r'(II)V',
  );

  static final _new2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
            )
          >();

  /// from: `public void <init>(int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FrameLayout$LayoutParams.new2(
    int i,
    int i1,
  ) {
    return FrameLayout$LayoutParams.fromReference(
      _new2(
        _class.reference.pointer,
        _id_new2 as jni$_.JMethodIDPtr,
        i,
        i1,
      ).reference,
    );
  }

  static final _id_new$5 = _class.constructorId(
    r'(III)V',
  );

  static final _new$5 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              int,
            )
          >();

  /// from: `public void <init>(int i, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FrameLayout$LayoutParams.new$5(
    int i,
    int i1,
    int i2,
  ) {
    return FrameLayout$LayoutParams.fromReference(
      _new$5(
        _class.reference.pointer,
        _id_new$5 as jni$_.JMethodIDPtr,
        i,
        i1,
        i2,
      ).reference,
    );
  }
}

final class $FrameLayout$LayoutParams$NullableType
    extends jni$_.JObjType<FrameLayout$LayoutParams?> {
  @jni$_.internal
  const $FrameLayout$LayoutParams$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/widget/FrameLayout$LayoutParams;';

  @jni$_.internal
  @core$_.override
  FrameLayout$LayoutParams? fromReference(jni$_.JReference reference) =>
      reference.isNull
      ? null
      : FrameLayout$LayoutParams.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType =>
      const viewgroup$_.$ViewGroup$MarginLayoutParams$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FrameLayout$LayoutParams?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 3;

  @core$_.override
  int get hashCode => ($FrameLayout$LayoutParams$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FrameLayout$LayoutParams$NullableType) &&
        other is $FrameLayout$LayoutParams$NullableType;
  }
}

final class $FrameLayout$LayoutParams$Type
    extends jni$_.JObjType<FrameLayout$LayoutParams> {
  @jni$_.internal
  const $FrameLayout$LayoutParams$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/widget/FrameLayout$LayoutParams;';

  @jni$_.internal
  @core$_.override
  FrameLayout$LayoutParams fromReference(jni$_.JReference reference) =>
      FrameLayout$LayoutParams.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType =>
      const viewgroup$_.$ViewGroup$MarginLayoutParams$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FrameLayout$LayoutParams?> get nullableType =>
      const $FrameLayout$LayoutParams$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 3;

  @core$_.override
  int get hashCode => ($FrameLayout$LayoutParams$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FrameLayout$LayoutParams$Type) &&
        other is $FrameLayout$LayoutParams$Type;
  }
}

/// from: `android.widget.FrameLayout`
class FrameLayout extends viewgroup$_.ViewGroup {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<FrameLayout> $type;

  @jni$_.internal
  FrameLayout.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/widget/FrameLayout');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $FrameLayout$NullableType();
  static const type = $FrameLayout$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FrameLayout(
    context$_.Context? context,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    return FrameLayout.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$context.pointer,
      ).reference,
    );
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;)V',
  );

  static final _new$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FrameLayout.new$1(
    context$_.Context? context,
    jni$_.JObject? attributeSet,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return FrameLayout.fromReference(
      _new$1(
        _class.reference.pointer,
        _id_new$1 as jni$_.JMethodIDPtr,
        _$context.pointer,
        _$attributeSet.pointer,
      ).reference,
    );
  }

  static final _id_new$2 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;I)V',
  );

  static final _new$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FrameLayout.new$2(
    context$_.Context? context,
    jni$_.JObject? attributeSet,
    int i,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return FrameLayout.fromReference(
      _new$2(
        _class.reference.pointer,
        _id_new$2 as jni$_.JMethodIDPtr,
        _$context.pointer,
        _$attributeSet.pointer,
        i,
      ).reference,
    );
  }

  static final _id_new$3 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;II)V',
  );

  static final _new$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FrameLayout.new$3(
    context$_.Context? context,
    jni$_.JObject? attributeSet,
    int i,
    int i1,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return FrameLayout.fromReference(
      _new$3(
        _class.reference.pointer,
        _id_new$3 as jni$_.JMethodIDPtr,
        _$context.pointer,
        _$attributeSet.pointer,
        i,
        i1,
      ).reference,
    );
  }

  static final _id_generateLayoutParams$1 = _class.instanceMethodId(
    r'generateLayoutParams',
    r'(Landroid/util/AttributeSet;)Landroid/widget/FrameLayout$LayoutParams;',
  );

  static final _generateLayoutParams$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  FrameLayout$LayoutParams? generateLayoutParams$1(
    jni$_.JObject? attributeSet,
  ) {
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return _generateLayoutParams$1(
      reference.pointer,
      _id_generateLayoutParams$1 as jni$_.JMethodIDPtr,
      _$attributeSet.pointer,
    ).object<FrameLayout$LayoutParams?>(
      const $FrameLayout$LayoutParams$NullableType(),
    );
  }

  static final _id_getAccessibilityClassName = _class.instanceMethodId(
    r'getAccessibilityClassName',
    r'()Ljava/lang/CharSequence;',
  );

  static final _getAccessibilityClassName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.CharSequence getAccessibilityClassName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getAccessibilityClassName() {
    return _getAccessibilityClassName(
      reference.pointer,
      _id_getAccessibilityClassName as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getConsiderGoneChildrenWhenMeasuring = _class
      .instanceMethodId(
        r'getConsiderGoneChildrenWhenMeasuring',
        r'()Z',
      );

  static final _getConsiderGoneChildrenWhenMeasuring =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean getConsiderGoneChildrenWhenMeasuring()`
  bool getConsiderGoneChildrenWhenMeasuring() {
    return _getConsiderGoneChildrenWhenMeasuring(
      reference.pointer,
      _id_getConsiderGoneChildrenWhenMeasuring as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_getMeasureAllChildren = _class.instanceMethodId(
    r'getMeasureAllChildren',
    r'()Z',
  );

  static final _getMeasureAllChildren =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean getMeasureAllChildren()`
  bool getMeasureAllChildren() {
    return _getMeasureAllChildren(
      reference.pointer,
      _id_getMeasureAllChildren as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_setForegroundGravity = _class.instanceMethodId(
    r'setForegroundGravity',
    r'(I)V',
  );

  static final _setForegroundGravity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setForegroundGravity(int i)`
  void setForegroundGravity(
    int i,
  ) {
    _setForegroundGravity(
      reference.pointer,
      _id_setForegroundGravity as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_setMeasureAllChildren = _class.instanceMethodId(
    r'setMeasureAllChildren',
    r'(Z)V',
  );

  static final _setMeasureAllChildren =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setMeasureAllChildren(boolean z)`
  void setMeasureAllChildren(
    bool z,
  ) {
    _setMeasureAllChildren(
      reference.pointer,
      _id_setMeasureAllChildren as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_shouldDelayChildPressedState = _class.instanceMethodId(
    r'shouldDelayChildPressedState',
    r'()Z',
  );

  static final _shouldDelayChildPressedState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean shouldDelayChildPressedState()`
  bool shouldDelayChildPressedState() {
    return _shouldDelayChildPressedState(
      reference.pointer,
      _id_shouldDelayChildPressedState as jni$_.JMethodIDPtr,
    ).boolean;
  }
}

final class $FrameLayout$NullableType extends jni$_.JObjType<FrameLayout?> {
  @jni$_.internal
  const $FrameLayout$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/widget/FrameLayout;';

  @jni$_.internal
  @core$_.override
  FrameLayout? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : FrameLayout.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const viewgroup$_.$ViewGroup$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FrameLayout?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($FrameLayout$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FrameLayout$NullableType) &&
        other is $FrameLayout$NullableType;
  }
}

final class $FrameLayout$Type extends jni$_.JObjType<FrameLayout> {
  @jni$_.internal
  const $FrameLayout$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/widget/FrameLayout;';

  @jni$_.internal
  @core$_.override
  FrameLayout fromReference(jni$_.JReference reference) =>
      FrameLayout.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const viewgroup$_.$ViewGroup$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FrameLayout?> get nullableType =>
      const $FrameLayout$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($FrameLayout$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FrameLayout$Type) &&
        other is $FrameLayout$Type;
  }
}
