// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `org.maplibre.geojson.Feature`
///
/// This defines a GeoJson Feature object which represents a spatially bound thing. Every Feature
/// object is a GeoJson object no matter where it occurs in a GeoJson text. A Feature object will
/// always have a "TYPE" member with the value "Feature".
///
/// A Feature object has a member with the name "geometry". The value of the geometry member SHALL be
/// either a Geometry object or, in the case that the Feature is unlocated, a JSON null value.
///
/// A Feature object has a member with the name "properties". The value of the properties member is
/// an object (any JSON object or a JSON null value).
///
/// If a Feature has a commonly used identifier, that identifier SHOULD be included as a member of
/// the Feature object through the \#id() method, and the value of this member is either a
/// JSON string or number.
///
/// An example of a serialized feature is given below:
/// <pre>
/// {
///   "TYPE": "Feature",
///   "geometry": {
///     "TYPE": "Point",
///     "coordinates": [102.0, 0.5]
///   },
///   "properties": {
///     "prop0": "value0"
///   }
/// </pre>
///@since 1.0.0
class Feature extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Feature> $type;

  @jni$_.internal
  Feature.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'org/maplibre/geojson/Feature');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Feature$NullableType();
  static const type = $Feature$Type();
  static final _id_fromJson = _class.staticMethodId(
    r'fromJson',
    r'(Ljava/lang/String;)Lorg/maplibre/geojson/Feature;',
  );

  static final _fromJson =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public org.maplibre.geojson.Feature fromJson(java.lang.String json)`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new instance of this class by passing in a formatted valid JSON String. If you are
  /// creating a Feature object from scratch it is better to use one of the other provided static
  /// factory methods such as \#fromGeometry(Geometry).
  ///@param json a formatted valid JSON string defining a GeoJson Feature
  ///@return a new instance of this class defined by the values passed inside this static factory
  ///   method
  ///@since 1.0.0
  static Feature? fromJson(jni$_.JString json) {
    final _$json = json.reference;
    return _fromJson(
      _class.reference.pointer,
      _id_fromJson as jni$_.JMethodIDPtr,
      _$json.pointer,
    ).object<Feature?>(const $Feature$NullableType());
  }

  static final _id_fromGeometry = _class.staticMethodId(
    r'fromGeometry',
    r'(Lorg/maplibre/geojson/Geometry;)Lorg/maplibre/geojson/Feature;',
  );

  static final _fromGeometry =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public org.maplibre.geojson.Feature fromGeometry(org.maplibre.geojson.Geometry geometry)`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new instance of this class by giving the feature a Geometry.
  ///@param geometry a single geometry which makes up this feature object
  ///@return a new instance of this class defined by the values passed inside this static factory
  ///   method
  ///@since 1.0.0
  static Feature? fromGeometry(jni$_.JObject? geometry) {
    final _$geometry = geometry?.reference ?? jni$_.jNullReference;
    return _fromGeometry(
      _class.reference.pointer,
      _id_fromGeometry as jni$_.JMethodIDPtr,
      _$geometry.pointer,
    ).object<Feature?>(const $Feature$NullableType());
  }

  static final _id_fromGeometry$1 = _class.staticMethodId(
    r'fromGeometry',
    r'(Lorg/maplibre/geojson/Geometry;Lorg/maplibre/geojson/BoundingBox;)Lorg/maplibre/geojson/Feature;',
  );

  static final _fromGeometry$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public org.maplibre.geojson.Feature fromGeometry(org.maplibre.geojson.Geometry geometry, org.maplibre.geojson.BoundingBox bbox)`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new instance of this class by giving the feature a Geometry. You can also pass
  /// in a double array defining a bounding box.
  ///@param geometry a single geometry which makes up this feature object
  ///@param bbox optionally include a bbox definition as a double array
  ///@return a new instance of this class defined by the values passed inside this static factory
  ///   method
  ///@since 1.0.0
  static Feature? fromGeometry$1(jni$_.JObject? geometry, jni$_.JObject? bbox) {
    final _$geometry = geometry?.reference ?? jni$_.jNullReference;
    final _$bbox = bbox?.reference ?? jni$_.jNullReference;
    return _fromGeometry$1(
      _class.reference.pointer,
      _id_fromGeometry$1 as jni$_.JMethodIDPtr,
      _$geometry.pointer,
      _$bbox.pointer,
    ).object<Feature?>(const $Feature$NullableType());
  }

  static final _id_fromGeometry$2 = _class.staticMethodId(
    r'fromGeometry',
    r'(Lorg/maplibre/geojson/Geometry;Lcom/google/gson/JsonObject;)Lorg/maplibre/geojson/Feature;',
  );

  static final _fromGeometry$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public org.maplibre.geojson.Feature fromGeometry(org.maplibre.geojson.Geometry geometry, com.google.gson.JsonObject properties)`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new instance of this class by giving the feature a Geometry and optionally a
  /// set of properties.
  ///@param geometry a single geometry which makes up this feature object
  ///@param properties a JsonObject containing the feature properties
  ///@return a new instance of this class defined by the values passed inside this static factory
  ///   method
  ///@since 1.0.0
  static Feature? fromGeometry$2(
    jni$_.JObject? geometry,
    jni$_.JObject? properties,
  ) {
    final _$geometry = geometry?.reference ?? jni$_.jNullReference;
    final _$properties = properties?.reference ?? jni$_.jNullReference;
    return _fromGeometry$2(
      _class.reference.pointer,
      _id_fromGeometry$2 as jni$_.JMethodIDPtr,
      _$geometry.pointer,
      _$properties.pointer,
    ).object<Feature?>(const $Feature$NullableType());
  }

  static final _id_fromGeometry$3 = _class.staticMethodId(
    r'fromGeometry',
    r'(Lorg/maplibre/geojson/Geometry;Lcom/google/gson/JsonObject;Lorg/maplibre/geojson/BoundingBox;)Lorg/maplibre/geojson/Feature;',
  );

  static final _fromGeometry$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public org.maplibre.geojson.Feature fromGeometry(org.maplibre.geojson.Geometry geometry, com.google.gson.JsonObject properties, org.maplibre.geojson.BoundingBox bbox)`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new instance of this class by giving the feature a Geometry, optionally a
  /// set of properties, and optionally pass in a bbox.
  ///@param geometry a single geometry which makes up this feature object
  ///@param bbox optionally include a bbox definition as a double array
  ///@param properties a JsonObject containing the feature properties
  ///@return a new instance of this class defined by the values passed inside this static factory
  ///   method
  ///@since 1.0.0
  static Feature? fromGeometry$3(
    jni$_.JObject? geometry,
    jni$_.JObject? properties,
    jni$_.JObject? bbox,
  ) {
    final _$geometry = geometry?.reference ?? jni$_.jNullReference;
    final _$properties = properties?.reference ?? jni$_.jNullReference;
    final _$bbox = bbox?.reference ?? jni$_.jNullReference;
    return _fromGeometry$3(
      _class.reference.pointer,
      _id_fromGeometry$3 as jni$_.JMethodIDPtr,
      _$geometry.pointer,
      _$properties.pointer,
      _$bbox.pointer,
    ).object<Feature?>(const $Feature$NullableType());
  }

  static final _id_fromGeometry$4 = _class.staticMethodId(
    r'fromGeometry',
    r'(Lorg/maplibre/geojson/Geometry;Lcom/google/gson/JsonObject;Ljava/lang/String;)Lorg/maplibre/geojson/Feature;',
  );

  static final _fromGeometry$4 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public org.maplibre.geojson.Feature fromGeometry(org.maplibre.geojson.Geometry geometry, com.google.gson.JsonObject properties, java.lang.String id)`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new instance of this class by giving the feature a Geometry, optionally a
  /// set of properties, and a String which represents the objects id.
  ///@param geometry a single geometry which makes up this feature object
  ///@param properties a JsonObject containing the feature properties
  ///@param id common identifier of this feature
  ///@return Feature
  ///@since 1.0.0
  static Feature? fromGeometry$4(
    jni$_.JObject? geometry,
    jni$_.JObject? properties,
    jni$_.JString? id,
  ) {
    final _$geometry = geometry?.reference ?? jni$_.jNullReference;
    final _$properties = properties?.reference ?? jni$_.jNullReference;
    final _$id = id?.reference ?? jni$_.jNullReference;
    return _fromGeometry$4(
      _class.reference.pointer,
      _id_fromGeometry$4 as jni$_.JMethodIDPtr,
      _$geometry.pointer,
      _$properties.pointer,
      _$id.pointer,
    ).object<Feature?>(const $Feature$NullableType());
  }

  static final _id_fromGeometry$5 = _class.staticMethodId(
    r'fromGeometry',
    r'(Lorg/maplibre/geojson/Geometry;Lcom/google/gson/JsonObject;Ljava/lang/String;Lorg/maplibre/geojson/BoundingBox;)Lorg/maplibre/geojson/Feature;',
  );

  static final _fromGeometry$5 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public org.maplibre.geojson.Feature fromGeometry(org.maplibre.geojson.Geometry geometry, com.google.gson.JsonObject properties, java.lang.String id, org.maplibre.geojson.BoundingBox bbox)`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new instance of this class by giving the feature a Geometry, optionally a
  /// set of properties, and a String which represents the objects id.
  ///@param geometry a single geometry which makes up this feature object
  ///@param properties a JsonObject containing the feature properties
  ///@param bbox optionally include a bbox definition as a double array
  ///@param id common identifier of this feature
  ///@return Feature
  ///@since 1.0.0
  static Feature? fromGeometry$5(
    jni$_.JObject? geometry,
    jni$_.JObject? properties,
    jni$_.JString? id,
    jni$_.JObject? bbox,
  ) {
    final _$geometry = geometry?.reference ?? jni$_.jNullReference;
    final _$properties = properties?.reference ?? jni$_.jNullReference;
    final _$id = id?.reference ?? jni$_.jNullReference;
    final _$bbox = bbox?.reference ?? jni$_.jNullReference;
    return _fromGeometry$5(
      _class.reference.pointer,
      _id_fromGeometry$5 as jni$_.JMethodIDPtr,
      _$geometry.pointer,
      _$properties.pointer,
      _$id.pointer,
      _$bbox.pointer,
    ).object<Feature?>(const $Feature$NullableType());
  }

  static final _id_type$1 = _class.instanceMethodId(
    r'type',
    r'()Ljava/lang/String;',
  );

  static final _type$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String type()`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This describes the TYPE of GeoJson geometry this object is, thus this will always return
  /// Feature.
  ///@return a String which describes the TYPE of geometry, for this object it will always return
  ///   {@code Feature}
  ///@since 1.0.0
  jni$_.JString type$1() {
    return _type$1(
      reference.pointer,
      _id_type$1 as jni$_.JMethodIDPtr,
    ).object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_bbox = _class.instanceMethodId(
    r'bbox',
    r'()Lorg/maplibre/geojson/BoundingBox;',
  );

  static final _bbox =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.geojson.BoundingBox bbox()`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// A Feature Collection might have a member named {@code bbox} to include information on the
  /// coordinate range for it's Features. The value of the bbox member MUST be a list of
  /// size 2*n where n is the number of dimensions represented in the contained feature geometries,
  /// with all axes of the most southwesterly point followed by all axes of the more northeasterly
  /// point. The axes order of a bbox follows the axes order of geometries.
  ///@return a list of double coordinate values describing a bounding box
  ///@since 3.0.0
  jni$_.JObject? bbox() {
    return _bbox(
      reference.pointer,
      _id_bbox as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_id = _class.instanceMethodId(r'id', r'()Ljava/lang/String;');

  static final _id =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String id()`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// A feature may have a commonly used identifier which is either a unique String or number.
  ///@return a String containing this features unique identification or null if one wasn't given
  ///   during creation.
  ///@since 1.0.0
  jni$_.JString? id() {
    return _id(
      reference.pointer,
      _id_id as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_geometry = _class.instanceMethodId(
    r'geometry',
    r'()Lorg/maplibre/geojson/Geometry;',
  );

  static final _geometry =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.geojson.Geometry geometry()`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// The geometry which makes up this feature. A Geometry object represents points, curves, and
  /// surfaces in coordinate space. One of the seven geometries provided inside this library can be
  /// passed in through one of the static factory methods.
  ///@return a single defined Geometry which makes this feature spatially aware
  ///@since 1.0.0
  jni$_.JObject? geometry() {
    return _geometry(
      reference.pointer,
      _id_geometry as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_properties = _class.instanceMethodId(
    r'properties',
    r'()Lcom/google/gson/JsonObject;',
  );

  static final _properties =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public com.google.gson.JsonObject properties()`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This contains the JSON object which holds the feature properties. The value of the properties
  /// member is a JsonObject and might be empty if no properties are provided.
  ///@return a JsonObject which holds this features current properties
  ///@since 1.0.0
  jni$_.JObject? properties() {
    return _properties(
      reference.pointer,
      _id_properties as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_toJson = _class.instanceMethodId(
    r'toJson',
    r'()Ljava/lang/String;',
  );

  static final _toJson =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toJson()`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// This takes the currently defined values found inside this instance and converts it to a GeoJson
  /// string.
  ///@return a JSON string which represents this Feature
  ///@since 1.0.0
  jni$_.JString? toJson() {
    return _toJson(
      reference.pointer,
      _id_toJson as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_typeAdapter = _class.staticMethodId(
    r'typeAdapter',
    r'(Lcom/google/gson/Gson;)Lcom/google/gson/TypeAdapter;',
  );

  static final _typeAdapter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public com.google.gson.TypeAdapter<org.maplibre.geojson.Feature> typeAdapter(com.google.gson.Gson gson)`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Gson TYPE adapter for parsing Gson to this class.
  ///@param gson the built Gson object
  ///@return the TYPE adapter for this class
  ///@since 3.0.0
  static jni$_.JObject? typeAdapter(jni$_.JObject? gson) {
    final _$gson = gson?.reference ?? jni$_.jNullReference;
    return _typeAdapter(
      _class.reference.pointer,
      _id_typeAdapter as jni$_.JMethodIDPtr,
      _$gson.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_addStringProperty = _class.instanceMethodId(
    r'addStringProperty',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _addStringProperty =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addStringProperty(java.lang.String key, java.lang.String value)`
  ///
  /// Convenience method to add a String member.
  ///@param key name of the member
  ///@param value the String value associated with the member
  ///@since 1.0.0
  void addStringProperty(jni$_.JString? key, jni$_.JString? value) {
    final _$key = key?.reference ?? jni$_.jNullReference;
    final _$value = value?.reference ?? jni$_.jNullReference;
    _addStringProperty(
      reference.pointer,
      _id_addStringProperty as jni$_.JMethodIDPtr,
      _$key.pointer,
      _$value.pointer,
    ).check();
  }

  static final _id_addNumberProperty = _class.instanceMethodId(
    r'addNumberProperty',
    r'(Ljava/lang/String;Ljava/lang/Number;)V',
  );

  static final _addNumberProperty =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addNumberProperty(java.lang.String key, java.lang.Number value)`
  ///
  /// Convenience method to add a Number member.
  ///@param key name of the member
  ///@param value the Number value associated with the member
  ///@since 1.0.0
  void addNumberProperty(jni$_.JString? key, jni$_.JNumber? value) {
    final _$key = key?.reference ?? jni$_.jNullReference;
    final _$value = value?.reference ?? jni$_.jNullReference;
    _addNumberProperty(
      reference.pointer,
      _id_addNumberProperty as jni$_.JMethodIDPtr,
      _$key.pointer,
      _$value.pointer,
    ).check();
  }

  static final _id_addBooleanProperty = _class.instanceMethodId(
    r'addBooleanProperty',
    r'(Ljava/lang/String;Ljava/lang/Boolean;)V',
  );

  static final _addBooleanProperty =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addBooleanProperty(java.lang.String key, java.lang.Boolean value)`
  ///
  /// Convenience method to add a Boolean member.
  ///@param key name of the member
  ///@param value the Boolean value associated with the member
  ///@since 1.0.0
  void addBooleanProperty(jni$_.JString? key, jni$_.JBoolean? value) {
    final _$key = key?.reference ?? jni$_.jNullReference;
    final _$value = value?.reference ?? jni$_.jNullReference;
    _addBooleanProperty(
      reference.pointer,
      _id_addBooleanProperty as jni$_.JMethodIDPtr,
      _$key.pointer,
      _$value.pointer,
    ).check();
  }

  static final _id_addCharacterProperty = _class.instanceMethodId(
    r'addCharacterProperty',
    r'(Ljava/lang/String;Ljava/lang/Character;)V',
  );

  static final _addCharacterProperty =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addCharacterProperty(java.lang.String key, java.lang.Character value)`
  ///
  /// Convenience method to add a Character member.
  ///@param key name of the member
  ///@param value the Character value associated with the member
  ///@since 1.0.0
  void addCharacterProperty(jni$_.JString? key, jni$_.JCharacter? value) {
    final _$key = key?.reference ?? jni$_.jNullReference;
    final _$value = value?.reference ?? jni$_.jNullReference;
    _addCharacterProperty(
      reference.pointer,
      _id_addCharacterProperty as jni$_.JMethodIDPtr,
      _$key.pointer,
      _$value.pointer,
    ).check();
  }

  static final _id_addProperty = _class.instanceMethodId(
    r'addProperty',
    r'(Ljava/lang/String;Lcom/google/gson/JsonElement;)V',
  );

  static final _addProperty =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addProperty(java.lang.String key, com.google.gson.JsonElement value)`
  ///
  /// Convenience method to add a JsonElement member.
  ///@param key name of the member
  ///@param value the JsonElement value associated with the member
  ///@since 1.0.0
  void addProperty(jni$_.JString? key, jni$_.JObject? value) {
    final _$key = key?.reference ?? jni$_.jNullReference;
    final _$value = value?.reference ?? jni$_.jNullReference;
    _addProperty(
      reference.pointer,
      _id_addProperty as jni$_.JMethodIDPtr,
      _$key.pointer,
      _$value.pointer,
    ).check();
  }

  static final _id_getStringProperty = _class.instanceMethodId(
    r'getStringProperty',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getStringProperty =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public java.lang.String getStringProperty(java.lang.String key)`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Convenience method to get a String member.
  ///@param key name of the member
  ///@return the value of the member, null if it doesn't exist
  ///@since 1.0.0
  jni$_.JString? getStringProperty(jni$_.JString? key) {
    final _$key = key?.reference ?? jni$_.jNullReference;
    return _getStringProperty(
      reference.pointer,
      _id_getStringProperty as jni$_.JMethodIDPtr,
      _$key.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getNumberProperty = _class.instanceMethodId(
    r'getNumberProperty',
    r'(Ljava/lang/String;)Ljava/lang/Number;',
  );

  static final _getNumberProperty =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public java.lang.Number getNumberProperty(java.lang.String key)`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Convenience method to get a Number member.
  ///@param key name of the member
  ///@return the value of the member, null if it doesn't exist
  ///@since 1.0.0
  jni$_.JNumber? getNumberProperty(jni$_.JString? key) {
    final _$key = key?.reference ?? jni$_.jNullReference;
    return _getNumberProperty(
      reference.pointer,
      _id_getNumberProperty as jni$_.JMethodIDPtr,
      _$key.pointer,
    ).object<jni$_.JNumber?>(const jni$_.JNumberNullableType());
  }

  static final _id_getBooleanProperty = _class.instanceMethodId(
    r'getBooleanProperty',
    r'(Ljava/lang/String;)Ljava/lang/Boolean;',
  );

  static final _getBooleanProperty =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public java.lang.Boolean getBooleanProperty(java.lang.String key)`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Convenience method to get a Boolean member.
  ///@param key name of the member
  ///@return the value of the member, null if it doesn't exist
  ///@since 1.0.0
  jni$_.JBoolean? getBooleanProperty(jni$_.JString? key) {
    final _$key = key?.reference ?? jni$_.jNullReference;
    return _getBooleanProperty(
      reference.pointer,
      _id_getBooleanProperty as jni$_.JMethodIDPtr,
      _$key.pointer,
    ).object<jni$_.JBoolean?>(const jni$_.JBooleanNullableType());
  }

  static final _id_getCharacterProperty = _class.instanceMethodId(
    r'getCharacterProperty',
    r'(Ljava/lang/String;)Ljava/lang/Character;',
  );

  static final _getCharacterProperty =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public java.lang.Character getCharacterProperty(java.lang.String key)`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Convenience method to get a Character member.
  ///@param key name of the member
  ///@return the value of the member, null if it doesn't exist
  ///@since 1.0.0
  ///@deprecated This method was passing the call to JsonElement::getAsCharacter()
  ///   which is in turn deprecated because of misleading nature, as it
  ///   does not get this element as a char but rather as a string's first character.
  jni$_.JCharacter? getCharacterProperty(jni$_.JString? key) {
    final _$key = key?.reference ?? jni$_.jNullReference;
    return _getCharacterProperty(
      reference.pointer,
      _id_getCharacterProperty as jni$_.JMethodIDPtr,
      _$key.pointer,
    ).object<jni$_.JCharacter?>(const jni$_.JCharacterNullableType());
  }

  static final _id_getProperty = _class.instanceMethodId(
    r'getProperty',
    r'(Ljava/lang/String;)Lcom/google/gson/JsonElement;',
  );

  static final _getProperty =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public com.google.gson.JsonElement getProperty(java.lang.String key)`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Convenience method to get a JsonElement member.
  ///@param key name of the member
  ///@return the value of the member, null if it doesn't exist
  ///@since 1.0.0
  jni$_.JObject? getProperty(jni$_.JString? key) {
    final _$key = key?.reference ?? jni$_.jNullReference;
    return _getProperty(
      reference.pointer,
      _id_getProperty as jni$_.JMethodIDPtr,
      _$key.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_removeProperty = _class.instanceMethodId(
    r'removeProperty',
    r'(Ljava/lang/String;)Lcom/google/gson/JsonElement;',
  );

  static final _removeProperty =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public com.google.gson.JsonElement removeProperty(java.lang.String key)`
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Removes the property from the object properties.
  ///@param key name of the member
  ///@return Removed {@code property} from the key string passed in through the parameter.
  ///@since 1.0.0
  jni$_.JObject? removeProperty(jni$_.JString? key) {
    final _$key = key?.reference ?? jni$_.jNullReference;
    return _removeProperty(
      reference.pointer,
      _id_removeProperty as jni$_.JMethodIDPtr,
      _$key.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_hasProperty = _class.instanceMethodId(
    r'hasProperty',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasProperty =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean hasProperty(java.lang.String key)`
  ///
  /// Convenience method to check if a member with the specified name is present in this object.
  ///@param key name of the member
  ///@return true if there is the member has the specified name, false otherwise.
  ///@since 1.0.0
  bool hasProperty(jni$_.JString? key) {
    final _$key = key?.reference ?? jni$_.jNullReference;
    return _hasProperty(
      reference.pointer,
      _id_hasProperty as jni$_.JMethodIDPtr,
      _$key.pointer,
    ).boolean;
  }

  static final _id_hasNonNullValueForProperty = _class.instanceMethodId(
    r'hasNonNullValueForProperty',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasNonNullValueForProperty =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean hasNonNullValueForProperty(java.lang.String key)`
  ///
  /// Convenience method to check for a member by name as well as non-null value.
  ///@param key name of the member
  ///@return true if member is present with non-null value, false otherwise.
  ///@since 1.3.0
  bool hasNonNullValueForProperty(jni$_.JString? key) {
    final _$key = key?.reference ?? jni$_.jNullReference;
    return _hasNonNullValueForProperty(
      reference.pointer,
      _id_hasNonNullValueForProperty as jni$_.JMethodIDPtr,
      _$key.pointer,
    ).boolean;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(
      reference.pointer,
      _id_toString$1 as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean equals(java.lang.Object obj)`
  bool equals(jni$_.JObject? obj) {
    final _$obj = obj?.reference ?? jni$_.jNullReference;
    return _equals(
      reference.pointer,
      _id_equals as jni$_.JMethodIDPtr,
      _$obj.pointer,
    ).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(r'hashCode', r'()I');

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(
      reference.pointer,
      _id_hashCode$1 as jni$_.JMethodIDPtr,
    ).integer;
  }
}

final class $Feature$NullableType extends jni$_.JObjType<Feature?> {
  @jni$_.internal
  const $Feature$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/geojson/Feature;';

  @jni$_.internal
  @core$_.override
  Feature? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : Feature.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Feature?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Feature$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Feature$NullableType) &&
        other is $Feature$NullableType;
  }
}

final class $Feature$Type extends jni$_.JObjType<Feature> {
  @jni$_.internal
  const $Feature$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/geojson/Feature;';

  @jni$_.internal
  @core$_.override
  Feature fromReference(jni$_.JReference reference) =>
      Feature.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Feature?> get nullableType => const $Feature$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Feature$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Feature$Type) && other is $Feature$Type;
  }
}
