// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'PermissionsListener.dart' as permissionslistener$_;

/// from: `org.maplibre.android.location.permissions.PermissionsManager`
class PermissionsManager extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PermissionsManager> $type;

  @jni$_.internal
  PermissionsManager.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/location/permissions/PermissionsManager',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PermissionsManager$NullableType();
  static const type = $PermissionsManager$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lorg/maplibre/android/location/permissions/PermissionsListener;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(org.maplibre.android.location.permissions.PermissionsListener permissionsListener)`
  /// The returned object must be released after use, by calling the [release] method.
  factory PermissionsManager(
    permissionslistener$_.PermissionsListener? permissionsListener,
  ) {
    final _$permissionsListener =
        permissionsListener?.reference ?? jni$_.jNullReference;
    return PermissionsManager.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$permissionsListener.pointer,
      ).reference,
    );
  }

  static final _id_getListener = _class.instanceMethodId(
    r'getListener',
    r'()Lorg/maplibre/android/location/permissions/PermissionsListener;',
  );

  static final _getListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.location.permissions.PermissionsListener getListener()`
  /// The returned object must be released after use, by calling the [release] method.
  permissionslistener$_.PermissionsListener? getListener() {
    return _getListener(
      reference.pointer,
      _id_getListener as jni$_.JMethodIDPtr,
    ).object<permissionslistener$_.PermissionsListener?>(
      const permissionslistener$_.$PermissionsListener$NullableType(),
    );
  }

  static final _id_setListener = _class.instanceMethodId(
    r'setListener',
    r'(Lorg/maplibre/android/location/permissions/PermissionsListener;)V',
  );

  static final _setListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setListener(org.maplibre.android.location.permissions.PermissionsListener permissionsListener)`
  void setListener(
    permissionslistener$_.PermissionsListener? permissionsListener,
  ) {
    final _$permissionsListener =
        permissionsListener?.reference ?? jni$_.jNullReference;
    _setListener(
      reference.pointer,
      _id_setListener as jni$_.JMethodIDPtr,
      _$permissionsListener.pointer,
    ).check();
  }

  static final _id_isBackgroundLocationPermissionGranted = _class
      .staticMethodId(
        r'isBackgroundLocationPermissionGranted',
        r'(Landroid/content/Context;)Z',
      );

  static final _isBackgroundLocationPermissionGranted =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public boolean isBackgroundLocationPermissionGranted(android.content.Context context)`
  static bool isBackgroundLocationPermissionGranted(jni$_.JObject? context) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    return _isBackgroundLocationPermissionGranted(
      _class.reference.pointer,
      _id_isBackgroundLocationPermissionGranted as jni$_.JMethodIDPtr,
      _$context.pointer,
    ).boolean;
  }

  static final _id_areLocationPermissionsGranted = _class.staticMethodId(
    r'areLocationPermissionsGranted',
    r'(Landroid/content/Context;)Z',
  );

  static final _areLocationPermissionsGranted =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public boolean areLocationPermissionsGranted(android.content.Context context)`
  static bool areLocationPermissionsGranted(jni$_.JObject? context) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    return _areLocationPermissionsGranted(
      _class.reference.pointer,
      _id_areLocationPermissionsGranted as jni$_.JMethodIDPtr,
      _$context.pointer,
    ).boolean;
  }

  static final _id_areRuntimePermissionsRequired = _class.staticMethodId(
    r'areRuntimePermissionsRequired',
    r'()Z',
  );

  static final _areRuntimePermissionsRequired =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `static public boolean areRuntimePermissionsRequired()`
  static bool areRuntimePermissionsRequired() {
    return _areRuntimePermissionsRequired(
      _class.reference.pointer,
      _id_areRuntimePermissionsRequired as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_requestLocationPermissions = _class.instanceMethodId(
    r'requestLocationPermissions',
    r'(Landroid/app/Activity;)V',
  );

  static final _requestLocationPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void requestLocationPermissions(android.app.Activity activity)`
  void requestLocationPermissions(jni$_.JObject? activity) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _requestLocationPermissions(
      reference.pointer,
      _id_requestLocationPermissions as jni$_.JMethodIDPtr,
      _$activity.pointer,
    ).check();
  }

  static final _id_onRequestPermissionsResult = _class.instanceMethodId(
    r'onRequestPermissionsResult',
    r'(I[Ljava/lang/String;[I)V',
  );

  static final _onRequestPermissionsResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)`
  void onRequestPermissionsResult(
    int i,
    jni$_.JArray<jni$_.JString?>? strings,
    jni$_.JIntArray? is$,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    _onRequestPermissionsResult(
      reference.pointer,
      _id_onRequestPermissionsResult as jni$_.JMethodIDPtr,
      i,
      _$strings.pointer,
      _$is$.pointer,
    ).check();
  }
}

final class $PermissionsManager$NullableType
    extends jni$_.JObjType<PermissionsManager?> {
  @jni$_.internal
  const $PermissionsManager$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/location/permissions/PermissionsManager;';

  @jni$_.internal
  @core$_.override
  PermissionsManager? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : PermissionsManager.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PermissionsManager?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PermissionsManager$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PermissionsManager$NullableType) &&
        other is $PermissionsManager$NullableType;
  }
}

final class $PermissionsManager$Type
    extends jni$_.JObjType<PermissionsManager> {
  @jni$_.internal
  const $PermissionsManager$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/location/permissions/PermissionsManager;';

  @jni$_.internal
  @core$_.override
  PermissionsManager fromReference(jni$_.JReference reference) =>
      PermissionsManager.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PermissionsManager?> get nullableType =>
      const $PermissionsManager$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PermissionsManager$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PermissionsManager$Type) &&
        other is $PermissionsManager$Type;
  }
}
