// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'OfflineRegion.dart' as offlineregion$_;

import 'OfflineRegionDefinition.dart' as offlineregiondefinition$_;

/// from: `org.maplibre.android.offline.OfflineManager$Companion`
class OfflineManager$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<OfflineManager$Companion> $type;

  @jni$_.internal
  OfflineManager$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/offline/OfflineManager$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $OfflineManager$Companion$NullableType();
  static const type = $OfflineManager$Companion$Type();
  static final _id_getInstance = _class.instanceMethodId(
    r'getInstance',
    r'(Landroid/content/Context;)Lorg/maplibre/android/offline/OfflineManager;',
  );

  static final _getInstance = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final org.maplibre.android.offline.OfflineManager getInstance(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  OfflineManager getInstance(
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    return _getInstance(reference.pointer,
            _id_getInstance as jni$_.JMethodIDPtr, _$context.pointer)
        .object<OfflineManager>(const $OfflineManager$Type());
  }

  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory OfflineManager$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return OfflineManager$Companion.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $OfflineManager$Companion$NullableType
    extends jni$_.JObjType<OfflineManager$Companion?> {
  @jni$_.internal
  const $OfflineManager$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$Companion;';

  @jni$_.internal
  @core$_.override
  OfflineManager$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : OfflineManager$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineManager$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($OfflineManager$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineManager$Companion$NullableType) &&
        other is $OfflineManager$Companion$NullableType;
  }
}

final class $OfflineManager$Companion$Type
    extends jni$_.JObjType<OfflineManager$Companion> {
  @jni$_.internal
  const $OfflineManager$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$Companion;';

  @jni$_.internal
  @core$_.override
  OfflineManager$Companion fromReference(jni$_.JReference reference) =>
      OfflineManager$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineManager$Companion?> get nullableType =>
      const $OfflineManager$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($OfflineManager$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineManager$Companion$Type) &&
        other is $OfflineManager$Companion$Type;
  }
}

/// from: `org.maplibre.android.offline.OfflineManager$CreateOfflineRegionCallback`
class OfflineManager$CreateOfflineRegionCallback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<OfflineManager$CreateOfflineRegionCallback> $type;

  @jni$_.internal
  OfflineManager$CreateOfflineRegionCallback.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/offline/OfflineManager$CreateOfflineRegionCallback');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $OfflineManager$CreateOfflineRegionCallback$NullableType();
  static const type = $OfflineManager$CreateOfflineRegionCallback$Type();
  static final _id_onCreate = _class.instanceMethodId(
    r'onCreate',
    r'(Lorg/maplibre/android/offline/OfflineRegion;)V',
  );

  static final _onCreate = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onCreate(org.maplibre.android.offline.OfflineRegion offlineRegion)`
  void onCreate(
    offlineregion$_.OfflineRegion offlineRegion,
  ) {
    final _$offlineRegion = offlineRegion.reference;
    _onCreate(reference.pointer, _id_onCreate as jni$_.JMethodIDPtr,
            _$offlineRegion.pointer)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'(Ljava/lang/String;)V',
  );

  static final _onError = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onError(java.lang.String string)`
  void onError(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    _onError(reference.pointer, _id_onError as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $OfflineManager$CreateOfflineRegionCallback>
      _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onCreate(Lorg/maplibre/android/offline/OfflineRegion;)V') {
        _$impls[$p]!.onCreate(
          $a![0]!.as(const offlineregion$_.$OfflineRegion$Type(),
              releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onError(Ljava/lang/String;)V') {
        _$impls[$p]!.onError(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $OfflineManager$CreateOfflineRegionCallback $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.offline.OfflineManager$CreateOfflineRegionCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onCreate$async)
          r'onCreate(Lorg/maplibre/android/offline/OfflineRegion;)V',
        if ($impl.onError$async) r'onError(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory OfflineManager$CreateOfflineRegionCallback.implement(
    $OfflineManager$CreateOfflineRegionCallback $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return OfflineManager$CreateOfflineRegionCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $OfflineManager$CreateOfflineRegionCallback {
  factory $OfflineManager$CreateOfflineRegionCallback({
    required void Function(offlineregion$_.OfflineRegion offlineRegion)
        onCreate,
    bool onCreate$async,
    required void Function(jni$_.JString string) onError,
    bool onError$async,
  }) = _$OfflineManager$CreateOfflineRegionCallback;

  void onCreate(offlineregion$_.OfflineRegion offlineRegion);
  bool get onCreate$async => false;
  void onError(jni$_.JString string);
  bool get onError$async => false;
}

final class _$OfflineManager$CreateOfflineRegionCallback
    with $OfflineManager$CreateOfflineRegionCallback {
  _$OfflineManager$CreateOfflineRegionCallback({
    required void Function(offlineregion$_.OfflineRegion offlineRegion)
        onCreate,
    this.onCreate$async = false,
    required void Function(jni$_.JString string) onError,
    this.onError$async = false,
  })  : _onCreate = onCreate,
        _onError = onError;

  final void Function(offlineregion$_.OfflineRegion offlineRegion) _onCreate;
  final bool onCreate$async;
  final void Function(jni$_.JString string) _onError;
  final bool onError$async;

  void onCreate(offlineregion$_.OfflineRegion offlineRegion) {
    return _onCreate(offlineRegion);
  }

  void onError(jni$_.JString string) {
    return _onError(string);
  }
}

final class $OfflineManager$CreateOfflineRegionCallback$NullableType
    extends jni$_.JObjType<OfflineManager$CreateOfflineRegionCallback?> {
  @jni$_.internal
  const $OfflineManager$CreateOfflineRegionCallback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$CreateOfflineRegionCallback;';

  @jni$_.internal
  @core$_.override
  OfflineManager$CreateOfflineRegionCallback? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : OfflineManager$CreateOfflineRegionCallback.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineManager$CreateOfflineRegionCallback?>
      get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($OfflineManager$CreateOfflineRegionCallback$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($OfflineManager$CreateOfflineRegionCallback$NullableType) &&
        other is $OfflineManager$CreateOfflineRegionCallback$NullableType;
  }
}

final class $OfflineManager$CreateOfflineRegionCallback$Type
    extends jni$_.JObjType<OfflineManager$CreateOfflineRegionCallback> {
  @jni$_.internal
  const $OfflineManager$CreateOfflineRegionCallback$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$CreateOfflineRegionCallback;';

  @jni$_.internal
  @core$_.override
  OfflineManager$CreateOfflineRegionCallback fromReference(
          jni$_.JReference reference) =>
      OfflineManager$CreateOfflineRegionCallback.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineManager$CreateOfflineRegionCallback?>
      get nullableType =>
          const $OfflineManager$CreateOfflineRegionCallback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($OfflineManager$CreateOfflineRegionCallback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($OfflineManager$CreateOfflineRegionCallback$Type) &&
        other is $OfflineManager$CreateOfflineRegionCallback$Type;
  }
}

/// from: `org.maplibre.android.offline.OfflineManager$FileSourceCallback`
class OfflineManager$FileSourceCallback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<OfflineManager$FileSourceCallback> $type;

  @jni$_.internal
  OfflineManager$FileSourceCallback.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/offline/OfflineManager$FileSourceCallback');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $OfflineManager$FileSourceCallback$NullableType();
  static const type = $OfflineManager$FileSourceCallback$Type();
  static final _id_onSuccess = _class.instanceMethodId(
    r'onSuccess',
    r'()V',
  );

  static final _onSuccess = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void onSuccess()`
  void onSuccess() {
    _onSuccess(reference.pointer, _id_onSuccess as jni$_.JMethodIDPtr).check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'(Ljava/lang/String;)V',
  );

  static final _onError = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onError(java.lang.String string)`
  void onError(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    _onError(reference.pointer, _id_onError as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $OfflineManager$FileSourceCallback> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onSuccess()V') {
        _$impls[$p]!.onSuccess();
        return jni$_.nullptr;
      }
      if ($d == r'onError(Ljava/lang/String;)V') {
        _$impls[$p]!.onError(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $OfflineManager$FileSourceCallback $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.offline.OfflineManager$FileSourceCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onSuccess$async) r'onSuccess()V',
        if ($impl.onError$async) r'onError(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory OfflineManager$FileSourceCallback.implement(
    $OfflineManager$FileSourceCallback $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return OfflineManager$FileSourceCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $OfflineManager$FileSourceCallback {
  factory $OfflineManager$FileSourceCallback({
    required void Function() onSuccess,
    bool onSuccess$async,
    required void Function(jni$_.JString string) onError,
    bool onError$async,
  }) = _$OfflineManager$FileSourceCallback;

  void onSuccess();
  bool get onSuccess$async => false;
  void onError(jni$_.JString string);
  bool get onError$async => false;
}

final class _$OfflineManager$FileSourceCallback
    with $OfflineManager$FileSourceCallback {
  _$OfflineManager$FileSourceCallback({
    required void Function() onSuccess,
    this.onSuccess$async = false,
    required void Function(jni$_.JString string) onError,
    this.onError$async = false,
  })  : _onSuccess = onSuccess,
        _onError = onError;

  final void Function() _onSuccess;
  final bool onSuccess$async;
  final void Function(jni$_.JString string) _onError;
  final bool onError$async;

  void onSuccess() {
    return _onSuccess();
  }

  void onError(jni$_.JString string) {
    return _onError(string);
  }
}

final class $OfflineManager$FileSourceCallback$NullableType
    extends jni$_.JObjType<OfflineManager$FileSourceCallback?> {
  @jni$_.internal
  const $OfflineManager$FileSourceCallback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$FileSourceCallback;';

  @jni$_.internal
  @core$_.override
  OfflineManager$FileSourceCallback? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : OfflineManager$FileSourceCallback.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineManager$FileSourceCallback?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($OfflineManager$FileSourceCallback$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($OfflineManager$FileSourceCallback$NullableType) &&
        other is $OfflineManager$FileSourceCallback$NullableType;
  }
}

final class $OfflineManager$FileSourceCallback$Type
    extends jni$_.JObjType<OfflineManager$FileSourceCallback> {
  @jni$_.internal
  const $OfflineManager$FileSourceCallback$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$FileSourceCallback;';

  @jni$_.internal
  @core$_.override
  OfflineManager$FileSourceCallback fromReference(jni$_.JReference reference) =>
      OfflineManager$FileSourceCallback.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineManager$FileSourceCallback?> get nullableType =>
      const $OfflineManager$FileSourceCallback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($OfflineManager$FileSourceCallback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineManager$FileSourceCallback$Type) &&
        other is $OfflineManager$FileSourceCallback$Type;
  }
}

/// from: `org.maplibre.android.offline.OfflineManager$GetOfflineRegionCallback`
class OfflineManager$GetOfflineRegionCallback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<OfflineManager$GetOfflineRegionCallback> $type;

  @jni$_.internal
  OfflineManager$GetOfflineRegionCallback.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/offline/OfflineManager$GetOfflineRegionCallback');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $OfflineManager$GetOfflineRegionCallback$NullableType();
  static const type = $OfflineManager$GetOfflineRegionCallback$Type();
  static final _id_onRegion = _class.instanceMethodId(
    r'onRegion',
    r'(Lorg/maplibre/android/offline/OfflineRegion;)V',
  );

  static final _onRegion = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onRegion(org.maplibre.android.offline.OfflineRegion offlineRegion)`
  void onRegion(
    offlineregion$_.OfflineRegion offlineRegion,
  ) {
    final _$offlineRegion = offlineRegion.reference;
    _onRegion(reference.pointer, _id_onRegion as jni$_.JMethodIDPtr,
            _$offlineRegion.pointer)
        .check();
  }

  static final _id_onRegionNotFound = _class.instanceMethodId(
    r'onRegionNotFound',
    r'()V',
  );

  static final _onRegionNotFound = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void onRegionNotFound()`
  void onRegionNotFound() {
    _onRegionNotFound(
            reference.pointer, _id_onRegionNotFound as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'(Ljava/lang/String;)V',
  );

  static final _onError = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onError(java.lang.String string)`
  void onError(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    _onError(reference.pointer, _id_onError as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $OfflineManager$GetOfflineRegionCallback>
      _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onRegion(Lorg/maplibre/android/offline/OfflineRegion;)V') {
        _$impls[$p]!.onRegion(
          $a![0]!.as(const offlineregion$_.$OfflineRegion$Type(),
              releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onRegionNotFound()V') {
        _$impls[$p]!.onRegionNotFound();
        return jni$_.nullptr;
      }
      if ($d == r'onError(Ljava/lang/String;)V') {
        _$impls[$p]!.onError(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $OfflineManager$GetOfflineRegionCallback $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.offline.OfflineManager$GetOfflineRegionCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onRegion$async)
          r'onRegion(Lorg/maplibre/android/offline/OfflineRegion;)V',
        if ($impl.onRegionNotFound$async) r'onRegionNotFound()V',
        if ($impl.onError$async) r'onError(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory OfflineManager$GetOfflineRegionCallback.implement(
    $OfflineManager$GetOfflineRegionCallback $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return OfflineManager$GetOfflineRegionCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $OfflineManager$GetOfflineRegionCallback {
  factory $OfflineManager$GetOfflineRegionCallback({
    required void Function(offlineregion$_.OfflineRegion offlineRegion)
        onRegion,
    bool onRegion$async,
    required void Function() onRegionNotFound,
    bool onRegionNotFound$async,
    required void Function(jni$_.JString string) onError,
    bool onError$async,
  }) = _$OfflineManager$GetOfflineRegionCallback;

  void onRegion(offlineregion$_.OfflineRegion offlineRegion);
  bool get onRegion$async => false;
  void onRegionNotFound();
  bool get onRegionNotFound$async => false;
  void onError(jni$_.JString string);
  bool get onError$async => false;
}

final class _$OfflineManager$GetOfflineRegionCallback
    with $OfflineManager$GetOfflineRegionCallback {
  _$OfflineManager$GetOfflineRegionCallback({
    required void Function(offlineregion$_.OfflineRegion offlineRegion)
        onRegion,
    this.onRegion$async = false,
    required void Function() onRegionNotFound,
    this.onRegionNotFound$async = false,
    required void Function(jni$_.JString string) onError,
    this.onError$async = false,
  })  : _onRegion = onRegion,
        _onRegionNotFound = onRegionNotFound,
        _onError = onError;

  final void Function(offlineregion$_.OfflineRegion offlineRegion) _onRegion;
  final bool onRegion$async;
  final void Function() _onRegionNotFound;
  final bool onRegionNotFound$async;
  final void Function(jni$_.JString string) _onError;
  final bool onError$async;

  void onRegion(offlineregion$_.OfflineRegion offlineRegion) {
    return _onRegion(offlineRegion);
  }

  void onRegionNotFound() {
    return _onRegionNotFound();
  }

  void onError(jni$_.JString string) {
    return _onError(string);
  }
}

final class $OfflineManager$GetOfflineRegionCallback$NullableType
    extends jni$_.JObjType<OfflineManager$GetOfflineRegionCallback?> {
  @jni$_.internal
  const $OfflineManager$GetOfflineRegionCallback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$GetOfflineRegionCallback;';

  @jni$_.internal
  @core$_.override
  OfflineManager$GetOfflineRegionCallback? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : OfflineManager$GetOfflineRegionCallback.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineManager$GetOfflineRegionCallback?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($OfflineManager$GetOfflineRegionCallback$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($OfflineManager$GetOfflineRegionCallback$NullableType) &&
        other is $OfflineManager$GetOfflineRegionCallback$NullableType;
  }
}

final class $OfflineManager$GetOfflineRegionCallback$Type
    extends jni$_.JObjType<OfflineManager$GetOfflineRegionCallback> {
  @jni$_.internal
  const $OfflineManager$GetOfflineRegionCallback$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$GetOfflineRegionCallback;';

  @jni$_.internal
  @core$_.override
  OfflineManager$GetOfflineRegionCallback fromReference(
          jni$_.JReference reference) =>
      OfflineManager$GetOfflineRegionCallback.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineManager$GetOfflineRegionCallback?> get nullableType =>
      const $OfflineManager$GetOfflineRegionCallback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($OfflineManager$GetOfflineRegionCallback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($OfflineManager$GetOfflineRegionCallback$Type) &&
        other is $OfflineManager$GetOfflineRegionCallback$Type;
  }
}

/// from: `org.maplibre.android.offline.OfflineManager$ListOfflineRegionsCallback`
class OfflineManager$ListOfflineRegionsCallback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<OfflineManager$ListOfflineRegionsCallback> $type;

  @jni$_.internal
  OfflineManager$ListOfflineRegionsCallback.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/offline/OfflineManager$ListOfflineRegionsCallback');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $OfflineManager$ListOfflineRegionsCallback$NullableType();
  static const type = $OfflineManager$ListOfflineRegionsCallback$Type();
  static final _id_onList = _class.instanceMethodId(
    r'onList',
    r'([Lorg/maplibre/android/offline/OfflineRegion;)V',
  );

  static final _onList = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onList(org.maplibre.android.offline.OfflineRegion[] offlineRegions)`
  void onList(
    jni$_.JArray<offlineregion$_.OfflineRegion>? offlineRegions,
  ) {
    final _$offlineRegions = offlineRegions?.reference ?? jni$_.jNullReference;
    _onList(reference.pointer, _id_onList as jni$_.JMethodIDPtr,
            _$offlineRegions.pointer)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'(Ljava/lang/String;)V',
  );

  static final _onError = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onError(java.lang.String string)`
  void onError(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    _onError(reference.pointer, _id_onError as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $OfflineManager$ListOfflineRegionsCallback>
      _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onList([Lorg/maplibre/android/offline/OfflineRegion;)V') {
        _$impls[$p]!.onList(
          $a![0]?.as(
              const jni$_.JArrayType<offlineregion$_.OfflineRegion>(
                  offlineregion$_.$OfflineRegion$Type()),
              releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onError(Ljava/lang/String;)V') {
        _$impls[$p]!.onError(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $OfflineManager$ListOfflineRegionsCallback $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.offline.OfflineManager$ListOfflineRegionsCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onList$async)
          r'onList([Lorg/maplibre/android/offline/OfflineRegion;)V',
        if ($impl.onError$async) r'onError(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory OfflineManager$ListOfflineRegionsCallback.implement(
    $OfflineManager$ListOfflineRegionsCallback $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return OfflineManager$ListOfflineRegionsCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $OfflineManager$ListOfflineRegionsCallback {
  factory $OfflineManager$ListOfflineRegionsCallback({
    required void Function(
            jni$_.JArray<offlineregion$_.OfflineRegion>? offlineRegions)
        onList,
    bool onList$async,
    required void Function(jni$_.JString string) onError,
    bool onError$async,
  }) = _$OfflineManager$ListOfflineRegionsCallback;

  void onList(jni$_.JArray<offlineregion$_.OfflineRegion>? offlineRegions);
  bool get onList$async => false;
  void onError(jni$_.JString string);
  bool get onError$async => false;
}

final class _$OfflineManager$ListOfflineRegionsCallback
    with $OfflineManager$ListOfflineRegionsCallback {
  _$OfflineManager$ListOfflineRegionsCallback({
    required void Function(
            jni$_.JArray<offlineregion$_.OfflineRegion>? offlineRegions)
        onList,
    this.onList$async = false,
    required void Function(jni$_.JString string) onError,
    this.onError$async = false,
  })  : _onList = onList,
        _onError = onError;

  final void Function(
      jni$_.JArray<offlineregion$_.OfflineRegion>? offlineRegions) _onList;
  final bool onList$async;
  final void Function(jni$_.JString string) _onError;
  final bool onError$async;

  void onList(jni$_.JArray<offlineregion$_.OfflineRegion>? offlineRegions) {
    return _onList(offlineRegions);
  }

  void onError(jni$_.JString string) {
    return _onError(string);
  }
}

final class $OfflineManager$ListOfflineRegionsCallback$NullableType
    extends jni$_.JObjType<OfflineManager$ListOfflineRegionsCallback?> {
  @jni$_.internal
  const $OfflineManager$ListOfflineRegionsCallback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$ListOfflineRegionsCallback;';

  @jni$_.internal
  @core$_.override
  OfflineManager$ListOfflineRegionsCallback? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : OfflineManager$ListOfflineRegionsCallback.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineManager$ListOfflineRegionsCallback?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($OfflineManager$ListOfflineRegionsCallback$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($OfflineManager$ListOfflineRegionsCallback$NullableType) &&
        other is $OfflineManager$ListOfflineRegionsCallback$NullableType;
  }
}

final class $OfflineManager$ListOfflineRegionsCallback$Type
    extends jni$_.JObjType<OfflineManager$ListOfflineRegionsCallback> {
  @jni$_.internal
  const $OfflineManager$ListOfflineRegionsCallback$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$ListOfflineRegionsCallback;';

  @jni$_.internal
  @core$_.override
  OfflineManager$ListOfflineRegionsCallback fromReference(
          jni$_.JReference reference) =>
      OfflineManager$ListOfflineRegionsCallback.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineManager$ListOfflineRegionsCallback?> get nullableType =>
      const $OfflineManager$ListOfflineRegionsCallback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($OfflineManager$ListOfflineRegionsCallback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($OfflineManager$ListOfflineRegionsCallback$Type) &&
        other is $OfflineManager$ListOfflineRegionsCallback$Type;
  }
}

/// from: `org.maplibre.android.offline.OfflineManager$MergeOfflineRegionsCallback`
class OfflineManager$MergeOfflineRegionsCallback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<OfflineManager$MergeOfflineRegionsCallback> $type;

  @jni$_.internal
  OfflineManager$MergeOfflineRegionsCallback.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/offline/OfflineManager$MergeOfflineRegionsCallback');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $OfflineManager$MergeOfflineRegionsCallback$NullableType();
  static const type = $OfflineManager$MergeOfflineRegionsCallback$Type();
  static final _id_onMerge = _class.instanceMethodId(
    r'onMerge',
    r'([Lorg/maplibre/android/offline/OfflineRegion;)V',
  );

  static final _onMerge = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onMerge(org.maplibre.android.offline.OfflineRegion[] offlineRegions)`
  void onMerge(
    jni$_.JArray<offlineregion$_.OfflineRegion>? offlineRegions,
  ) {
    final _$offlineRegions = offlineRegions?.reference ?? jni$_.jNullReference;
    _onMerge(reference.pointer, _id_onMerge as jni$_.JMethodIDPtr,
            _$offlineRegions.pointer)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'(Ljava/lang/String;)V',
  );

  static final _onError = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onError(java.lang.String string)`
  void onError(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    _onError(reference.pointer, _id_onError as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $OfflineManager$MergeOfflineRegionsCallback>
      _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onMerge([Lorg/maplibre/android/offline/OfflineRegion;)V') {
        _$impls[$p]!.onMerge(
          $a![0]?.as(
              const jni$_.JArrayType<offlineregion$_.OfflineRegion>(
                  offlineregion$_.$OfflineRegion$Type()),
              releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onError(Ljava/lang/String;)V') {
        _$impls[$p]!.onError(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $OfflineManager$MergeOfflineRegionsCallback $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.offline.OfflineManager$MergeOfflineRegionsCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onMerge$async)
          r'onMerge([Lorg/maplibre/android/offline/OfflineRegion;)V',
        if ($impl.onError$async) r'onError(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory OfflineManager$MergeOfflineRegionsCallback.implement(
    $OfflineManager$MergeOfflineRegionsCallback $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return OfflineManager$MergeOfflineRegionsCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $OfflineManager$MergeOfflineRegionsCallback {
  factory $OfflineManager$MergeOfflineRegionsCallback({
    required void Function(
            jni$_.JArray<offlineregion$_.OfflineRegion>? offlineRegions)
        onMerge,
    bool onMerge$async,
    required void Function(jni$_.JString string) onError,
    bool onError$async,
  }) = _$OfflineManager$MergeOfflineRegionsCallback;

  void onMerge(jni$_.JArray<offlineregion$_.OfflineRegion>? offlineRegions);
  bool get onMerge$async => false;
  void onError(jni$_.JString string);
  bool get onError$async => false;
}

final class _$OfflineManager$MergeOfflineRegionsCallback
    with $OfflineManager$MergeOfflineRegionsCallback {
  _$OfflineManager$MergeOfflineRegionsCallback({
    required void Function(
            jni$_.JArray<offlineregion$_.OfflineRegion>? offlineRegions)
        onMerge,
    this.onMerge$async = false,
    required void Function(jni$_.JString string) onError,
    this.onError$async = false,
  })  : _onMerge = onMerge,
        _onError = onError;

  final void Function(
      jni$_.JArray<offlineregion$_.OfflineRegion>? offlineRegions) _onMerge;
  final bool onMerge$async;
  final void Function(jni$_.JString string) _onError;
  final bool onError$async;

  void onMerge(jni$_.JArray<offlineregion$_.OfflineRegion>? offlineRegions) {
    return _onMerge(offlineRegions);
  }

  void onError(jni$_.JString string) {
    return _onError(string);
  }
}

final class $OfflineManager$MergeOfflineRegionsCallback$NullableType
    extends jni$_.JObjType<OfflineManager$MergeOfflineRegionsCallback?> {
  @jni$_.internal
  const $OfflineManager$MergeOfflineRegionsCallback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$MergeOfflineRegionsCallback;';

  @jni$_.internal
  @core$_.override
  OfflineManager$MergeOfflineRegionsCallback? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : OfflineManager$MergeOfflineRegionsCallback.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineManager$MergeOfflineRegionsCallback?>
      get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($OfflineManager$MergeOfflineRegionsCallback$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($OfflineManager$MergeOfflineRegionsCallback$NullableType) &&
        other is $OfflineManager$MergeOfflineRegionsCallback$NullableType;
  }
}

final class $OfflineManager$MergeOfflineRegionsCallback$Type
    extends jni$_.JObjType<OfflineManager$MergeOfflineRegionsCallback> {
  @jni$_.internal
  const $OfflineManager$MergeOfflineRegionsCallback$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$MergeOfflineRegionsCallback;';

  @jni$_.internal
  @core$_.override
  OfflineManager$MergeOfflineRegionsCallback fromReference(
          jni$_.JReference reference) =>
      OfflineManager$MergeOfflineRegionsCallback.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineManager$MergeOfflineRegionsCallback?>
      get nullableType =>
          const $OfflineManager$MergeOfflineRegionsCallback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($OfflineManager$MergeOfflineRegionsCallback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($OfflineManager$MergeOfflineRegionsCallback$Type) &&
        other is $OfflineManager$MergeOfflineRegionsCallback$Type;
  }
}

/// from: `org.maplibre.android.offline.OfflineManager`
class OfflineManager extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<OfflineManager> $type;

  @jni$_.internal
  OfflineManager.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'org/maplibre/android/offline/OfflineManager');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $OfflineManager$NullableType();
  static const type = $OfflineManager$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lorg/maplibre/android/offline/OfflineManager$Companion;',
  );

  /// from: `static public final org.maplibre.android.offline.OfflineManager$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static OfflineManager$Companion? get Companion =>
      _id_Companion.get(_class, const $OfflineManager$Companion$NullableType());

  static final _id_listOfflineRegions = _class.instanceMethodId(
    r'listOfflineRegions',
    r'(Lorg/maplibre/android/offline/OfflineManager$ListOfflineRegionsCallback;)V',
  );

  static final _listOfflineRegions = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void listOfflineRegions(org.maplibre.android.offline.OfflineManager$ListOfflineRegionsCallback listOfflineRegionsCallback)`
  void listOfflineRegions(
    OfflineManager$ListOfflineRegionsCallback listOfflineRegionsCallback,
  ) {
    final _$listOfflineRegionsCallback = listOfflineRegionsCallback.reference;
    _listOfflineRegions(
            reference.pointer,
            _id_listOfflineRegions as jni$_.JMethodIDPtr,
            _$listOfflineRegionsCallback.pointer)
        .check();
  }

  static final _id_getOfflineRegion = _class.instanceMethodId(
    r'getOfflineRegion',
    r'(JLorg/maplibre/android/offline/OfflineManager$GetOfflineRegionCallback;)V',
  );

  static final _getOfflineRegion = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int64, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void getOfflineRegion(long j, org.maplibre.android.offline.OfflineManager$GetOfflineRegionCallback getOfflineRegionCallback)`
  void getOfflineRegion(
    int j,
    OfflineManager$GetOfflineRegionCallback getOfflineRegionCallback,
  ) {
    final _$getOfflineRegionCallback = getOfflineRegionCallback.reference;
    _getOfflineRegion(
            reference.pointer,
            _id_getOfflineRegion as jni$_.JMethodIDPtr,
            j,
            _$getOfflineRegionCallback.pointer)
        .check();
  }

  static final _id_mergeOfflineRegions = _class.instanceMethodId(
    r'mergeOfflineRegions',
    r'(Ljava/lang/String;Lorg/maplibre/android/offline/OfflineManager$MergeOfflineRegionsCallback;)V',
  );

  static final _mergeOfflineRegions = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void mergeOfflineRegions(java.lang.String string, org.maplibre.android.offline.OfflineManager$MergeOfflineRegionsCallback mergeOfflineRegionsCallback)`
  void mergeOfflineRegions(
    jni$_.JString string,
    OfflineManager$MergeOfflineRegionsCallback mergeOfflineRegionsCallback,
  ) {
    final _$string = string.reference;
    final _$mergeOfflineRegionsCallback = mergeOfflineRegionsCallback.reference;
    _mergeOfflineRegions(
            reference.pointer,
            _id_mergeOfflineRegions as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$mergeOfflineRegionsCallback.pointer)
        .check();
  }

  static final _id_resetDatabase = _class.instanceMethodId(
    r'resetDatabase',
    r'(Lorg/maplibre/android/offline/OfflineManager$FileSourceCallback;)V',
  );

  static final _resetDatabase = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void resetDatabase(org.maplibre.android.offline.OfflineManager$FileSourceCallback fileSourceCallback)`
  void resetDatabase(
    OfflineManager$FileSourceCallback? fileSourceCallback,
  ) {
    final _$fileSourceCallback =
        fileSourceCallback?.reference ?? jni$_.jNullReference;
    _resetDatabase(reference.pointer, _id_resetDatabase as jni$_.JMethodIDPtr,
            _$fileSourceCallback.pointer)
        .check();
  }

  static final _id_packDatabase = _class.instanceMethodId(
    r'packDatabase',
    r'(Lorg/maplibre/android/offline/OfflineManager$FileSourceCallback;)V',
  );

  static final _packDatabase = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void packDatabase(org.maplibre.android.offline.OfflineManager$FileSourceCallback fileSourceCallback)`
  void packDatabase(
    OfflineManager$FileSourceCallback? fileSourceCallback,
  ) {
    final _$fileSourceCallback =
        fileSourceCallback?.reference ?? jni$_.jNullReference;
    _packDatabase(reference.pointer, _id_packDatabase as jni$_.JMethodIDPtr,
            _$fileSourceCallback.pointer)
        .check();
  }

  static final _id_invalidateAmbientCache = _class.instanceMethodId(
    r'invalidateAmbientCache',
    r'(Lorg/maplibre/android/offline/OfflineManager$FileSourceCallback;)V',
  );

  static final _invalidateAmbientCache = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void invalidateAmbientCache(org.maplibre.android.offline.OfflineManager$FileSourceCallback fileSourceCallback)`
  void invalidateAmbientCache(
    OfflineManager$FileSourceCallback? fileSourceCallback,
  ) {
    final _$fileSourceCallback =
        fileSourceCallback?.reference ?? jni$_.jNullReference;
    _invalidateAmbientCache(
            reference.pointer,
            _id_invalidateAmbientCache as jni$_.JMethodIDPtr,
            _$fileSourceCallback.pointer)
        .check();
  }

  static final _id_clearAmbientCache = _class.instanceMethodId(
    r'clearAmbientCache',
    r'(Lorg/maplibre/android/offline/OfflineManager$FileSourceCallback;)V',
  );

  static final _clearAmbientCache = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void clearAmbientCache(org.maplibre.android.offline.OfflineManager$FileSourceCallback fileSourceCallback)`
  void clearAmbientCache(
    OfflineManager$FileSourceCallback? fileSourceCallback,
  ) {
    final _$fileSourceCallback =
        fileSourceCallback?.reference ?? jni$_.jNullReference;
    _clearAmbientCache(
            reference.pointer,
            _id_clearAmbientCache as jni$_.JMethodIDPtr,
            _$fileSourceCallback.pointer)
        .check();
  }

  static final _id_setMaximumAmbientCacheSize = _class.instanceMethodId(
    r'setMaximumAmbientCacheSize',
    r'(JLorg/maplibre/android/offline/OfflineManager$FileSourceCallback;)V',
  );

  static final _setMaximumAmbientCacheSize =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Int64,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setMaximumAmbientCacheSize(long j, org.maplibre.android.offline.OfflineManager$FileSourceCallback fileSourceCallback)`
  void setMaximumAmbientCacheSize(
    int j,
    OfflineManager$FileSourceCallback? fileSourceCallback,
  ) {
    final _$fileSourceCallback =
        fileSourceCallback?.reference ?? jni$_.jNullReference;
    _setMaximumAmbientCacheSize(
            reference.pointer,
            _id_setMaximumAmbientCacheSize as jni$_.JMethodIDPtr,
            j,
            _$fileSourceCallback.pointer)
        .check();
  }

  static final _id_createOfflineRegion = _class.instanceMethodId(
    r'createOfflineRegion',
    r'(Lorg/maplibre/android/offline/OfflineRegionDefinition;[BLorg/maplibre/android/offline/OfflineManager$CreateOfflineRegionCallback;)V',
  );

  static final _createOfflineRegion = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void createOfflineRegion(org.maplibre.android.offline.OfflineRegionDefinition offlineRegionDefinition, byte[] bs, org.maplibre.android.offline.OfflineManager$CreateOfflineRegionCallback createOfflineRegionCallback)`
  void createOfflineRegion(
    offlineregiondefinition$_.OfflineRegionDefinition offlineRegionDefinition,
    jni$_.JByteArray bs,
    OfflineManager$CreateOfflineRegionCallback createOfflineRegionCallback,
  ) {
    final _$offlineRegionDefinition = offlineRegionDefinition.reference;
    final _$bs = bs.reference;
    final _$createOfflineRegionCallback = createOfflineRegionCallback.reference;
    _createOfflineRegion(
            reference.pointer,
            _id_createOfflineRegion as jni$_.JMethodIDPtr,
            _$offlineRegionDefinition.pointer,
            _$bs.pointer,
            _$createOfflineRegionCallback.pointer)
        .check();
  }

  static final _id_setOfflineMapboxTileCountLimit = _class.instanceMethodId(
    r'setOfflineMapboxTileCountLimit',
    r'(J)V',
  );

  static final _setOfflineMapboxTileCountLimit =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public native final void setOfflineMapboxTileCountLimit(long j)`
  void setOfflineMapboxTileCountLimit(
    int j,
  ) {
    _setOfflineMapboxTileCountLimit(reference.pointer,
            _id_setOfflineMapboxTileCountLimit as jni$_.JMethodIDPtr, j)
        .check();
  }

  static final _id_runPackDatabaseAutomatically = _class.instanceMethodId(
    r'runPackDatabaseAutomatically',
    r'(Z)V',
  );

  static final _runPackDatabaseAutomatically =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public native final void runPackDatabaseAutomatically(boolean z)`
  void runPackDatabaseAutomatically(
    bool z,
  ) {
    _runPackDatabaseAutomatically(reference.pointer,
            _id_runPackDatabaseAutomatically as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_putResourceWithUrl = _class.instanceMethodId(
    r'putResourceWithUrl',
    r'(Ljava/lang/String;[BJJLjava/lang/String;Z)V',
  );

  static final _putResourceWithUrl = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int64,
                        jni$_.Int64,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public native final void putResourceWithUrl(java.lang.String string, byte[] bs, long j, long j1, java.lang.String string1, boolean z)`
  void putResourceWithUrl(
    jni$_.JString? string,
    jni$_.JByteArray? bs,
    int j,
    int j1,
    jni$_.JString? string1,
    bool z,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _putResourceWithUrl(
            reference.pointer,
            _id_putResourceWithUrl as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$bs.pointer,
            j,
            j1,
            _$string1.pointer,
            z ? 1 : 0)
        .check();
  }

  static final _id_getInstance = _class.staticMethodId(
    r'getInstance',
    r'(Landroid/content/Context;)Lorg/maplibre/android/offline/OfflineManager;',
  );

  static final _getInstance = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final org.maplibre.android.offline.OfflineManager getInstance(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static OfflineManager? getInstance(
    jni$_.JObject? context,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    return _getInstance(_class.reference.pointer,
            _id_getInstance as jni$_.JMethodIDPtr, _$context.pointer)
        .object<OfflineManager?>(const $OfflineManager$NullableType());
  }

  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(android.content.Context context, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory OfflineManager(
    jni$_.JObject? context,
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return OfflineManager.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $OfflineManager$NullableType
    extends jni$_.JObjType<OfflineManager?> {
  @jni$_.internal
  const $OfflineManager$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/offline/OfflineManager;';

  @jni$_.internal
  @core$_.override
  OfflineManager? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : OfflineManager.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineManager?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($OfflineManager$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineManager$NullableType) &&
        other is $OfflineManager$NullableType;
  }
}

final class $OfflineManager$Type extends jni$_.JObjType<OfflineManager> {
  @jni$_.internal
  const $OfflineManager$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/offline/OfflineManager;';

  @jni$_.internal
  @core$_.override
  OfflineManager fromReference(jni$_.JReference reference) =>
      OfflineManager.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineManager?> get nullableType =>
      const $OfflineManager$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($OfflineManager$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineManager$Type) &&
        other is $OfflineManager$Type;
  }
}
