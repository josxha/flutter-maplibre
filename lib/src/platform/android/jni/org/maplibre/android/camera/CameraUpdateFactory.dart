// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../geometry/LatLng.dart' as latlng$_;

import '../geometry/LatLngBounds.dart' as latlngbounds$_;

import '../maps/MapLibreMap.dart' as maplibremap$_;

import 'CameraPosition.dart' as cameraposition$_;

import 'CameraUpdate.dart' as cameraupdate$_;

/// from: `org.maplibre.android.camera.CameraUpdateFactory$CameraBoundsUpdate`
class CameraUpdateFactory$CameraBoundsUpdate extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraUpdateFactory$CameraBoundsUpdate> $type;

  @jni$_.internal
  CameraUpdateFactory$CameraBoundsUpdate.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/camera/CameraUpdateFactory$CameraBoundsUpdate');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $CameraUpdateFactory$CameraBoundsUpdate$NullableType();
  static const type = $CameraUpdateFactory$CameraBoundsUpdate$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lorg/maplibre/android/geometry/LatLngBounds;Ljava/lang/Double;Ljava/lang/Double;[I)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(org.maplibre.android.geometry.LatLngBounds latLngBounds, java.lang.Double double, java.lang.Double double1, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory$CameraBoundsUpdate(
    latlngbounds$_.LatLngBounds latLngBounds,
    jni$_.JDouble? double,
    jni$_.JDouble? double1,
    jni$_.JIntArray is$,
  ) {
    final _$latLngBounds = latLngBounds.reference;
    final _$double = double?.reference ?? jni$_.jNullReference;
    final _$double1 = double1?.reference ?? jni$_.jNullReference;
    final _$is$ = is$.reference;
    return CameraUpdateFactory$CameraBoundsUpdate.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$latLngBounds.pointer,
            _$double.pointer,
            _$double1.pointer,
            _$is$.pointer)
        .reference);
  }

  static final _id_getBounds = _class.instanceMethodId(
    r'getBounds',
    r'()Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _getBounds = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds getBounds()`
  /// The returned object must be released after use, by calling the [release] method.
  latlngbounds$_.LatLngBounds getBounds() {
    return _getBounds(reference.pointer, _id_getBounds as jni$_.JMethodIDPtr)
        .object<latlngbounds$_.LatLngBounds>(
            const latlngbounds$_.$LatLngBounds$Type());
  }

  static final _id_getPadding = _class.instanceMethodId(
    r'getPadding',
    r'()[I',
  );

  static final _getPadding = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int[] getPadding()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray getPadding() {
    return _getPadding(reference.pointer, _id_getPadding as jni$_.JMethodIDPtr)
        .object<jni$_.JIntArray>(const jni$_.JIntArrayType());
  }

  static final _id_new$1 = _class.constructorId(
    r'(Lorg/maplibre/android/geometry/LatLngBounds;Ljava/lang/Double;Ljava/lang/Double;IIII)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              int)>();

  /// from: `public void <init>(org.maplibre.android.geometry.LatLngBounds latLngBounds, java.lang.Double double, java.lang.Double double1, int i, int i1, int i2, int i3)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory$CameraBoundsUpdate.new$1(
    latlngbounds$_.LatLngBounds latLngBounds,
    jni$_.JDouble? double,
    jni$_.JDouble? double1,
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    final _$latLngBounds = latLngBounds.reference;
    final _$double = double?.reference ?? jni$_.jNullReference;
    final _$double1 = double1?.reference ?? jni$_.jNullReference;
    return CameraUpdateFactory$CameraBoundsUpdate.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr,
            _$latLngBounds.pointer,
            _$double.pointer,
            _$double1.pointer,
            i,
            i1,
            i2,
            i3)
        .reference);
  }

  static final _id_getCameraPosition = _class.instanceMethodId(
    r'getCameraPosition',
    r'(Lorg/maplibre/android/maps/MapLibreMap;)Lorg/maplibre/android/camera/CameraPosition;',
  );

  static final _getCameraPosition = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public org.maplibre.android.camera.CameraPosition getCameraPosition(org.maplibre.android.maps.MapLibreMap mapLibreMap)`
  /// The returned object must be released after use, by calling the [release] method.
  cameraposition$_.CameraPosition? getCameraPosition(
    maplibremap$_.MapLibreMap mapLibreMap,
  ) {
    final _$mapLibreMap = mapLibreMap.reference;
    return _getCameraPosition(reference.pointer,
            _id_getCameraPosition as jni$_.JMethodIDPtr, _$mapLibreMap.pointer)
        .object<cameraposition$_.CameraPosition?>(
            const cameraposition$_.$CameraPosition$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }
}

final class $CameraUpdateFactory$CameraBoundsUpdate$NullableType
    extends jni$_.JObjType<CameraUpdateFactory$CameraBoundsUpdate?> {
  @jni$_.internal
  const $CameraUpdateFactory$CameraBoundsUpdate$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$CameraBoundsUpdate;';

  @jni$_.internal
  @core$_.override
  CameraUpdateFactory$CameraBoundsUpdate? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : CameraUpdateFactory$CameraBoundsUpdate.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraUpdateFactory$CameraBoundsUpdate?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($CameraUpdateFactory$CameraBoundsUpdate$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CameraUpdateFactory$CameraBoundsUpdate$NullableType) &&
        other is $CameraUpdateFactory$CameraBoundsUpdate$NullableType;
  }
}

final class $CameraUpdateFactory$CameraBoundsUpdate$Type
    extends jni$_.JObjType<CameraUpdateFactory$CameraBoundsUpdate> {
  @jni$_.internal
  const $CameraUpdateFactory$CameraBoundsUpdate$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$CameraBoundsUpdate;';

  @jni$_.internal
  @core$_.override
  CameraUpdateFactory$CameraBoundsUpdate fromReference(
          jni$_.JReference reference) =>
      CameraUpdateFactory$CameraBoundsUpdate.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraUpdateFactory$CameraBoundsUpdate?> get nullableType =>
      const $CameraUpdateFactory$CameraBoundsUpdate$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraUpdateFactory$CameraBoundsUpdate$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CameraUpdateFactory$CameraBoundsUpdate$Type) &&
        other is $CameraUpdateFactory$CameraBoundsUpdate$Type;
  }
}

/// from: `org.maplibre.android.camera.CameraUpdateFactory$CameraPositionUpdate`
class CameraUpdateFactory$CameraPositionUpdate extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraUpdateFactory$CameraPositionUpdate> $type;

  @jni$_.internal
  CameraUpdateFactory$CameraPositionUpdate.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/camera/CameraUpdateFactory$CameraPositionUpdate');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $CameraUpdateFactory$CameraPositionUpdate$NullableType();
  static const type = $CameraUpdateFactory$CameraPositionUpdate$Type();
  static final _id_new$ = _class.constructorId(
    r'(DLorg/maplibre/android/geometry/LatLng;DD[D)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Double,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double,
                        jni$_.Double,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              jni$_.Pointer<jni$_.Void>,
              double,
              double,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(double d, org.maplibre.android.geometry.LatLng latLng, double d1, double d2, double[] ds)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory$CameraPositionUpdate(
    double d,
    latlng$_.LatLng? latLng,
    double d1,
    double d2,
    jni$_.JDoubleArray? ds,
  ) {
    final _$latLng = latLng?.reference ?? jni$_.jNullReference;
    final _$ds = ds?.reference ?? jni$_.jNullReference;
    return CameraUpdateFactory$CameraPositionUpdate.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            d,
            _$latLng.pointer,
            d1,
            d2,
            _$ds.pointer)
        .reference);
  }

  static final _id_getBearing = _class.instanceMethodId(
    r'getBearing',
    r'()D',
  );

  static final _getBearing = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final double getBearing()`
  double getBearing() {
    return _getBearing(reference.pointer, _id_getBearing as jni$_.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getTarget = _class.instanceMethodId(
    r'getTarget',
    r'()Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _getTarget = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.geometry.LatLng getTarget()`
  /// The returned object must be released after use, by calling the [release] method.
  latlng$_.LatLng? getTarget() {
    return _getTarget(reference.pointer, _id_getTarget as jni$_.JMethodIDPtr)
        .object<latlng$_.LatLng?>(const latlng$_.$LatLng$NullableType());
  }

  static final _id_getTilt = _class.instanceMethodId(
    r'getTilt',
    r'()D',
  );

  static final _getTilt = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final double getTilt()`
  double getTilt() {
    return _getTilt(reference.pointer, _id_getTilt as jni$_.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getZoom = _class.instanceMethodId(
    r'getZoom',
    r'()D',
  );

  static final _getZoom = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final double getZoom()`
  double getZoom() {
    return _getZoom(reference.pointer, _id_getZoom as jni$_.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getPadding = _class.instanceMethodId(
    r'getPadding',
    r'()[D',
  );

  static final _getPadding = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final double[] getPadding()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JDoubleArray? getPadding() {
    return _getPadding(reference.pointer, _id_getPadding as jni$_.JMethodIDPtr)
        .object<jni$_.JDoubleArray?>(const jni$_.JDoubleArrayNullableType());
  }

  static final _id_getCameraPosition = _class.instanceMethodId(
    r'getCameraPosition',
    r'(Lorg/maplibre/android/maps/MapLibreMap;)Lorg/maplibre/android/camera/CameraPosition;',
  );

  static final _getCameraPosition = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public org.maplibre.android.camera.CameraPosition getCameraPosition(org.maplibre.android.maps.MapLibreMap mapLibreMap)`
  /// The returned object must be released after use, by calling the [release] method.
  cameraposition$_.CameraPosition getCameraPosition(
    maplibremap$_.MapLibreMap mapLibreMap,
  ) {
    final _$mapLibreMap = mapLibreMap.reference;
    return _getCameraPosition(reference.pointer,
            _id_getCameraPosition as jni$_.JMethodIDPtr, _$mapLibreMap.pointer)
        .object<cameraposition$_.CameraPosition>(
            const cameraposition$_.$CameraPosition$Type());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }
}

final class $CameraUpdateFactory$CameraPositionUpdate$NullableType
    extends jni$_.JObjType<CameraUpdateFactory$CameraPositionUpdate?> {
  @jni$_.internal
  const $CameraUpdateFactory$CameraPositionUpdate$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$CameraPositionUpdate;';

  @jni$_.internal
  @core$_.override
  CameraUpdateFactory$CameraPositionUpdate? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : CameraUpdateFactory$CameraPositionUpdate.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraUpdateFactory$CameraPositionUpdate?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($CameraUpdateFactory$CameraPositionUpdate$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CameraUpdateFactory$CameraPositionUpdate$NullableType) &&
        other is $CameraUpdateFactory$CameraPositionUpdate$NullableType;
  }
}

final class $CameraUpdateFactory$CameraPositionUpdate$Type
    extends jni$_.JObjType<CameraUpdateFactory$CameraPositionUpdate> {
  @jni$_.internal
  const $CameraUpdateFactory$CameraPositionUpdate$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$CameraPositionUpdate;';

  @jni$_.internal
  @core$_.override
  CameraUpdateFactory$CameraPositionUpdate fromReference(
          jni$_.JReference reference) =>
      CameraUpdateFactory$CameraPositionUpdate.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraUpdateFactory$CameraPositionUpdate?> get nullableType =>
      const $CameraUpdateFactory$CameraPositionUpdate$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraUpdateFactory$CameraPositionUpdate$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CameraUpdateFactory$CameraPositionUpdate$Type) &&
        other is $CameraUpdateFactory$CameraPositionUpdate$Type;
  }
}

/// from: `org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate$Companion`
class CameraUpdateFactory$ZoomUpdate$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraUpdateFactory$ZoomUpdate$Companion> $type;

  @jni$_.internal
  CameraUpdateFactory$ZoomUpdate$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $CameraUpdateFactory$ZoomUpdate$Companion$NullableType();
  static const type = $CameraUpdateFactory$ZoomUpdate$Companion$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory$ZoomUpdate$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return CameraUpdateFactory$ZoomUpdate$Companion.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $CameraUpdateFactory$ZoomUpdate$Companion$NullableType
    extends jni$_.JObjType<CameraUpdateFactory$ZoomUpdate$Companion?> {
  @jni$_.internal
  const $CameraUpdateFactory$ZoomUpdate$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Companion;';

  @jni$_.internal
  @core$_.override
  CameraUpdateFactory$ZoomUpdate$Companion? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : CameraUpdateFactory$ZoomUpdate$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraUpdateFactory$ZoomUpdate$Companion?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($CameraUpdateFactory$ZoomUpdate$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CameraUpdateFactory$ZoomUpdate$Companion$NullableType) &&
        other is $CameraUpdateFactory$ZoomUpdate$Companion$NullableType;
  }
}

final class $CameraUpdateFactory$ZoomUpdate$Companion$Type
    extends jni$_.JObjType<CameraUpdateFactory$ZoomUpdate$Companion> {
  @jni$_.internal
  const $CameraUpdateFactory$ZoomUpdate$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Companion;';

  @jni$_.internal
  @core$_.override
  CameraUpdateFactory$ZoomUpdate$Companion fromReference(
          jni$_.JReference reference) =>
      CameraUpdateFactory$ZoomUpdate$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraUpdateFactory$ZoomUpdate$Companion?> get nullableType =>
      const $CameraUpdateFactory$ZoomUpdate$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraUpdateFactory$ZoomUpdate$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CameraUpdateFactory$ZoomUpdate$Companion$Type) &&
        other is $CameraUpdateFactory$ZoomUpdate$Companion$Type;
  }
}

/// from: `org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate$Type`
class CameraUpdateFactory$ZoomUpdate$Type extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraUpdateFactory$ZoomUpdate$Type> $type;

  @jni$_.internal
  CameraUpdateFactory$ZoomUpdate$Type.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Type');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $CameraUpdateFactory$ZoomUpdate$Type$NullableType();
  static const type = $CameraUpdateFactory$ZoomUpdate$Type$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $CameraUpdateFactory$ZoomUpdate$Type> _$impls =
      {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $CameraUpdateFactory$ZoomUpdate$Type $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate$Type',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory CameraUpdateFactory$ZoomUpdate$Type.implement(
    $CameraUpdateFactory$ZoomUpdate$Type $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return CameraUpdateFactory$ZoomUpdate$Type.fromReference(
      $i.implementReference(),
    );
  }
}

final class $CameraUpdateFactory$ZoomUpdate$Type$NullableType
    extends jni$_.JObjType<CameraUpdateFactory$ZoomUpdate$Type?> {
  @jni$_.internal
  const $CameraUpdateFactory$ZoomUpdate$Type$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Type;';

  @jni$_.internal
  @core$_.override
  CameraUpdateFactory$ZoomUpdate$Type? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : CameraUpdateFactory$ZoomUpdate$Type.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraUpdateFactory$ZoomUpdate$Type?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($CameraUpdateFactory$ZoomUpdate$Type$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CameraUpdateFactory$ZoomUpdate$Type$NullableType) &&
        other is $CameraUpdateFactory$ZoomUpdate$Type$NullableType;
  }
}

final class $CameraUpdateFactory$ZoomUpdate$Type$Type
    extends jni$_.JObjType<CameraUpdateFactory$ZoomUpdate$Type> {
  @jni$_.internal
  const $CameraUpdateFactory$ZoomUpdate$Type$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Type;';

  @jni$_.internal
  @core$_.override
  CameraUpdateFactory$ZoomUpdate$Type fromReference(
          jni$_.JReference reference) =>
      CameraUpdateFactory$ZoomUpdate$Type.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraUpdateFactory$ZoomUpdate$Type?> get nullableType =>
      const $CameraUpdateFactory$ZoomUpdate$Type$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraUpdateFactory$ZoomUpdate$Type$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraUpdateFactory$ZoomUpdate$Type$Type) &&
        other is $CameraUpdateFactory$ZoomUpdate$Type$Type;
  }
}

/// from: `org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate`
class CameraUpdateFactory$ZoomUpdate extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraUpdateFactory$ZoomUpdate> $type;

  @jni$_.internal
  CameraUpdateFactory$ZoomUpdate.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CameraUpdateFactory$ZoomUpdate$NullableType();
  static const type = $CameraUpdateFactory$ZoomUpdate$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Companion;',
  );

  /// from: `static public final org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraUpdateFactory$ZoomUpdate$Companion? get Companion =>
      _id_Companion.get(_class,
          const $CameraUpdateFactory$ZoomUpdate$Companion$NullableType());

  /// from: `static public final int ZOOM_IN`
  static const ZOOM_IN = 0;

  /// from: `static public final int ZOOM_OUT`
  static const ZOOM_OUT = 1;

  /// from: `static public final int ZOOM_BY`
  static const ZOOM_BY = 2;

  /// from: `static public final int ZOOM_TO`
  static const ZOOM_TO = 3;

  /// from: `static public final int ZOOM_TO_POINT`
  static const ZOOM_TO_POINT = 4;
  static final _id_getType = _class.instanceMethodId(
    r'getType',
    r'()I',
  );

  static final _getType = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getType()`
  int getType() {
    return _getType(reference.pointer, _id_getType as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getZoom = _class.instanceMethodId(
    r'getZoom',
    r'()D',
  );

  static final _getZoom = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final double getZoom()`
  double getZoom() {
    return _getZoom(reference.pointer, _id_getZoom as jni$_.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getX = _class.instanceMethodId(
    r'getX',
    r'()F',
  );

  static final _getX = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final float getX()`
  double getX() {
    return _getX(reference.pointer, _id_getX as jni$_.JMethodIDPtr).float;
  }

  static final _id_getY = _class.instanceMethodId(
    r'getY',
    r'()F',
  );

  static final _getY = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final float getY()`
  double getY() {
    return _getY(reference.pointer, _id_getY as jni$_.JMethodIDPtr).float;
  }

  static final _id_new$ = _class.constructorId(
    r'(I)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void <init>(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory$ZoomUpdate(
    int i,
  ) {
    return CameraUpdateFactory$ZoomUpdate.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr, i)
            .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(ID)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int32, jni$_.Double)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, double)>();

  /// from: `public void <init>(int i, double d)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory$ZoomUpdate.new$1(
    int i,
    double d,
  ) {
    return CameraUpdateFactory$ZoomUpdate.fromReference(
        _new$1(_class.reference.pointer, _id_new$1 as jni$_.JMethodIDPtr, i, d)
            .reference);
  }

  static final _id_new$2 = _class.constructorId(
    r'(DFF)V',
  );

  static final _new$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Double,
                        jni$_.Double,
                        jni$_.Double
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, double, double, double)>();

  /// from: `public void <init>(double d, float f, float f1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory$ZoomUpdate.new$2(
    double d,
    double f,
    double f1,
  ) {
    return CameraUpdateFactory$ZoomUpdate.fromReference(_new$2(
            _class.reference.pointer, _id_new$2 as jni$_.JMethodIDPtr, d, f, f1)
        .reference);
  }

  static final _id_getCameraPosition = _class.instanceMethodId(
    r'getCameraPosition',
    r'(Lorg/maplibre/android/maps/MapLibreMap;)Lorg/maplibre/android/camera/CameraPosition;',
  );

  static final _getCameraPosition = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public org.maplibre.android.camera.CameraPosition getCameraPosition(org.maplibre.android.maps.MapLibreMap mapLibreMap)`
  /// The returned object must be released after use, by calling the [release] method.
  cameraposition$_.CameraPosition getCameraPosition(
    maplibremap$_.MapLibreMap mapLibreMap,
  ) {
    final _$mapLibreMap = mapLibreMap.reference;
    return _getCameraPosition(reference.pointer,
            _id_getCameraPosition as jni$_.JMethodIDPtr, _$mapLibreMap.pointer)
        .object<cameraposition$_.CameraPosition>(
            const cameraposition$_.$CameraPosition$Type());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }
}

final class $CameraUpdateFactory$ZoomUpdate$NullableType
    extends jni$_.JObjType<CameraUpdateFactory$ZoomUpdate?> {
  @jni$_.internal
  const $CameraUpdateFactory$ZoomUpdate$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate;';

  @jni$_.internal
  @core$_.override
  CameraUpdateFactory$ZoomUpdate? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : CameraUpdateFactory$ZoomUpdate.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraUpdateFactory$ZoomUpdate?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraUpdateFactory$ZoomUpdate$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CameraUpdateFactory$ZoomUpdate$NullableType) &&
        other is $CameraUpdateFactory$ZoomUpdate$NullableType;
  }
}

final class $CameraUpdateFactory$ZoomUpdate$Type
    extends jni$_.JObjType<CameraUpdateFactory$ZoomUpdate> {
  @jni$_.internal
  const $CameraUpdateFactory$ZoomUpdate$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate;';

  @jni$_.internal
  @core$_.override
  CameraUpdateFactory$ZoomUpdate fromReference(jni$_.JReference reference) =>
      CameraUpdateFactory$ZoomUpdate.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraUpdateFactory$ZoomUpdate?> get nullableType =>
      const $CameraUpdateFactory$ZoomUpdate$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraUpdateFactory$ZoomUpdate$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraUpdateFactory$ZoomUpdate$Type) &&
        other is $CameraUpdateFactory$ZoomUpdate$Type;
  }
}

/// from: `org.maplibre.android.camera.CameraUpdateFactory`
class CameraUpdateFactory extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraUpdateFactory> $type;

  @jni$_.internal
  CameraUpdateFactory.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'org/maplibre/android/camera/CameraUpdateFactory');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CameraUpdateFactory$NullableType();
  static const type = $CameraUpdateFactory$Type();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Lorg/maplibre/android/camera/CameraUpdateFactory;',
  );

  /// from: `static public final org.maplibre.android.camera.CameraUpdateFactory INSTANCE`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraUpdateFactory? get INSTANCE =>
      _id_INSTANCE.get(_class, const $CameraUpdateFactory$NullableType());

  static final _id_newCameraPosition = _class.staticMethodId(
    r'newCameraPosition',
    r'(Lorg/maplibre/android/camera/CameraPosition;)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newCameraPosition = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newCameraPosition(org.maplibre.android.camera.CameraPosition cameraPosition)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate newCameraPosition(
    cameraposition$_.CameraPosition cameraPosition,
  ) {
    final _$cameraPosition = cameraPosition.reference;
    return _newCameraPosition(
            _class.reference.pointer,
            _id_newCameraPosition as jni$_.JMethodIDPtr,
            _$cameraPosition.pointer)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }

  static final _id_newLatLng = _class.staticMethodId(
    r'newLatLng',
    r'(Lorg/maplibre/android/geometry/LatLng;)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLng = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLng(org.maplibre.android.geometry.LatLng latLng)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate newLatLng(
    latlng$_.LatLng latLng,
  ) {
    final _$latLng = latLng.reference;
    return _newLatLng(_class.reference.pointer,
            _id_newLatLng as jni$_.JMethodIDPtr, _$latLng.pointer)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }

  static final _id_newLatLngBounds = _class.staticMethodId(
    r'newLatLngBounds',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;I)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngBounds = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngBounds(org.maplibre.android.geometry.LatLngBounds latLngBounds, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate newLatLngBounds(
    latlngbounds$_.LatLngBounds latLngBounds,
    int i,
  ) {
    final _$latLngBounds = latLngBounds.reference;
    return _newLatLngBounds(
            _class.reference.pointer,
            _id_newLatLngBounds as jni$_.JMethodIDPtr,
            _$latLngBounds.pointer,
            i)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }

  static final _id_newLatLngBounds$1 = _class.staticMethodId(
    r'newLatLngBounds',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;DDI)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngBounds$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double,
                        jni$_.Double,
                        jni$_.Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              double,
              double,
              int)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngBounds(org.maplibre.android.geometry.LatLngBounds latLngBounds, double d, double d1, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate newLatLngBounds$1(
    latlngbounds$_.LatLngBounds latLngBounds,
    double d,
    double d1,
    int i,
  ) {
    final _$latLngBounds = latLngBounds.reference;
    return _newLatLngBounds$1(
            _class.reference.pointer,
            _id_newLatLngBounds$1 as jni$_.JMethodIDPtr,
            _$latLngBounds.pointer,
            d,
            d1,
            i)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }

  static final _id_newLatLngBounds$2 = _class.staticMethodId(
    r'newLatLngBounds',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;IIII)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngBounds$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              int)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngBounds(org.maplibre.android.geometry.LatLngBounds latLngBounds, int i, int i1, int i2, int i3)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate newLatLngBounds$2(
    latlngbounds$_.LatLngBounds latLngBounds,
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    final _$latLngBounds = latLngBounds.reference;
    return _newLatLngBounds$2(
            _class.reference.pointer,
            _id_newLatLngBounds$2 as jni$_.JMethodIDPtr,
            _$latLngBounds.pointer,
            i,
            i1,
            i2,
            i3)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }

  static final _id_newLatLngBounds$3 = _class.staticMethodId(
    r'newLatLngBounds',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;DDIIII)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngBounds$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double,
                        jni$_.Double,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              double,
              double,
              int,
              int,
              int,
              int)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngBounds(org.maplibre.android.geometry.LatLngBounds latLngBounds, double d, double d1, int i, int i1, int i2, int i3)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate newLatLngBounds$3(
    latlngbounds$_.LatLngBounds latLngBounds,
    double d,
    double d1,
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    final _$latLngBounds = latLngBounds.reference;
    return _newLatLngBounds$3(
            _class.reference.pointer,
            _id_newLatLngBounds$3 as jni$_.JMethodIDPtr,
            _$latLngBounds.pointer,
            d,
            d1,
            i,
            i1,
            i2,
            i3)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }

  static final _id_newLatLngZoom = _class.staticMethodId(
    r'newLatLngZoom',
    r'(Lorg/maplibre/android/geometry/LatLng;D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngZoom = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngZoom(org.maplibre.android.geometry.LatLng latLng, double d)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate newLatLngZoom(
    latlng$_.LatLng latLng,
    double d,
  ) {
    final _$latLng = latLng.reference;
    return _newLatLngZoom(_class.reference.pointer,
            _id_newLatLngZoom as jni$_.JMethodIDPtr, _$latLng.pointer, d)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }

  static final _id_newLatLngPadding = _class.staticMethodId(
    r'newLatLngPadding',
    r'(Lorg/maplibre/android/geometry/LatLng;DDDD)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngPadding = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double,
                        jni$_.Double,
                        jni$_.Double,
                        jni$_.Double
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              double,
              double,
              double,
              double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngPadding(org.maplibre.android.geometry.LatLng latLng, double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate newLatLngPadding(
    latlng$_.LatLng latLng,
    double d,
    double d1,
    double d2,
    double d3,
  ) {
    final _$latLng = latLng.reference;
    return _newLatLngPadding(
            _class.reference.pointer,
            _id_newLatLngPadding as jni$_.JMethodIDPtr,
            _$latLng.pointer,
            d,
            d1,
            d2,
            d3)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }

  static final _id_zoomBy = _class.staticMethodId(
    r'zoomBy',
    r'(DLandroid/graphics/Point;)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _zoomBy = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Double,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, double, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate zoomBy(double d, android.graphics.Point point)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate zoomBy(
    double d,
    jni$_.JObject point,
  ) {
    final _$point = point.reference;
    return _zoomBy(_class.reference.pointer, _id_zoomBy as jni$_.JMethodIDPtr,
            d, _$point.pointer)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }

  static final _id_zoomBy$1 = _class.staticMethodId(
    r'zoomBy',
    r'(D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _zoomBy$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Double,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate zoomBy(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate zoomBy$1(
    double d,
  ) {
    return _zoomBy$1(
            _class.reference.pointer, _id_zoomBy$1 as jni$_.JMethodIDPtr, d)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }

  static final _id_zoomIn = _class.staticMethodId(
    r'zoomIn',
    r'()Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _zoomIn = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate zoomIn()`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate zoomIn() {
    return _zoomIn(_class.reference.pointer, _id_zoomIn as jni$_.JMethodIDPtr)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }

  static final _id_zoomOut = _class.staticMethodId(
    r'zoomOut',
    r'()Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _zoomOut = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate zoomOut()`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate zoomOut() {
    return _zoomOut(_class.reference.pointer, _id_zoomOut as jni$_.JMethodIDPtr)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }

  static final _id_zoomTo = _class.staticMethodId(
    r'zoomTo',
    r'(D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _zoomTo = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Double,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate zoomTo(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate zoomTo(
    double d,
  ) {
    return _zoomTo(
            _class.reference.pointer, _id_zoomTo as jni$_.JMethodIDPtr, d)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }

  static final _id_bearingTo = _class.staticMethodId(
    r'bearingTo',
    r'(D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _bearingTo = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Double,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate bearingTo(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate bearingTo(
    double d,
  ) {
    return _bearingTo(
            _class.reference.pointer, _id_bearingTo as jni$_.JMethodIDPtr, d)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }

  static final _id_tiltTo = _class.staticMethodId(
    r'tiltTo',
    r'(D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _tiltTo = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Double,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate tiltTo(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate tiltTo(
    double d,
  ) {
    return _tiltTo(
            _class.reference.pointer, _id_tiltTo as jni$_.JMethodIDPtr, d)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }

  static final _id_paddingTo = _class.staticMethodId(
    r'paddingTo',
    r'([D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _paddingTo = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate paddingTo(double[] ds)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate paddingTo(
    jni$_.JDoubleArray? ds,
  ) {
    final _$ds = ds?.reference ?? jni$_.jNullReference;
    return _paddingTo(_class.reference.pointer,
            _id_paddingTo as jni$_.JMethodIDPtr, _$ds.pointer)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }

  static final _id_paddingTo$1 = _class.staticMethodId(
    r'paddingTo',
    r'(DDDD)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _paddingTo$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Double,
                        jni$_.Double,
                        jni$_.Double,
                        jni$_.Double
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, double, double, double, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate paddingTo(double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate$_.CameraUpdate paddingTo$1(
    double d,
    double d1,
    double d2,
    double d3,
  ) {
    return _paddingTo$1(_class.reference.pointer,
            _id_paddingTo$1 as jni$_.JMethodIDPtr, d, d1, d2, d3)
        .object<cameraupdate$_.CameraUpdate>(
            const cameraupdate$_.$CameraUpdate$Type());
  }
}

final class $CameraUpdateFactory$NullableType
    extends jni$_.JObjType<CameraUpdateFactory?> {
  @jni$_.internal
  const $CameraUpdateFactory$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/camera/CameraUpdateFactory;';

  @jni$_.internal
  @core$_.override
  CameraUpdateFactory? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : CameraUpdateFactory.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraUpdateFactory?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraUpdateFactory$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraUpdateFactory$NullableType) &&
        other is $CameraUpdateFactory$NullableType;
  }
}

final class $CameraUpdateFactory$Type
    extends jni$_.JObjType<CameraUpdateFactory> {
  @jni$_.internal
  const $CameraUpdateFactory$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/camera/CameraUpdateFactory;';

  @jni$_.internal
  @core$_.override
  CameraUpdateFactory fromReference(jni$_.JReference reference) =>
      CameraUpdateFactory.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraUpdateFactory?> get nullableType =>
      const $CameraUpdateFactory$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraUpdateFactory$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraUpdateFactory$Type) &&
        other is $CameraUpdateFactory$Type;
  }
}
