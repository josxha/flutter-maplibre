// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../types/Formatted.dart' as formatted$_;

import 'PropertyValue.dart' as propertyvalue$_;

/// from: `org.maplibre.android.style.layers.PropertyFactory`
class PropertyFactory extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PropertyFactory> $type;

  @jni$_.internal
  PropertyFactory.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/style/layers/PropertyFactory');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PropertyFactory$NullableType();
  static const type = $PropertyFactory$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory PropertyFactory() {
    return PropertyFactory.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_visibility = _class.staticMethodId(
    r'visibility',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _visibility = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue visibility(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? visibility(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _visibility(_class.reference.pointer,
            _id_visibility as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_fillAntialias = _class.staticMethodId(
    r'fillAntialias',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillAntialias = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillAntialias(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JBoolean?>? fillAntialias(
    jni$_.JBoolean? boolean,
  ) {
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return _fillAntialias(_class.reference.pointer,
            _id_fillAntialias as jni$_.JMethodIDPtr, _$boolean.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JBoolean?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JBoolean?>(
                jni$_.JBooleanNullableType()));
  }

  static final _id_fillAntialias$1 = _class.staticMethodId(
    r'fillAntialias',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillAntialias$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillAntialias(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? fillAntialias$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _fillAntialias$1(_class.reference.pointer,
            _id_fillAntialias$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fillOpacity = _class.staticMethodId(
    r'fillOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillOpacity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? fillOpacity(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _fillOpacity(_class.reference.pointer,
            _id_fillOpacity as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_fillOpacity$1 = _class.staticMethodId(
    r'fillOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillOpacity$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? fillOpacity$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _fillOpacity$1(_class.reference.pointer,
            _id_fillOpacity$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fillColor = _class.staticMethodId(
    r'fillColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillColor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? fillColor(
    int i,
  ) {
    return _fillColor(
            _class.reference.pointer, _id_fillColor as jni$_.JMethodIDPtr, i)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_fillColor$1 = _class.staticMethodId(
    r'fillColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillColor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? fillColor$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _fillColor$1(_class.reference.pointer,
            _id_fillColor$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_fillColor$2 = _class.staticMethodId(
    r'fillColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillColor$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? fillColor$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _fillColor$2(_class.reference.pointer,
            _id_fillColor$2 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fillOutlineColor = _class.staticMethodId(
    r'fillOutlineColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillOutlineColor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillOutlineColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? fillOutlineColor(
    int i,
  ) {
    return _fillOutlineColor(_class.reference.pointer,
            _id_fillOutlineColor as jni$_.JMethodIDPtr, i)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_fillOutlineColor$1 = _class.staticMethodId(
    r'fillOutlineColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillOutlineColor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillOutlineColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? fillOutlineColor$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _fillOutlineColor$1(_class.reference.pointer,
            _id_fillOutlineColor$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_fillOutlineColor$2 = _class.staticMethodId(
    r'fillOutlineColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillOutlineColor$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillOutlineColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? fillOutlineColor$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _fillOutlineColor$2(_class.reference.pointer,
            _id_fillOutlineColor$2 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fillTranslate = _class.staticMethodId(
    r'fillTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillTranslate = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?
      fillTranslate(
    jni$_.JArray<jni$_.JFloat?>? floats,
  ) {
    final _$floats = floats?.reference ?? jni$_.jNullReference;
    return _fillTranslate(_class.reference.pointer,
            _id_fillTranslate as jni$_.JMethodIDPtr, _$floats.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JFloat?>?>(
                jni$_.JArrayNullableType<jni$_.JFloat?>(
                    jni$_.JFloatNullableType())));
  }

  static final _id_fillTranslate$1 = _class.staticMethodId(
    r'fillTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillTranslate$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? fillTranslate$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _fillTranslate$1(_class.reference.pointer,
            _id_fillTranslate$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fillTranslateAnchor = _class.staticMethodId(
    r'fillTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillTranslateAnchor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? fillTranslateAnchor(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _fillTranslateAnchor(_class.reference.pointer,
            _id_fillTranslateAnchor as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_fillTranslateAnchor$1 = _class.staticMethodId(
    r'fillTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillTranslateAnchor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? fillTranslateAnchor$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _fillTranslateAnchor$1(
            _class.reference.pointer,
            _id_fillTranslateAnchor$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fillPattern = _class.staticMethodId(
    r'fillPattern',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillPattern = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillPattern(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? fillPattern(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _fillPattern(_class.reference.pointer,
            _id_fillPattern as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_fillPattern$1 = _class.staticMethodId(
    r'fillPattern',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillPattern$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillPattern(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? fillPattern$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _fillPattern$1(_class.reference.pointer,
            _id_fillPattern$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_lineOpacity = _class.staticMethodId(
    r'lineOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineOpacity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? lineOpacity(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _lineOpacity(_class.reference.pointer,
            _id_lineOpacity as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_lineOpacity$1 = _class.staticMethodId(
    r'lineOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineOpacity$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? lineOpacity$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _lineOpacity$1(_class.reference.pointer,
            _id_lineOpacity$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_lineColor = _class.staticMethodId(
    r'lineColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineColor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? lineColor(
    int i,
  ) {
    return _lineColor(
            _class.reference.pointer, _id_lineColor as jni$_.JMethodIDPtr, i)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_lineColor$1 = _class.staticMethodId(
    r'lineColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineColor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? lineColor$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _lineColor$1(_class.reference.pointer,
            _id_lineColor$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_lineColor$2 = _class.staticMethodId(
    r'lineColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineColor$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? lineColor$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _lineColor$2(_class.reference.pointer,
            _id_lineColor$2 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_lineTranslate = _class.staticMethodId(
    r'lineTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineTranslate = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?
      lineTranslate(
    jni$_.JArray<jni$_.JFloat?>? floats,
  ) {
    final _$floats = floats?.reference ?? jni$_.jNullReference;
    return _lineTranslate(_class.reference.pointer,
            _id_lineTranslate as jni$_.JMethodIDPtr, _$floats.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JFloat?>?>(
                jni$_.JArrayNullableType<jni$_.JFloat?>(
                    jni$_.JFloatNullableType())));
  }

  static final _id_lineTranslate$1 = _class.staticMethodId(
    r'lineTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineTranslate$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? lineTranslate$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _lineTranslate$1(_class.reference.pointer,
            _id_lineTranslate$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_lineTranslateAnchor = _class.staticMethodId(
    r'lineTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineTranslateAnchor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? lineTranslateAnchor(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _lineTranslateAnchor(_class.reference.pointer,
            _id_lineTranslateAnchor as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_lineTranslateAnchor$1 = _class.staticMethodId(
    r'lineTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineTranslateAnchor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? lineTranslateAnchor$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _lineTranslateAnchor$1(
            _class.reference.pointer,
            _id_lineTranslateAnchor$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_lineWidth = _class.staticMethodId(
    r'lineWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineWidth = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? lineWidth(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _lineWidth(_class.reference.pointer,
            _id_lineWidth as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_lineWidth$1 = _class.staticMethodId(
    r'lineWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineWidth$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? lineWidth$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _lineWidth$1(_class.reference.pointer,
            _id_lineWidth$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_lineGapWidth = _class.staticMethodId(
    r'lineGapWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineGapWidth = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineGapWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? lineGapWidth(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _lineGapWidth(_class.reference.pointer,
            _id_lineGapWidth as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_lineGapWidth$1 = _class.staticMethodId(
    r'lineGapWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineGapWidth$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineGapWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? lineGapWidth$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _lineGapWidth$1(_class.reference.pointer,
            _id_lineGapWidth$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_lineOffset = _class.staticMethodId(
    r'lineOffset',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineOffset = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineOffset(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? lineOffset(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _lineOffset(_class.reference.pointer,
            _id_lineOffset as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_lineOffset$1 = _class.staticMethodId(
    r'lineOffset',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineOffset$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineOffset(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? lineOffset$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _lineOffset$1(_class.reference.pointer,
            _id_lineOffset$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_lineBlur = _class.staticMethodId(
    r'lineBlur',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineBlur = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineBlur(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? lineBlur(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _lineBlur(_class.reference.pointer,
            _id_lineBlur as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_lineBlur$1 = _class.staticMethodId(
    r'lineBlur',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineBlur$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineBlur(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? lineBlur$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _lineBlur$1(_class.reference.pointer,
            _id_lineBlur$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_lineDasharray = _class.staticMethodId(
    r'lineDasharray',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineDasharray = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineDasharray(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?
      lineDasharray(
    jni$_.JArray<jni$_.JFloat?>? floats,
  ) {
    final _$floats = floats?.reference ?? jni$_.jNullReference;
    return _lineDasharray(_class.reference.pointer,
            _id_lineDasharray as jni$_.JMethodIDPtr, _$floats.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JFloat?>?>(
                jni$_.JArrayNullableType<jni$_.JFloat?>(
                    jni$_.JFloatNullableType())));
  }

  static final _id_lineDasharray$1 = _class.staticMethodId(
    r'lineDasharray',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineDasharray$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineDasharray(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? lineDasharray$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _lineDasharray$1(_class.reference.pointer,
            _id_lineDasharray$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_linePattern = _class.staticMethodId(
    r'linePattern',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _linePattern = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue linePattern(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? linePattern(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _linePattern(_class.reference.pointer,
            _id_linePattern as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_linePattern$1 = _class.staticMethodId(
    r'linePattern',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _linePattern$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue linePattern(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? linePattern$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _linePattern$1(_class.reference.pointer,
            _id_linePattern$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_lineGradient = _class.staticMethodId(
    r'lineGradient',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineGradient = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineGradient(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? lineGradient(
    int i,
  ) {
    return _lineGradient(
            _class.reference.pointer, _id_lineGradient as jni$_.JMethodIDPtr, i)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_lineGradient$1 = _class.staticMethodId(
    r'lineGradient',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineGradient$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineGradient(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? lineGradient$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _lineGradient$1(_class.reference.pointer,
            _id_lineGradient$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_lineGradient$2 = _class.staticMethodId(
    r'lineGradient',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineGradient$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineGradient(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? lineGradient$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _lineGradient$2(_class.reference.pointer,
            _id_lineGradient$2 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconOpacity = _class.staticMethodId(
    r'iconOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOpacity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? iconOpacity(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _iconOpacity(_class.reference.pointer,
            _id_iconOpacity as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_iconOpacity$1 = _class.staticMethodId(
    r'iconOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOpacity$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconOpacity$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconOpacity$1(_class.reference.pointer,
            _id_iconOpacity$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconColor = _class.staticMethodId(
    r'iconColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconColor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? iconColor(
    int i,
  ) {
    return _iconColor(
            _class.reference.pointer, _id_iconColor as jni$_.JMethodIDPtr, i)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_iconColor$1 = _class.staticMethodId(
    r'iconColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconColor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? iconColor$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _iconColor$1(_class.reference.pointer,
            _id_iconColor$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_iconColor$2 = _class.staticMethodId(
    r'iconColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconColor$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconColor$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconColor$2(_class.reference.pointer,
            _id_iconColor$2 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconHaloColor = _class.staticMethodId(
    r'iconHaloColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloColor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? iconHaloColor(
    int i,
  ) {
    return _iconHaloColor(_class.reference.pointer,
            _id_iconHaloColor as jni$_.JMethodIDPtr, i)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_iconHaloColor$1 = _class.staticMethodId(
    r'iconHaloColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloColor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? iconHaloColor$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _iconHaloColor$1(_class.reference.pointer,
            _id_iconHaloColor$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_iconHaloColor$2 = _class.staticMethodId(
    r'iconHaloColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloColor$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconHaloColor$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconHaloColor$2(_class.reference.pointer,
            _id_iconHaloColor$2 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconHaloWidth = _class.staticMethodId(
    r'iconHaloWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloWidth = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? iconHaloWidth(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _iconHaloWidth(_class.reference.pointer,
            _id_iconHaloWidth as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_iconHaloWidth$1 = _class.staticMethodId(
    r'iconHaloWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloWidth$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconHaloWidth$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconHaloWidth$1(_class.reference.pointer,
            _id_iconHaloWidth$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconHaloBlur = _class.staticMethodId(
    r'iconHaloBlur',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloBlur = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloBlur(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? iconHaloBlur(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _iconHaloBlur(_class.reference.pointer,
            _id_iconHaloBlur as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_iconHaloBlur$1 = _class.staticMethodId(
    r'iconHaloBlur',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloBlur$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloBlur(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconHaloBlur$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconHaloBlur$1(_class.reference.pointer,
            _id_iconHaloBlur$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconTranslate = _class.staticMethodId(
    r'iconTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTranslate = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?
      iconTranslate(
    jni$_.JArray<jni$_.JFloat?>? floats,
  ) {
    final _$floats = floats?.reference ?? jni$_.jNullReference;
    return _iconTranslate(_class.reference.pointer,
            _id_iconTranslate as jni$_.JMethodIDPtr, _$floats.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JFloat?>?>(
                jni$_.JArrayNullableType<jni$_.JFloat?>(
                    jni$_.JFloatNullableType())));
  }

  static final _id_iconTranslate$1 = _class.staticMethodId(
    r'iconTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTranslate$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconTranslate$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconTranslate$1(_class.reference.pointer,
            _id_iconTranslate$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconTranslateAnchor = _class.staticMethodId(
    r'iconTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTranslateAnchor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? iconTranslateAnchor(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _iconTranslateAnchor(_class.reference.pointer,
            _id_iconTranslateAnchor as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_iconTranslateAnchor$1 = _class.staticMethodId(
    r'iconTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTranslateAnchor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconTranslateAnchor$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconTranslateAnchor$1(
            _class.reference.pointer,
            _id_iconTranslateAnchor$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textOpacity = _class.staticMethodId(
    r'textOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOpacity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? textOpacity(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _textOpacity(_class.reference.pointer,
            _id_textOpacity as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_textOpacity$1 = _class.staticMethodId(
    r'textOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOpacity$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textOpacity$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textOpacity$1(_class.reference.pointer,
            _id_textOpacity$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textColor = _class.staticMethodId(
    r'textColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textColor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? textColor(
    int i,
  ) {
    return _textColor(
            _class.reference.pointer, _id_textColor as jni$_.JMethodIDPtr, i)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_textColor$1 = _class.staticMethodId(
    r'textColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textColor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? textColor$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _textColor$1(_class.reference.pointer,
            _id_textColor$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_textColor$2 = _class.staticMethodId(
    r'textColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textColor$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textColor$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textColor$2(_class.reference.pointer,
            _id_textColor$2 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textHaloColor = _class.staticMethodId(
    r'textHaloColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloColor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? textHaloColor(
    int i,
  ) {
    return _textHaloColor(_class.reference.pointer,
            _id_textHaloColor as jni$_.JMethodIDPtr, i)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_textHaloColor$1 = _class.staticMethodId(
    r'textHaloColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloColor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? textHaloColor$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _textHaloColor$1(_class.reference.pointer,
            _id_textHaloColor$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_textHaloColor$2 = _class.staticMethodId(
    r'textHaloColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloColor$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textHaloColor$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textHaloColor$2(_class.reference.pointer,
            _id_textHaloColor$2 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textHaloWidth = _class.staticMethodId(
    r'textHaloWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloWidth = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? textHaloWidth(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _textHaloWidth(_class.reference.pointer,
            _id_textHaloWidth as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_textHaloWidth$1 = _class.staticMethodId(
    r'textHaloWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloWidth$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textHaloWidth$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textHaloWidth$1(_class.reference.pointer,
            _id_textHaloWidth$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textHaloBlur = _class.staticMethodId(
    r'textHaloBlur',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloBlur = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloBlur(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? textHaloBlur(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _textHaloBlur(_class.reference.pointer,
            _id_textHaloBlur as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_textHaloBlur$1 = _class.staticMethodId(
    r'textHaloBlur',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloBlur$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloBlur(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textHaloBlur$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textHaloBlur$1(_class.reference.pointer,
            _id_textHaloBlur$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textTranslate = _class.staticMethodId(
    r'textTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTranslate = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?
      textTranslate(
    jni$_.JArray<jni$_.JFloat?>? floats,
  ) {
    final _$floats = floats?.reference ?? jni$_.jNullReference;
    return _textTranslate(_class.reference.pointer,
            _id_textTranslate as jni$_.JMethodIDPtr, _$floats.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JFloat?>?>(
                jni$_.JArrayNullableType<jni$_.JFloat?>(
                    jni$_.JFloatNullableType())));
  }

  static final _id_textTranslate$1 = _class.staticMethodId(
    r'textTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTranslate$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textTranslate$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textTranslate$1(_class.reference.pointer,
            _id_textTranslate$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textTranslateAnchor = _class.staticMethodId(
    r'textTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTranslateAnchor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? textTranslateAnchor(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _textTranslateAnchor(_class.reference.pointer,
            _id_textTranslateAnchor as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_textTranslateAnchor$1 = _class.staticMethodId(
    r'textTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTranslateAnchor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textTranslateAnchor$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textTranslateAnchor$1(
            _class.reference.pointer,
            _id_textTranslateAnchor$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_circleRadius = _class.staticMethodId(
    r'circleRadius',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleRadius = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleRadius(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? circleRadius(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _circleRadius(_class.reference.pointer,
            _id_circleRadius as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_circleRadius$1 = _class.staticMethodId(
    r'circleRadius',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleRadius$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleRadius(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? circleRadius$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _circleRadius$1(_class.reference.pointer,
            _id_circleRadius$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_circleColor = _class.staticMethodId(
    r'circleColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleColor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? circleColor(
    int i,
  ) {
    return _circleColor(
            _class.reference.pointer, _id_circleColor as jni$_.JMethodIDPtr, i)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_circleColor$1 = _class.staticMethodId(
    r'circleColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleColor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? circleColor$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _circleColor$1(_class.reference.pointer,
            _id_circleColor$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_circleColor$2 = _class.staticMethodId(
    r'circleColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleColor$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? circleColor$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _circleColor$2(_class.reference.pointer,
            _id_circleColor$2 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_circleBlur = _class.staticMethodId(
    r'circleBlur',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleBlur = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleBlur(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? circleBlur(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _circleBlur(_class.reference.pointer,
            _id_circleBlur as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_circleBlur$1 = _class.staticMethodId(
    r'circleBlur',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleBlur$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleBlur(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? circleBlur$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _circleBlur$1(_class.reference.pointer,
            _id_circleBlur$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_circleOpacity = _class.staticMethodId(
    r'circleOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleOpacity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? circleOpacity(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _circleOpacity(_class.reference.pointer,
            _id_circleOpacity as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_circleOpacity$1 = _class.staticMethodId(
    r'circleOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleOpacity$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? circleOpacity$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _circleOpacity$1(_class.reference.pointer,
            _id_circleOpacity$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_circleTranslate = _class.staticMethodId(
    r'circleTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleTranslate = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?
      circleTranslate(
    jni$_.JArray<jni$_.JFloat?>? floats,
  ) {
    final _$floats = floats?.reference ?? jni$_.jNullReference;
    return _circleTranslate(_class.reference.pointer,
            _id_circleTranslate as jni$_.JMethodIDPtr, _$floats.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JFloat?>?>(
                jni$_.JArrayNullableType<jni$_.JFloat?>(
                    jni$_.JFloatNullableType())));
  }

  static final _id_circleTranslate$1 = _class.staticMethodId(
    r'circleTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleTranslate$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? circleTranslate$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _circleTranslate$1(_class.reference.pointer,
            _id_circleTranslate$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_circleTranslateAnchor = _class.staticMethodId(
    r'circleTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleTranslateAnchor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? circleTranslateAnchor(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _circleTranslateAnchor(_class.reference.pointer,
            _id_circleTranslateAnchor as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_circleTranslateAnchor$1 = _class.staticMethodId(
    r'circleTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleTranslateAnchor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? circleTranslateAnchor$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _circleTranslateAnchor$1(
            _class.reference.pointer,
            _id_circleTranslateAnchor$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_circlePitchScale = _class.staticMethodId(
    r'circlePitchScale',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circlePitchScale = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circlePitchScale(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? circlePitchScale(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _circlePitchScale(_class.reference.pointer,
            _id_circlePitchScale as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_circlePitchScale$1 = _class.staticMethodId(
    r'circlePitchScale',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circlePitchScale$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circlePitchScale(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? circlePitchScale$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _circlePitchScale$1(_class.reference.pointer,
            _id_circlePitchScale$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_circlePitchAlignment = _class.staticMethodId(
    r'circlePitchAlignment',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circlePitchAlignment = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circlePitchAlignment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? circlePitchAlignment(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _circlePitchAlignment(_class.reference.pointer,
            _id_circlePitchAlignment as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_circlePitchAlignment$1 = _class.staticMethodId(
    r'circlePitchAlignment',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circlePitchAlignment$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circlePitchAlignment(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? circlePitchAlignment$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _circlePitchAlignment$1(
            _class.reference.pointer,
            _id_circlePitchAlignment$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_circleStrokeWidth = _class.staticMethodId(
    r'circleStrokeWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeWidth = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? circleStrokeWidth(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _circleStrokeWidth(_class.reference.pointer,
            _id_circleStrokeWidth as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_circleStrokeWidth$1 = _class.staticMethodId(
    r'circleStrokeWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeWidth$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? circleStrokeWidth$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _circleStrokeWidth$1(_class.reference.pointer,
            _id_circleStrokeWidth$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_circleStrokeColor = _class.staticMethodId(
    r'circleStrokeColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeColor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? circleStrokeColor(
    int i,
  ) {
    return _circleStrokeColor(_class.reference.pointer,
            _id_circleStrokeColor as jni$_.JMethodIDPtr, i)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_circleStrokeColor$1 = _class.staticMethodId(
    r'circleStrokeColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeColor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? circleStrokeColor$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _circleStrokeColor$1(_class.reference.pointer,
            _id_circleStrokeColor$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_circleStrokeColor$2 = _class.staticMethodId(
    r'circleStrokeColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeColor$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? circleStrokeColor$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _circleStrokeColor$2(_class.reference.pointer,
            _id_circleStrokeColor$2 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_circleStrokeOpacity = _class.staticMethodId(
    r'circleStrokeOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeOpacity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? circleStrokeOpacity(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _circleStrokeOpacity(_class.reference.pointer,
            _id_circleStrokeOpacity as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_circleStrokeOpacity$1 = _class.staticMethodId(
    r'circleStrokeOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeOpacity$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? circleStrokeOpacity$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _circleStrokeOpacity$1(
            _class.reference.pointer,
            _id_circleStrokeOpacity$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_heatmapRadius = _class.staticMethodId(
    r'heatmapRadius',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapRadius = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapRadius(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? heatmapRadius(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _heatmapRadius(_class.reference.pointer,
            _id_heatmapRadius as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_heatmapRadius$1 = _class.staticMethodId(
    r'heatmapRadius',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapRadius$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapRadius(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? heatmapRadius$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _heatmapRadius$1(_class.reference.pointer,
            _id_heatmapRadius$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_heatmapWeight = _class.staticMethodId(
    r'heatmapWeight',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapWeight = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapWeight(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? heatmapWeight(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _heatmapWeight(_class.reference.pointer,
            _id_heatmapWeight as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_heatmapWeight$1 = _class.staticMethodId(
    r'heatmapWeight',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapWeight$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapWeight(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? heatmapWeight$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _heatmapWeight$1(_class.reference.pointer,
            _id_heatmapWeight$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_heatmapIntensity = _class.staticMethodId(
    r'heatmapIntensity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapIntensity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapIntensity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? heatmapIntensity(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _heatmapIntensity(_class.reference.pointer,
            _id_heatmapIntensity as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_heatmapIntensity$1 = _class.staticMethodId(
    r'heatmapIntensity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapIntensity$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapIntensity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? heatmapIntensity$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _heatmapIntensity$1(_class.reference.pointer,
            _id_heatmapIntensity$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_heatmapColor = _class.staticMethodId(
    r'heatmapColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapColor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? heatmapColor(
    int i,
  ) {
    return _heatmapColor(
            _class.reference.pointer, _id_heatmapColor as jni$_.JMethodIDPtr, i)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_heatmapColor$1 = _class.staticMethodId(
    r'heatmapColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapColor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? heatmapColor$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _heatmapColor$1(_class.reference.pointer,
            _id_heatmapColor$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_heatmapColor$2 = _class.staticMethodId(
    r'heatmapColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapColor$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? heatmapColor$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _heatmapColor$2(_class.reference.pointer,
            _id_heatmapColor$2 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_heatmapOpacity = _class.staticMethodId(
    r'heatmapOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapOpacity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? heatmapOpacity(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _heatmapOpacity(_class.reference.pointer,
            _id_heatmapOpacity as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_heatmapOpacity$1 = _class.staticMethodId(
    r'heatmapOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapOpacity$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? heatmapOpacity$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _heatmapOpacity$1(_class.reference.pointer,
            _id_heatmapOpacity$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fillExtrusionOpacity = _class.staticMethodId(
    r'fillExtrusionOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionOpacity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? fillExtrusionOpacity(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _fillExtrusionOpacity(_class.reference.pointer,
            _id_fillExtrusionOpacity as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_fillExtrusionOpacity$1 = _class.staticMethodId(
    r'fillExtrusionOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionOpacity$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? fillExtrusionOpacity$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _fillExtrusionOpacity$1(
            _class.reference.pointer,
            _id_fillExtrusionOpacity$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fillExtrusionColor = _class.staticMethodId(
    r'fillExtrusionColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionColor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? fillExtrusionColor(
    int i,
  ) {
    return _fillExtrusionColor(_class.reference.pointer,
            _id_fillExtrusionColor as jni$_.JMethodIDPtr, i)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_fillExtrusionColor$1 = _class.staticMethodId(
    r'fillExtrusionColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionColor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? fillExtrusionColor$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _fillExtrusionColor$1(_class.reference.pointer,
            _id_fillExtrusionColor$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_fillExtrusionColor$2 = _class.staticMethodId(
    r'fillExtrusionColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionColor$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? fillExtrusionColor$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _fillExtrusionColor$2(
            _class.reference.pointer,
            _id_fillExtrusionColor$2 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fillExtrusionTranslate = _class.staticMethodId(
    r'fillExtrusionTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionTranslate = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?
      fillExtrusionTranslate(
    jni$_.JArray<jni$_.JFloat?>? floats,
  ) {
    final _$floats = floats?.reference ?? jni$_.jNullReference;
    return _fillExtrusionTranslate(_class.reference.pointer,
            _id_fillExtrusionTranslate as jni$_.JMethodIDPtr, _$floats.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JFloat?>?>(
                jni$_.JArrayNullableType<jni$_.JFloat?>(
                    jni$_.JFloatNullableType())));
  }

  static final _id_fillExtrusionTranslate$1 = _class.staticMethodId(
    r'fillExtrusionTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionTranslate$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>?
      fillExtrusionTranslate$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _fillExtrusionTranslate$1(
            _class.reference.pointer,
            _id_fillExtrusionTranslate$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fillExtrusionTranslateAnchor = _class.staticMethodId(
    r'fillExtrusionTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionTranslateAnchor =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>?
      fillExtrusionTranslateAnchor(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _fillExtrusionTranslateAnchor(
            _class.reference.pointer,
            _id_fillExtrusionTranslateAnchor as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_fillExtrusionTranslateAnchor$1 = _class.staticMethodId(
    r'fillExtrusionTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionTranslateAnchor$1 =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>?
      fillExtrusionTranslateAnchor$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _fillExtrusionTranslateAnchor$1(
            _class.reference.pointer,
            _id_fillExtrusionTranslateAnchor$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fillExtrusionPattern = _class.staticMethodId(
    r'fillExtrusionPattern',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionPattern = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionPattern(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? fillExtrusionPattern(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _fillExtrusionPattern(_class.reference.pointer,
            _id_fillExtrusionPattern as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_fillExtrusionPattern$1 = _class.staticMethodId(
    r'fillExtrusionPattern',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionPattern$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionPattern(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? fillExtrusionPattern$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _fillExtrusionPattern$1(
            _class.reference.pointer,
            _id_fillExtrusionPattern$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fillExtrusionHeight = _class.staticMethodId(
    r'fillExtrusionHeight',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionHeight = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionHeight(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? fillExtrusionHeight(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _fillExtrusionHeight(_class.reference.pointer,
            _id_fillExtrusionHeight as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_fillExtrusionHeight$1 = _class.staticMethodId(
    r'fillExtrusionHeight',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionHeight$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionHeight(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? fillExtrusionHeight$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _fillExtrusionHeight$1(
            _class.reference.pointer,
            _id_fillExtrusionHeight$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fillExtrusionBase = _class.staticMethodId(
    r'fillExtrusionBase',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionBase = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionBase(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? fillExtrusionBase(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _fillExtrusionBase(_class.reference.pointer,
            _id_fillExtrusionBase as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_fillExtrusionBase$1 = _class.staticMethodId(
    r'fillExtrusionBase',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionBase$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionBase(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? fillExtrusionBase$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _fillExtrusionBase$1(_class.reference.pointer,
            _id_fillExtrusionBase$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fillExtrusionVerticalGradient = _class.staticMethodId(
    r'fillExtrusionVerticalGradient',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionVerticalGradient =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionVerticalGradient(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JBoolean?>?
      fillExtrusionVerticalGradient(
    jni$_.JBoolean? boolean,
  ) {
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return _fillExtrusionVerticalGradient(
            _class.reference.pointer,
            _id_fillExtrusionVerticalGradient as jni$_.JMethodIDPtr,
            _$boolean.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JBoolean?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JBoolean?>(
                jni$_.JBooleanNullableType()));
  }

  static final _id_fillExtrusionVerticalGradient$1 = _class.staticMethodId(
    r'fillExtrusionVerticalGradient',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionVerticalGradient$1 =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionVerticalGradient(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>?
      fillExtrusionVerticalGradient$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _fillExtrusionVerticalGradient$1(
            _class.reference.pointer,
            _id_fillExtrusionVerticalGradient$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_rasterOpacity = _class.staticMethodId(
    r'rasterOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterOpacity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? rasterOpacity(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _rasterOpacity(_class.reference.pointer,
            _id_rasterOpacity as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_rasterOpacity$1 = _class.staticMethodId(
    r'rasterOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterOpacity$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? rasterOpacity$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _rasterOpacity$1(_class.reference.pointer,
            _id_rasterOpacity$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_rasterHueRotate = _class.staticMethodId(
    r'rasterHueRotate',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterHueRotate = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterHueRotate(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? rasterHueRotate(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _rasterHueRotate(_class.reference.pointer,
            _id_rasterHueRotate as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_rasterHueRotate$1 = _class.staticMethodId(
    r'rasterHueRotate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterHueRotate$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterHueRotate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? rasterHueRotate$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _rasterHueRotate$1(_class.reference.pointer,
            _id_rasterHueRotate$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_rasterBrightnessMin = _class.staticMethodId(
    r'rasterBrightnessMin',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterBrightnessMin = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterBrightnessMin(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? rasterBrightnessMin(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _rasterBrightnessMin(_class.reference.pointer,
            _id_rasterBrightnessMin as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_rasterBrightnessMin$1 = _class.staticMethodId(
    r'rasterBrightnessMin',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterBrightnessMin$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterBrightnessMin(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? rasterBrightnessMin$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _rasterBrightnessMin$1(
            _class.reference.pointer,
            _id_rasterBrightnessMin$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_rasterBrightnessMax = _class.staticMethodId(
    r'rasterBrightnessMax',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterBrightnessMax = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterBrightnessMax(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? rasterBrightnessMax(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _rasterBrightnessMax(_class.reference.pointer,
            _id_rasterBrightnessMax as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_rasterBrightnessMax$1 = _class.staticMethodId(
    r'rasterBrightnessMax',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterBrightnessMax$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterBrightnessMax(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? rasterBrightnessMax$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _rasterBrightnessMax$1(
            _class.reference.pointer,
            _id_rasterBrightnessMax$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_rasterSaturation = _class.staticMethodId(
    r'rasterSaturation',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterSaturation = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterSaturation(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? rasterSaturation(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _rasterSaturation(_class.reference.pointer,
            _id_rasterSaturation as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_rasterSaturation$1 = _class.staticMethodId(
    r'rasterSaturation',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterSaturation$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterSaturation(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? rasterSaturation$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _rasterSaturation$1(_class.reference.pointer,
            _id_rasterSaturation$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_rasterContrast = _class.staticMethodId(
    r'rasterContrast',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterContrast = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterContrast(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? rasterContrast(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _rasterContrast(_class.reference.pointer,
            _id_rasterContrast as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_rasterContrast$1 = _class.staticMethodId(
    r'rasterContrast',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterContrast$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterContrast(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? rasterContrast$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _rasterContrast$1(_class.reference.pointer,
            _id_rasterContrast$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_rasterResampling = _class.staticMethodId(
    r'rasterResampling',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterResampling = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterResampling(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? rasterResampling(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _rasterResampling(_class.reference.pointer,
            _id_rasterResampling as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_rasterResampling$1 = _class.staticMethodId(
    r'rasterResampling',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterResampling$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterResampling(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? rasterResampling$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _rasterResampling$1(_class.reference.pointer,
            _id_rasterResampling$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_rasterFadeDuration = _class.staticMethodId(
    r'rasterFadeDuration',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterFadeDuration = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterFadeDuration(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? rasterFadeDuration(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _rasterFadeDuration(_class.reference.pointer,
            _id_rasterFadeDuration as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_rasterFadeDuration$1 = _class.staticMethodId(
    r'rasterFadeDuration',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterFadeDuration$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterFadeDuration(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? rasterFadeDuration$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _rasterFadeDuration$1(
            _class.reference.pointer,
            _id_rasterFadeDuration$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_hillshadeIlluminationDirection = _class.staticMethodId(
    r'hillshadeIlluminationDirection',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeIlluminationDirection =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeIlluminationDirection(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>?
      hillshadeIlluminationDirection(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _hillshadeIlluminationDirection(
            _class.reference.pointer,
            _id_hillshadeIlluminationDirection as jni$_.JMethodIDPtr,
            _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_hillshadeIlluminationDirection$1 = _class.staticMethodId(
    r'hillshadeIlluminationDirection',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeIlluminationDirection$1 =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeIlluminationDirection(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>?
      hillshadeIlluminationDirection$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _hillshadeIlluminationDirection$1(
            _class.reference.pointer,
            _id_hillshadeIlluminationDirection$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_hillshadeIlluminationAnchor = _class.staticMethodId(
    r'hillshadeIlluminationAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeIlluminationAnchor =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeIlluminationAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>?
      hillshadeIlluminationAnchor(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _hillshadeIlluminationAnchor(
            _class.reference.pointer,
            _id_hillshadeIlluminationAnchor as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_hillshadeIlluminationAnchor$1 = _class.staticMethodId(
    r'hillshadeIlluminationAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeIlluminationAnchor$1 =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeIlluminationAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>?
      hillshadeIlluminationAnchor$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _hillshadeIlluminationAnchor$1(
            _class.reference.pointer,
            _id_hillshadeIlluminationAnchor$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_hillshadeExaggeration = _class.staticMethodId(
    r'hillshadeExaggeration',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeExaggeration = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeExaggeration(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? hillshadeExaggeration(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _hillshadeExaggeration(_class.reference.pointer,
            _id_hillshadeExaggeration as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_hillshadeExaggeration$1 = _class.staticMethodId(
    r'hillshadeExaggeration',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeExaggeration$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeExaggeration(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? hillshadeExaggeration$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _hillshadeExaggeration$1(
            _class.reference.pointer,
            _id_hillshadeExaggeration$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_hillshadeShadowColor = _class.staticMethodId(
    r'hillshadeShadowColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeShadowColor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeShadowColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? hillshadeShadowColor(
    int i,
  ) {
    return _hillshadeShadowColor(_class.reference.pointer,
            _id_hillshadeShadowColor as jni$_.JMethodIDPtr, i)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_hillshadeShadowColor$1 = _class.staticMethodId(
    r'hillshadeShadowColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeShadowColor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeShadowColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? hillshadeShadowColor$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _hillshadeShadowColor$1(_class.reference.pointer,
            _id_hillshadeShadowColor$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_hillshadeShadowColor$2 = _class.staticMethodId(
    r'hillshadeShadowColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeShadowColor$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeShadowColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? hillshadeShadowColor$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _hillshadeShadowColor$2(
            _class.reference.pointer,
            _id_hillshadeShadowColor$2 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_hillshadeHighlightColor = _class.staticMethodId(
    r'hillshadeHighlightColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeHighlightColor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeHighlightColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? hillshadeHighlightColor(
    int i,
  ) {
    return _hillshadeHighlightColor(_class.reference.pointer,
            _id_hillshadeHighlightColor as jni$_.JMethodIDPtr, i)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_hillshadeHighlightColor$1 = _class.staticMethodId(
    r'hillshadeHighlightColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeHighlightColor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeHighlightColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>?
      hillshadeHighlightColor$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _hillshadeHighlightColor$1(
            _class.reference.pointer,
            _id_hillshadeHighlightColor$1 as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_hillshadeHighlightColor$2 = _class.staticMethodId(
    r'hillshadeHighlightColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeHighlightColor$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeHighlightColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>?
      hillshadeHighlightColor$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _hillshadeHighlightColor$2(
            _class.reference.pointer,
            _id_hillshadeHighlightColor$2 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_hillshadeAccentColor = _class.staticMethodId(
    r'hillshadeAccentColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeAccentColor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeAccentColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? hillshadeAccentColor(
    int i,
  ) {
    return _hillshadeAccentColor(_class.reference.pointer,
            _id_hillshadeAccentColor as jni$_.JMethodIDPtr, i)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_hillshadeAccentColor$1 = _class.staticMethodId(
    r'hillshadeAccentColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeAccentColor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeAccentColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? hillshadeAccentColor$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _hillshadeAccentColor$1(_class.reference.pointer,
            _id_hillshadeAccentColor$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_hillshadeAccentColor$2 = _class.staticMethodId(
    r'hillshadeAccentColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeAccentColor$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeAccentColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? hillshadeAccentColor$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _hillshadeAccentColor$2(
            _class.reference.pointer,
            _id_hillshadeAccentColor$2 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_backgroundColor = _class.staticMethodId(
    r'backgroundColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundColor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? backgroundColor(
    int i,
  ) {
    return _backgroundColor(_class.reference.pointer,
            _id_backgroundColor as jni$_.JMethodIDPtr, i)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_backgroundColor$1 = _class.staticMethodId(
    r'backgroundColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundColor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? backgroundColor$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _backgroundColor$1(_class.reference.pointer,
            _id_backgroundColor$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_backgroundColor$2 = _class.staticMethodId(
    r'backgroundColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundColor$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? backgroundColor$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _backgroundColor$2(_class.reference.pointer,
            _id_backgroundColor$2 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_backgroundPattern = _class.staticMethodId(
    r'backgroundPattern',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundPattern = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundPattern(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? backgroundPattern(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _backgroundPattern(_class.reference.pointer,
            _id_backgroundPattern as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_backgroundPattern$1 = _class.staticMethodId(
    r'backgroundPattern',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundPattern$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundPattern(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? backgroundPattern$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _backgroundPattern$1(_class.reference.pointer,
            _id_backgroundPattern$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_backgroundOpacity = _class.staticMethodId(
    r'backgroundOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundOpacity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? backgroundOpacity(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _backgroundOpacity(_class.reference.pointer,
            _id_backgroundOpacity as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_backgroundOpacity$1 = _class.staticMethodId(
    r'backgroundOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundOpacity$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? backgroundOpacity$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _backgroundOpacity$1(_class.reference.pointer,
            _id_backgroundOpacity$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fillSortKey = _class.staticMethodId(
    r'fillSortKey',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillSortKey = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillSortKey(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? fillSortKey(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _fillSortKey(_class.reference.pointer,
            _id_fillSortKey as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_fillSortKey$1 = _class.staticMethodId(
    r'fillSortKey',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillSortKey$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillSortKey(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? fillSortKey$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _fillSortKey$1(_class.reference.pointer,
            _id_fillSortKey$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_lineCap = _class.staticMethodId(
    r'lineCap',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineCap = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineCap(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? lineCap(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _lineCap(_class.reference.pointer, _id_lineCap as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_lineCap$1 = _class.staticMethodId(
    r'lineCap',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineCap$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineCap(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? lineCap$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _lineCap$1(_class.reference.pointer,
            _id_lineCap$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_lineJoin = _class.staticMethodId(
    r'lineJoin',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineJoin = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineJoin(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? lineJoin(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _lineJoin(_class.reference.pointer,
            _id_lineJoin as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_lineJoin$1 = _class.staticMethodId(
    r'lineJoin',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineJoin$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineJoin(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? lineJoin$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _lineJoin$1(_class.reference.pointer,
            _id_lineJoin$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_lineMiterLimit = _class.staticMethodId(
    r'lineMiterLimit',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineMiterLimit = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineMiterLimit(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? lineMiterLimit(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _lineMiterLimit(_class.reference.pointer,
            _id_lineMiterLimit as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_lineMiterLimit$1 = _class.staticMethodId(
    r'lineMiterLimit',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineMiterLimit$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineMiterLimit(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? lineMiterLimit$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _lineMiterLimit$1(_class.reference.pointer,
            _id_lineMiterLimit$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_lineRoundLimit = _class.staticMethodId(
    r'lineRoundLimit',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineRoundLimit = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineRoundLimit(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? lineRoundLimit(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _lineRoundLimit(_class.reference.pointer,
            _id_lineRoundLimit as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_lineRoundLimit$1 = _class.staticMethodId(
    r'lineRoundLimit',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineRoundLimit$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineRoundLimit(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? lineRoundLimit$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _lineRoundLimit$1(_class.reference.pointer,
            _id_lineRoundLimit$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_lineSortKey = _class.staticMethodId(
    r'lineSortKey',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineSortKey = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineSortKey(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? lineSortKey(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _lineSortKey(_class.reference.pointer,
            _id_lineSortKey as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_lineSortKey$1 = _class.staticMethodId(
    r'lineSortKey',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineSortKey$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineSortKey(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? lineSortKey$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _lineSortKey$1(_class.reference.pointer,
            _id_lineSortKey$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_symbolPlacement = _class.staticMethodId(
    r'symbolPlacement',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolPlacement = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolPlacement(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? symbolPlacement(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _symbolPlacement(_class.reference.pointer,
            _id_symbolPlacement as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_symbolPlacement$1 = _class.staticMethodId(
    r'symbolPlacement',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolPlacement$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolPlacement(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? symbolPlacement$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _symbolPlacement$1(_class.reference.pointer,
            _id_symbolPlacement$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_symbolSpacing = _class.staticMethodId(
    r'symbolSpacing',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolSpacing = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolSpacing(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? symbolSpacing(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _symbolSpacing(_class.reference.pointer,
            _id_symbolSpacing as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_symbolSpacing$1 = _class.staticMethodId(
    r'symbolSpacing',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolSpacing$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolSpacing(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? symbolSpacing$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _symbolSpacing$1(_class.reference.pointer,
            _id_symbolSpacing$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_symbolAvoidEdges = _class.staticMethodId(
    r'symbolAvoidEdges',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolAvoidEdges = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolAvoidEdges(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JBoolean?>? symbolAvoidEdges(
    jni$_.JBoolean? boolean,
  ) {
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return _symbolAvoidEdges(_class.reference.pointer,
            _id_symbolAvoidEdges as jni$_.JMethodIDPtr, _$boolean.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JBoolean?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JBoolean?>(
                jni$_.JBooleanNullableType()));
  }

  static final _id_symbolAvoidEdges$1 = _class.staticMethodId(
    r'symbolAvoidEdges',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolAvoidEdges$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolAvoidEdges(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? symbolAvoidEdges$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _symbolAvoidEdges$1(_class.reference.pointer,
            _id_symbolAvoidEdges$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_symbolSortKey = _class.staticMethodId(
    r'symbolSortKey',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolSortKey = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolSortKey(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? symbolSortKey(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _symbolSortKey(_class.reference.pointer,
            _id_symbolSortKey as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_symbolSortKey$1 = _class.staticMethodId(
    r'symbolSortKey',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolSortKey$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolSortKey(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? symbolSortKey$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _symbolSortKey$1(_class.reference.pointer,
            _id_symbolSortKey$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_symbolZOrder = _class.staticMethodId(
    r'symbolZOrder',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolZOrder = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolZOrder(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? symbolZOrder(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _symbolZOrder(_class.reference.pointer,
            _id_symbolZOrder as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_symbolZOrder$1 = _class.staticMethodId(
    r'symbolZOrder',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolZOrder$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolZOrder(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? symbolZOrder$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _symbolZOrder$1(_class.reference.pointer,
            _id_symbolZOrder$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconAllowOverlap = _class.staticMethodId(
    r'iconAllowOverlap',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconAllowOverlap = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconAllowOverlap(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JBoolean?>? iconAllowOverlap(
    jni$_.JBoolean? boolean,
  ) {
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return _iconAllowOverlap(_class.reference.pointer,
            _id_iconAllowOverlap as jni$_.JMethodIDPtr, _$boolean.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JBoolean?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JBoolean?>(
                jni$_.JBooleanNullableType()));
  }

  static final _id_iconAllowOverlap$1 = _class.staticMethodId(
    r'iconAllowOverlap',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconAllowOverlap$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconAllowOverlap(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconAllowOverlap$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconAllowOverlap$1(_class.reference.pointer,
            _id_iconAllowOverlap$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconIgnorePlacement = _class.staticMethodId(
    r'iconIgnorePlacement',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconIgnorePlacement = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconIgnorePlacement(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JBoolean?>? iconIgnorePlacement(
    jni$_.JBoolean? boolean,
  ) {
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return _iconIgnorePlacement(_class.reference.pointer,
            _id_iconIgnorePlacement as jni$_.JMethodIDPtr, _$boolean.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JBoolean?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JBoolean?>(
                jni$_.JBooleanNullableType()));
  }

  static final _id_iconIgnorePlacement$1 = _class.staticMethodId(
    r'iconIgnorePlacement',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconIgnorePlacement$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconIgnorePlacement(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconIgnorePlacement$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconIgnorePlacement$1(
            _class.reference.pointer,
            _id_iconIgnorePlacement$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconOptional = _class.staticMethodId(
    r'iconOptional',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOptional = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOptional(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JBoolean?>? iconOptional(
    jni$_.JBoolean? boolean,
  ) {
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return _iconOptional(_class.reference.pointer,
            _id_iconOptional as jni$_.JMethodIDPtr, _$boolean.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JBoolean?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JBoolean?>(
                jni$_.JBooleanNullableType()));
  }

  static final _id_iconOptional$1 = _class.staticMethodId(
    r'iconOptional',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOptional$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOptional(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconOptional$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconOptional$1(_class.reference.pointer,
            _id_iconOptional$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconRotationAlignment = _class.staticMethodId(
    r'iconRotationAlignment',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconRotationAlignment = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconRotationAlignment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? iconRotationAlignment(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _iconRotationAlignment(_class.reference.pointer,
            _id_iconRotationAlignment as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_iconRotationAlignment$1 = _class.staticMethodId(
    r'iconRotationAlignment',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconRotationAlignment$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconRotationAlignment(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconRotationAlignment$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconRotationAlignment$1(
            _class.reference.pointer,
            _id_iconRotationAlignment$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconSize = _class.staticMethodId(
    r'iconSize',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconSize = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconSize(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? iconSize(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _iconSize(_class.reference.pointer,
            _id_iconSize as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_iconSize$1 = _class.staticMethodId(
    r'iconSize',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconSize$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconSize(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconSize$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconSize$1(_class.reference.pointer,
            _id_iconSize$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconTextFit = _class.staticMethodId(
    r'iconTextFit',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTextFit = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTextFit(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? iconTextFit(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _iconTextFit(_class.reference.pointer,
            _id_iconTextFit as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_iconTextFit$1 = _class.staticMethodId(
    r'iconTextFit',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTextFit$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTextFit(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconTextFit$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconTextFit$1(_class.reference.pointer,
            _id_iconTextFit$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconTextFitPadding = _class.staticMethodId(
    r'iconTextFitPadding',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTextFitPadding = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTextFitPadding(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?
      iconTextFitPadding(
    jni$_.JArray<jni$_.JFloat?>? floats,
  ) {
    final _$floats = floats?.reference ?? jni$_.jNullReference;
    return _iconTextFitPadding(_class.reference.pointer,
            _id_iconTextFitPadding as jni$_.JMethodIDPtr, _$floats.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JFloat?>?>(
                jni$_.JArrayNullableType<jni$_.JFloat?>(
                    jni$_.JFloatNullableType())));
  }

  static final _id_iconTextFitPadding$1 = _class.staticMethodId(
    r'iconTextFitPadding',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTextFitPadding$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTextFitPadding(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconTextFitPadding$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconTextFitPadding$1(
            _class.reference.pointer,
            _id_iconTextFitPadding$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconImage = _class.staticMethodId(
    r'iconImage',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconImage = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconImage(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? iconImage(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _iconImage(_class.reference.pointer,
            _id_iconImage as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_iconImage$1 = _class.staticMethodId(
    r'iconImage',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconImage$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconImage(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconImage$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconImage$1(_class.reference.pointer,
            _id_iconImage$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconRotate = _class.staticMethodId(
    r'iconRotate',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconRotate = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconRotate(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? iconRotate(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _iconRotate(_class.reference.pointer,
            _id_iconRotate as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_iconRotate$1 = _class.staticMethodId(
    r'iconRotate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconRotate$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconRotate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconRotate$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconRotate$1(_class.reference.pointer,
            _id_iconRotate$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconPadding = _class.staticMethodId(
    r'iconPadding',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconPadding = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconPadding(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? iconPadding(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _iconPadding(_class.reference.pointer,
            _id_iconPadding as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_iconPadding$1 = _class.staticMethodId(
    r'iconPadding',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconPadding$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconPadding(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?
      iconPadding$1(
    jni$_.JArray<jni$_.JFloat?>? floats,
  ) {
    final _$floats = floats?.reference ?? jni$_.jNullReference;
    return _iconPadding$1(_class.reference.pointer,
            _id_iconPadding$1 as jni$_.JMethodIDPtr, _$floats.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JFloat?>?>(
                jni$_.JArrayNullableType<jni$_.JFloat?>(
                    jni$_.JFloatNullableType())));
  }

  static final _id_iconPadding$2 = _class.staticMethodId(
    r'iconPadding',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconPadding$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconPadding(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconPadding$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconPadding$2(_class.reference.pointer,
            _id_iconPadding$2 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconKeepUpright = _class.staticMethodId(
    r'iconKeepUpright',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconKeepUpright = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconKeepUpright(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JBoolean?>? iconKeepUpright(
    jni$_.JBoolean? boolean,
  ) {
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return _iconKeepUpright(_class.reference.pointer,
            _id_iconKeepUpright as jni$_.JMethodIDPtr, _$boolean.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JBoolean?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JBoolean?>(
                jni$_.JBooleanNullableType()));
  }

  static final _id_iconKeepUpright$1 = _class.staticMethodId(
    r'iconKeepUpright',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconKeepUpright$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconKeepUpright(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconKeepUpright$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconKeepUpright$1(_class.reference.pointer,
            _id_iconKeepUpright$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconOffset = _class.staticMethodId(
    r'iconOffset',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOffset = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOffset(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?
      iconOffset(
    jni$_.JArray<jni$_.JFloat?>? floats,
  ) {
    final _$floats = floats?.reference ?? jni$_.jNullReference;
    return _iconOffset(_class.reference.pointer,
            _id_iconOffset as jni$_.JMethodIDPtr, _$floats.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JFloat?>?>(
                jni$_.JArrayNullableType<jni$_.JFloat?>(
                    jni$_.JFloatNullableType())));
  }

  static final _id_iconOffset$1 = _class.staticMethodId(
    r'iconOffset',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOffset$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOffset(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconOffset$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconOffset$1(_class.reference.pointer,
            _id_iconOffset$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconAnchor = _class.staticMethodId(
    r'iconAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconAnchor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? iconAnchor(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _iconAnchor(_class.reference.pointer,
            _id_iconAnchor as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_iconAnchor$1 = _class.staticMethodId(
    r'iconAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconAnchor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconAnchor$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconAnchor$1(_class.reference.pointer,
            _id_iconAnchor$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_iconPitchAlignment = _class.staticMethodId(
    r'iconPitchAlignment',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconPitchAlignment = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconPitchAlignment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? iconPitchAlignment(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _iconPitchAlignment(_class.reference.pointer,
            _id_iconPitchAlignment as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_iconPitchAlignment$1 = _class.staticMethodId(
    r'iconPitchAlignment',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconPitchAlignment$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconPitchAlignment(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? iconPitchAlignment$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _iconPitchAlignment$1(
            _class.reference.pointer,
            _id_iconPitchAlignment$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textPitchAlignment = _class.staticMethodId(
    r'textPitchAlignment',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textPitchAlignment = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textPitchAlignment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? textPitchAlignment(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _textPitchAlignment(_class.reference.pointer,
            _id_textPitchAlignment as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_textPitchAlignment$1 = _class.staticMethodId(
    r'textPitchAlignment',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textPitchAlignment$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textPitchAlignment(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textPitchAlignment$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textPitchAlignment$1(
            _class.reference.pointer,
            _id_textPitchAlignment$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textRotationAlignment = _class.staticMethodId(
    r'textRotationAlignment',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRotationAlignment = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRotationAlignment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? textRotationAlignment(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _textRotationAlignment(_class.reference.pointer,
            _id_textRotationAlignment as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_textRotationAlignment$1 = _class.staticMethodId(
    r'textRotationAlignment',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRotationAlignment$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRotationAlignment(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textRotationAlignment$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textRotationAlignment$1(
            _class.reference.pointer,
            _id_textRotationAlignment$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textField = _class.staticMethodId(
    r'textField',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textField = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textField(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? textField(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _textField(_class.reference.pointer,
            _id_textField as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_textField$1 = _class.staticMethodId(
    r'textField',
    r'(Lorg/maplibre/android/style/types/Formatted;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textField$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textField(org.maplibre.android.style.types.Formatted formatted)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<formatted$_.Formatted?>? textField$1(
    formatted$_.Formatted? formatted,
  ) {
    final _$formatted = formatted?.reference ?? jni$_.jNullReference;
    return _textField$1(_class.reference.pointer,
            _id_textField$1 as jni$_.JMethodIDPtr, _$formatted.pointer)
        .object<propertyvalue$_.PropertyValue<formatted$_.Formatted?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<
                formatted$_.Formatted?>(formatted$_.$Formatted$NullableType()));
  }

  static final _id_textField$2 = _class.staticMethodId(
    r'textField',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textField$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textField(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textField$2(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textField$2(_class.reference.pointer,
            _id_textField$2 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textFont = _class.staticMethodId(
    r'textFont',
    r'([Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textFont = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textFont(java.lang.Object[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JString?>?>? textFont(
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    return _textFont(_class.reference.pointer,
            _id_textFont as jni$_.JMethodIDPtr, _$strings.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JString?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JString?>?>(
                jni$_.JArrayNullableType<jni$_.JString?>(
                    jni$_.JStringNullableType())));
  }

  static final _id_textFont$1 = _class.staticMethodId(
    r'textFont',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textFont$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textFont(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textFont$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textFont$1(_class.reference.pointer,
            _id_textFont$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textSize = _class.staticMethodId(
    r'textSize',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textSize = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textSize(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? textSize(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _textSize(_class.reference.pointer,
            _id_textSize as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_textSize$1 = _class.staticMethodId(
    r'textSize',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textSize$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textSize(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textSize$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textSize$1(_class.reference.pointer,
            _id_textSize$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textMaxWidth = _class.staticMethodId(
    r'textMaxWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textMaxWidth = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textMaxWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? textMaxWidth(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _textMaxWidth(_class.reference.pointer,
            _id_textMaxWidth as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_textMaxWidth$1 = _class.staticMethodId(
    r'textMaxWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textMaxWidth$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textMaxWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textMaxWidth$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textMaxWidth$1(_class.reference.pointer,
            _id_textMaxWidth$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textLineHeight = _class.staticMethodId(
    r'textLineHeight',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textLineHeight = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textLineHeight(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? textLineHeight(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _textLineHeight(_class.reference.pointer,
            _id_textLineHeight as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_textLineHeight$1 = _class.staticMethodId(
    r'textLineHeight',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textLineHeight$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textLineHeight(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textLineHeight$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textLineHeight$1(_class.reference.pointer,
            _id_textLineHeight$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textLetterSpacing = _class.staticMethodId(
    r'textLetterSpacing',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textLetterSpacing = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textLetterSpacing(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? textLetterSpacing(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _textLetterSpacing(_class.reference.pointer,
            _id_textLetterSpacing as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_textLetterSpacing$1 = _class.staticMethodId(
    r'textLetterSpacing',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textLetterSpacing$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textLetterSpacing(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textLetterSpacing$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textLetterSpacing$1(_class.reference.pointer,
            _id_textLetterSpacing$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textJustify = _class.staticMethodId(
    r'textJustify',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textJustify = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textJustify(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? textJustify(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _textJustify(_class.reference.pointer,
            _id_textJustify as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_textJustify$1 = _class.staticMethodId(
    r'textJustify',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textJustify$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textJustify(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textJustify$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textJustify$1(_class.reference.pointer,
            _id_textJustify$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textRadialOffset = _class.staticMethodId(
    r'textRadialOffset',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRadialOffset = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRadialOffset(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? textRadialOffset(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _textRadialOffset(_class.reference.pointer,
            _id_textRadialOffset as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_textRadialOffset$1 = _class.staticMethodId(
    r'textRadialOffset',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRadialOffset$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRadialOffset(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textRadialOffset$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textRadialOffset$1(_class.reference.pointer,
            _id_textRadialOffset$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textVariableAnchor = _class.staticMethodId(
    r'textVariableAnchor',
    r'([Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textVariableAnchor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textVariableAnchor(java.lang.Object[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JString?>?>?
      textVariableAnchor(
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    return _textVariableAnchor(_class.reference.pointer,
            _id_textVariableAnchor as jni$_.JMethodIDPtr, _$strings.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JString?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JString?>?>(
                jni$_.JArrayNullableType<jni$_.JString?>(
                    jni$_.JStringNullableType())));
  }

  static final _id_textVariableAnchor$1 = _class.staticMethodId(
    r'textVariableAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textVariableAnchor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textVariableAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textVariableAnchor$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textVariableAnchor$1(
            _class.reference.pointer,
            _id_textVariableAnchor$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textVariableAnchorOffset = _class.staticMethodId(
    r'textVariableAnchorOffset',
    r'([Ljava/lang/Object;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textVariableAnchorOffset = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textVariableAnchorOffset(java.lang.Object[] objects)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JObject?>?>?
      textVariableAnchorOffset(
    jni$_.JArray<jni$_.JObject?>? objects,
  ) {
    final _$objects = objects?.reference ?? jni$_.jNullReference;
    return _textVariableAnchorOffset(
            _class.reference.pointer,
            _id_textVariableAnchorOffset as jni$_.JMethodIDPtr,
            _$objects.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JObject?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JObject?>?>(
                jni$_.JArrayNullableType<jni$_.JObject?>(
                    jni$_.JObjectNullableType())));
  }

  static final _id_textVariableAnchorOffset$1 = _class.staticMethodId(
    r'textVariableAnchorOffset',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textVariableAnchorOffset$1 =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textVariableAnchorOffset(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>?
      textVariableAnchorOffset$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textVariableAnchorOffset$1(
            _class.reference.pointer,
            _id_textVariableAnchorOffset$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textAnchor = _class.staticMethodId(
    r'textAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textAnchor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? textAnchor(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _textAnchor(_class.reference.pointer,
            _id_textAnchor as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_textAnchor$1 = _class.staticMethodId(
    r'textAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textAnchor$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textAnchor$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textAnchor$1(_class.reference.pointer,
            _id_textAnchor$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textMaxAngle = _class.staticMethodId(
    r'textMaxAngle',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textMaxAngle = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textMaxAngle(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? textMaxAngle(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _textMaxAngle(_class.reference.pointer,
            _id_textMaxAngle as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_textMaxAngle$1 = _class.staticMethodId(
    r'textMaxAngle',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textMaxAngle$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textMaxAngle(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textMaxAngle$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textMaxAngle$1(_class.reference.pointer,
            _id_textMaxAngle$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textWritingMode = _class.staticMethodId(
    r'textWritingMode',
    r'([Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textWritingMode = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textWritingMode(java.lang.Object[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JString?>?>?
      textWritingMode(
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    return _textWritingMode(_class.reference.pointer,
            _id_textWritingMode as jni$_.JMethodIDPtr, _$strings.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JString?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JString?>?>(
                jni$_.JArrayNullableType<jni$_.JString?>(
                    jni$_.JStringNullableType())));
  }

  static final _id_textWritingMode$1 = _class.staticMethodId(
    r'textWritingMode',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textWritingMode$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textWritingMode(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textWritingMode$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textWritingMode$1(_class.reference.pointer,
            _id_textWritingMode$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textRotate = _class.staticMethodId(
    r'textRotate',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRotate = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRotate(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? textRotate(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _textRotate(_class.reference.pointer,
            _id_textRotate as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_textRotate$1 = _class.staticMethodId(
    r'textRotate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRotate$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRotate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textRotate$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textRotate$1(_class.reference.pointer,
            _id_textRotate$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textPadding = _class.staticMethodId(
    r'textPadding',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textPadding = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textPadding(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? textPadding(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _textPadding(_class.reference.pointer,
            _id_textPadding as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_textPadding$1 = _class.staticMethodId(
    r'textPadding',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textPadding$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textPadding(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textPadding$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textPadding$1(_class.reference.pointer,
            _id_textPadding$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textKeepUpright = _class.staticMethodId(
    r'textKeepUpright',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textKeepUpright = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textKeepUpright(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JBoolean?>? textKeepUpright(
    jni$_.JBoolean? boolean,
  ) {
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return _textKeepUpright(_class.reference.pointer,
            _id_textKeepUpright as jni$_.JMethodIDPtr, _$boolean.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JBoolean?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JBoolean?>(
                jni$_.JBooleanNullableType()));
  }

  static final _id_textKeepUpright$1 = _class.staticMethodId(
    r'textKeepUpright',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textKeepUpright$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textKeepUpright(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textKeepUpright$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textKeepUpright$1(_class.reference.pointer,
            _id_textKeepUpright$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textTransform = _class.staticMethodId(
    r'textTransform',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTransform = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTransform(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JString?>? textTransform(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _textTransform(_class.reference.pointer,
            _id_textTransform as jni$_.JMethodIDPtr, _$string.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_textTransform$1 = _class.staticMethodId(
    r'textTransform',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTransform$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTransform(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textTransform$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textTransform$1(_class.reference.pointer,
            _id_textTransform$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textOffset = _class.staticMethodId(
    r'textOffset',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOffset = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOffset(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?
      textOffset(
    jni$_.JArray<jni$_.JFloat?>? floats,
  ) {
    final _$floats = floats?.reference ?? jni$_.jNullReference;
    return _textOffset(_class.reference.pointer,
            _id_textOffset as jni$_.JMethodIDPtr, _$floats.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JFloat?>?>(
                jni$_.JArrayNullableType<jni$_.JFloat?>(
                    jni$_.JFloatNullableType())));
  }

  static final _id_textOffset$1 = _class.staticMethodId(
    r'textOffset',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOffset$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOffset(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textOffset$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textOffset$1(_class.reference.pointer,
            _id_textOffset$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textAllowOverlap = _class.staticMethodId(
    r'textAllowOverlap',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textAllowOverlap = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textAllowOverlap(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JBoolean?>? textAllowOverlap(
    jni$_.JBoolean? boolean,
  ) {
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return _textAllowOverlap(_class.reference.pointer,
            _id_textAllowOverlap as jni$_.JMethodIDPtr, _$boolean.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JBoolean?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JBoolean?>(
                jni$_.JBooleanNullableType()));
  }

  static final _id_textAllowOverlap$1 = _class.staticMethodId(
    r'textAllowOverlap',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textAllowOverlap$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textAllowOverlap(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textAllowOverlap$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textAllowOverlap$1(_class.reference.pointer,
            _id_textAllowOverlap$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textIgnorePlacement = _class.staticMethodId(
    r'textIgnorePlacement',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textIgnorePlacement = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textIgnorePlacement(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JBoolean?>? textIgnorePlacement(
    jni$_.JBoolean? boolean,
  ) {
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return _textIgnorePlacement(_class.reference.pointer,
            _id_textIgnorePlacement as jni$_.JMethodIDPtr, _$boolean.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JBoolean?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JBoolean?>(
                jni$_.JBooleanNullableType()));
  }

  static final _id_textIgnorePlacement$1 = _class.staticMethodId(
    r'textIgnorePlacement',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textIgnorePlacement$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textIgnorePlacement(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textIgnorePlacement$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textIgnorePlacement$1(
            _class.reference.pointer,
            _id_textIgnorePlacement$1 as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_textOptional = _class.staticMethodId(
    r'textOptional',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOptional = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOptional(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JBoolean?>? textOptional(
    jni$_.JBoolean? boolean,
  ) {
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return _textOptional(_class.reference.pointer,
            _id_textOptional as jni$_.JMethodIDPtr, _$boolean.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JBoolean?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JBoolean?>(
                jni$_.JBooleanNullableType()));
  }

  static final _id_textOptional$1 = _class.staticMethodId(
    r'textOptional',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOptional$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOptional(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? textOptional$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _textOptional$1(_class.reference.pointer,
            _id_textOptional$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_circleSortKey = _class.staticMethodId(
    r'circleSortKey',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleSortKey = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleSortKey(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JFloat?>? circleSortKey(
    jni$_.JFloat? float,
  ) {
    final _$float = float?.reference ?? jni$_.jNullReference;
    return _circleSortKey(_class.reference.pointer,
            _id_circleSortKey as jni$_.JMethodIDPtr, _$float.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_circleSortKey$1 = _class.staticMethodId(
    r'circleSortKey',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleSortKey$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleSortKey(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue$_.PropertyValue<jni$_.JObject?>? circleSortKey$1(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _circleSortKey$1(_class.reference.pointer,
            _id_circleSortKey$1 as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<propertyvalue$_.PropertyValue<jni$_.JObject?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }
}

final class $PropertyFactory$NullableType
    extends jni$_.JObjType<PropertyFactory?> {
  @jni$_.internal
  const $PropertyFactory$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/style/layers/PropertyFactory;';

  @jni$_.internal
  @core$_.override
  PropertyFactory? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : PropertyFactory.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PropertyFactory?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PropertyFactory$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PropertyFactory$NullableType) &&
        other is $PropertyFactory$NullableType;
  }
}

final class $PropertyFactory$Type extends jni$_.JObjType<PropertyFactory> {
  @jni$_.internal
  const $PropertyFactory$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/style/layers/PropertyFactory;';

  @jni$_.internal
  @core$_.override
  PropertyFactory fromReference(jni$_.JReference reference) =>
      PropertyFactory.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PropertyFactory?> get nullableType =>
      const $PropertyFactory$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PropertyFactory$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PropertyFactory$Type) &&
        other is $PropertyFactory$Type;
  }
}
