// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../../../../android/graphics/PointF.dart' as pointf$_;

import 'AttributionDialogManager.dart' as attributiondialogmanager$_;

/// from: `org.maplibre.android.maps.UiSettings`
class UiSettings extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<UiSettings> $type;

  @jni$_.internal
  UiSettings.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'org/maplibre/android/maps/UiSettings');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $UiSettings$NullableType();
  static const type = $UiSettings$Type();
  static final _id_getFlingAnimationBaseTime = _class.instanceMethodId(
    r'getFlingAnimationBaseTime',
    r'()J',
  );

  static final _getFlingAnimationBaseTime = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public long getFlingAnimationBaseTime()`
  int getFlingAnimationBaseTime() {
    return _getFlingAnimationBaseTime(reference.pointer,
            _id_getFlingAnimationBaseTime as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_getFlingThreshold = _class.instanceMethodId(
    r'getFlingThreshold',
    r'()J',
  );

  static final _getFlingThreshold = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public long getFlingThreshold()`
  int getFlingThreshold() {
    return _getFlingThreshold(
            reference.pointer, _id_getFlingThreshold as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_setFlingAnimationBaseTime = _class.instanceMethodId(
    r'setFlingAnimationBaseTime',
    r'(J)V',
  );

  static final _setFlingAnimationBaseTime = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setFlingAnimationBaseTime(long j)`
  void setFlingAnimationBaseTime(
    int j,
  ) {
    _setFlingAnimationBaseTime(reference.pointer,
            _id_setFlingAnimationBaseTime as jni$_.JMethodIDPtr, j)
        .check();
  }

  static final _id_setFlingThreshold = _class.instanceMethodId(
    r'setFlingThreshold',
    r'(J)V',
  );

  static final _setFlingThreshold = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setFlingThreshold(long j)`
  void setFlingThreshold(
    int j,
  ) {
    _setFlingThreshold(
            reference.pointer, _id_setFlingThreshold as jni$_.JMethodIDPtr, j)
        .check();
  }

  static final _id_setCompassEnabled = _class.instanceMethodId(
    r'setCompassEnabled',
    r'(Z)V',
  );

  static final _setCompassEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setCompassEnabled(boolean z)`
  void setCompassEnabled(
    bool z,
  ) {
    _setCompassEnabled(reference.pointer,
            _id_setCompassEnabled as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isCompassEnabled = _class.instanceMethodId(
    r'isCompassEnabled',
    r'()Z',
  );

  static final _isCompassEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isCompassEnabled()`
  bool isCompassEnabled() {
    return _isCompassEnabled(
            reference.pointer, _id_isCompassEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setCompassGravity = _class.instanceMethodId(
    r'setCompassGravity',
    r'(I)V',
  );

  static final _setCompassGravity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setCompassGravity(int i)`
  void setCompassGravity(
    int i,
  ) {
    _setCompassGravity(
            reference.pointer, _id_setCompassGravity as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_setCompassFadeFacingNorth = _class.instanceMethodId(
    r'setCompassFadeFacingNorth',
    r'(Z)V',
  );

  static final _setCompassFadeFacingNorth = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setCompassFadeFacingNorth(boolean z)`
  void setCompassFadeFacingNorth(
    bool z,
  ) {
    _setCompassFadeFacingNorth(reference.pointer,
            _id_setCompassFadeFacingNorth as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setCompassImage = _class.instanceMethodId(
    r'setCompassImage',
    r'(Landroid/graphics/drawable/Drawable;)V',
  );

  static final _setCompassImage = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setCompassImage(android.graphics.drawable.Drawable drawable)`
  void setCompassImage(
    jni$_.JObject drawable,
  ) {
    final _$drawable = drawable.reference;
    _setCompassImage(reference.pointer,
            _id_setCompassImage as jni$_.JMethodIDPtr, _$drawable.pointer)
        .check();
  }

  static final _id_isCompassFadeWhenFacingNorth = _class.instanceMethodId(
    r'isCompassFadeWhenFacingNorth',
    r'()Z',
  );

  static final _isCompassFadeWhenFacingNorth =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isCompassFadeWhenFacingNorth()`
  bool isCompassFadeWhenFacingNorth() {
    return _isCompassFadeWhenFacingNorth(reference.pointer,
            _id_isCompassFadeWhenFacingNorth as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getCompassGravity = _class.instanceMethodId(
    r'getCompassGravity',
    r'()I',
  );

  static final _getCompassGravity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getCompassGravity()`
  int getCompassGravity() {
    return _getCompassGravity(
            reference.pointer, _id_getCompassGravity as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_setCompassMargins = _class.instanceMethodId(
    r'setCompassMargins',
    r'(IIII)V',
  );

  static final _setCompassMargins = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, int, int, int)>();

  /// from: `public void setCompassMargins(int i, int i1, int i2, int i3)`
  void setCompassMargins(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _setCompassMargins(reference.pointer,
            _id_setCompassMargins as jni$_.JMethodIDPtr, i, i1, i2, i3)
        .check();
  }

  static final _id_getCompassMarginLeft = _class.instanceMethodId(
    r'getCompassMarginLeft',
    r'()I',
  );

  static final _getCompassMarginLeft = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getCompassMarginLeft()`
  int getCompassMarginLeft() {
    return _getCompassMarginLeft(
            reference.pointer, _id_getCompassMarginLeft as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getCompassMarginTop = _class.instanceMethodId(
    r'getCompassMarginTop',
    r'()I',
  );

  static final _getCompassMarginTop = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getCompassMarginTop()`
  int getCompassMarginTop() {
    return _getCompassMarginTop(
            reference.pointer, _id_getCompassMarginTop as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getCompassMarginRight = _class.instanceMethodId(
    r'getCompassMarginRight',
    r'()I',
  );

  static final _getCompassMarginRight = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getCompassMarginRight()`
  int getCompassMarginRight() {
    return _getCompassMarginRight(
            reference.pointer, _id_getCompassMarginRight as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getCompassMarginBottom = _class.instanceMethodId(
    r'getCompassMarginBottom',
    r'()I',
  );

  static final _getCompassMarginBottom = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getCompassMarginBottom()`
  int getCompassMarginBottom() {
    return _getCompassMarginBottom(
            reference.pointer, _id_getCompassMarginBottom as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getCompassImage = _class.instanceMethodId(
    r'getCompassImage',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _getCompassImage = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.drawable.Drawable getCompassImage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCompassImage() {
    return _getCompassImage(
            reference.pointer, _id_getCompassImage as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setLogoEnabled = _class.instanceMethodId(
    r'setLogoEnabled',
    r'(Z)V',
  );

  static final _setLogoEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setLogoEnabled(boolean z)`
  void setLogoEnabled(
    bool z,
  ) {
    _setLogoEnabled(reference.pointer, _id_setLogoEnabled as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_isLogoEnabled = _class.instanceMethodId(
    r'isLogoEnabled',
    r'()Z',
  );

  static final _isLogoEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isLogoEnabled()`
  bool isLogoEnabled() {
    return _isLogoEnabled(
            reference.pointer, _id_isLogoEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setLogoGravity = _class.instanceMethodId(
    r'setLogoGravity',
    r'(I)V',
  );

  static final _setLogoGravity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setLogoGravity(int i)`
  void setLogoGravity(
    int i,
  ) {
    _setLogoGravity(
            reference.pointer, _id_setLogoGravity as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getLogoGravity = _class.instanceMethodId(
    r'getLogoGravity',
    r'()I',
  );

  static final _getLogoGravity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getLogoGravity()`
  int getLogoGravity() {
    return _getLogoGravity(
            reference.pointer, _id_getLogoGravity as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_setLogoMargins = _class.instanceMethodId(
    r'setLogoMargins',
    r'(IIII)V',
  );

  static final _setLogoMargins = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, int, int, int)>();

  /// from: `public void setLogoMargins(int i, int i1, int i2, int i3)`
  void setLogoMargins(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _setLogoMargins(reference.pointer, _id_setLogoMargins as jni$_.JMethodIDPtr,
            i, i1, i2, i3)
        .check();
  }

  static final _id_getLogoMarginLeft = _class.instanceMethodId(
    r'getLogoMarginLeft',
    r'()I',
  );

  static final _getLogoMarginLeft = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getLogoMarginLeft()`
  int getLogoMarginLeft() {
    return _getLogoMarginLeft(
            reference.pointer, _id_getLogoMarginLeft as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getLogoMarginTop = _class.instanceMethodId(
    r'getLogoMarginTop',
    r'()I',
  );

  static final _getLogoMarginTop = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getLogoMarginTop()`
  int getLogoMarginTop() {
    return _getLogoMarginTop(
            reference.pointer, _id_getLogoMarginTop as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getLogoMarginRight = _class.instanceMethodId(
    r'getLogoMarginRight',
    r'()I',
  );

  static final _getLogoMarginRight = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getLogoMarginRight()`
  int getLogoMarginRight() {
    return _getLogoMarginRight(
            reference.pointer, _id_getLogoMarginRight as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getLogoMarginBottom = _class.instanceMethodId(
    r'getLogoMarginBottom',
    r'()I',
  );

  static final _getLogoMarginBottom = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getLogoMarginBottom()`
  int getLogoMarginBottom() {
    return _getLogoMarginBottom(
            reference.pointer, _id_getLogoMarginBottom as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_setAttributionEnabled = _class.instanceMethodId(
    r'setAttributionEnabled',
    r'(Z)V',
  );

  static final _setAttributionEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setAttributionEnabled(boolean z)`
  void setAttributionEnabled(
    bool z,
  ) {
    _setAttributionEnabled(reference.pointer,
            _id_setAttributionEnabled as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isAttributionEnabled = _class.instanceMethodId(
    r'isAttributionEnabled',
    r'()Z',
  );

  static final _isAttributionEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isAttributionEnabled()`
  bool isAttributionEnabled() {
    return _isAttributionEnabled(
            reference.pointer, _id_isAttributionEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setAttributionDialogManager = _class.instanceMethodId(
    r'setAttributionDialogManager',
    r'(Lorg/maplibre/android/maps/AttributionDialogManager;)V',
  );

  static final _setAttributionDialogManager =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setAttributionDialogManager(org.maplibre.android.maps.AttributionDialogManager attributionDialogManager)`
  void setAttributionDialogManager(
    attributiondialogmanager$_.AttributionDialogManager
        attributionDialogManager,
  ) {
    final _$attributionDialogManager = attributionDialogManager.reference;
    _setAttributionDialogManager(
            reference.pointer,
            _id_setAttributionDialogManager as jni$_.JMethodIDPtr,
            _$attributionDialogManager.pointer)
        .check();
  }

  static final _id_getAttributionDialogManager = _class.instanceMethodId(
    r'getAttributionDialogManager',
    r'()Lorg/maplibre/android/maps/AttributionDialogManager;',
  );

  static final _getAttributionDialogManager =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public org.maplibre.android.maps.AttributionDialogManager getAttributionDialogManager()`
  /// The returned object must be released after use, by calling the [release] method.
  attributiondialogmanager$_.AttributionDialogManager?
      getAttributionDialogManager() {
    return _getAttributionDialogManager(reference.pointer,
            _id_getAttributionDialogManager as jni$_.JMethodIDPtr)
        .object<attributiondialogmanager$_.AttributionDialogManager?>(
            const attributiondialogmanager$_
                .$AttributionDialogManager$NullableType());
  }

  static final _id_setAttributionGravity = _class.instanceMethodId(
    r'setAttributionGravity',
    r'(I)V',
  );

  static final _setAttributionGravity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setAttributionGravity(int i)`
  void setAttributionGravity(
    int i,
  ) {
    _setAttributionGravity(reference.pointer,
            _id_setAttributionGravity as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getAttributionGravity = _class.instanceMethodId(
    r'getAttributionGravity',
    r'()I',
  );

  static final _getAttributionGravity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getAttributionGravity()`
  int getAttributionGravity() {
    return _getAttributionGravity(
            reference.pointer, _id_getAttributionGravity as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_setAttributionMargins = _class.instanceMethodId(
    r'setAttributionMargins',
    r'(IIII)V',
  );

  static final _setAttributionMargins = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, int, int, int)>();

  /// from: `public void setAttributionMargins(int i, int i1, int i2, int i3)`
  void setAttributionMargins(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _setAttributionMargins(reference.pointer,
            _id_setAttributionMargins as jni$_.JMethodIDPtr, i, i1, i2, i3)
        .check();
  }

  static final _id_setAttributionTintColor = _class.instanceMethodId(
    r'setAttributionTintColor',
    r'(I)V',
  );

  static final _setAttributionTintColor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setAttributionTintColor(int i)`
  void setAttributionTintColor(
    int i,
  ) {
    _setAttributionTintColor(reference.pointer,
            _id_setAttributionTintColor as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getAttributionMarginLeft = _class.instanceMethodId(
    r'getAttributionMarginLeft',
    r'()I',
  );

  static final _getAttributionMarginLeft = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getAttributionMarginLeft()`
  int getAttributionMarginLeft() {
    return _getAttributionMarginLeft(reference.pointer,
            _id_getAttributionMarginLeft as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getAttributionMarginTop = _class.instanceMethodId(
    r'getAttributionMarginTop',
    r'()I',
  );

  static final _getAttributionMarginTop = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getAttributionMarginTop()`
  int getAttributionMarginTop() {
    return _getAttributionMarginTop(reference.pointer,
            _id_getAttributionMarginTop as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getAttributionMarginRight = _class.instanceMethodId(
    r'getAttributionMarginRight',
    r'()I',
  );

  static final _getAttributionMarginRight = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getAttributionMarginRight()`
  int getAttributionMarginRight() {
    return _getAttributionMarginRight(reference.pointer,
            _id_getAttributionMarginRight as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getAttributionMarginBottom = _class.instanceMethodId(
    r'getAttributionMarginBottom',
    r'()I',
  );

  static final _getAttributionMarginBottom =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public int getAttributionMarginBottom()`
  int getAttributionMarginBottom() {
    return _getAttributionMarginBottom(reference.pointer,
            _id_getAttributionMarginBottom as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_setRotateGesturesEnabled = _class.instanceMethodId(
    r'setRotateGesturesEnabled',
    r'(Z)V',
  );

  static final _setRotateGesturesEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setRotateGesturesEnabled(boolean z)`
  void setRotateGesturesEnabled(
    bool z,
  ) {
    _setRotateGesturesEnabled(reference.pointer,
            _id_setRotateGesturesEnabled as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isRotateGesturesEnabled = _class.instanceMethodId(
    r'isRotateGesturesEnabled',
    r'()Z',
  );

  static final _isRotateGesturesEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isRotateGesturesEnabled()`
  bool isRotateGesturesEnabled() {
    return _isRotateGesturesEnabled(reference.pointer,
            _id_isRotateGesturesEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setTiltGesturesEnabled = _class.instanceMethodId(
    r'setTiltGesturesEnabled',
    r'(Z)V',
  );

  static final _setTiltGesturesEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTiltGesturesEnabled(boolean z)`
  void setTiltGesturesEnabled(
    bool z,
  ) {
    _setTiltGesturesEnabled(reference.pointer,
            _id_setTiltGesturesEnabled as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isTiltGesturesEnabled = _class.instanceMethodId(
    r'isTiltGesturesEnabled',
    r'()Z',
  );

  static final _isTiltGesturesEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isTiltGesturesEnabled()`
  bool isTiltGesturesEnabled() {
    return _isTiltGesturesEnabled(
            reference.pointer, _id_isTiltGesturesEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setZoomGesturesEnabled = _class.instanceMethodId(
    r'setZoomGesturesEnabled',
    r'(Z)V',
  );

  static final _setZoomGesturesEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setZoomGesturesEnabled(boolean z)`
  void setZoomGesturesEnabled(
    bool z,
  ) {
    _setZoomGesturesEnabled(reference.pointer,
            _id_setZoomGesturesEnabled as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isZoomGesturesEnabled = _class.instanceMethodId(
    r'isZoomGesturesEnabled',
    r'()Z',
  );

  static final _isZoomGesturesEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isZoomGesturesEnabled()`
  bool isZoomGesturesEnabled() {
    return _isZoomGesturesEnabled(
            reference.pointer, _id_isZoomGesturesEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setDoubleTapGesturesEnabled = _class.instanceMethodId(
    r'setDoubleTapGesturesEnabled',
    r'(Z)V',
  );

  static final _setDoubleTapGesturesEnabled =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setDoubleTapGesturesEnabled(boolean z)`
  void setDoubleTapGesturesEnabled(
    bool z,
  ) {
    _setDoubleTapGesturesEnabled(reference.pointer,
            _id_setDoubleTapGesturesEnabled as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isDoubleTapGesturesEnabled = _class.instanceMethodId(
    r'isDoubleTapGesturesEnabled',
    r'()Z',
  );

  static final _isDoubleTapGesturesEnabled =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isDoubleTapGesturesEnabled()`
  bool isDoubleTapGesturesEnabled() {
    return _isDoubleTapGesturesEnabled(reference.pointer,
            _id_isDoubleTapGesturesEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isQuickZoomGesturesEnabled = _class.instanceMethodId(
    r'isQuickZoomGesturesEnabled',
    r'()Z',
  );

  static final _isQuickZoomGesturesEnabled =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isQuickZoomGesturesEnabled()`
  bool isQuickZoomGesturesEnabled() {
    return _isQuickZoomGesturesEnabled(reference.pointer,
            _id_isQuickZoomGesturesEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setQuickZoomGesturesEnabled = _class.instanceMethodId(
    r'setQuickZoomGesturesEnabled',
    r'(Z)V',
  );

  static final _setQuickZoomGesturesEnabled =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setQuickZoomGesturesEnabled(boolean z)`
  void setQuickZoomGesturesEnabled(
    bool z,
  ) {
    _setQuickZoomGesturesEnabled(reference.pointer,
            _id_setQuickZoomGesturesEnabled as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getZoomRate = _class.instanceMethodId(
    r'getZoomRate',
    r'()F',
  );

  static final _getZoomRate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public float getZoomRate()`
  double getZoomRate() {
    return _getZoomRate(
            reference.pointer, _id_getZoomRate as jni$_.JMethodIDPtr)
        .float;
  }

  static final _id_setZoomRate = _class.instanceMethodId(
    r'setZoomRate',
    r'(F)V',
  );

  static final _setZoomRate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Double,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `public void setZoomRate(float f)`
  void setZoomRate(
    double f,
  ) {
    _setZoomRate(reference.pointer, _id_setZoomRate as jni$_.JMethodIDPtr, f)
        .check();
  }

  static final _id_isDeselectMarkersOnTap = _class.instanceMethodId(
    r'isDeselectMarkersOnTap',
    r'()Z',
  );

  static final _isDeselectMarkersOnTap = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isDeselectMarkersOnTap()`
  bool isDeselectMarkersOnTap() {
    return _isDeselectMarkersOnTap(
            reference.pointer, _id_isDeselectMarkersOnTap as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setDeselectMarkersOnTap = _class.instanceMethodId(
    r'setDeselectMarkersOnTap',
    r'(Z)V',
  );

  static final _setDeselectMarkersOnTap = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setDeselectMarkersOnTap(boolean z)`
  void setDeselectMarkersOnTap(
    bool z,
  ) {
    _setDeselectMarkersOnTap(reference.pointer,
            _id_setDeselectMarkersOnTap as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setScrollGesturesEnabled = _class.instanceMethodId(
    r'setScrollGesturesEnabled',
    r'(Z)V',
  );

  static final _setScrollGesturesEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setScrollGesturesEnabled(boolean z)`
  void setScrollGesturesEnabled(
    bool z,
  ) {
    _setScrollGesturesEnabled(reference.pointer,
            _id_setScrollGesturesEnabled as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isScrollGesturesEnabled = _class.instanceMethodId(
    r'isScrollGesturesEnabled',
    r'()Z',
  );

  static final _isScrollGesturesEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isScrollGesturesEnabled()`
  bool isScrollGesturesEnabled() {
    return _isScrollGesturesEnabled(reference.pointer,
            _id_isScrollGesturesEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setHorizontalScrollGesturesEnabled = _class.instanceMethodId(
    r'setHorizontalScrollGesturesEnabled',
    r'(Z)V',
  );

  static final _setHorizontalScrollGesturesEnabled =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setHorizontalScrollGesturesEnabled(boolean z)`
  void setHorizontalScrollGesturesEnabled(
    bool z,
  ) {
    _setHorizontalScrollGesturesEnabled(
            reference.pointer,
            _id_setHorizontalScrollGesturesEnabled as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_isHorizontalScrollGesturesEnabled = _class.instanceMethodId(
    r'isHorizontalScrollGesturesEnabled',
    r'()Z',
  );

  static final _isHorizontalScrollGesturesEnabled =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isHorizontalScrollGesturesEnabled()`
  bool isHorizontalScrollGesturesEnabled() {
    return _isHorizontalScrollGesturesEnabled(reference.pointer,
            _id_isHorizontalScrollGesturesEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isScaleVelocityAnimationEnabled = _class.instanceMethodId(
    r'isScaleVelocityAnimationEnabled',
    r'()Z',
  );

  static final _isScaleVelocityAnimationEnabled =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isScaleVelocityAnimationEnabled()`
  bool isScaleVelocityAnimationEnabled() {
    return _isScaleVelocityAnimationEnabled(reference.pointer,
            _id_isScaleVelocityAnimationEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setScaleVelocityAnimationEnabled = _class.instanceMethodId(
    r'setScaleVelocityAnimationEnabled',
    r'(Z)V',
  );

  static final _setScaleVelocityAnimationEnabled =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setScaleVelocityAnimationEnabled(boolean z)`
  void setScaleVelocityAnimationEnabled(
    bool z,
  ) {
    _setScaleVelocityAnimationEnabled(
            reference.pointer,
            _id_setScaleVelocityAnimationEnabled as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_isRotateVelocityAnimationEnabled = _class.instanceMethodId(
    r'isRotateVelocityAnimationEnabled',
    r'()Z',
  );

  static final _isRotateVelocityAnimationEnabled =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isRotateVelocityAnimationEnabled()`
  bool isRotateVelocityAnimationEnabled() {
    return _isRotateVelocityAnimationEnabled(reference.pointer,
            _id_isRotateVelocityAnimationEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setRotateVelocityAnimationEnabled = _class.instanceMethodId(
    r'setRotateVelocityAnimationEnabled',
    r'(Z)V',
  );

  static final _setRotateVelocityAnimationEnabled =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setRotateVelocityAnimationEnabled(boolean z)`
  void setRotateVelocityAnimationEnabled(
    bool z,
  ) {
    _setRotateVelocityAnimationEnabled(
            reference.pointer,
            _id_setRotateVelocityAnimationEnabled as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_isFlingVelocityAnimationEnabled = _class.instanceMethodId(
    r'isFlingVelocityAnimationEnabled',
    r'()Z',
  );

  static final _isFlingVelocityAnimationEnabled =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isFlingVelocityAnimationEnabled()`
  bool isFlingVelocityAnimationEnabled() {
    return _isFlingVelocityAnimationEnabled(reference.pointer,
            _id_isFlingVelocityAnimationEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setFlingVelocityAnimationEnabled = _class.instanceMethodId(
    r'setFlingVelocityAnimationEnabled',
    r'(Z)V',
  );

  static final _setFlingVelocityAnimationEnabled =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setFlingVelocityAnimationEnabled(boolean z)`
  void setFlingVelocityAnimationEnabled(
    bool z,
  ) {
    _setFlingVelocityAnimationEnabled(
            reference.pointer,
            _id_setFlingVelocityAnimationEnabled as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_setAllVelocityAnimationsEnabled = _class.instanceMethodId(
    r'setAllVelocityAnimationsEnabled',
    r'(Z)V',
  );

  static final _setAllVelocityAnimationsEnabled =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setAllVelocityAnimationsEnabled(boolean z)`
  void setAllVelocityAnimationsEnabled(
    bool z,
  ) {
    _setAllVelocityAnimationsEnabled(
            reference.pointer,
            _id_setAllVelocityAnimationsEnabled as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_isIncreaseRotateThresholdWhenScaling =
      _class.instanceMethodId(
    r'isIncreaseRotateThresholdWhenScaling',
    r'()Z',
  );

  static final _isIncreaseRotateThresholdWhenScaling =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isIncreaseRotateThresholdWhenScaling()`
  bool isIncreaseRotateThresholdWhenScaling() {
    return _isIncreaseRotateThresholdWhenScaling(reference.pointer,
            _id_isIncreaseRotateThresholdWhenScaling as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setIncreaseRotateThresholdWhenScaling =
      _class.instanceMethodId(
    r'setIncreaseRotateThresholdWhenScaling',
    r'(Z)V',
  );

  static final _setIncreaseRotateThresholdWhenScaling =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setIncreaseRotateThresholdWhenScaling(boolean z)`
  void setIncreaseRotateThresholdWhenScaling(
    bool z,
  ) {
    _setIncreaseRotateThresholdWhenScaling(
            reference.pointer,
            _id_setIncreaseRotateThresholdWhenScaling as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_isDisableRotateWhenScaling = _class.instanceMethodId(
    r'isDisableRotateWhenScaling',
    r'()Z',
  );

  static final _isDisableRotateWhenScaling =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isDisableRotateWhenScaling()`
  bool isDisableRotateWhenScaling() {
    return _isDisableRotateWhenScaling(reference.pointer,
            _id_isDisableRotateWhenScaling as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setDisableRotateWhenScaling = _class.instanceMethodId(
    r'setDisableRotateWhenScaling',
    r'(Z)V',
  );

  static final _setDisableRotateWhenScaling =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setDisableRotateWhenScaling(boolean z)`
  void setDisableRotateWhenScaling(
    bool z,
  ) {
    _setDisableRotateWhenScaling(reference.pointer,
            _id_setDisableRotateWhenScaling as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isIncreaseScaleThresholdWhenRotating =
      _class.instanceMethodId(
    r'isIncreaseScaleThresholdWhenRotating',
    r'()Z',
  );

  static final _isIncreaseScaleThresholdWhenRotating =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isIncreaseScaleThresholdWhenRotating()`
  bool isIncreaseScaleThresholdWhenRotating() {
    return _isIncreaseScaleThresholdWhenRotating(reference.pointer,
            _id_isIncreaseScaleThresholdWhenRotating as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setIncreaseScaleThresholdWhenRotating =
      _class.instanceMethodId(
    r'setIncreaseScaleThresholdWhenRotating',
    r'(Z)V',
  );

  static final _setIncreaseScaleThresholdWhenRotating =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setIncreaseScaleThresholdWhenRotating(boolean z)`
  void setIncreaseScaleThresholdWhenRotating(
    bool z,
  ) {
    _setIncreaseScaleThresholdWhenRotating(
            reference.pointer,
            _id_setIncreaseScaleThresholdWhenRotating as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_setAllGesturesEnabled = _class.instanceMethodId(
    r'setAllGesturesEnabled',
    r'(Z)V',
  );

  static final _setAllGesturesEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setAllGesturesEnabled(boolean z)`
  void setAllGesturesEnabled(
    bool z,
  ) {
    _setAllGesturesEnabled(reference.pointer,
            _id_setAllGesturesEnabled as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_areAllGesturesEnabled = _class.instanceMethodId(
    r'areAllGesturesEnabled',
    r'()Z',
  );

  static final _areAllGesturesEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean areAllGesturesEnabled()`
  bool areAllGesturesEnabled() {
    return _areAllGesturesEnabled(
            reference.pointer, _id_areAllGesturesEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setFocalPoint = _class.instanceMethodId(
    r'setFocalPoint',
    r'(Landroid/graphics/PointF;)V',
  );

  static final _setFocalPoint = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setFocalPoint(android.graphics.PointF pointF)`
  void setFocalPoint(
    pointf$_.PointF? pointF,
  ) {
    final _$pointF = pointF?.reference ?? jni$_.jNullReference;
    _setFocalPoint(reference.pointer, _id_setFocalPoint as jni$_.JMethodIDPtr,
            _$pointF.pointer)
        .check();
  }

  static final _id_getFocalPoint = _class.instanceMethodId(
    r'getFocalPoint',
    r'()Landroid/graphics/PointF;',
  );

  static final _getFocalPoint = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.PointF getFocalPoint()`
  /// The returned object must be released after use, by calling the [release] method.
  pointf$_.PointF? getFocalPoint() {
    return _getFocalPoint(
            reference.pointer, _id_getFocalPoint as jni$_.JMethodIDPtr)
        .object<pointf$_.PointF?>(const pointf$_.$PointF$NullableType());
  }

  static final _id_getHeight = _class.instanceMethodId(
    r'getHeight',
    r'()F',
  );

  static final _getHeight = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public float getHeight()`
  double getHeight() {
    return _getHeight(reference.pointer, _id_getHeight as jni$_.JMethodIDPtr)
        .float;
  }

  static final _id_getWidth = _class.instanceMethodId(
    r'getWidth',
    r'()F',
  );

  static final _getWidth = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public float getWidth()`
  double getWidth() {
    return _getWidth(reference.pointer, _id_getWidth as jni$_.JMethodIDPtr)
        .float;
  }

  static final _id_invalidate = _class.instanceMethodId(
    r'invalidate',
    r'()V',
  );

  static final _invalidate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void invalidate()`
  void invalidate() {
    _invalidate(reference.pointer, _id_invalidate as jni$_.JMethodIDPtr)
        .check();
  }
}

final class $UiSettings$NullableType extends jni$_.JObjType<UiSettings?> {
  @jni$_.internal
  const $UiSettings$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/maps/UiSettings;';

  @jni$_.internal
  @core$_.override
  UiSettings? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : UiSettings.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<UiSettings?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($UiSettings$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($UiSettings$NullableType) &&
        other is $UiSettings$NullableType;
  }
}

final class $UiSettings$Type extends jni$_.JObjType<UiSettings> {
  @jni$_.internal
  const $UiSettings$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/maps/UiSettings;';

  @jni$_.internal
  @core$_.override
  UiSettings fromReference(jni$_.JReference reference) =>
      UiSettings.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<UiSettings?> get nullableType =>
      const $UiSettings$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($UiSettings$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($UiSettings$Type) && other is $UiSettings$Type;
  }
}
