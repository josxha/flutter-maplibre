// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'MapLibreMap.dart' as maplibremap$_;

import 'MapLibreMapOptions.dart' as maplibremapoptions$_;

import 'MapView.dart' as mapview$_;

import 'OnMapReadyCallback.dart' as onmapreadycallback$_;

/// from: `org.maplibre.android.maps.MapFragment$OnMapViewReadyCallback`
class MapFragment$OnMapViewReadyCallback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MapFragment$OnMapViewReadyCallback> $type;

  @jni$_.internal
  MapFragment$OnMapViewReadyCallback.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/maps/MapFragment$OnMapViewReadyCallback',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $MapFragment$OnMapViewReadyCallback$NullableType();
  static const type = $MapFragment$OnMapViewReadyCallback$Type();
  static final _id_onMapViewReady = _class.instanceMethodId(
    r'onMapViewReady',
    r'(Lorg/maplibre/android/maps/MapView;)V',
  );

  static final _onMapViewReady =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void onMapViewReady(org.maplibre.android.maps.MapView mapView)`
  void onMapViewReady(mapview$_.MapView? mapView) {
    final _$mapView = mapView?.reference ?? jni$_.jNullReference;
    _onMapViewReady(
      reference.pointer,
      _id_onMapViewReady as jni$_.JMethodIDPtr,
      _$mapView.pointer,
    ).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $MapFragment$OnMapViewReadyCallback> _$impls =
      {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onMapViewReady(Lorg/maplibre/android/maps/MapView;)V') {
        _$impls[$p]!.onMapViewReady(
          $a![0]?.as(const mapview$_.$MapView$Type(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $MapFragment$OnMapViewReadyCallback $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapFragment$OnMapViewReadyCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onMapViewReady$async)
          r'onMapViewReady(Lorg/maplibre/android/maps/MapView;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapFragment$OnMapViewReadyCallback.implement(
    $MapFragment$OnMapViewReadyCallback $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return MapFragment$OnMapViewReadyCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapFragment$OnMapViewReadyCallback {
  factory $MapFragment$OnMapViewReadyCallback({
    required void Function(mapview$_.MapView? mapView) onMapViewReady,
    bool onMapViewReady$async,
  }) = _$MapFragment$OnMapViewReadyCallback;

  void onMapViewReady(mapview$_.MapView? mapView);
  bool get onMapViewReady$async => false;
}

final class _$MapFragment$OnMapViewReadyCallback
    with $MapFragment$OnMapViewReadyCallback {
  _$MapFragment$OnMapViewReadyCallback({
    required void Function(mapview$_.MapView? mapView) onMapViewReady,
    this.onMapViewReady$async = false,
  }) : _onMapViewReady = onMapViewReady;

  final void Function(mapview$_.MapView? mapView) _onMapViewReady;
  final bool onMapViewReady$async;

  void onMapViewReady(mapview$_.MapView? mapView) {
    return _onMapViewReady(mapView);
  }
}

final class $MapFragment$OnMapViewReadyCallback$NullableType
    extends jni$_.JObjType<MapFragment$OnMapViewReadyCallback?> {
  @jni$_.internal
  const $MapFragment$OnMapViewReadyCallback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapFragment$OnMapViewReadyCallback;';

  @jni$_.internal
  @core$_.override
  MapFragment$OnMapViewReadyCallback? fromReference(
    jni$_.JReference reference,
  ) =>
      reference.isNull
          ? null
          : MapFragment$OnMapViewReadyCallback.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MapFragment$OnMapViewReadyCallback?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($MapFragment$OnMapViewReadyCallback$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MapFragment$OnMapViewReadyCallback$NullableType) &&
        other is $MapFragment$OnMapViewReadyCallback$NullableType;
  }
}

final class $MapFragment$OnMapViewReadyCallback$Type
    extends jni$_.JObjType<MapFragment$OnMapViewReadyCallback> {
  @jni$_.internal
  const $MapFragment$OnMapViewReadyCallback$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapFragment$OnMapViewReadyCallback;';

  @jni$_.internal
  @core$_.override
  MapFragment$OnMapViewReadyCallback fromReference(
    jni$_.JReference reference,
  ) => MapFragment$OnMapViewReadyCallback.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MapFragment$OnMapViewReadyCallback?> get nullableType =>
      const $MapFragment$OnMapViewReadyCallback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MapFragment$OnMapViewReadyCallback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapFragment$OnMapViewReadyCallback$Type) &&
        other is $MapFragment$OnMapViewReadyCallback$Type;
  }
}

/// from: `org.maplibre.android.maps.MapFragment`
class MapFragment extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MapFragment> $type;

  @jni$_.internal
  MapFragment.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/maps/MapFragment',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MapFragment$NullableType();
  static const type = $MapFragment$Type();
  static final _id_new$ = _class.constructorId(r'()V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapFragment() {
    return MapFragment.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_newInstance = _class.staticMethodId(
    r'newInstance',
    r'()Lorg/maplibre/android/maps/MapFragment;',
  );

  static final _newInstance =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `static public org.maplibre.android.maps.MapFragment newInstance()`
  /// The returned object must be released after use, by calling the [release] method.
  static MapFragment? newInstance() {
    return _newInstance(
      _class.reference.pointer,
      _id_newInstance as jni$_.JMethodIDPtr,
    ).object<MapFragment?>(const $MapFragment$NullableType());
  }

  static final _id_newInstance$1 = _class.staticMethodId(
    r'newInstance',
    r'(Lorg/maplibre/android/maps/MapLibreMapOptions;)Lorg/maplibre/android/maps/MapFragment;',
  );

  static final _newInstance$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public org.maplibre.android.maps.MapFragment newInstance(org.maplibre.android.maps.MapLibreMapOptions mapLibreMapOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  static MapFragment newInstance$1(
    maplibremapoptions$_.MapLibreMapOptions? mapLibreMapOptions,
  ) {
    final _$mapLibreMapOptions =
        mapLibreMapOptions?.reference ?? jni$_.jNullReference;
    return _newInstance$1(
      _class.reference.pointer,
      _id_newInstance$1 as jni$_.JMethodIDPtr,
      _$mapLibreMapOptions.pointer,
    ).object<MapFragment>(const $MapFragment$Type());
  }

  static final _id_onInflate = _class.instanceMethodId(
    r'onInflate',
    r'(Landroid/content/Context;Landroid/util/AttributeSet;Landroid/os/Bundle;)V',
  );

  static final _onInflate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onInflate(android.content.Context context, android.util.AttributeSet attributeSet, android.os.Bundle bundle)`
  void onInflate(
    jni$_.JObject context,
    jni$_.JObject? attributeSet,
    jni$_.JObject? bundle,
  ) {
    final _$context = context.reference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _onInflate(
      reference.pointer,
      _id_onInflate as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$attributeSet.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_onAttach = _class.instanceMethodId(
    r'onAttach',
    r'(Landroid/content/Context;)V',
  );

  static final _onAttach =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onAttach(android.content.Context context)`
  void onAttach(jni$_.JObject? context) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    _onAttach(
      reference.pointer,
      _id_onAttach as jni$_.JMethodIDPtr,
      _$context.pointer,
    ).check();
  }

  static final _id_onCreateView = _class.instanceMethodId(
    r'onCreateView',
    r'(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;',
  );

  static final _onCreateView =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.view.View onCreateView(android.view.LayoutInflater layoutInflater, android.view.ViewGroup viewGroup, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreateView(
    jni$_.JObject layoutInflater,
    jni$_.JObject? viewGroup,
    jni$_.JObject? bundle,
  ) {
    final _$layoutInflater = layoutInflater.reference;
    final _$viewGroup = viewGroup?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _onCreateView(
      reference.pointer,
      _id_onCreateView as jni$_.JMethodIDPtr,
      _$layoutInflater.pointer,
      _$viewGroup.pointer,
      _$bundle.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onViewCreated = _class.instanceMethodId(
    r'onViewCreated',
    r'(Landroid/view/View;Landroid/os/Bundle;)V',
  );

  static final _onViewCreated =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onViewCreated(android.view.View view, android.os.Bundle bundle)`
  void onViewCreated(jni$_.JObject? view, jni$_.JObject? bundle) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _onViewCreated(
      reference.pointer,
      _id_onViewCreated as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_onMapReady = _class.instanceMethodId(
    r'onMapReady',
    r'(Lorg/maplibre/android/maps/MapLibreMap;)V',
  );

  static final _onMapReady =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onMapReady(org.maplibre.android.maps.MapLibreMap mapLibreMap)`
  void onMapReady(maplibremap$_.MapLibreMap mapLibreMap) {
    final _$mapLibreMap = mapLibreMap.reference;
    _onMapReady(
      reference.pointer,
      _id_onMapReady as jni$_.JMethodIDPtr,
      _$mapLibreMap.pointer,
    ).check();
  }

  static final _id_onStart = _class.instanceMethodId(r'onStart', r'()V');

  static final _onStart =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onStart()`
  void onStart() {
    _onStart(reference.pointer, _id_onStart as jni$_.JMethodIDPtr).check();
  }

  static final _id_onResume = _class.instanceMethodId(r'onResume', r'()V');

  static final _onResume =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onResume()`
  void onResume() {
    _onResume(reference.pointer, _id_onResume as jni$_.JMethodIDPtr).check();
  }

  static final _id_onPause = _class.instanceMethodId(r'onPause', r'()V');

  static final _onPause =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onPause()`
  void onPause() {
    _onPause(reference.pointer, _id_onPause as jni$_.JMethodIDPtr).check();
  }

  static final _id_onSaveInstanceState = _class.instanceMethodId(
    r'onSaveInstanceState',
    r'(Landroid/os/Bundle;)V',
  );

  static final _onSaveInstanceState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onSaveInstanceState(android.os.Bundle bundle)`
  void onSaveInstanceState(jni$_.JObject bundle) {
    final _$bundle = bundle.reference;
    _onSaveInstanceState(
      reference.pointer,
      _id_onSaveInstanceState as jni$_.JMethodIDPtr,
      _$bundle.pointer,
    ).check();
  }

  static final _id_onStop = _class.instanceMethodId(r'onStop', r'()V');

  static final _onStop =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onStop()`
  void onStop() {
    _onStop(reference.pointer, _id_onStop as jni$_.JMethodIDPtr).check();
  }

  static final _id_onLowMemory = _class.instanceMethodId(
    r'onLowMemory',
    r'()V',
  );

  static final _onLowMemory =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onLowMemory()`
  void onLowMemory() {
    _onLowMemory(
      reference.pointer,
      _id_onLowMemory as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_onDestroyView = _class.instanceMethodId(
    r'onDestroyView',
    r'()V',
  );

  static final _onDestroyView =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onDestroyView()`
  void onDestroyView() {
    _onDestroyView(
      reference.pointer,
      _id_onDestroyView as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_onDestroy = _class.instanceMethodId(r'onDestroy', r'()V');

  static final _onDestroy =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onDestroy()`
  void onDestroy() {
    _onDestroy(reference.pointer, _id_onDestroy as jni$_.JMethodIDPtr).check();
  }

  static final _id_getMapAsync = _class.instanceMethodId(
    r'getMapAsync',
    r'(Lorg/maplibre/android/maps/OnMapReadyCallback;)V',
  );

  static final _getMapAsync =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void getMapAsync(org.maplibre.android.maps.OnMapReadyCallback onMapReadyCallback)`
  void getMapAsync(onmapreadycallback$_.OnMapReadyCallback onMapReadyCallback) {
    final _$onMapReadyCallback = onMapReadyCallback.reference;
    _getMapAsync(
      reference.pointer,
      _id_getMapAsync as jni$_.JMethodIDPtr,
      _$onMapReadyCallback.pointer,
    ).check();
  }
}

final class $MapFragment$NullableType extends jni$_.JObjType<MapFragment?> {
  @jni$_.internal
  const $MapFragment$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/maps/MapFragment;';

  @jni$_.internal
  @core$_.override
  MapFragment? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : MapFragment.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MapFragment?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MapFragment$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapFragment$NullableType) &&
        other is $MapFragment$NullableType;
  }
}

final class $MapFragment$Type extends jni$_.JObjType<MapFragment> {
  @jni$_.internal
  const $MapFragment$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/maps/MapFragment;';

  @jni$_.internal
  @core$_.override
  MapFragment fromReference(jni$_.JReference reference) =>
      MapFragment.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MapFragment?> get nullableType =>
      const $MapFragment$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MapFragment$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapFragment$Type) &&
        other is $MapFragment$Type;
  }
}
