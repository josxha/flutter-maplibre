// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'LatLng.dart' as latlng$_;

import 'LatLngSpan.dart' as latlngspan$_;

/// from: `org.maplibre.android.geometry.LatLngBounds$Builder`
class LatLngBounds$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<LatLngBounds$Builder> $type;

  @jni$_.internal
  LatLngBounds$Builder.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/geometry/LatLngBounds$Builder',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $LatLngBounds$Builder$NullableType();
  static const type = $LatLngBounds$Builder$Type();
  static final _id_new$ = _class.constructorId(r'()V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory LatLngBounds$Builder() {
    return LatLngBounds$Builder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds build()`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<LatLngBounds>(const $LatLngBounds$Type());
  }

  static final _id_includes = _class.instanceMethodId(
    r'includes',
    r'(Ljava/util/List;)Lorg/maplibre/android/geometry/LatLngBounds$Builder;',
  );

  static final _includes =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds$Builder includes(java.util.List list)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds$Builder includes(jni$_.JList<latlng$_.LatLng> list) {
    final _$list = list.reference;
    return _includes(
      reference.pointer,
      _id_includes as jni$_.JMethodIDPtr,
      _$list.pointer,
    ).object<LatLngBounds$Builder>(const $LatLngBounds$Builder$Type());
  }

  static final _id_include = _class.instanceMethodId(
    r'include',
    r'(Lorg/maplibre/android/geometry/LatLng;)Lorg/maplibre/android/geometry/LatLngBounds$Builder;',
  );

  static final _include =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds$Builder include(org.maplibre.android.geometry.LatLng latLng)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds$Builder include(latlng$_.LatLng latLng) {
    final _$latLng = latLng.reference;
    return _include(
      reference.pointer,
      _id_include as jni$_.JMethodIDPtr,
      _$latLng.pointer,
    ).object<LatLngBounds$Builder>(const $LatLngBounds$Builder$Type());
  }
}

final class $LatLngBounds$Builder$NullableType
    extends jni$_.JObjType<LatLngBounds$Builder?> {
  @jni$_.internal
  const $LatLngBounds$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/geometry/LatLngBounds$Builder;';

  @jni$_.internal
  @core$_.override
  LatLngBounds$Builder? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : LatLngBounds$Builder.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LatLngBounds$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($LatLngBounds$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LatLngBounds$Builder$NullableType) &&
        other is $LatLngBounds$Builder$NullableType;
  }
}

final class $LatLngBounds$Builder$Type
    extends jni$_.JObjType<LatLngBounds$Builder> {
  @jni$_.internal
  const $LatLngBounds$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/geometry/LatLngBounds$Builder;';

  @jni$_.internal
  @core$_.override
  LatLngBounds$Builder fromReference(jni$_.JReference reference) =>
      LatLngBounds$Builder.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LatLngBounds$Builder?> get nullableType =>
      const $LatLngBounds$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($LatLngBounds$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LatLngBounds$Builder$Type) &&
        other is $LatLngBounds$Builder$Type;
  }
}

/// from: `org.maplibre.android.geometry.LatLngBounds$Companion`
class LatLngBounds$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<LatLngBounds$Companion> $type;

  @jni$_.internal
  LatLngBounds$Companion.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/geometry/LatLngBounds$Companion',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $LatLngBounds$Companion$NullableType();
  static const type = $LatLngBounds$Companion$Type();
  static final _id_world = _class.instanceMethodId(
    r'world',
    r'()Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _world =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds world()`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds world() {
    return _world(
      reference.pointer,
      _id_world as jni$_.JMethodIDPtr,
    ).object<LatLngBounds>(const $LatLngBounds$Type());
  }

  static final _id_fromLatLngs = _class.instanceMethodId(
    r'fromLatLngs',
    r'(Ljava/util/List;)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _fromLatLngs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds fromLatLngs(java.util.List list)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds fromLatLngs(jni$_.JList<latlng$_.LatLng> list) {
    final _$list = list.reference;
    return _fromLatLngs(
      reference.pointer,
      _id_fromLatLngs as jni$_.JMethodIDPtr,
      _$list.pointer,
    ).object<LatLngBounds>(const $LatLngBounds$Type());
  }

  static final _id_from = _class.instanceMethodId(
    r'from',
    r'(DDDD)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _from =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Double, jni$_.Double, jni$_.Double, jni$_.Double)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
              double,
              double,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds from(double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds from(double d, double d1, double d2, double d3) {
    return _from(
      reference.pointer,
      _id_from as jni$_.JMethodIDPtr,
      d,
      d1,
      d2,
      d3,
    ).object<LatLngBounds>(const $LatLngBounds$Type());
  }

  static final _id_from$1 = _class.instanceMethodId(
    r'from',
    r'(III)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _from$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              int,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds from(int i, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds from$1(int i, int i1, int i2) {
    return _from$1(
      reference.pointer,
      _id_from$1 as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
    ).object<LatLngBounds>(const $LatLngBounds$Type());
  }

  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory LatLngBounds$Companion(jni$_.JObject? defaultConstructorMarker) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return LatLngBounds$Companion.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$defaultConstructorMarker.pointer,
      ).reference,
    );
  }
}

final class $LatLngBounds$Companion$NullableType
    extends jni$_.JObjType<LatLngBounds$Companion?> {
  @jni$_.internal
  const $LatLngBounds$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/geometry/LatLngBounds$Companion;';

  @jni$_.internal
  @core$_.override
  LatLngBounds$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : LatLngBounds$Companion.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LatLngBounds$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($LatLngBounds$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LatLngBounds$Companion$NullableType) &&
        other is $LatLngBounds$Companion$NullableType;
  }
}

final class $LatLngBounds$Companion$Type
    extends jni$_.JObjType<LatLngBounds$Companion> {
  @jni$_.internal
  const $LatLngBounds$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/geometry/LatLngBounds$Companion;';

  @jni$_.internal
  @core$_.override
  LatLngBounds$Companion fromReference(jni$_.JReference reference) =>
      LatLngBounds$Companion.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LatLngBounds$Companion?> get nullableType =>
      const $LatLngBounds$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($LatLngBounds$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LatLngBounds$Companion$Type) &&
        other is $LatLngBounds$Companion$Type;
  }
}

/// from: `org.maplibre.android.geometry.LatLngBounds`
class LatLngBounds extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<LatLngBounds> $type;

  @jni$_.internal
  LatLngBounds.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/geometry/LatLngBounds',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $LatLngBounds$NullableType();
  static const type = $LatLngBounds$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lorg/maplibre/android/geometry/LatLngBounds$Companion;',
  );

  /// from: `static public final org.maplibre.android.geometry.LatLngBounds$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static LatLngBounds$Companion get Companion =>
      _id_Companion.get(_class, const $LatLngBounds$Companion$Type());

  static final _id_latitudeNorth = _class.instanceFieldId(
    r'latitudeNorth',
    r'D',
  );

  /// from: `public final double latitudeNorth`
  double get latitudeNorth =>
      _id_latitudeNorth.get(this, const jni$_.jdoubleType());

  static final _id_longitudeEast = _class.instanceFieldId(
    r'longitudeEast',
    r'D',
  );

  /// from: `public final double longitudeEast`
  double get longitudeEast =>
      _id_longitudeEast.get(this, const jni$_.jdoubleType());

  static final _id_latitudeSouth = _class.instanceFieldId(
    r'latitudeSouth',
    r'D',
  );

  /// from: `public final double latitudeSouth`
  double get latitudeSouth =>
      _id_latitudeSouth.get(this, const jni$_.jdoubleType());

  static final _id_longitudeWest = _class.instanceFieldId(
    r'longitudeWest',
    r'D',
  );

  /// from: `public final double longitudeWest`
  double get longitudeWest =>
      _id_longitudeWest.get(this, const jni$_.jdoubleType());

  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectType());

  static final _id_new$ = _class.constructorId(r'(DDDD)V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Double, jni$_.Double, jni$_.Double, jni$_.Double)
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
              double,
              double,
            )
          >();

  /// from: `public void <init>(double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  factory LatLngBounds(double d, double d1, double d2, double d3) {
    return LatLngBounds.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        d,
        d1,
        d2,
        d3,
      ).reference,
    );
  }

  static final _id_getCenter = _class.instanceMethodId(
    r'getCenter',
    r'()Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _getCenter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLng getCenter()`
  /// The returned object must be released after use, by calling the [release] method.
  latlng$_.LatLng getCenter() {
    return _getCenter(
      reference.pointer,
      _id_getCenter as jni$_.JMethodIDPtr,
    ).object<latlng$_.LatLng>(const latlng$_.$LatLng$Type());
  }

  static final _id_getLatNorth = _class.instanceMethodId(
    r'getLatNorth',
    r'()D',
  );

  static final _getLatNorth =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallDoubleMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final double getLatNorth()`
  double getLatNorth() {
    return _getLatNorth(
      reference.pointer,
      _id_getLatNorth as jni$_.JMethodIDPtr,
    ).doubleFloat;
  }

  static final _id_getLatSouth = _class.instanceMethodId(
    r'getLatSouth',
    r'()D',
  );

  static final _getLatSouth =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallDoubleMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final double getLatSouth()`
  double getLatSouth() {
    return _getLatSouth(
      reference.pointer,
      _id_getLatSouth as jni$_.JMethodIDPtr,
    ).doubleFloat;
  }

  static final _id_getLonEast = _class.instanceMethodId(r'getLonEast', r'()D');

  static final _getLonEast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallDoubleMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final double getLonEast()`
  double getLonEast() {
    return _getLonEast(
      reference.pointer,
      _id_getLonEast as jni$_.JMethodIDPtr,
    ).doubleFloat;
  }

  static final _id_getLonWest = _class.instanceMethodId(r'getLonWest', r'()D');

  static final _getLonWest =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallDoubleMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final double getLonWest()`
  double getLonWest() {
    return _getLonWest(
      reference.pointer,
      _id_getLonWest as jni$_.JMethodIDPtr,
    ).doubleFloat;
  }

  static final _id_getSouthWest = _class.instanceMethodId(
    r'getSouthWest',
    r'()Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _getSouthWest =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLng getSouthWest()`
  /// The returned object must be released after use, by calling the [release] method.
  latlng$_.LatLng getSouthWest() {
    return _getSouthWest(
      reference.pointer,
      _id_getSouthWest as jni$_.JMethodIDPtr,
    ).object<latlng$_.LatLng>(const latlng$_.$LatLng$Type());
  }

  static final _id_getNorthEast = _class.instanceMethodId(
    r'getNorthEast',
    r'()Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _getNorthEast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLng getNorthEast()`
  /// The returned object must be released after use, by calling the [release] method.
  latlng$_.LatLng getNorthEast() {
    return _getNorthEast(
      reference.pointer,
      _id_getNorthEast as jni$_.JMethodIDPtr,
    ).object<latlng$_.LatLng>(const latlng$_.$LatLng$Type());
  }

  static final _id_getSouthEast = _class.instanceMethodId(
    r'getSouthEast',
    r'()Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _getSouthEast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLng getSouthEast()`
  /// The returned object must be released after use, by calling the [release] method.
  latlng$_.LatLng getSouthEast() {
    return _getSouthEast(
      reference.pointer,
      _id_getSouthEast as jni$_.JMethodIDPtr,
    ).object<latlng$_.LatLng>(const latlng$_.$LatLng$Type());
  }

  static final _id_getNorthWest = _class.instanceMethodId(
    r'getNorthWest',
    r'()Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _getNorthWest =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLng getNorthWest()`
  /// The returned object must be released after use, by calling the [release] method.
  latlng$_.LatLng getNorthWest() {
    return _getNorthWest(
      reference.pointer,
      _id_getNorthWest as jni$_.JMethodIDPtr,
    ).object<latlng$_.LatLng>(const latlng$_.$LatLng$Type());
  }

  static final _id_getSpan = _class.instanceMethodId(
    r'getSpan',
    r'()Lorg/maplibre/android/geometry/LatLngSpan;',
  );

  static final _getSpan =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLngSpan getSpan()`
  /// The returned object must be released after use, by calling the [release] method.
  latlngspan$_.LatLngSpan getSpan() {
    return _getSpan(
      reference.pointer,
      _id_getSpan as jni$_.JMethodIDPtr,
    ).object<latlngspan$_.LatLngSpan>(const latlngspan$_.$LatLngSpan$Type());
  }

  static final _id_getLatitudeSpan = _class.instanceMethodId(
    r'getLatitudeSpan',
    r'()D',
  );

  static final _getLatitudeSpan =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallDoubleMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final double getLatitudeSpan()`
  double getLatitudeSpan() {
    return _getLatitudeSpan(
      reference.pointer,
      _id_getLatitudeSpan as jni$_.JMethodIDPtr,
    ).doubleFloat;
  }

  static final _id_getLongitudeSpan = _class.instanceMethodId(
    r'getLongitudeSpan',
    r'()D',
  );

  static final _getLongitudeSpan =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallDoubleMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final double getLongitudeSpan()`
  double getLongitudeSpan() {
    return _getLongitudeSpan(
      reference.pointer,
      _id_getLongitudeSpan as jni$_.JMethodIDPtr,
    ).doubleFloat;
  }

  static final _id_isEmptySpan = _class.instanceMethodId(
    r'isEmptySpan',
    r'()Z',
  );

  static final _isEmptySpan =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final boolean isEmptySpan()`
  bool isEmptySpan() {
    return _isEmptySpan(
      reference.pointer,
      _id_isEmptySpan as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString toString$1() {
    return _toString$1(
      reference.pointer,
      _id_toString$1 as jni$_.JMethodIDPtr,
    ).object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_toLatLngs = _class.instanceMethodId(
    r'toLatLngs',
    r'()[Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _toLatLngs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLng[] toLatLngs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<latlng$_.LatLng> toLatLngs() {
    return _toLatLngs(
      reference.pointer,
      _id_toLatLngs as jni$_.JMethodIDPtr,
    ).object<jni$_.JArray<latlng$_.LatLng>>(
      const jni$_.JArrayType<latlng$_.LatLng>(latlng$_.$LatLng$Type()),
    );
  }

  static final _id_include = _class.instanceMethodId(
    r'include',
    r'(Lorg/maplibre/android/geometry/LatLng;)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _include =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds include(org.maplibre.android.geometry.LatLng latLng)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds include(latlng$_.LatLng latLng) {
    final _$latLng = latLng.reference;
    return _include(
      reference.pointer,
      _id_include as jni$_.JMethodIDPtr,
      _$latLng.pointer,
    ).object<LatLngBounds>(const $LatLngBounds$Type());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(jni$_.JObject? object) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(
      reference.pointer,
      _id_equals as jni$_.JMethodIDPtr,
      _$object.pointer,
    ).boolean;
  }

  static final _id_contains = _class.instanceMethodId(
    r'contains',
    r'(Lorg/maplibre/android/geometry/LatLng;)Z',
  );

  static final _contains =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final boolean contains(org.maplibre.android.geometry.LatLng latLng)`
  bool contains(latlng$_.LatLng latLng) {
    final _$latLng = latLng.reference;
    return _contains(
      reference.pointer,
      _id_contains as jni$_.JMethodIDPtr,
      _$latLng.pointer,
    ).boolean;
  }

  static final _id_contains$1 = _class.instanceMethodId(
    r'contains',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;)Z',
  );

  static final _contains$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final boolean contains(org.maplibre.android.geometry.LatLngBounds latLngBounds)`
  bool contains$1(LatLngBounds latLngBounds) {
    final _$latLngBounds = latLngBounds.reference;
    return _contains$1(
      reference.pointer,
      _id_contains$1 as jni$_.JMethodIDPtr,
      _$latLngBounds.pointer,
    ).boolean;
  }

  static final _id_union = _class.instanceMethodId(
    r'union',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _union =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds union(org.maplibre.android.geometry.LatLngBounds latLngBounds)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds union(LatLngBounds latLngBounds) {
    final _$latLngBounds = latLngBounds.reference;
    return _union(
      reference.pointer,
      _id_union as jni$_.JMethodIDPtr,
      _$latLngBounds.pointer,
    ).object<LatLngBounds>(const $LatLngBounds$Type());
  }

  static final _id_union$1 = _class.instanceMethodId(
    r'union',
    r'(DDDD)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _union$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Double, jni$_.Double, jni$_.Double, jni$_.Double)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
              double,
              double,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds union(double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds union$1(double d, double d1, double d2, double d3) {
    return _union$1(
      reference.pointer,
      _id_union$1 as jni$_.JMethodIDPtr,
      d,
      d1,
      d2,
      d3,
    ).object<LatLngBounds>(const $LatLngBounds$Type());
  }

  static final _id_intersect = _class.instanceMethodId(
    r'intersect',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _intersect =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds intersect(org.maplibre.android.geometry.LatLngBounds latLngBounds)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds? intersect(LatLngBounds latLngBounds) {
    final _$latLngBounds = latLngBounds.reference;
    return _intersect(
      reference.pointer,
      _id_intersect as jni$_.JMethodIDPtr,
      _$latLngBounds.pointer,
    ).object<LatLngBounds?>(const $LatLngBounds$NullableType());
  }

  static final _id_intersect$1 = _class.instanceMethodId(
    r'intersect',
    r'(DDDD)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _intersect$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Double, jni$_.Double, jni$_.Double, jni$_.Double)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
              double,
              double,
            )
          >();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds intersect(double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds intersect$1(double d, double d1, double d2, double d3) {
    return _intersect$1(
      reference.pointer,
      _id_intersect$1 as jni$_.JMethodIDPtr,
      d,
      d1,
      d2,
      d3,
    ).object<LatLngBounds>(const $LatLngBounds$Type());
  }

  static final _id_hashCode$1 = _class.instanceMethodId(r'hashCode', r'()I');

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(
      reference.pointer,
      _id_hashCode$1 as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
      reference.pointer,
      _id_describeContents as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(jni$_.JObject parcel, int i) {
    final _$parcel = parcel.reference;
    _writeToParcel(
      reference.pointer,
      _id_writeToParcel as jni$_.JMethodIDPtr,
      _$parcel.pointer,
      i,
    ).check();
  }

  static final _id_world = _class.staticMethodId(
    r'world',
    r'()Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _world =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `static public final org.maplibre.android.geometry.LatLngBounds world()`
  /// The returned object must be released after use, by calling the [release] method.
  static LatLngBounds world() {
    return _world(
      _class.reference.pointer,
      _id_world as jni$_.JMethodIDPtr,
    ).object<LatLngBounds>(const $LatLngBounds$Type());
  }

  static final _id_from = _class.staticMethodId(
    r'from',
    r'(DDDD)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _from =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Double, jni$_.Double, jni$_.Double, jni$_.Double)
                >,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
              double,
              double,
            )
          >();

  /// from: `static public final org.maplibre.android.geometry.LatLngBounds from(double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  static LatLngBounds from(double d, double d1, double d2, double d3) {
    return _from(
      _class.reference.pointer,
      _id_from as jni$_.JMethodIDPtr,
      d,
      d1,
      d2,
      d3,
    ).object<LatLngBounds>(const $LatLngBounds$Type());
  }

  static final _id_from$1 = _class.staticMethodId(
    r'from',
    r'(III)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _from$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              int,
            )
          >();

  /// from: `static public final org.maplibre.android.geometry.LatLngBounds from(int i, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  static LatLngBounds from$1(int i, int i1, int i2) {
    return _from$1(
      _class.reference.pointer,
      _id_from$1 as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
    ).object<LatLngBounds>(const $LatLngBounds$Type());
  }
}

final class $LatLngBounds$NullableType extends jni$_.JObjType<LatLngBounds?> {
  @jni$_.internal
  const $LatLngBounds$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/geometry/LatLngBounds;';

  @jni$_.internal
  @core$_.override
  LatLngBounds? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : LatLngBounds.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LatLngBounds?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($LatLngBounds$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LatLngBounds$NullableType) &&
        other is $LatLngBounds$NullableType;
  }
}

final class $LatLngBounds$Type extends jni$_.JObjType<LatLngBounds> {
  @jni$_.internal
  const $LatLngBounds$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/geometry/LatLngBounds;';

  @jni$_.internal
  @core$_.override
  LatLngBounds fromReference(jni$_.JReference reference) =>
      LatLngBounds.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LatLngBounds?> get nullableType =>
      const $LatLngBounds$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($LatLngBounds$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LatLngBounds$Type) &&
        other is $LatLngBounds$Type;
  }
}
