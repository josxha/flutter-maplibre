// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `org.maplibre.android.maps.renderer.MapRendererScheduler`
class MapRendererScheduler extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MapRendererScheduler> $type;

  @jni$_.internal
  MapRendererScheduler.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/maps/renderer/MapRendererScheduler');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MapRendererScheduler$NullableType();
  static const type = $MapRendererScheduler$Type();
  static final _id_requestRender = _class.instanceMethodId(
    r'requestRender',
    r'()V',
  );

  static final _requestRender = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void requestRender()`
  void requestRender() {
    _requestRender(reference.pointer, _id_requestRender as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_queueEvent = _class.instanceMethodId(
    r'queueEvent',
    r'(Ljava/lang/Runnable;)V',
  );

  static final _queueEvent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void queueEvent(java.lang.Runnable runnable)`
  void queueEvent(
    jni$_.JObject? runnable,
  ) {
    final _$runnable = runnable?.reference ?? jni$_.jNullReference;
    _queueEvent(reference.pointer, _id_queueEvent as jni$_.JMethodIDPtr,
            _$runnable.pointer)
        .check();
  }

  static final _id_waitForEmpty = _class.instanceMethodId(
    r'waitForEmpty',
    r'()V',
  );

  static final _waitForEmpty = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void waitForEmpty()`
  void waitForEmpty() {
    _waitForEmpty(reference.pointer, _id_waitForEmpty as jni$_.JMethodIDPtr)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $MapRendererScheduler> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'requestRender()V') {
        _$impls[$p]!.requestRender();
        return jni$_.nullptr;
      }
      if ($d == r'queueEvent(Ljava/lang/Runnable;)V') {
        _$impls[$p]!.queueEvent(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'waitForEmpty()V') {
        _$impls[$p]!.waitForEmpty();
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $MapRendererScheduler $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.renderer.MapRendererScheduler',
      $p,
      _$invokePointer,
      [
        if ($impl.requestRender$async) r'requestRender()V',
        if ($impl.queueEvent$async) r'queueEvent(Ljava/lang/Runnable;)V',
        if ($impl.waitForEmpty$async) r'waitForEmpty()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapRendererScheduler.implement(
    $MapRendererScheduler $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return MapRendererScheduler.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapRendererScheduler {
  factory $MapRendererScheduler({
    required void Function() requestRender,
    bool requestRender$async,
    required void Function(jni$_.JObject? runnable) queueEvent,
    bool queueEvent$async,
    required void Function() waitForEmpty,
    bool waitForEmpty$async,
  }) = _$MapRendererScheduler;

  void requestRender();
  bool get requestRender$async => false;
  void queueEvent(jni$_.JObject? runnable);
  bool get queueEvent$async => false;
  void waitForEmpty();
  bool get waitForEmpty$async => false;
}

final class _$MapRendererScheduler with $MapRendererScheduler {
  _$MapRendererScheduler({
    required void Function() requestRender,
    this.requestRender$async = false,
    required void Function(jni$_.JObject? runnable) queueEvent,
    this.queueEvent$async = false,
    required void Function() waitForEmpty,
    this.waitForEmpty$async = false,
  })  : _requestRender = requestRender,
        _queueEvent = queueEvent,
        _waitForEmpty = waitForEmpty;

  final void Function() _requestRender;
  final bool requestRender$async;
  final void Function(jni$_.JObject? runnable) _queueEvent;
  final bool queueEvent$async;
  final void Function() _waitForEmpty;
  final bool waitForEmpty$async;

  void requestRender() {
    return _requestRender();
  }

  void queueEvent(jni$_.JObject? runnable) {
    return _queueEvent(runnable);
  }

  void waitForEmpty() {
    return _waitForEmpty();
  }
}

final class $MapRendererScheduler$NullableType
    extends jni$_.JObjType<MapRendererScheduler?> {
  @jni$_.internal
  const $MapRendererScheduler$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/maps/renderer/MapRendererScheduler;';

  @jni$_.internal
  @core$_.override
  MapRendererScheduler? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MapRendererScheduler.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MapRendererScheduler?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MapRendererScheduler$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapRendererScheduler$NullableType) &&
        other is $MapRendererScheduler$NullableType;
  }
}

final class $MapRendererScheduler$Type
    extends jni$_.JObjType<MapRendererScheduler> {
  @jni$_.internal
  const $MapRendererScheduler$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/maps/renderer/MapRendererScheduler;';

  @jni$_.internal
  @core$_.override
  MapRendererScheduler fromReference(jni$_.JReference reference) =>
      MapRendererScheduler.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MapRendererScheduler?> get nullableType =>
      const $MapRendererScheduler$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MapRendererScheduler$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapRendererScheduler$Type) &&
        other is $MapRendererScheduler$Type;
  }
}
