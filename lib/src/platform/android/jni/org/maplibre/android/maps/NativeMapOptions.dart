// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: type=lint

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'MapLibreMapOptions.dart' as maplibremapoptions$_;

/// from: `org.maplibre.android.maps.NativeMapOptions`
class NativeMapOptions extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<NativeMapOptions> $type;

  @jni$_.internal
  NativeMapOptions.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/maps/NativeMapOptions',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $NativeMapOptions$NullableType();
  static const type = $NativeMapOptions$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lorg/maplibre/android/maps/MapLibreMapOptions;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(org.maplibre.android.maps.MapLibreMapOptions mapLibreMapOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory NativeMapOptions(
    maplibremapoptions$_.MapLibreMapOptions? mapLibreMapOptions,
  ) {
    final _$mapLibreMapOptions =
        mapLibreMapOptions?.reference ?? jni$_.jNullReference;
    return NativeMapOptions.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$mapLibreMapOptions.pointer,
      ).reference,
    );
  }

  static final _id_new$1 = _class.constructorId(
    r'(FZ)V',
  );

  static final _new$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double, jni$_.Int32)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              int,
            )
          >();

  /// from: `public void <init>(float f, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  factory NativeMapOptions.new$1(
    double f,
    bool z,
  ) {
    return NativeMapOptions.fromReference(
      _new$1(
        _class.reference.pointer,
        _id_new$1 as jni$_.JMethodIDPtr,
        f,
        z ? 1 : 0,
      ).reference,
    );
  }

  static final _id_pixelRatio = _class.instanceMethodId(
    r'pixelRatio',
    r'()F',
  );

  static final _pixelRatio =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallFloatMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public float pixelRatio()`
  double pixelRatio() {
    return _pixelRatio(
      reference.pointer,
      _id_pixelRatio as jni$_.JMethodIDPtr,
    ).float;
  }

  static final _id_crossSourceCollisions = _class.instanceMethodId(
    r'crossSourceCollisions',
    r'()Z',
  );

  static final _crossSourceCollisions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean crossSourceCollisions()`
  bool crossSourceCollisions() {
    return _crossSourceCollisions(
      reference.pointer,
      _id_crossSourceCollisions as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_actionJournalEnabled = _class.instanceMethodId(
    r'actionJournalEnabled',
    r'()Z',
  );

  static final _actionJournalEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean actionJournalEnabled()`
  bool actionJournalEnabled() {
    return _actionJournalEnabled(
      reference.pointer,
      _id_actionJournalEnabled as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_actionJournalPath = _class.instanceMethodId(
    r'actionJournalPath',
    r'()Ljava/lang/String;',
  );

  static final _actionJournalPath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String actionJournalPath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? actionJournalPath() {
    return _actionJournalPath(
      reference.pointer,
      _id_actionJournalPath as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_actionJournalLogFileSize = _class.instanceMethodId(
    r'actionJournalLogFileSize',
    r'()J',
  );

  static final _actionJournalLogFileSize =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallLongMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public long actionJournalLogFileSize()`
  int actionJournalLogFileSize() {
    return _actionJournalLogFileSize(
      reference.pointer,
      _id_actionJournalLogFileSize as jni$_.JMethodIDPtr,
    ).long;
  }

  static final _id_actionJournalLogFileCount = _class.instanceMethodId(
    r'actionJournalLogFileCount',
    r'()J',
  );

  static final _actionJournalLogFileCount =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallLongMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public long actionJournalLogFileCount()`
  int actionJournalLogFileCount() {
    return _actionJournalLogFileCount(
      reference.pointer,
      _id_actionJournalLogFileCount as jni$_.JMethodIDPtr,
    ).long;
  }

  static final _id_actionJournalRenderingReportInterval = _class
      .instanceMethodId(
        r'actionJournalRenderingReportInterval',
        r'()I',
      );

  static final _actionJournalRenderingReportInterval =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int actionJournalRenderingReportInterval()`
  int actionJournalRenderingReportInterval() {
    return _actionJournalRenderingReportInterval(
      reference.pointer,
      _id_actionJournalRenderingReportInterval as jni$_.JMethodIDPtr,
    ).integer;
  }
}

final class $NativeMapOptions$NullableType
    extends jni$_.JObjType<NativeMapOptions?> {
  @jni$_.internal
  const $NativeMapOptions$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/maps/NativeMapOptions;';

  @jni$_.internal
  @core$_.override
  NativeMapOptions? fromReference(jni$_.JReference reference) =>
      reference.isNull
      ? null
      : NativeMapOptions.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<NativeMapOptions?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($NativeMapOptions$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($NativeMapOptions$NullableType) &&
        other is $NativeMapOptions$NullableType;
  }
}

final class $NativeMapOptions$Type extends jni$_.JObjType<NativeMapOptions> {
  @jni$_.internal
  const $NativeMapOptions$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/maps/NativeMapOptions;';

  @jni$_.internal
  @core$_.override
  NativeMapOptions fromReference(jni$_.JReference reference) =>
      NativeMapOptions.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<NativeMapOptions?> get nullableType =>
      const $NativeMapOptions$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($NativeMapOptions$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($NativeMapOptions$Type) &&
        other is $NativeMapOptions$Type;
  }
}
