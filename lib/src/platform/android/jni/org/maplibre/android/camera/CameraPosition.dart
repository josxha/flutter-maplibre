// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../geometry/LatLng.dart' as latlng$_;

import 'CameraUpdateFactory.dart' as cameraupdatefactory$_;

/// from: `org.maplibre.android.camera.CameraPosition$Builder`
class CameraPosition$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraPosition$Builder> $type;

  @jni$_.internal
  CameraPosition$Builder.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/camera/CameraPosition$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CameraPosition$Builder$NullableType();
  static const type = $CameraPosition$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition$Builder() {
    return CameraPosition$Builder.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Lorg/maplibre/android/camera/CameraPosition;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(org.maplibre.android.camera.CameraPosition cameraPosition)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition$Builder.new$1(
    CameraPosition? cameraPosition,
  ) {
    final _$cameraPosition = cameraPosition?.reference ?? jni$_.jNullReference;
    return CameraPosition$Builder.fromReference(_new$1(_class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr, _$cameraPosition.pointer)
        .reference);
  }

  static final _id_new$2 = _class.constructorId(
    r'(Landroid/content/res/TypedArray;)V',
  );

  static final _new$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.res.TypedArray typedArray)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition$Builder.new$2(
    jni$_.JObject? typedArray,
  ) {
    final _$typedArray = typedArray?.reference ?? jni$_.jNullReference;
    return CameraPosition$Builder.fromReference(_new$2(_class.reference.pointer,
            _id_new$2 as jni$_.JMethodIDPtr, _$typedArray.pointer)
        .reference);
  }

  static final _id_new$3 = _class.constructorId(
    r'(Lorg/maplibre/android/camera/CameraUpdateFactory$CameraPositionUpdate;)V',
  );

  static final _new$3 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(org.maplibre.android.camera.CameraUpdateFactory$CameraPositionUpdate cameraPositionUpdate)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition$Builder.new$3(
    cameraupdatefactory$_.CameraUpdateFactory$CameraPositionUpdate?
        cameraPositionUpdate,
  ) {
    final _$cameraPositionUpdate =
        cameraPositionUpdate?.reference ?? jni$_.jNullReference;
    return CameraPosition$Builder.fromReference(_new$3(_class.reference.pointer,
            _id_new$3 as jni$_.JMethodIDPtr, _$cameraPositionUpdate.pointer)
        .reference);
  }

  static final _id_new$4 = _class.constructorId(
    r'(Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate;)V',
  );

  static final _new$4 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate zoomUpdate)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition$Builder.new$4(
    cameraupdatefactory$_.CameraUpdateFactory$ZoomUpdate? zoomUpdate,
  ) {
    final _$zoomUpdate = zoomUpdate?.reference ?? jni$_.jNullReference;
    return CameraPosition$Builder.fromReference(_new$4(_class.reference.pointer,
            _id_new$4 as jni$_.JMethodIDPtr, _$zoomUpdate.pointer)
        .reference);
  }

  static final _id_bearing = _class.instanceMethodId(
    r'bearing',
    r'(D)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _bearing = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder bearing(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition$Builder bearing(
    double d,
  ) {
    return _bearing(reference.pointer, _id_bearing as jni$_.JMethodIDPtr, d)
        .object<CameraPosition$Builder>(const $CameraPosition$Builder$Type());
  }

  static final _id_target = _class.instanceMethodId(
    r'target',
    r'(Lorg/maplibre/android/geometry/LatLng;)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _target = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder target(org.maplibre.android.geometry.LatLng latLng)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition$Builder target(
    latlng$_.LatLng? latLng,
  ) {
    final _$latLng = latLng?.reference ?? jni$_.jNullReference;
    return _target(reference.pointer, _id_target as jni$_.JMethodIDPtr,
            _$latLng.pointer)
        .object<CameraPosition$Builder>(const $CameraPosition$Builder$Type());
  }

  static final _id_tilt = _class.instanceMethodId(
    r'tilt',
    r'(D)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _tilt = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder tilt(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition$Builder tilt(
    double d,
  ) {
    return _tilt(reference.pointer, _id_tilt as jni$_.JMethodIDPtr, d)
        .object<CameraPosition$Builder>(const $CameraPosition$Builder$Type());
  }

  static final _id_zoom = _class.instanceMethodId(
    r'zoom',
    r'(D)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _zoom = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder zoom(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition$Builder zoom(
    double d,
  ) {
    return _zoom(reference.pointer, _id_zoom as jni$_.JMethodIDPtr, d)
        .object<CameraPosition$Builder>(const $CameraPosition$Builder$Type());
  }

  static final _id_padding = _class.instanceMethodId(
    r'padding',
    r'([D)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _padding = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder padding(double[] ds)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition$Builder padding(
    jni$_.JDoubleArray? ds,
  ) {
    final _$ds = ds?.reference ?? jni$_.jNullReference;
    return _padding(
            reference.pointer, _id_padding as jni$_.JMethodIDPtr, _$ds.pointer)
        .object<CameraPosition$Builder>(const $CameraPosition$Builder$Type());
  }

  static final _id_padding$1 = _class.instanceMethodId(
    r'padding',
    r'(DDDD)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _padding$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Double,
                        jni$_.Double,
                        jni$_.Double,
                        jni$_.Double
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, double, double, double, double)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder padding(double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition$Builder padding$1(
    double d,
    double d1,
    double d2,
    double d3,
  ) {
    return _padding$1(reference.pointer, _id_padding$1 as jni$_.JMethodIDPtr, d,
            d1, d2, d3)
        .object<CameraPosition$Builder>(const $CameraPosition$Builder$Type());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Lorg/maplibre/android/camera/CameraPosition;',
  );

  static final _build = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.camera.CameraPosition build()`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition build() {
    return _build(reference.pointer, _id_build as jni$_.JMethodIDPtr)
        .object<CameraPosition>(const $CameraPosition$Type());
  }
}

final class $CameraPosition$Builder$NullableType
    extends jni$_.JObjType<CameraPosition$Builder?> {
  @jni$_.internal
  const $CameraPosition$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraPosition$Builder;';

  @jni$_.internal
  @core$_.override
  CameraPosition$Builder? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : CameraPosition$Builder.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraPosition$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraPosition$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraPosition$Builder$NullableType) &&
        other is $CameraPosition$Builder$NullableType;
  }
}

final class $CameraPosition$Builder$Type
    extends jni$_.JObjType<CameraPosition$Builder> {
  @jni$_.internal
  const $CameraPosition$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraPosition$Builder;';

  @jni$_.internal
  @core$_.override
  CameraPosition$Builder fromReference(jni$_.JReference reference) =>
      CameraPosition$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraPosition$Builder?> get nullableType =>
      const $CameraPosition$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraPosition$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraPosition$Builder$Type) &&
        other is $CameraPosition$Builder$Type;
  }
}

/// from: `org.maplibre.android.camera.CameraPosition$Companion`
class CameraPosition$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraPosition$Companion> $type;

  @jni$_.internal
  CameraPosition$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/camera/CameraPosition$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CameraPosition$Companion$NullableType();
  static const type = $CameraPosition$Companion$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return CameraPosition$Companion.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $CameraPosition$Companion$NullableType
    extends jni$_.JObjType<CameraPosition$Companion?> {
  @jni$_.internal
  const $CameraPosition$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraPosition$Companion;';

  @jni$_.internal
  @core$_.override
  CameraPosition$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : CameraPosition$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraPosition$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraPosition$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraPosition$Companion$NullableType) &&
        other is $CameraPosition$Companion$NullableType;
  }
}

final class $CameraPosition$Companion$Type
    extends jni$_.JObjType<CameraPosition$Companion> {
  @jni$_.internal
  const $CameraPosition$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraPosition$Companion;';

  @jni$_.internal
  @core$_.override
  CameraPosition$Companion fromReference(jni$_.JReference reference) =>
      CameraPosition$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraPosition$Companion?> get nullableType =>
      const $CameraPosition$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraPosition$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraPosition$Companion$Type) &&
        other is $CameraPosition$Companion$Type;
  }
}

/// from: `org.maplibre.android.camera.CameraPosition`
class CameraPosition extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CameraPosition> $type;

  @jni$_.internal
  CameraPosition.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'org/maplibre/android/camera/CameraPosition');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CameraPosition$NullableType();
  static const type = $CameraPosition$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lorg/maplibre/android/camera/CameraPosition$Companion;',
  );

  /// from: `static public final org.maplibre.android.camera.CameraPosition$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraPosition$Companion? get Companion =>
      _id_Companion.get(_class, const $CameraPosition$Companion$NullableType());

  static final _id_target = _class.instanceFieldId(
    r'target',
    r'Lorg/maplibre/android/geometry/LatLng;',
  );

  /// from: `public final org.maplibre.android.geometry.LatLng target`
  /// The returned object must be released after use, by calling the [release] method.
  latlng$_.LatLng? get target =>
      _id_target.get(this, const latlng$_.$LatLng$NullableType());

  static final _id_zoom = _class.instanceFieldId(
    r'zoom',
    r'D',
  );

  /// from: `public final double zoom`
  double get zoom => _id_zoom.get(this, const jni$_.jdoubleType());

  static final _id_tilt = _class.instanceFieldId(
    r'tilt',
    r'D',
  );

  /// from: `public final double tilt`
  double get tilt => _id_tilt.get(this, const jni$_.jdoubleType());

  static final _id_bearing = _class.instanceFieldId(
    r'bearing',
    r'D',
  );

  /// from: `public final double bearing`
  double get bearing => _id_bearing.get(this, const jni$_.jdoubleType());

  static final _id_padding = _class.instanceFieldId(
    r'padding',
    r'[D',
  );

  /// from: `public final double[] padding`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JDoubleArray? get padding =>
      _id_padding.get(this, const jni$_.JDoubleArrayNullableType());

  static final _id_DEFAULT = _class.staticFieldId(
    r'DEFAULT',
    r'Lorg/maplibre/android/camera/CameraPosition;',
  );

  /// from: `static public final org.maplibre.android.camera.CameraPosition DEFAULT`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraPosition? get DEFAULT =>
      _id_DEFAULT.get(_class, const $CameraPosition$NullableType());

  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  static final _id_new$ = _class.constructorId(
    r'(Lorg/maplibre/android/geometry/LatLng;DDD[D)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double,
                        jni$_.Double,
                        jni$_.Double,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              double,
              double,
              double,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(org.maplibre.android.geometry.LatLng latLng, double d, double d1, double d2, double[] ds)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition(
    latlng$_.LatLng? latLng,
    double d,
    double d1,
    double d2,
    jni$_.JDoubleArray? ds,
  ) {
    final _$latLng = latLng?.reference ?? jni$_.jNullReference;
    final _$ds = ds?.reference ?? jni$_.jNullReference;
    return CameraPosition.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$latLng.pointer,
            d,
            d1,
            d2,
            _$ds.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Lorg/maplibre/android/geometry/LatLng;DDD)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double,
                        jni$_.Double,
                        jni$_.Double
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              double,
              double,
              double)>();

  /// from: `public void <init>(org.maplibre.android.geometry.LatLng latLng, double d, double d1, double d2)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition.new$1(
    latlng$_.LatLng? latLng,
    double d,
    double d1,
    double d2,
  ) {
    final _$latLng = latLng?.reference ?? jni$_.jNullReference;
    return CameraPosition.fromReference(_new$1(_class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr, _$latLng.pointer, d, d1, d2)
        .reference);
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni$_.JObject parcel,
    int i,
  ) {
    final _$parcel = parcel.reference;
    _writeToParcel(reference.pointer, _id_writeToParcel as jni$_.JMethodIDPtr,
            _$parcel.pointer, i)
        .check();
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }
}

final class $CameraPosition$NullableType
    extends jni$_.JObjType<CameraPosition?> {
  @jni$_.internal
  const $CameraPosition$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/camera/CameraPosition;';

  @jni$_.internal
  @core$_.override
  CameraPosition? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : CameraPosition.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraPosition?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraPosition$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraPosition$NullableType) &&
        other is $CameraPosition$NullableType;
  }
}

final class $CameraPosition$Type extends jni$_.JObjType<CameraPosition> {
  @jni$_.internal
  const $CameraPosition$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/camera/CameraPosition;';

  @jni$_.internal
  @core$_.override
  CameraPosition fromReference(jni$_.JReference reference) =>
      CameraPosition.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CameraPosition?> get nullableType =>
      const $CameraPosition$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CameraPosition$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraPosition$Type) &&
        other is $CameraPosition$Type;
  }
}
