// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `org.maplibre.android.offline.OfflineRegionError$Companion`
class OfflineRegionError$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<OfflineRegionError$Companion> $type;

  @jni$_.internal
  OfflineRegionError$Companion.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/offline/OfflineRegionError$Companion',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $OfflineRegionError$Companion$NullableType();
  static const type = $OfflineRegionError$Companion$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory OfflineRegionError$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return OfflineRegionError$Companion.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$defaultConstructorMarker.pointer,
      ).reference,
    );
  }
}

final class $OfflineRegionError$Companion$NullableType
    extends jni$_.JObjType<OfflineRegionError$Companion?> {
  @jni$_.internal
  const $OfflineRegionError$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineRegionError$Companion;';

  @jni$_.internal
  @core$_.override
  OfflineRegionError$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : OfflineRegionError$Companion.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineRegionError$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($OfflineRegionError$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineRegionError$Companion$NullableType) &&
        other is $OfflineRegionError$Companion$NullableType;
  }
}

final class $OfflineRegionError$Companion$Type
    extends jni$_.JObjType<OfflineRegionError$Companion> {
  @jni$_.internal
  const $OfflineRegionError$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineRegionError$Companion;';

  @jni$_.internal
  @core$_.override
  OfflineRegionError$Companion fromReference(jni$_.JReference reference) =>
      OfflineRegionError$Companion.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineRegionError$Companion?> get nullableType =>
      const $OfflineRegionError$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($OfflineRegionError$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineRegionError$Companion$Type) &&
        other is $OfflineRegionError$Companion$Type;
  }
}

/// from: `org.maplibre.android.offline.OfflineRegionError$ErrorReason`
class OfflineRegionError$ErrorReason extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<OfflineRegionError$ErrorReason> $type;

  @jni$_.internal
  OfflineRegionError$ErrorReason.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/offline/OfflineRegionError$ErrorReason',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $OfflineRegionError$ErrorReason$NullableType();
  static const type = $OfflineRegionError$ErrorReason$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $OfflineRegionError$ErrorReason> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $OfflineRegionError$ErrorReason $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.offline.OfflineRegionError$ErrorReason',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory OfflineRegionError$ErrorReason.implement(
    $OfflineRegionError$ErrorReason $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return OfflineRegionError$ErrorReason.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $OfflineRegionError$ErrorReason {
  factory $OfflineRegionError$ErrorReason() = _$OfflineRegionError$ErrorReason;
}

final class _$OfflineRegionError$ErrorReason
    with $OfflineRegionError$ErrorReason {
  _$OfflineRegionError$ErrorReason();
}

final class $OfflineRegionError$ErrorReason$NullableType
    extends jni$_.JObjType<OfflineRegionError$ErrorReason?> {
  @jni$_.internal
  const $OfflineRegionError$ErrorReason$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineRegionError$ErrorReason;';

  @jni$_.internal
  @core$_.override
  OfflineRegionError$ErrorReason? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : OfflineRegionError$ErrorReason.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineRegionError$ErrorReason?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($OfflineRegionError$ErrorReason$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($OfflineRegionError$ErrorReason$NullableType) &&
        other is $OfflineRegionError$ErrorReason$NullableType;
  }
}

final class $OfflineRegionError$ErrorReason$Type
    extends jni$_.JObjType<OfflineRegionError$ErrorReason> {
  @jni$_.internal
  const $OfflineRegionError$ErrorReason$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineRegionError$ErrorReason;';

  @jni$_.internal
  @core$_.override
  OfflineRegionError$ErrorReason fromReference(jni$_.JReference reference) =>
      OfflineRegionError$ErrorReason.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineRegionError$ErrorReason?> get nullableType =>
      const $OfflineRegionError$ErrorReason$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($OfflineRegionError$ErrorReason$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineRegionError$ErrorReason$Type) &&
        other is $OfflineRegionError$ErrorReason$Type;
  }
}

/// from: `org.maplibre.android.offline.OfflineRegionError`
class OfflineRegionError extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<OfflineRegionError> $type;

  @jni$_.internal
  OfflineRegionError.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/offline/OfflineRegionError',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $OfflineRegionError$NullableType();
  static const type = $OfflineRegionError$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lorg/maplibre/android/offline/OfflineRegionError$Companion;',
  );

  /// from: `static public final org.maplibre.android.offline.OfflineRegionError$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static OfflineRegionError$Companion get Companion =>
      _id_Companion.get(_class, const $OfflineRegionError$Companion$Type());

  static final _id_REASON_SUCCESS = _class.staticFieldId(
    r'REASON_SUCCESS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REASON_SUCCESS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get REASON_SUCCESS =>
      _id_REASON_SUCCESS.get(_class, const jni$_.JStringType());

  static final _id_REASON_NOT_FOUND = _class.staticFieldId(
    r'REASON_NOT_FOUND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REASON_NOT_FOUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get REASON_NOT_FOUND =>
      _id_REASON_NOT_FOUND.get(_class, const jni$_.JStringType());

  static final _id_REASON_SERVER = _class.staticFieldId(
    r'REASON_SERVER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REASON_SERVER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get REASON_SERVER =>
      _id_REASON_SERVER.get(_class, const jni$_.JStringType());

  static final _id_REASON_CONNECTION = _class.staticFieldId(
    r'REASON_CONNECTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REASON_CONNECTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get REASON_CONNECTION =>
      _id_REASON_CONNECTION.get(_class, const jni$_.JStringType());

  static final _id_REASON_OTHER = _class.staticFieldId(
    r'REASON_OTHER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REASON_OTHER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get REASON_OTHER =>
      _id_REASON_OTHER.get(_class, const jni$_.JStringType());

  static final _id_getReason = _class.instanceMethodId(
    r'getReason',
    r'()Ljava/lang/String;',
  );

  static final _getReason =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final java.lang.String getReason()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getReason() {
    return _getReason(
      reference.pointer,
      _id_getReason as jni$_.JMethodIDPtr,
    ).object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_getMessage = _class.instanceMethodId(
    r'getMessage',
    r'()Ljava/lang/String;',
  );

  static final _getMessage =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final java.lang.String getMessage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getMessage() {
    return _getMessage(
      reference.pointer,
      _id_getMessage as jni$_.JMethodIDPtr,
    ).object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(jni$_.JObject? object) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(
      reference.pointer,
      _id_equals as jni$_.JMethodIDPtr,
      _$object.pointer,
    ).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(r'hashCode', r'()I');

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(
      reference.pointer,
      _id_hashCode$1 as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString toString$1() {
    return _toString$1(
      reference.pointer,
      _id_toString$1 as jni$_.JMethodIDPtr,
    ).object<jni$_.JString>(const jni$_.JStringType());
  }
}

final class $OfflineRegionError$NullableType
    extends jni$_.JObjType<OfflineRegionError?> {
  @jni$_.internal
  const $OfflineRegionError$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/offline/OfflineRegionError;';

  @jni$_.internal
  @core$_.override
  OfflineRegionError? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : OfflineRegionError.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineRegionError?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($OfflineRegionError$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineRegionError$NullableType) &&
        other is $OfflineRegionError$NullableType;
  }
}

final class $OfflineRegionError$Type
    extends jni$_.JObjType<OfflineRegionError> {
  @jni$_.internal
  const $OfflineRegionError$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/offline/OfflineRegionError;';

  @jni$_.internal
  @core$_.override
  OfflineRegionError fromReference(jni$_.JReference reference) =>
      OfflineRegionError.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OfflineRegionError?> get nullableType =>
      const $OfflineRegionError$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($OfflineRegionError$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineRegionError$Type) &&
        other is $OfflineRegionError$Type;
  }
}
