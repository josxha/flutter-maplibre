// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'LocationEngine.dart' as locationengine$_;

/// from: `org.maplibre.android.location.engine.LocationEngineDefault`
class LocationEngineDefault extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<LocationEngineDefault> $type;

  @jni$_.internal
  LocationEngineDefault.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/location/engine/LocationEngineDefault');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $LocationEngineDefault$NullableType();
  static const type = $LocationEngineDefault$Type();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Lorg/maplibre/android/location/engine/LocationEngineDefault;',
  );

  /// from: `static public final org.maplibre.android.location.engine.LocationEngineDefault INSTANCE`
  /// The returned object must be released after use, by calling the [release] method.
  static LocationEngineDefault get INSTANCE =>
      _id_INSTANCE.get(_class, const $LocationEngineDefault$Type());

  static final _id_getDefaultLocationEngine = _class.instanceMethodId(
    r'getDefaultLocationEngine',
    r'(Landroid/content/Context;)Lorg/maplibre/android/location/engine/LocationEngine;',
  );

  static final _getDefaultLocationEngine = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final org.maplibre.android.location.engine.LocationEngine getDefaultLocationEngine(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  locationengine$_.LocationEngine getDefaultLocationEngine(
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    return _getDefaultLocationEngine(
            reference.pointer,
            _id_getDefaultLocationEngine as jni$_.JMethodIDPtr,
            _$context.pointer)
        .object<locationengine$_.LocationEngine>(
            const locationengine$_.$LocationEngine$Type());
  }
}

final class $LocationEngineDefault$NullableType
    extends jni$_.JObjType<LocationEngineDefault?> {
  @jni$_.internal
  const $LocationEngineDefault$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/location/engine/LocationEngineDefault;';

  @jni$_.internal
  @core$_.override
  LocationEngineDefault? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : LocationEngineDefault.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LocationEngineDefault?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($LocationEngineDefault$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LocationEngineDefault$NullableType) &&
        other is $LocationEngineDefault$NullableType;
  }
}

final class $LocationEngineDefault$Type
    extends jni$_.JObjType<LocationEngineDefault> {
  @jni$_.internal
  const $LocationEngineDefault$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/location/engine/LocationEngineDefault;';

  @jni$_.internal
  @core$_.override
  LocationEngineDefault fromReference(jni$_.JReference reference) =>
      LocationEngineDefault.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LocationEngineDefault?> get nullableType =>
      const $LocationEngineDefault$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($LocationEngineDefault$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LocationEngineDefault$Type) &&
        other is $LocationEngineDefault$Type;
  }
}
