// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: type=lint

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `org.maplibre.android.maps.RenderingStats`
class RenderingStats extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<RenderingStats> $type;

  @jni$_.internal
  RenderingStats.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/maps/RenderingStats',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $RenderingStats$NullableType();
  static const type = $RenderingStats$Type();
  static final _id_encodingTime = _class.instanceFieldId(
    r'encodingTime',
    r'D',
  );

  /// from: `public double encodingTime`
  double get encodingTime =>
      _id_encodingTime.get(this, const jni$_.jdoubleType());

  /// from: `public double encodingTime`
  set encodingTime(double value) =>
      _id_encodingTime.set(this, const jni$_.jdoubleType(), value);

  static final _id_renderingTime = _class.instanceFieldId(
    r'renderingTime',
    r'D',
  );

  /// from: `public double renderingTime`
  double get renderingTime =>
      _id_renderingTime.get(this, const jni$_.jdoubleType());

  /// from: `public double renderingTime`
  set renderingTime(double value) =>
      _id_renderingTime.set(this, const jni$_.jdoubleType(), value);

  static final _id_numFrames = _class.instanceFieldId(
    r'numFrames',
    r'I',
  );

  /// from: `public int numFrames`
  int get numFrames => _id_numFrames.get(this, const jni$_.jintType());

  /// from: `public int numFrames`
  set numFrames(int value) =>
      _id_numFrames.set(this, const jni$_.jintType(), value);

  static final _id_numDrawCalls = _class.instanceFieldId(
    r'numDrawCalls',
    r'I',
  );

  /// from: `public int numDrawCalls`
  int get numDrawCalls => _id_numDrawCalls.get(this, const jni$_.jintType());

  /// from: `public int numDrawCalls`
  set numDrawCalls(int value) =>
      _id_numDrawCalls.set(this, const jni$_.jintType(), value);

  static final _id_totalDrawCalls = _class.instanceFieldId(
    r'totalDrawCalls',
    r'I',
  );

  /// from: `public int totalDrawCalls`
  int get totalDrawCalls =>
      _id_totalDrawCalls.get(this, const jni$_.jintType());

  /// from: `public int totalDrawCalls`
  set totalDrawCalls(int value) =>
      _id_totalDrawCalls.set(this, const jni$_.jintType(), value);

  static final _id_numCreatedTextures = _class.instanceFieldId(
    r'numCreatedTextures',
    r'I',
  );

  /// from: `public int numCreatedTextures`
  int get numCreatedTextures =>
      _id_numCreatedTextures.get(this, const jni$_.jintType());

  /// from: `public int numCreatedTextures`
  set numCreatedTextures(int value) =>
      _id_numCreatedTextures.set(this, const jni$_.jintType(), value);

  static final _id_numActiveTextures = _class.instanceFieldId(
    r'numActiveTextures',
    r'I',
  );

  /// from: `public int numActiveTextures`
  int get numActiveTextures =>
      _id_numActiveTextures.get(this, const jni$_.jintType());

  /// from: `public int numActiveTextures`
  set numActiveTextures(int value) =>
      _id_numActiveTextures.set(this, const jni$_.jintType(), value);

  static final _id_numTextureBindings = _class.instanceFieldId(
    r'numTextureBindings',
    r'I',
  );

  /// from: `public int numTextureBindings`
  int get numTextureBindings =>
      _id_numTextureBindings.get(this, const jni$_.jintType());

  /// from: `public int numTextureBindings`
  set numTextureBindings(int value) =>
      _id_numTextureBindings.set(this, const jni$_.jintType(), value);

  static final _id_numTextureUpdates = _class.instanceFieldId(
    r'numTextureUpdates',
    r'I',
  );

  /// from: `public int numTextureUpdates`
  int get numTextureUpdates =>
      _id_numTextureUpdates.get(this, const jni$_.jintType());

  /// from: `public int numTextureUpdates`
  set numTextureUpdates(int value) =>
      _id_numTextureUpdates.set(this, const jni$_.jintType(), value);

  static final _id_textureUpdateBytes = _class.instanceFieldId(
    r'textureUpdateBytes',
    r'J',
  );

  /// from: `public long textureUpdateBytes`
  int get textureUpdateBytes =>
      _id_textureUpdateBytes.get(this, const jni$_.jlongType());

  /// from: `public long textureUpdateBytes`
  set textureUpdateBytes(int value) =>
      _id_textureUpdateBytes.set(this, const jni$_.jlongType(), value);

  static final _id_totalBuffers = _class.instanceFieldId(
    r'totalBuffers',
    r'J',
  );

  /// from: `public long totalBuffers`
  int get totalBuffers => _id_totalBuffers.get(this, const jni$_.jlongType());

  /// from: `public long totalBuffers`
  set totalBuffers(int value) =>
      _id_totalBuffers.set(this, const jni$_.jlongType(), value);

  static final _id_totalBufferObjs = _class.instanceFieldId(
    r'totalBufferObjs',
    r'J',
  );

  /// from: `public long totalBufferObjs`
  int get totalBufferObjs =>
      _id_totalBufferObjs.get(this, const jni$_.jlongType());

  /// from: `public long totalBufferObjs`
  set totalBufferObjs(int value) =>
      _id_totalBufferObjs.set(this, const jni$_.jlongType(), value);

  static final _id_bufferUpdates = _class.instanceFieldId(
    r'bufferUpdates',
    r'J',
  );

  /// from: `public long bufferUpdates`
  int get bufferUpdates => _id_bufferUpdates.get(this, const jni$_.jlongType());

  /// from: `public long bufferUpdates`
  set bufferUpdates(int value) =>
      _id_bufferUpdates.set(this, const jni$_.jlongType(), value);

  static final _id_bufferObjUpdates = _class.instanceFieldId(
    r'bufferObjUpdates',
    r'J',
  );

  /// from: `public long bufferObjUpdates`
  int get bufferObjUpdates =>
      _id_bufferObjUpdates.get(this, const jni$_.jlongType());

  /// from: `public long bufferObjUpdates`
  set bufferObjUpdates(int value) =>
      _id_bufferObjUpdates.set(this, const jni$_.jlongType(), value);

  static final _id_bufferUpdateBytes = _class.instanceFieldId(
    r'bufferUpdateBytes',
    r'J',
  );

  /// from: `public long bufferUpdateBytes`
  int get bufferUpdateBytes =>
      _id_bufferUpdateBytes.get(this, const jni$_.jlongType());

  /// from: `public long bufferUpdateBytes`
  set bufferUpdateBytes(int value) =>
      _id_bufferUpdateBytes.set(this, const jni$_.jlongType(), value);

  static final _id_numBuffers = _class.instanceFieldId(
    r'numBuffers',
    r'I',
  );

  /// from: `public int numBuffers`
  int get numBuffers => _id_numBuffers.get(this, const jni$_.jintType());

  /// from: `public int numBuffers`
  set numBuffers(int value) =>
      _id_numBuffers.set(this, const jni$_.jintType(), value);

  static final _id_numFrameBuffers = _class.instanceFieldId(
    r'numFrameBuffers',
    r'I',
  );

  /// from: `public int numFrameBuffers`
  int get numFrameBuffers =>
      _id_numFrameBuffers.get(this, const jni$_.jintType());

  /// from: `public int numFrameBuffers`
  set numFrameBuffers(int value) =>
      _id_numFrameBuffers.set(this, const jni$_.jintType(), value);

  static final _id_numIndexBuffers = _class.instanceFieldId(
    r'numIndexBuffers',
    r'I',
  );

  /// from: `public int numIndexBuffers`
  int get numIndexBuffers =>
      _id_numIndexBuffers.get(this, const jni$_.jintType());

  /// from: `public int numIndexBuffers`
  set numIndexBuffers(int value) =>
      _id_numIndexBuffers.set(this, const jni$_.jintType(), value);

  static final _id_indexUpdateBytes = _class.instanceFieldId(
    r'indexUpdateBytes',
    r'J',
  );

  /// from: `public long indexUpdateBytes`
  int get indexUpdateBytes =>
      _id_indexUpdateBytes.get(this, const jni$_.jlongType());

  /// from: `public long indexUpdateBytes`
  set indexUpdateBytes(int value) =>
      _id_indexUpdateBytes.set(this, const jni$_.jlongType(), value);

  static final _id_numVertexBuffers = _class.instanceFieldId(
    r'numVertexBuffers',
    r'I',
  );

  /// from: `public int numVertexBuffers`
  int get numVertexBuffers =>
      _id_numVertexBuffers.get(this, const jni$_.jintType());

  /// from: `public int numVertexBuffers`
  set numVertexBuffers(int value) =>
      _id_numVertexBuffers.set(this, const jni$_.jintType(), value);

  static final _id_vertexUpdateBytes = _class.instanceFieldId(
    r'vertexUpdateBytes',
    r'J',
  );

  /// from: `public long vertexUpdateBytes`
  int get vertexUpdateBytes =>
      _id_vertexUpdateBytes.get(this, const jni$_.jlongType());

  /// from: `public long vertexUpdateBytes`
  set vertexUpdateBytes(int value) =>
      _id_vertexUpdateBytes.set(this, const jni$_.jlongType(), value);

  static final _id_numUniformBuffers = _class.instanceFieldId(
    r'numUniformBuffers',
    r'I',
  );

  /// from: `public int numUniformBuffers`
  int get numUniformBuffers =>
      _id_numUniformBuffers.get(this, const jni$_.jintType());

  /// from: `public int numUniformBuffers`
  set numUniformBuffers(int value) =>
      _id_numUniformBuffers.set(this, const jni$_.jintType(), value);

  static final _id_numUniformUpdates = _class.instanceFieldId(
    r'numUniformUpdates',
    r'I',
  );

  /// from: `public int numUniformUpdates`
  int get numUniformUpdates =>
      _id_numUniformUpdates.get(this, const jni$_.jintType());

  /// from: `public int numUniformUpdates`
  set numUniformUpdates(int value) =>
      _id_numUniformUpdates.set(this, const jni$_.jintType(), value);

  static final _id_uniformUpdateBytes = _class.instanceFieldId(
    r'uniformUpdateBytes',
    r'J',
  );

  /// from: `public long uniformUpdateBytes`
  int get uniformUpdateBytes =>
      _id_uniformUpdateBytes.get(this, const jni$_.jlongType());

  /// from: `public long uniformUpdateBytes`
  set uniformUpdateBytes(int value) =>
      _id_uniformUpdateBytes.set(this, const jni$_.jlongType(), value);

  static final _id_memTextures = _class.instanceFieldId(
    r'memTextures',
    r'I',
  );

  /// from: `public int memTextures`
  int get memTextures => _id_memTextures.get(this, const jni$_.jintType());

  /// from: `public int memTextures`
  set memTextures(int value) =>
      _id_memTextures.set(this, const jni$_.jintType(), value);

  static final _id_memBuffers = _class.instanceFieldId(
    r'memBuffers',
    r'I',
  );

  /// from: `public int memBuffers`
  int get memBuffers => _id_memBuffers.get(this, const jni$_.jintType());

  /// from: `public int memBuffers`
  set memBuffers(int value) =>
      _id_memBuffers.set(this, const jni$_.jintType(), value);

  static final _id_memIndexBuffers = _class.instanceFieldId(
    r'memIndexBuffers',
    r'I',
  );

  /// from: `public int memIndexBuffers`
  int get memIndexBuffers =>
      _id_memIndexBuffers.get(this, const jni$_.jintType());

  /// from: `public int memIndexBuffers`
  set memIndexBuffers(int value) =>
      _id_memIndexBuffers.set(this, const jni$_.jintType(), value);

  static final _id_memVertexBuffers = _class.instanceFieldId(
    r'memVertexBuffers',
    r'I',
  );

  /// from: `public int memVertexBuffers`
  int get memVertexBuffers =>
      _id_memVertexBuffers.get(this, const jni$_.jintType());

  /// from: `public int memVertexBuffers`
  set memVertexBuffers(int value) =>
      _id_memVertexBuffers.set(this, const jni$_.jintType(), value);

  static final _id_memUniformBuffers = _class.instanceFieldId(
    r'memUniformBuffers',
    r'I',
  );

  /// from: `public int memUniformBuffers`
  int get memUniformBuffers =>
      _id_memUniformBuffers.get(this, const jni$_.jintType());

  /// from: `public int memUniformBuffers`
  set memUniformBuffers(int value) =>
      _id_memUniformBuffers.set(this, const jni$_.jintType(), value);

  static final _id_stencilClears = _class.instanceFieldId(
    r'stencilClears',
    r'I',
  );

  /// from: `public int stencilClears`
  int get stencilClears => _id_stencilClears.get(this, const jni$_.jintType());

  /// from: `public int stencilClears`
  set stencilClears(int value) =>
      _id_stencilClears.set(this, const jni$_.jintType(), value);

  static final _id_stencilUpdates = _class.instanceFieldId(
    r'stencilUpdates',
    r'I',
  );

  /// from: `public int stencilUpdates`
  int get stencilUpdates =>
      _id_stencilUpdates.get(this, const jni$_.jintType());

  /// from: `public int stencilUpdates`
  set stencilUpdates(int value) =>
      _id_stencilUpdates.set(this, const jni$_.jintType(), value);

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory RenderingStats() {
    return RenderingStats.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }
}

final class $RenderingStats$NullableType
    extends jni$_.JObjType<RenderingStats?> {
  @jni$_.internal
  const $RenderingStats$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/maps/RenderingStats;';

  @jni$_.internal
  @core$_.override
  RenderingStats? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : RenderingStats.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<RenderingStats?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($RenderingStats$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($RenderingStats$NullableType) &&
        other is $RenderingStats$NullableType;
  }
}

final class $RenderingStats$Type extends jni$_.JObjType<RenderingStats> {
  @jni$_.internal
  const $RenderingStats$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/maps/RenderingStats;';

  @jni$_.internal
  @core$_.override
  RenderingStats fromReference(jni$_.JReference reference) =>
      RenderingStats.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<RenderingStats?> get nullableType =>
      const $RenderingStats$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($RenderingStats$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($RenderingStats$Type) &&
        other is $RenderingStats$Type;
  }
}
