// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'CompassListener.dart' as compasslistener$_;

/// from: `org.maplibre.android.location.CompassEngine`
class CompassEngine extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CompassEngine> $type;

  @jni$_.internal
  CompassEngine.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/location/CompassEngine',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CompassEngine$NullableType();
  static const type = $CompassEngine$Type();
  static final _id_addCompassListener = _class.instanceMethodId(
    r'addCompassListener',
    r'(Lorg/maplibre/android/location/CompassListener;)V',
  );

  static final _addCompassListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void addCompassListener(org.maplibre.android.location.CompassListener compassListener)`
  void addCompassListener(compasslistener$_.CompassListener compassListener) {
    final _$compassListener = compassListener.reference;
    _addCompassListener(
      reference.pointer,
      _id_addCompassListener as jni$_.JMethodIDPtr,
      _$compassListener.pointer,
    ).check();
  }

  static final _id_removeCompassListener = _class.instanceMethodId(
    r'removeCompassListener',
    r'(Lorg/maplibre/android/location/CompassListener;)V',
  );

  static final _removeCompassListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void removeCompassListener(org.maplibre.android.location.CompassListener compassListener)`
  void removeCompassListener(
    compasslistener$_.CompassListener compassListener,
  ) {
    final _$compassListener = compassListener.reference;
    _removeCompassListener(
      reference.pointer,
      _id_removeCompassListener as jni$_.JMethodIDPtr,
      _$compassListener.pointer,
    ).check();
  }

  static final _id_getLastHeading = _class.instanceMethodId(
    r'getLastHeading',
    r'()F',
  );

  static final _getLastHeading =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallFloatMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract float getLastHeading()`
  double getLastHeading() {
    return _getLastHeading(
      reference.pointer,
      _id_getLastHeading as jni$_.JMethodIDPtr,
    ).float;
  }

  static final _id_getLastAccuracySensorStatus = _class.instanceMethodId(
    r'getLastAccuracySensorStatus',
    r'()I',
  );

  static final _getLastAccuracySensorStatus =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract int getLastAccuracySensorStatus()`
  int getLastAccuracySensorStatus() {
    return _getLastAccuracySensorStatus(
      reference.pointer,
      _id_getLastAccuracySensorStatus as jni$_.JMethodIDPtr,
    ).integer;
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $CompassEngine> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'addCompassListener(Lorg/maplibre/android/location/CompassListener;)V') {
        _$impls[$p]!.addCompassListener(
          $a![0]!.as(
            const compasslistener$_.$CompassListener$Type(),
            releaseOriginal: true,
          ),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'removeCompassListener(Lorg/maplibre/android/location/CompassListener;)V') {
        _$impls[$p]!.removeCompassListener(
          $a![0]!.as(
            const compasslistener$_.$CompassListener$Type(),
            releaseOriginal: true,
          ),
        );
        return jni$_.nullptr;
      }
      if ($d == r'getLastHeading()F') {
        final $r = _$impls[$p]!.getLastHeading();
        return jni$_.JFloat($r).reference.toPointer();
      }
      if ($d == r'getLastAccuracySensorStatus()I') {
        final $r = _$impls[$p]!.getLastAccuracySensorStatus();
        return jni$_.JInteger($r).reference.toPointer();
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $CompassEngine $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.location.CompassEngine',
      $p,
      _$invokePointer,
      [
        if ($impl.addCompassListener$async)
          r'addCompassListener(Lorg/maplibre/android/location/CompassListener;)V',
        if ($impl.removeCompassListener$async)
          r'removeCompassListener(Lorg/maplibre/android/location/CompassListener;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory CompassEngine.implement($CompassEngine $impl) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return CompassEngine.fromReference($i.implementReference());
  }
}

abstract base mixin class $CompassEngine {
  factory $CompassEngine({
    required void Function(compasslistener$_.CompassListener compassListener)
    addCompassListener,
    bool addCompassListener$async,
    required void Function(compasslistener$_.CompassListener compassListener)
    removeCompassListener,
    bool removeCompassListener$async,
    required double Function() getLastHeading,
    required int Function() getLastAccuracySensorStatus,
  }) = _$CompassEngine;

  void addCompassListener(compasslistener$_.CompassListener compassListener);
  bool get addCompassListener$async => false;
  void removeCompassListener(compasslistener$_.CompassListener compassListener);
  bool get removeCompassListener$async => false;
  double getLastHeading();
  int getLastAccuracySensorStatus();
}

final class _$CompassEngine with $CompassEngine {
  _$CompassEngine({
    required void Function(compasslistener$_.CompassListener compassListener)
    addCompassListener,
    this.addCompassListener$async = false,
    required void Function(compasslistener$_.CompassListener compassListener)
    removeCompassListener,
    this.removeCompassListener$async = false,
    required double Function() getLastHeading,
    required int Function() getLastAccuracySensorStatus,
  }) : _addCompassListener = addCompassListener,
       _removeCompassListener = removeCompassListener,
       _getLastHeading = getLastHeading,
       _getLastAccuracySensorStatus = getLastAccuracySensorStatus;

  final void Function(compasslistener$_.CompassListener compassListener)
  _addCompassListener;
  final bool addCompassListener$async;
  final void Function(compasslistener$_.CompassListener compassListener)
  _removeCompassListener;
  final bool removeCompassListener$async;
  final double Function() _getLastHeading;
  final int Function() _getLastAccuracySensorStatus;

  void addCompassListener(compasslistener$_.CompassListener compassListener) {
    return _addCompassListener(compassListener);
  }

  void removeCompassListener(
    compasslistener$_.CompassListener compassListener,
  ) {
    return _removeCompassListener(compassListener);
  }

  double getLastHeading() {
    return _getLastHeading();
  }

  int getLastAccuracySensorStatus() {
    return _getLastAccuracySensorStatus();
  }
}

final class $CompassEngine$NullableType extends jni$_.JObjType<CompassEngine?> {
  @jni$_.internal
  const $CompassEngine$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/location/CompassEngine;';

  @jni$_.internal
  @core$_.override
  CompassEngine? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : CompassEngine.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CompassEngine?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CompassEngine$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CompassEngine$NullableType) &&
        other is $CompassEngine$NullableType;
  }
}

final class $CompassEngine$Type extends jni$_.JObjType<CompassEngine> {
  @jni$_.internal
  const $CompassEngine$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/location/CompassEngine;';

  @jni$_.internal
  @core$_.override
  CompassEngine fromReference(jni$_.JReference reference) =>
      CompassEngine.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CompassEngine?> get nullableType =>
      const $CompassEngine$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CompassEngine$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CompassEngine$Type) &&
        other is $CompassEngine$Type;
  }
}
