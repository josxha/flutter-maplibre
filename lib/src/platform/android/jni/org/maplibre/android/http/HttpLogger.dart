// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `org.maplibre.android.http.HttpLogger`
class HttpLogger extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<HttpLogger> $type;

  @jni$_.internal
  HttpLogger.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'org/maplibre/android/http/HttpLogger');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $HttpLogger$NullableType();
  static const type = $HttpLogger$Type();
  static final _id_logRequestUrl = _class.staticFieldId(
    r'logRequestUrl',
    r'Z',
  );

  /// from: `static public boolean logRequestUrl`
  static bool get logRequestUrl =>
      _id_logRequestUrl.get(_class, const jni$_.jbooleanType());

  /// from: `static public boolean logRequestUrl`
  static set logRequestUrl(bool value) =>
      _id_logRequestUrl.set(_class, const jni$_.jbooleanType(), value);

  static final _id_logEnabled = _class.staticFieldId(
    r'logEnabled',
    r'Z',
  );

  /// from: `static public boolean logEnabled`
  static bool get logEnabled =>
      _id_logEnabled.get(_class, const jni$_.jbooleanType());

  /// from: `static public boolean logEnabled`
  static set logEnabled(bool value) =>
      _id_logEnabled.set(_class, const jni$_.jbooleanType(), value);

  static final _id_logFailure = _class.staticMethodId(
    r'logFailure',
    r'(ILjava/lang/String;Ljava/lang/String;)V',
  );

  static final _logFailure = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public void logFailure(int i, java.lang.String string, java.lang.String string1)`
  static void logFailure(
    int i,
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _logFailure(_class.reference.pointer, _id_logFailure as jni$_.JMethodIDPtr,
            i, _$string.pointer, _$string1.pointer)
        .check();
  }

  static final _id_log = _class.staticMethodId(
    r'log',
    r'(ILjava/lang/String;)V',
  );

  static final _log = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public void log(int i, java.lang.String string)`
  static void log(
    int i,
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _log(_class.reference.pointer, _id_log as jni$_.JMethodIDPtr, i,
            _$string.pointer)
        .check();
  }
}

final class $HttpLogger$NullableType extends jni$_.JObjType<HttpLogger?> {
  @jni$_.internal
  const $HttpLogger$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/http/HttpLogger;';

  @jni$_.internal
  @core$_.override
  HttpLogger? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : HttpLogger.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HttpLogger?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HttpLogger$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HttpLogger$NullableType) &&
        other is $HttpLogger$NullableType;
  }
}

final class $HttpLogger$Type extends jni$_.JObjType<HttpLogger> {
  @jni$_.internal
  const $HttpLogger$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/http/HttpLogger;';

  @jni$_.internal
  @core$_.override
  HttpLogger fromReference(jni$_.JReference reference) =>
      HttpLogger.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HttpLogger?> get nullableType =>
      const $HttpLogger$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HttpLogger$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HttpLogger$Type) && other is $HttpLogger$Type;
  }
}
