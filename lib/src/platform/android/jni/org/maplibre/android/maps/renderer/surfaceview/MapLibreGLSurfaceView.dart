// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'MapLibreSurfaceView.dart' as maplibresurfaceview$_;

import 'SurfaceViewMapRenderer.dart' as surfaceviewmaprenderer$_;

/// from: `org.maplibre.android.maps.renderer.surfaceview.MapLibreGLSurfaceView`
class MapLibreGLSurfaceView extends maplibresurfaceview$_.MapLibreSurfaceView {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MapLibreGLSurfaceView> $type;

  @jni$_.internal
  MapLibreGLSurfaceView.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/maps/renderer/surfaceview/MapLibreGLSurfaceView');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MapLibreGLSurfaceView$NullableType();
  static const type = $MapLibreGLSurfaceView$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapLibreGLSurfaceView(
    jni$_.JObject? context,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    return MapLibreGLSurfaceView.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$context.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapLibreGLSurfaceView.new$1(
    jni$_.JObject? context,
    jni$_.JObject? attributeSet,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return MapLibreGLSurfaceView.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$attributeSet.pointer)
        .reference);
  }

  static final _id_setPreserveEGLContextOnPause = _class.instanceMethodId(
    r'setPreserveEGLContextOnPause',
    r'(Z)V',
  );

  static final _setPreserveEGLContextOnPause =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setPreserveEGLContextOnPause(boolean z)`
  void setPreserveEGLContextOnPause(
    bool z,
  ) {
    _setPreserveEGLContextOnPause(reference.pointer,
            _id_setPreserveEGLContextOnPause as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getPreserveEGLContextOnPause = _class.instanceMethodId(
    r'getPreserveEGLContextOnPause',
    r'()Z',
  );

  static final _getPreserveEGLContextOnPause =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean getPreserveEGLContextOnPause()`
  bool getPreserveEGLContextOnPause() {
    return _getPreserveEGLContextOnPause(reference.pointer,
            _id_getPreserveEGLContextOnPause as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setRenderer = _class.instanceMethodId(
    r'setRenderer',
    r'(Lorg/maplibre/android/maps/renderer/surfaceview/SurfaceViewMapRenderer;)V',
  );

  static final _setRenderer = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setRenderer(org.maplibre.android.maps.renderer.surfaceview.SurfaceViewMapRenderer surfaceViewMapRenderer)`
  void setRenderer(
    surfaceviewmaprenderer$_.SurfaceViewMapRenderer? surfaceViewMapRenderer,
  ) {
    final _$surfaceViewMapRenderer =
        surfaceViewMapRenderer?.reference ?? jni$_.jNullReference;
    _setRenderer(reference.pointer, _id_setRenderer as jni$_.JMethodIDPtr,
            _$surfaceViewMapRenderer.pointer)
        .check();
  }

  static final _id_setEGLContextFactory = _class.instanceMethodId(
    r'setEGLContextFactory',
    r'(Landroid/opengl/GLSurfaceView$EGLContextFactory;)V',
  );

  static final _setEGLContextFactory = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setEGLContextFactory(android.opengl.GLSurfaceView$EGLContextFactory eGLContextFactory)`
  void setEGLContextFactory(
    jni$_.JObject? eGLContextFactory,
  ) {
    final _$eGLContextFactory =
        eGLContextFactory?.reference ?? jni$_.jNullReference;
    _setEGLContextFactory(
            reference.pointer,
            _id_setEGLContextFactory as jni$_.JMethodIDPtr,
            _$eGLContextFactory.pointer)
        .check();
  }

  static final _id_setEGLWindowSurfaceFactory = _class.instanceMethodId(
    r'setEGLWindowSurfaceFactory',
    r'(Landroid/opengl/GLSurfaceView$EGLWindowSurfaceFactory;)V',
  );

  static final _setEGLWindowSurfaceFactory =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView$EGLWindowSurfaceFactory eGLWindowSurfaceFactory)`
  void setEGLWindowSurfaceFactory(
    jni$_.JObject? eGLWindowSurfaceFactory,
  ) {
    final _$eGLWindowSurfaceFactory =
        eGLWindowSurfaceFactory?.reference ?? jni$_.jNullReference;
    _setEGLWindowSurfaceFactory(
            reference.pointer,
            _id_setEGLWindowSurfaceFactory as jni$_.JMethodIDPtr,
            _$eGLWindowSurfaceFactory.pointer)
        .check();
  }

  static final _id_setEGLConfigChooser = _class.instanceMethodId(
    r'setEGLConfigChooser',
    r'(Landroid/opengl/GLSurfaceView$EGLConfigChooser;)V',
  );

  static final _setEGLConfigChooser = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser eGLConfigChooser)`
  void setEGLConfigChooser(
    jni$_.JObject? eGLConfigChooser,
  ) {
    final _$eGLConfigChooser =
        eGLConfigChooser?.reference ?? jni$_.jNullReference;
    _setEGLConfigChooser(
            reference.pointer,
            _id_setEGLConfigChooser as jni$_.JMethodIDPtr,
            _$eGLConfigChooser.pointer)
        .check();
  }
}

final class $MapLibreGLSurfaceView$NullableType
    extends jni$_.JObjType<MapLibreGLSurfaceView?> {
  @jni$_.internal
  const $MapLibreGLSurfaceView$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/maps/renderer/surfaceview/MapLibreGLSurfaceView;';

  @jni$_.internal
  @core$_.override
  MapLibreGLSurfaceView? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MapLibreGLSurfaceView.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType =>
      const maplibresurfaceview$_.$MapLibreSurfaceView$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MapLibreGLSurfaceView?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($MapLibreGLSurfaceView$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapLibreGLSurfaceView$NullableType) &&
        other is $MapLibreGLSurfaceView$NullableType;
  }
}

final class $MapLibreGLSurfaceView$Type
    extends jni$_.JObjType<MapLibreGLSurfaceView> {
  @jni$_.internal
  const $MapLibreGLSurfaceView$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/maps/renderer/surfaceview/MapLibreGLSurfaceView;';

  @jni$_.internal
  @core$_.override
  MapLibreGLSurfaceView fromReference(jni$_.JReference reference) =>
      MapLibreGLSurfaceView.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType =>
      const maplibresurfaceview$_.$MapLibreSurfaceView$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MapLibreGLSurfaceView?> get nullableType =>
      const $MapLibreGLSurfaceView$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($MapLibreGLSurfaceView$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapLibreGLSurfaceView$Type) &&
        other is $MapLibreGLSurfaceView$Type;
  }
}
