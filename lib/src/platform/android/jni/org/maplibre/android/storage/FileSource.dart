// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../util/TileServerOptions.dart' as tileserveroptions$_;

/// from: `org.maplibre.android.storage.FileSource$ResourceTransformCallback`
class FileSource$ResourceTransformCallback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<FileSource$ResourceTransformCallback> $type;

  @jni$_.internal
  FileSource$ResourceTransformCallback.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/storage/FileSource$ResourceTransformCallback');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $FileSource$ResourceTransformCallback$NullableType();
  static const type = $FileSource$ResourceTransformCallback$Type();
  static final _id_onURL = _class.instanceMethodId(
    r'onURL',
    r'(ILjava/lang/String;)Ljava/lang/String;',
  );

  static final _onURL = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.String onURL(int i, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? onURL(
    int i,
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _onURL(reference.pointer, _id_onURL as jni$_.JMethodIDPtr, i,
            _$string.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $FileSource$ResourceTransformCallback> _$impls =
      {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onURL(ILjava/lang/String;)Ljava/lang/String;') {
        final $r = _$impls[$p]!.onURL(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![1]?.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $FileSource$ResourceTransformCallback $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.storage.FileSource$ResourceTransformCallback',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory FileSource$ResourceTransformCallback.implement(
    $FileSource$ResourceTransformCallback $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return FileSource$ResourceTransformCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $FileSource$ResourceTransformCallback {
  factory $FileSource$ResourceTransformCallback({
    required jni$_.JString? Function(int i, jni$_.JString? string) onURL,
  }) = _$FileSource$ResourceTransformCallback;

  jni$_.JString? onURL(int i, jni$_.JString? string);
}

final class _$FileSource$ResourceTransformCallback
    with $FileSource$ResourceTransformCallback {
  _$FileSource$ResourceTransformCallback({
    required jni$_.JString? Function(int i, jni$_.JString? string) onURL,
  }) : _onURL = onURL;

  final jni$_.JString? Function(int i, jni$_.JString? string) _onURL;

  jni$_.JString? onURL(int i, jni$_.JString? string) {
    return _onURL(i, string);
  }
}

final class $FileSource$ResourceTransformCallback$NullableType
    extends jni$_.JObjType<FileSource$ResourceTransformCallback?> {
  @jni$_.internal
  const $FileSource$ResourceTransformCallback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/storage/FileSource$ResourceTransformCallback;';

  @jni$_.internal
  @core$_.override
  FileSource$ResourceTransformCallback? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : FileSource$ResourceTransformCallback.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FileSource$ResourceTransformCallback?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($FileSource$ResourceTransformCallback$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($FileSource$ResourceTransformCallback$NullableType) &&
        other is $FileSource$ResourceTransformCallback$NullableType;
  }
}

final class $FileSource$ResourceTransformCallback$Type
    extends jni$_.JObjType<FileSource$ResourceTransformCallback> {
  @jni$_.internal
  const $FileSource$ResourceTransformCallback$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/storage/FileSource$ResourceTransformCallback;';

  @jni$_.internal
  @core$_.override
  FileSource$ResourceTransformCallback fromReference(
          jni$_.JReference reference) =>
      FileSource$ResourceTransformCallback.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FileSource$ResourceTransformCallback?> get nullableType =>
      const $FileSource$ResourceTransformCallback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($FileSource$ResourceTransformCallback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FileSource$ResourceTransformCallback$Type) &&
        other is $FileSource$ResourceTransformCallback$Type;
  }
}

/// from: `org.maplibre.android.storage.FileSource$ResourcesCachePathChangeCallback`
class FileSource$ResourcesCachePathChangeCallback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<FileSource$ResourcesCachePathChangeCallback> $type;

  @jni$_.internal
  FileSource$ResourcesCachePathChangeCallback.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/storage/FileSource$ResourcesCachePathChangeCallback');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $FileSource$ResourcesCachePathChangeCallback$NullableType();
  static const type = $FileSource$ResourcesCachePathChangeCallback$Type();
  static final _id_onSuccess = _class.instanceMethodId(
    r'onSuccess',
    r'(Ljava/lang/String;)V',
  );

  static final _onSuccess = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onSuccess(java.lang.String string)`
  void onSuccess(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    _onSuccess(reference.pointer, _id_onSuccess as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'(Ljava/lang/String;)V',
  );

  static final _onError = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onError(java.lang.String string)`
  void onError(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    _onError(reference.pointer, _id_onError as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $FileSource$ResourcesCachePathChangeCallback>
      _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onSuccess(Ljava/lang/String;)V') {
        _$impls[$p]!.onSuccess(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onError(Ljava/lang/String;)V') {
        _$impls[$p]!.onError(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $FileSource$ResourcesCachePathChangeCallback $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.storage.FileSource$ResourcesCachePathChangeCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onSuccess$async) r'onSuccess(Ljava/lang/String;)V',
        if ($impl.onError$async) r'onError(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory FileSource$ResourcesCachePathChangeCallback.implement(
    $FileSource$ResourcesCachePathChangeCallback $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return FileSource$ResourcesCachePathChangeCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $FileSource$ResourcesCachePathChangeCallback {
  factory $FileSource$ResourcesCachePathChangeCallback({
    required void Function(jni$_.JString string) onSuccess,
    bool onSuccess$async,
    required void Function(jni$_.JString string) onError,
    bool onError$async,
  }) = _$FileSource$ResourcesCachePathChangeCallback;

  void onSuccess(jni$_.JString string);
  bool get onSuccess$async => false;
  void onError(jni$_.JString string);
  bool get onError$async => false;
}

final class _$FileSource$ResourcesCachePathChangeCallback
    with $FileSource$ResourcesCachePathChangeCallback {
  _$FileSource$ResourcesCachePathChangeCallback({
    required void Function(jni$_.JString string) onSuccess,
    this.onSuccess$async = false,
    required void Function(jni$_.JString string) onError,
    this.onError$async = false,
  })  : _onSuccess = onSuccess,
        _onError = onError;

  final void Function(jni$_.JString string) _onSuccess;
  final bool onSuccess$async;
  final void Function(jni$_.JString string) _onError;
  final bool onError$async;

  void onSuccess(jni$_.JString string) {
    return _onSuccess(string);
  }

  void onError(jni$_.JString string) {
    return _onError(string);
  }
}

final class $FileSource$ResourcesCachePathChangeCallback$NullableType
    extends jni$_.JObjType<FileSource$ResourcesCachePathChangeCallback?> {
  @jni$_.internal
  const $FileSource$ResourcesCachePathChangeCallback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/storage/FileSource$ResourcesCachePathChangeCallback;';

  @jni$_.internal
  @core$_.override
  FileSource$ResourcesCachePathChangeCallback? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : FileSource$ResourcesCachePathChangeCallback.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FileSource$ResourcesCachePathChangeCallback?>
      get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($FileSource$ResourcesCachePathChangeCallback$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($FileSource$ResourcesCachePathChangeCallback$NullableType) &&
        other is $FileSource$ResourcesCachePathChangeCallback$NullableType;
  }
}

final class $FileSource$ResourcesCachePathChangeCallback$Type
    extends jni$_.JObjType<FileSource$ResourcesCachePathChangeCallback> {
  @jni$_.internal
  const $FileSource$ResourcesCachePathChangeCallback$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/storage/FileSource$ResourcesCachePathChangeCallback;';

  @jni$_.internal
  @core$_.override
  FileSource$ResourcesCachePathChangeCallback fromReference(
          jni$_.JReference reference) =>
      FileSource$ResourcesCachePathChangeCallback.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FileSource$ResourcesCachePathChangeCallback?>
      get nullableType =>
          const $FileSource$ResourcesCachePathChangeCallback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($FileSource$ResourcesCachePathChangeCallback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($FileSource$ResourcesCachePathChangeCallback$Type) &&
        other is $FileSource$ResourcesCachePathChangeCallback$Type;
  }
}

/// from: `org.maplibre.android.storage.FileSource`
class FileSource extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<FileSource> $type;

  @jni$_.internal
  FileSource.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'org/maplibre/android/storage/FileSource');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $FileSource$NullableType();
  static const type = $FileSource$Type();
  static final _id_getInstance = _class.staticMethodId(
    r'getInstance',
    r'(Landroid/content/Context;)Lorg/maplibre/android/storage/FileSource;',
  );

  static final _getInstance = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.storage.FileSource getInstance(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static FileSource? getInstance(
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    return _getInstance(_class.reference.pointer,
            _id_getInstance as jni$_.JMethodIDPtr, _$context.pointer)
        .object<FileSource?>(const $FileSource$NullableType());
  }

  static final _id_isExternalStorageReadable = _class.staticMethodId(
    r'isExternalStorageReadable',
    r'()Z',
  );

  static final _isExternalStorageReadable = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public boolean isExternalStorageReadable()`
  static bool isExternalStorageReadable() {
    return _isExternalStorageReadable(_class.reference.pointer,
            _id_isExternalStorageReadable as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_initializeFileDirsPaths = _class.staticMethodId(
    r'initializeFileDirsPaths',
    r'(Landroid/content/Context;)V',
  );

  static final _initializeFileDirsPaths = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public void initializeFileDirsPaths(android.content.Context context)`
  static void initializeFileDirsPaths(
    jni$_.JObject? context,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    _initializeFileDirsPaths(
            _class.reference.pointer,
            _id_initializeFileDirsPaths as jni$_.JMethodIDPtr,
            _$context.pointer)
        .check();
  }

  static final _id_getResourcesCachePath = _class.staticMethodId(
    r'getResourcesCachePath',
    r'(Landroid/content/Context;)Ljava/lang/String;',
  );

  static final _getResourcesCachePath = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public java.lang.String getResourcesCachePath(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString getResourcesCachePath(
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    return _getResourcesCachePath(_class.reference.pointer,
            _id_getResourcesCachePath as jni$_.JMethodIDPtr, _$context.pointer)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_getInternalCachePath = _class.staticMethodId(
    r'getInternalCachePath',
    r'(Landroid/content/Context;)Ljava/lang/String;',
  );

  static final _getInternalCachePath = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public java.lang.String getInternalCachePath(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? getInternalCachePath(
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    return _getInternalCachePath(_class.reference.pointer,
            _id_getInternalCachePath as jni$_.JMethodIDPtr, _$context.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_setResourcesCachePath = _class.staticMethodId(
    r'setResourcesCachePath',
    r'(Landroid/content/Context;Ljava/lang/String;Lorg/maplibre/android/storage/FileSource$ResourcesCachePathChangeCallback;)V',
  );

  static final _setResourcesCachePath = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public void setResourcesCachePath(android.content.Context context, java.lang.String string, org.maplibre.android.storage.FileSource$ResourcesCachePathChangeCallback resourcesCachePathChangeCallback)`
  static void setResourcesCachePath(
    jni$_.JObject context,
    jni$_.JString string,
    FileSource$ResourcesCachePathChangeCallback
        resourcesCachePathChangeCallback,
  ) {
    final _$context = context.reference;
    final _$string = string.reference;
    final _$resourcesCachePathChangeCallback =
        resourcesCachePathChangeCallback.reference;
    _setResourcesCachePath(
            _class.reference.pointer,
            _id_setResourcesCachePath as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer,
            _$resourcesCachePathChangeCallback.pointer)
        .check();
  }

  static final _id_setResourcesCachePath$1 = _class.staticMethodId(
    r'setResourcesCachePath',
    r'(Ljava/lang/String;Lorg/maplibre/android/storage/FileSource$ResourcesCachePathChangeCallback;)V',
  );

  static final _setResourcesCachePath$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public void setResourcesCachePath(java.lang.String string, org.maplibre.android.storage.FileSource$ResourcesCachePathChangeCallback resourcesCachePathChangeCallback)`
  static void setResourcesCachePath$1(
    jni$_.JString string,
    FileSource$ResourcesCachePathChangeCallback
        resourcesCachePathChangeCallback,
  ) {
    final _$string = string.reference;
    final _$resourcesCachePathChangeCallback =
        resourcesCachePathChangeCallback.reference;
    _setResourcesCachePath$1(
            _class.reference.pointer,
            _id_setResourcesCachePath$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$resourcesCachePathChangeCallback.pointer)
        .check();
  }

  static final _id_setTileServerOptions = _class.instanceMethodId(
    r'setTileServerOptions',
    r'(Lorg/maplibre/android/util/TileServerOptions;)V',
  );

  static final _setTileServerOptions = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public native void setTileServerOptions(org.maplibre.android.util.TileServerOptions tileServerOptions)`
  void setTileServerOptions(
    tileserveroptions$_.TileServerOptions? tileServerOptions,
  ) {
    final _$tileServerOptions =
        tileServerOptions?.reference ?? jni$_.jNullReference;
    _setTileServerOptions(
            reference.pointer,
            _id_setTileServerOptions as jni$_.JMethodIDPtr,
            _$tileServerOptions.pointer)
        .check();
  }

  static final _id_isActivated = _class.instanceMethodId(
    r'isActivated',
    r'()Z',
  );

  static final _isActivated = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public native boolean isActivated()`
  bool isActivated() {
    return _isActivated(
            reference.pointer, _id_isActivated as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_activate = _class.instanceMethodId(
    r'activate',
    r'()V',
  );

  static final _activate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public native void activate()`
  void activate() {
    _activate(reference.pointer, _id_activate as jni$_.JMethodIDPtr).check();
  }

  static final _id_deactivate = _class.instanceMethodId(
    r'deactivate',
    r'()V',
  );

  static final _deactivate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public native void deactivate()`
  void deactivate() {
    _deactivate(reference.pointer, _id_deactivate as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_setApiKey = _class.instanceMethodId(
    r'setApiKey',
    r'(Ljava/lang/String;)V',
  );

  static final _setApiKey = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public native void setApiKey(java.lang.String string)`
  void setApiKey(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _setApiKey(reference.pointer, _id_setApiKey as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_getApiKey = _class.instanceMethodId(
    r'getApiKey',
    r'()Ljava/lang/String;',
  );

  static final _getApiKey = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public native java.lang.String getApiKey()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getApiKey() {
    return _getApiKey(reference.pointer, _id_getApiKey as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_setApiBaseUrl = _class.instanceMethodId(
    r'setApiBaseUrl',
    r'(Ljava/lang/String;)V',
  );

  static final _setApiBaseUrl = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public native void setApiBaseUrl(java.lang.String string)`
  void setApiBaseUrl(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _setApiBaseUrl(reference.pointer, _id_setApiBaseUrl as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_getApiBaseUrl = _class.instanceMethodId(
    r'getApiBaseUrl',
    r'()Ljava/lang/String;',
  );

  static final _getApiBaseUrl = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public native java.lang.String getApiBaseUrl()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getApiBaseUrl() {
    return _getApiBaseUrl(
            reference.pointer, _id_getApiBaseUrl as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_setResourceTransform = _class.instanceMethodId(
    r'setResourceTransform',
    r'(Lorg/maplibre/android/storage/FileSource$ResourceTransformCallback;)V',
  );

  static final _setResourceTransform = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public native void setResourceTransform(org.maplibre.android.storage.FileSource$ResourceTransformCallback resourceTransformCallback)`
  void setResourceTransform(
    FileSource$ResourceTransformCallback? resourceTransformCallback,
  ) {
    final _$resourceTransformCallback =
        resourceTransformCallback?.reference ?? jni$_.jNullReference;
    _setResourceTransform(
            reference.pointer,
            _id_setResourceTransform as jni$_.JMethodIDPtr,
            _$resourceTransformCallback.pointer)
        .check();
  }
}

final class $FileSource$NullableType extends jni$_.JObjType<FileSource?> {
  @jni$_.internal
  const $FileSource$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/storage/FileSource;';

  @jni$_.internal
  @core$_.override
  FileSource? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : FileSource.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FileSource?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($FileSource$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FileSource$NullableType) &&
        other is $FileSource$NullableType;
  }
}

final class $FileSource$Type extends jni$_.JObjType<FileSource> {
  @jni$_.internal
  const $FileSource$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/storage/FileSource;';

  @jni$_.internal
  @core$_.override
  FileSource fromReference(jni$_.JReference reference) =>
      FileSource.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FileSource?> get nullableType =>
      const $FileSource$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($FileSource$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FileSource$Type) && other is $FileSource$Type;
  }
}
