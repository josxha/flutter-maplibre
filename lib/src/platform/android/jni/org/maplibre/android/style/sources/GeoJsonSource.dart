// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../../../../../java/net/URI.dart' as uri$_;

import '../../../../../java/net/URL.dart' as url$_;

import '../../../geojson/Feature.dart' as feature$_;

import 'GeoJsonOptions.dart' as geojsonoptions$_;

import 'Source.dart' as source$_;

/// from: `org.maplibre.android.style.sources.GeoJsonSource`
class GeoJsonSource extends source$_.Source {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<GeoJsonSource> $type;

  @jni$_.internal
  GeoJsonSource.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'org/maplibre/android/style/sources/GeoJsonSource');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $GeoJsonSource$NullableType();
  static const type = $GeoJsonSource$Type();
  static final _id_new$ = _class.constructorId(
    r'(J)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void <init>(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource(
    int j,
  ) {
    return GeoJsonSource.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr, j)
            .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return GeoJsonSource.fromReference(_new$1(_class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .reference);
  }

  static final _id_new$2 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/android/style/sources/GeoJsonOptions;)V',
  );

  static final _new$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.android.style.sources.GeoJsonOptions geoJsonOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new$2(
    jni$_.JString? string,
    geojsonoptions$_.GeoJsonOptions? geoJsonOptions,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$geoJsonOptions = geoJsonOptions?.reference ?? jni$_.jNullReference;
    return GeoJsonSource.fromReference(_new$2(
            _class.reference.pointer,
            _id_new$2 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$geoJsonOptions.pointer)
        .reference);
  }

  static final _id_new$3 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new$3(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return GeoJsonSource.fromReference(_new$3(
            _class.reference.pointer,
            _id_new$3 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .reference);
  }

  static final _id_new$4 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;Lorg/maplibre/android/style/sources/GeoJsonOptions;)V',
  );

  static final _new$4 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1, org.maplibre.android.style.sources.GeoJsonOptions geoJsonOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new$4(
    jni$_.JString? string,
    jni$_.JString? string1,
    geojsonoptions$_.GeoJsonOptions? geoJsonOptions,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$geoJsonOptions = geoJsonOptions?.reference ?? jni$_.jNullReference;
    return GeoJsonSource.fromReference(_new$4(
            _class.reference.pointer,
            _id_new$4 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer,
            _$geoJsonOptions.pointer)
        .reference);
  }

  static final _id_new$5 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/net/URL;)V',
  );

  static final _new$5 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.net.URL uRL)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new$5(
    jni$_.JString? string,
    url$_.URL uRL,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uRL = uRL.reference;
    return GeoJsonSource.fromReference(_new$5(_class.reference.pointer,
            _id_new$5 as jni$_.JMethodIDPtr, _$string.pointer, _$uRL.pointer)
        .reference);
  }

  static final _id_new$6 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/net/URL;Lorg/maplibre/android/style/sources/GeoJsonOptions;)V',
  );

  static final _new$6 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.net.URL uRL, org.maplibre.android.style.sources.GeoJsonOptions geoJsonOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new$6(
    jni$_.JString? string,
    url$_.URL uRL,
    geojsonoptions$_.GeoJsonOptions? geoJsonOptions,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uRL = uRL.reference;
    final _$geoJsonOptions = geoJsonOptions?.reference ?? jni$_.jNullReference;
    return GeoJsonSource.fromReference(_new$6(
            _class.reference.pointer,
            _id_new$6 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$uRL.pointer,
            _$geoJsonOptions.pointer)
        .reference);
  }

  static final _id_new$7 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/net/URI;)V',
  );

  static final _new$7 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.net.URI uRI)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new$7(
    jni$_.JString? string,
    uri$_.URI uRI,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uRI = uRI.reference;
    return GeoJsonSource.fromReference(_new$7(_class.reference.pointer,
            _id_new$7 as jni$_.JMethodIDPtr, _$string.pointer, _$uRI.pointer)
        .reference);
  }

  static final _id_new$8 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/net/URI;Lorg/maplibre/android/style/sources/GeoJsonOptions;)V',
  );

  static final _new$8 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.net.URI uRI, org.maplibre.android.style.sources.GeoJsonOptions geoJsonOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new$8(
    jni$_.JString? string,
    uri$_.URI uRI,
    geojsonoptions$_.GeoJsonOptions? geoJsonOptions,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uRI = uRI.reference;
    final _$geoJsonOptions = geoJsonOptions?.reference ?? jni$_.jNullReference;
    return GeoJsonSource.fromReference(_new$8(
            _class.reference.pointer,
            _id_new$8 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$uRI.pointer,
            _$geoJsonOptions.pointer)
        .reference);
  }

  static final _id_new$9 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/geojson/FeatureCollection;)V',
  );

  static final _new$9 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.geojson.FeatureCollection featureCollection)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new$9(
    jni$_.JString? string,
    jni$_.JObject? featureCollection,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$featureCollection =
        featureCollection?.reference ?? jni$_.jNullReference;
    return GeoJsonSource.fromReference(_new$9(
            _class.reference.pointer,
            _id_new$9 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$featureCollection.pointer)
        .reference);
  }

  static final _id_new$10 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/geojson/FeatureCollection;Lorg/maplibre/android/style/sources/GeoJsonOptions;)V',
  );

  static final _new$10 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.geojson.FeatureCollection featureCollection, org.maplibre.android.style.sources.GeoJsonOptions geoJsonOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new$10(
    jni$_.JString? string,
    jni$_.JObject? featureCollection,
    geojsonoptions$_.GeoJsonOptions? geoJsonOptions,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$featureCollection =
        featureCollection?.reference ?? jni$_.jNullReference;
    final _$geoJsonOptions = geoJsonOptions?.reference ?? jni$_.jNullReference;
    return GeoJsonSource.fromReference(_new$10(
            _class.reference.pointer,
            _id_new$10 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$featureCollection.pointer,
            _$geoJsonOptions.pointer)
        .reference);
  }

  static final _id_new$11 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/geojson/Feature;)V',
  );

  static final _new$11 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.geojson.Feature feature)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new$11(
    jni$_.JString? string,
    feature$_.Feature? feature,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$feature = feature?.reference ?? jni$_.jNullReference;
    return GeoJsonSource.fromReference(_new$11(
            _class.reference.pointer,
            _id_new$11 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$feature.pointer)
        .reference);
  }

  static final _id_new$12 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/geojson/Feature;Lorg/maplibre/android/style/sources/GeoJsonOptions;)V',
  );

  static final _new$12 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.geojson.Feature feature, org.maplibre.android.style.sources.GeoJsonOptions geoJsonOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new$12(
    jni$_.JString? string,
    feature$_.Feature? feature,
    geojsonoptions$_.GeoJsonOptions? geoJsonOptions,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$feature = feature?.reference ?? jni$_.jNullReference;
    final _$geoJsonOptions = geoJsonOptions?.reference ?? jni$_.jNullReference;
    return GeoJsonSource.fromReference(_new$12(
            _class.reference.pointer,
            _id_new$12 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$feature.pointer,
            _$geoJsonOptions.pointer)
        .reference);
  }

  static final _id_new$13 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/geojson/Geometry;)V',
  );

  static final _new$13 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.geojson.Geometry geometry)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new$13(
    jni$_.JString? string,
    jni$_.JObject? geometry,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$geometry = geometry?.reference ?? jni$_.jNullReference;
    return GeoJsonSource.fromReference(_new$13(
            _class.reference.pointer,
            _id_new$13 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$geometry.pointer)
        .reference);
  }

  static final _id_new$14 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/geojson/Geometry;Lorg/maplibre/android/style/sources/GeoJsonOptions;)V',
  );

  static final _new$14 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.geojson.Geometry geometry, org.maplibre.android.style.sources.GeoJsonOptions geoJsonOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new$14(
    jni$_.JString? string,
    jni$_.JObject? geometry,
    geojsonoptions$_.GeoJsonOptions? geoJsonOptions,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$geometry = geometry?.reference ?? jni$_.jNullReference;
    final _$geoJsonOptions = geoJsonOptions?.reference ?? jni$_.jNullReference;
    return GeoJsonSource.fromReference(_new$14(
            _class.reference.pointer,
            _id_new$14 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$geometry.pointer,
            _$geoJsonOptions.pointer)
        .reference);
  }

  static final _id_setGeoJson = _class.instanceMethodId(
    r'setGeoJson',
    r'(Lorg/maplibre/geojson/Feature;)V',
  );

  static final _setGeoJson = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setGeoJson(org.maplibre.geojson.Feature feature)`
  void setGeoJson(
    feature$_.Feature? feature,
  ) {
    final _$feature = feature?.reference ?? jni$_.jNullReference;
    _setGeoJson(reference.pointer, _id_setGeoJson as jni$_.JMethodIDPtr,
            _$feature.pointer)
        .check();
  }

  static final _id_setGeoJson$1 = _class.instanceMethodId(
    r'setGeoJson',
    r'(Lorg/maplibre/geojson/Geometry;)V',
  );

  static final _setGeoJson$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setGeoJson(org.maplibre.geojson.Geometry geometry)`
  void setGeoJson$1(
    jni$_.JObject? geometry,
  ) {
    final _$geometry = geometry?.reference ?? jni$_.jNullReference;
    _setGeoJson$1(reference.pointer, _id_setGeoJson$1 as jni$_.JMethodIDPtr,
            _$geometry.pointer)
        .check();
  }

  static final _id_setGeoJson$2 = _class.instanceMethodId(
    r'setGeoJson',
    r'(Lorg/maplibre/geojson/FeatureCollection;)V',
  );

  static final _setGeoJson$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setGeoJson(org.maplibre.geojson.FeatureCollection featureCollection)`
  void setGeoJson$2(
    jni$_.JObject? featureCollection,
  ) {
    final _$featureCollection =
        featureCollection?.reference ?? jni$_.jNullReference;
    _setGeoJson$2(reference.pointer, _id_setGeoJson$2 as jni$_.JMethodIDPtr,
            _$featureCollection.pointer)
        .check();
  }

  static final _id_setGeoJson$3 = _class.instanceMethodId(
    r'setGeoJson',
    r'(Ljava/lang/String;)V',
  );

  static final _setGeoJson$3 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setGeoJson(java.lang.String string)`
  void setGeoJson$3(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    _setGeoJson$3(reference.pointer, _id_setGeoJson$3 as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_setUrl = _class.instanceMethodId(
    r'setUrl',
    r'(Ljava/net/URL;)V',
  );

  static final _setUrl = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setUrl(java.net.URL uRL)`
  void setUrl(
    url$_.URL uRL,
  ) {
    final _$uRL = uRL.reference;
    _setUrl(reference.pointer, _id_setUrl as jni$_.JMethodIDPtr, _$uRL.pointer)
        .check();
  }

  static final _id_setUri = _class.instanceMethodId(
    r'setUri',
    r'(Ljava/net/URI;)V',
  );

  static final _setUri = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setUri(java.net.URI uRI)`
  void setUri(
    uri$_.URI uRI,
  ) {
    final _$uRI = uRI.reference;
    _setUri(reference.pointer, _id_setUri as jni$_.JMethodIDPtr, _$uRI.pointer)
        .check();
  }

  static final _id_setUri$1 = _class.instanceMethodId(
    r'setUri',
    r'(Ljava/lang/String;)V',
  );

  static final _setUri$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setUri(java.lang.String string)`
  void setUri$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _setUri$1(reference.pointer, _id_setUri$1 as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_getUrl = _class.instanceMethodId(
    r'getUrl',
    r'()Ljava/lang/String;',
  );

  static final _getUrl = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getUrl()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getUrl() {
    return _getUrl(reference.pointer, _id_getUrl as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_setUrl$1 = _class.instanceMethodId(
    r'setUrl',
    r'(Ljava/lang/String;)V',
  );

  static final _setUrl$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setUrl(java.lang.String string)`
  void setUrl$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _setUrl$1(reference.pointer, _id_setUrl$1 as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_getUri = _class.instanceMethodId(
    r'getUri',
    r'()Ljava/lang/String;',
  );

  static final _getUri = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getUri()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getUri() {
    return _getUri(reference.pointer, _id_getUri as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_querySourceFeatures = _class.instanceMethodId(
    r'querySourceFeatures',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Ljava/util/List;',
  );

  static final _querySourceFeatures = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.util.List querySourceFeatures(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<feature$_.Feature> querySourceFeatures(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _querySourceFeatures(reference.pointer,
            _id_querySourceFeatures as jni$_.JMethodIDPtr, _$expression.pointer)
        .object<jni$_.JList<feature$_.Feature>>(
            const jni$_.JListType<feature$_.Feature>(
                feature$_.$Feature$Type()));
  }

  static final _id_getClusterChildren = _class.instanceMethodId(
    r'getClusterChildren',
    r'(Lorg/maplibre/geojson/Feature;)Lorg/maplibre/geojson/FeatureCollection;',
  );

  static final _getClusterChildren = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final org.maplibre.geojson.FeatureCollection getClusterChildren(org.maplibre.geojson.Feature feature)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject getClusterChildren(
    feature$_.Feature feature,
  ) {
    final _$feature = feature.reference;
    return _getClusterChildren(reference.pointer,
            _id_getClusterChildren as jni$_.JMethodIDPtr, _$feature.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_getClusterLeaves = _class.instanceMethodId(
    r'getClusterLeaves',
    r'(Lorg/maplibre/geojson/Feature;JJ)Lorg/maplibre/geojson/FeatureCollection;',
  );

  static final _getClusterLeaves = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int64,
                        jni$_.Int64
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int)>();

  /// from: `public final org.maplibre.geojson.FeatureCollection getClusterLeaves(org.maplibre.geojson.Feature feature, long j, long j1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject getClusterLeaves(
    feature$_.Feature feature,
    int j,
    int j1,
  ) {
    final _$feature = feature.reference;
    return _getClusterLeaves(
            reference.pointer,
            _id_getClusterLeaves as jni$_.JMethodIDPtr,
            _$feature.pointer,
            j,
            j1)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_getClusterExpansionZoom = _class.instanceMethodId(
    r'getClusterExpansionZoom',
    r'(Lorg/maplibre/geojson/Feature;)I',
  );

  static final _getClusterExpansionZoom = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final int getClusterExpansionZoom(org.maplibre.geojson.Feature feature)`
  int getClusterExpansionZoom(
    feature$_.Feature feature,
  ) {
    final _$feature = feature.reference;
    return _getClusterExpansionZoom(
            reference.pointer,
            _id_getClusterExpansionZoom as jni$_.JMethodIDPtr,
            _$feature.pointer)
        .integer;
  }
}

final class $GeoJsonSource$NullableType extends jni$_.JObjType<GeoJsonSource?> {
  @jni$_.internal
  const $GeoJsonSource$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/style/sources/GeoJsonSource;';

  @jni$_.internal
  @core$_.override
  GeoJsonSource? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : GeoJsonSource.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const source$_.$Source$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<GeoJsonSource?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($GeoJsonSource$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($GeoJsonSource$NullableType) &&
        other is $GeoJsonSource$NullableType;
  }
}

final class $GeoJsonSource$Type extends jni$_.JObjType<GeoJsonSource> {
  @jni$_.internal
  const $GeoJsonSource$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/style/sources/GeoJsonSource;';

  @jni$_.internal
  @core$_.override
  GeoJsonSource fromReference(jni$_.JReference reference) =>
      GeoJsonSource.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const source$_.$Source$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<GeoJsonSource?> get nullableType =>
      const $GeoJsonSource$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($GeoJsonSource$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($GeoJsonSource$Type) &&
        other is $GeoJsonSource$Type;
  }
}
