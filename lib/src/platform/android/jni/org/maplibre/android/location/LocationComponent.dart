// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../../../../android/location/Location.dart' as location$_;

import '../maps/MapLibreMap.dart' as maplibremap$_;

import '../maps/Transform.dart' as transform$_;

import 'CompassEngine.dart' as compassengine$_;

import 'LocationComponentActivationOptions.dart'
    as locationcomponentactivationoptions$_;

import 'LocationComponentOptions.dart' as locationcomponentoptions$_;

import 'OnCameraTrackingChangedListener.dart'
    as oncameratrackingchangedlistener$_;

import 'OnLocationCameraTransitionListener.dart'
    as onlocationcameratransitionlistener$_;

import 'OnLocationClickListener.dart' as onlocationclicklistener$_;

import 'OnLocationLongClickListener.dart' as onlocationlongclicklistener$_;

import 'OnLocationStaleListener.dart' as onlocationstalelistener$_;

import 'OnRenderModeChangedListener.dart' as onrendermodechangedlistener$_;

import 'engine/LocationEngine.dart' as locationengine$_;

import 'engine/LocationEngineRequest.dart' as locationenginerequest$_;

/// from: `org.maplibre.android.location.LocationComponent`
class LocationComponent extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<LocationComponent> $type;

  @jni$_.internal
  LocationComponent.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/location/LocationComponent',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $LocationComponent$NullableType();
  static const type = $LocationComponent$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lorg/maplibre/android/maps/MapLibreMap;Lorg/maplibre/android/maps/Transform;Ljava/util/List;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(org.maplibre.android.maps.MapLibreMap mapLibreMap, org.maplibre.android.maps.Transform transform, java.util.List list)`
  /// The returned object must be released after use, by calling the [release] method.
  factory LocationComponent(
    maplibremap$_.MapLibreMap mapLibreMap,
    transform$_.Transform transform,
    jni$_.JList<maplibremap$_.MapLibreMap$OnDeveloperAnimationListener?> list,
  ) {
    final _$mapLibreMap = mapLibreMap.reference;
    final _$transform = transform.reference;
    final _$list = list.reference;
    return LocationComponent.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$mapLibreMap.pointer,
        _$transform.pointer,
        _$list.pointer,
      ).reference,
    );
  }

  static final _id_activateLocationComponent = _class.instanceMethodId(
    r'activateLocationComponent',
    r'(Lorg/maplibre/android/location/LocationComponentActivationOptions;)V',
  );

  static final _activateLocationComponent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void activateLocationComponent(org.maplibre.android.location.LocationComponentActivationOptions locationComponentActivationOptions)`
  void activateLocationComponent(
    locationcomponentactivationoptions$_.LocationComponentActivationOptions
    locationComponentActivationOptions,
  ) {
    final _$locationComponentActivationOptions =
        locationComponentActivationOptions.reference;
    _activateLocationComponent(
      reference.pointer,
      _id_activateLocationComponent as jni$_.JMethodIDPtr,
      _$locationComponentActivationOptions.pointer,
    ).check();
  }

  static final _id_setLocationComponentEnabled = _class.instanceMethodId(
    r'setLocationComponentEnabled',
    r'(Z)V',
  );

  static final _setLocationComponentEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setLocationComponentEnabled(boolean z)`
  void setLocationComponentEnabled(bool z) {
    _setLocationComponentEnabled(
      reference.pointer,
      _id_setLocationComponentEnabled as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_isLocationComponentEnabled = _class.instanceMethodId(
    r'isLocationComponentEnabled',
    r'()Z',
  );

  static final _isLocationComponentEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isLocationComponentEnabled()`
  bool isLocationComponentEnabled() {
    return _isLocationComponentEnabled(
      reference.pointer,
      _id_isLocationComponentEnabled as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_setCameraMode = _class.instanceMethodId(
    r'setCameraMode',
    r'(I)V',
  );

  static final _setCameraMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setCameraMode(int i)`
  void setCameraMode(int i) {
    _setCameraMode(
      reference.pointer,
      _id_setCameraMode as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_setCameraMode$1 = _class.instanceMethodId(
    r'setCameraMode',
    r'(ILorg/maplibre/android/location/OnLocationCameraTransitionListener;)V',
  );

  static final _setCameraMode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setCameraMode(int i, org.maplibre.android.location.OnLocationCameraTransitionListener onLocationCameraTransitionListener)`
  void setCameraMode$1(
    int i,
    onlocationcameratransitionlistener$_.OnLocationCameraTransitionListener?
    onLocationCameraTransitionListener,
  ) {
    final _$onLocationCameraTransitionListener =
        onLocationCameraTransitionListener?.reference ?? jni$_.jNullReference;
    _setCameraMode$1(
      reference.pointer,
      _id_setCameraMode$1 as jni$_.JMethodIDPtr,
      i,
      _$onLocationCameraTransitionListener.pointer,
    ).check();
  }

  static final _id_setCameraMode$2 = _class.instanceMethodId(
    r'setCameraMode',
    r'(IJLjava/lang/Double;Ljava/lang/Double;Ljava/lang/Double;Lorg/maplibre/android/location/OnLocationCameraTransitionListener;)V',
  );

  static final _setCameraMode$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Int32,
                    jni$_.Int64,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setCameraMode(int i, long j, java.lang.Double double, java.lang.Double double1, java.lang.Double double2, org.maplibre.android.location.OnLocationCameraTransitionListener onLocationCameraTransitionListener)`
  void setCameraMode$2(
    int i,
    int j,
    jni$_.JDouble? double,
    jni$_.JDouble? double1,
    jni$_.JDouble? double2,
    onlocationcameratransitionlistener$_.OnLocationCameraTransitionListener?
    onLocationCameraTransitionListener,
  ) {
    final _$double = double?.reference ?? jni$_.jNullReference;
    final _$double1 = double1?.reference ?? jni$_.jNullReference;
    final _$double2 = double2?.reference ?? jni$_.jNullReference;
    final _$onLocationCameraTransitionListener =
        onLocationCameraTransitionListener?.reference ?? jni$_.jNullReference;
    _setCameraMode$2(
      reference.pointer,
      _id_setCameraMode$2 as jni$_.JMethodIDPtr,
      i,
      j,
      _$double.pointer,
      _$double1.pointer,
      _$double2.pointer,
      _$onLocationCameraTransitionListener.pointer,
    ).check();
  }

  static final _id_getCameraMode = _class.instanceMethodId(
    r'getCameraMode',
    r'()I',
  );

  static final _getCameraMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getCameraMode()`
  int getCameraMode() {
    return _getCameraMode(
      reference.pointer,
      _id_getCameraMode as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_setRenderMode = _class.instanceMethodId(
    r'setRenderMode',
    r'(I)V',
  );

  static final _setRenderMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setRenderMode(int i)`
  void setRenderMode(int i) {
    _setRenderMode(
      reference.pointer,
      _id_setRenderMode as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_getRenderMode = _class.instanceMethodId(
    r'getRenderMode',
    r'()I',
  );

  static final _getRenderMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getRenderMode()`
  int getRenderMode() {
    return _getRenderMode(
      reference.pointer,
      _id_getRenderMode as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getLocationComponentOptions = _class.instanceMethodId(
    r'getLocationComponentOptions',
    r'()Lorg/maplibre/android/location/LocationComponentOptions;',
  );

  static final _getLocationComponentOptions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.location.LocationComponentOptions getLocationComponentOptions()`
  /// The returned object must be released after use, by calling the [release] method.
  locationcomponentoptions$_.LocationComponentOptions?
  getLocationComponentOptions() {
    return _getLocationComponentOptions(
      reference.pointer,
      _id_getLocationComponentOptions as jni$_.JMethodIDPtr,
    ).object<locationcomponentoptions$_.LocationComponentOptions?>(
      const locationcomponentoptions$_.$LocationComponentOptions$NullableType(),
    );
  }

  static final _id_applyStyle = _class.instanceMethodId(
    r'applyStyle',
    r'(Landroid/content/Context;I)V',
  );

  static final _applyStyle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void applyStyle(android.content.Context context, int i)`
  void applyStyle(jni$_.JObject context, int i) {
    final _$context = context.reference;
    _applyStyle(
      reference.pointer,
      _id_applyStyle as jni$_.JMethodIDPtr,
      _$context.pointer,
      i,
    ).check();
  }

  static final _id_applyStyle$1 = _class.instanceMethodId(
    r'applyStyle',
    r'(Lorg/maplibre/android/location/LocationComponentOptions;)V',
  );

  static final _applyStyle$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void applyStyle(org.maplibre.android.location.LocationComponentOptions locationComponentOptions)`
  void applyStyle$1(
    locationcomponentoptions$_.LocationComponentOptions
    locationComponentOptions,
  ) {
    final _$locationComponentOptions = locationComponentOptions.reference;
    _applyStyle$1(
      reference.pointer,
      _id_applyStyle$1 as jni$_.JMethodIDPtr,
      _$locationComponentOptions.pointer,
    ).check();
  }

  static final _id_zoomWhileTracking = _class.instanceMethodId(
    r'zoomWhileTracking',
    r'(DJLorg/maplibre/android/maps/MapLibreMap$CancelableCallback;)V',
  );

  static final _zoomWhileTracking =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Double, jni$_.Int64, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void zoomWhileTracking(double d, long j, org.maplibre.android.maps.MapLibreMap$CancelableCallback cancelableCallback)`
  void zoomWhileTracking(
    double d,
    int j,
    maplibremap$_.MapLibreMap$CancelableCallback? cancelableCallback,
  ) {
    final _$cancelableCallback =
        cancelableCallback?.reference ?? jni$_.jNullReference;
    _zoomWhileTracking(
      reference.pointer,
      _id_zoomWhileTracking as jni$_.JMethodIDPtr,
      d,
      j,
      _$cancelableCallback.pointer,
    ).check();
  }

  static final _id_zoomWhileTracking$1 = _class.instanceMethodId(
    r'zoomWhileTracking',
    r'(DJ)V',
  );

  static final _zoomWhileTracking$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double, jni$_.Int64)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              int,
            )
          >();

  /// from: `public void zoomWhileTracking(double d, long j)`
  void zoomWhileTracking$1(double d, int j) {
    _zoomWhileTracking$1(
      reference.pointer,
      _id_zoomWhileTracking$1 as jni$_.JMethodIDPtr,
      d,
      j,
    ).check();
  }

  static final _id_zoomWhileTracking$2 = _class.instanceMethodId(
    r'zoomWhileTracking',
    r'(D)V',
  );

  static final _zoomWhileTracking$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
            )
          >();

  /// from: `public void zoomWhileTracking(double d)`
  void zoomWhileTracking$2(double d) {
    _zoomWhileTracking$2(
      reference.pointer,
      _id_zoomWhileTracking$2 as jni$_.JMethodIDPtr,
      d,
    ).check();
  }

  static final _id_cancelZoomWhileTrackingAnimation = _class.instanceMethodId(
    r'cancelZoomWhileTrackingAnimation',
    r'()V',
  );

  static final _cancelZoomWhileTrackingAnimation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void cancelZoomWhileTrackingAnimation()`
  void cancelZoomWhileTrackingAnimation() {
    _cancelZoomWhileTrackingAnimation(
      reference.pointer,
      _id_cancelZoomWhileTrackingAnimation as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_paddingWhileTracking = _class.instanceMethodId(
    r'paddingWhileTracking',
    r'([D)V',
  );

  static final _paddingWhileTracking =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void paddingWhileTracking(double[] ds)`
  void paddingWhileTracking(jni$_.JDoubleArray? ds) {
    final _$ds = ds?.reference ?? jni$_.jNullReference;
    _paddingWhileTracking(
      reference.pointer,
      _id_paddingWhileTracking as jni$_.JMethodIDPtr,
      _$ds.pointer,
    ).check();
  }

  static final _id_paddingWhileTracking$1 = _class.instanceMethodId(
    r'paddingWhileTracking',
    r'([DJ)V',
  );

  static final _paddingWhileTracking$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int64)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void paddingWhileTracking(double[] ds, long j)`
  void paddingWhileTracking$1(jni$_.JDoubleArray? ds, int j) {
    final _$ds = ds?.reference ?? jni$_.jNullReference;
    _paddingWhileTracking$1(
      reference.pointer,
      _id_paddingWhileTracking$1 as jni$_.JMethodIDPtr,
      _$ds.pointer,
      j,
    ).check();
  }

  static final _id_paddingWhileTracking$2 = _class.instanceMethodId(
    r'paddingWhileTracking',
    r'([DJLorg/maplibre/android/maps/MapLibreMap$CancelableCallback;)V',
  );

  static final _paddingWhileTracking$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int64,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void paddingWhileTracking(double[] ds, long j, org.maplibre.android.maps.MapLibreMap$CancelableCallback cancelableCallback)`
  void paddingWhileTracking$2(
    jni$_.JDoubleArray? ds,
    int j,
    maplibremap$_.MapLibreMap$CancelableCallback? cancelableCallback,
  ) {
    final _$ds = ds?.reference ?? jni$_.jNullReference;
    final _$cancelableCallback =
        cancelableCallback?.reference ?? jni$_.jNullReference;
    _paddingWhileTracking$2(
      reference.pointer,
      _id_paddingWhileTracking$2 as jni$_.JMethodIDPtr,
      _$ds.pointer,
      j,
      _$cancelableCallback.pointer,
    ).check();
  }

  static final _id_cancelPaddingWhileTrackingAnimation = _class
      .instanceMethodId(r'cancelPaddingWhileTrackingAnimation', r'()V');

  static final _cancelPaddingWhileTrackingAnimation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void cancelPaddingWhileTrackingAnimation()`
  void cancelPaddingWhileTrackingAnimation() {
    _cancelPaddingWhileTrackingAnimation(
      reference.pointer,
      _id_cancelPaddingWhileTrackingAnimation as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_tiltWhileTracking = _class.instanceMethodId(
    r'tiltWhileTracking',
    r'(DJLorg/maplibre/android/maps/MapLibreMap$CancelableCallback;)V',
  );

  static final _tiltWhileTracking =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Double, jni$_.Int64, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void tiltWhileTracking(double d, long j, org.maplibre.android.maps.MapLibreMap$CancelableCallback cancelableCallback)`
  void tiltWhileTracking(
    double d,
    int j,
    maplibremap$_.MapLibreMap$CancelableCallback? cancelableCallback,
  ) {
    final _$cancelableCallback =
        cancelableCallback?.reference ?? jni$_.jNullReference;
    _tiltWhileTracking(
      reference.pointer,
      _id_tiltWhileTracking as jni$_.JMethodIDPtr,
      d,
      j,
      _$cancelableCallback.pointer,
    ).check();
  }

  static final _id_tiltWhileTracking$1 = _class.instanceMethodId(
    r'tiltWhileTracking',
    r'(DJ)V',
  );

  static final _tiltWhileTracking$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double, jni$_.Int64)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              int,
            )
          >();

  /// from: `public void tiltWhileTracking(double d, long j)`
  void tiltWhileTracking$1(double d, int j) {
    _tiltWhileTracking$1(
      reference.pointer,
      _id_tiltWhileTracking$1 as jni$_.JMethodIDPtr,
      d,
      j,
    ).check();
  }

  static final _id_tiltWhileTracking$2 = _class.instanceMethodId(
    r'tiltWhileTracking',
    r'(D)V',
  );

  static final _tiltWhileTracking$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
            )
          >();

  /// from: `public void tiltWhileTracking(double d)`
  void tiltWhileTracking$2(double d) {
    _tiltWhileTracking$2(
      reference.pointer,
      _id_tiltWhileTracking$2 as jni$_.JMethodIDPtr,
      d,
    ).check();
  }

  static final _id_cancelTiltWhileTrackingAnimation = _class.instanceMethodId(
    r'cancelTiltWhileTrackingAnimation',
    r'()V',
  );

  static final _cancelTiltWhileTrackingAnimation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void cancelTiltWhileTrackingAnimation()`
  void cancelTiltWhileTrackingAnimation() {
    _cancelTiltWhileTrackingAnimation(
      reference.pointer,
      _id_cancelTiltWhileTrackingAnimation as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_forceLocationUpdate = _class.instanceMethodId(
    r'forceLocationUpdate',
    r'(Landroid/location/Location;)V',
  );

  static final _forceLocationUpdate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void forceLocationUpdate(android.location.Location location)`
  void forceLocationUpdate(location$_.Location? location) {
    final _$location = location?.reference ?? jni$_.jNullReference;
    _forceLocationUpdate(
      reference.pointer,
      _id_forceLocationUpdate as jni$_.JMethodIDPtr,
      _$location.pointer,
    ).check();
  }

  static final _id_forceLocationUpdate$1 = _class.instanceMethodId(
    r'forceLocationUpdate',
    r'(Ljava/util/List;Z)V',
  );

  static final _forceLocationUpdate$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void forceLocationUpdate(java.util.List list, boolean z)`
  void forceLocationUpdate$1(jni$_.JList<location$_.Location?>? list, bool z) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    _forceLocationUpdate$1(
      reference.pointer,
      _id_forceLocationUpdate$1 as jni$_.JMethodIDPtr,
      _$list.pointer,
      z ? 1 : 0,
    ).check();
  }

  static final _id_setMaxAnimationFps = _class.instanceMethodId(
    r'setMaxAnimationFps',
    r'(I)V',
  );

  static final _setMaxAnimationFps =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void setMaxAnimationFps(int i)`
  void setMaxAnimationFps(int i) {
    _setMaxAnimationFps(
      reference.pointer,
      _id_setMaxAnimationFps as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_setLocationEngine = _class.instanceMethodId(
    r'setLocationEngine',
    r'(Lorg/maplibre/android/location/engine/LocationEngine;)V',
  );

  static final _setLocationEngine =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setLocationEngine(org.maplibre.android.location.engine.LocationEngine locationEngine)`
  void setLocationEngine(locationengine$_.LocationEngine? locationEngine) {
    final _$locationEngine = locationEngine?.reference ?? jni$_.jNullReference;
    _setLocationEngine(
      reference.pointer,
      _id_setLocationEngine as jni$_.JMethodIDPtr,
      _$locationEngine.pointer,
    ).check();
  }

  static final _id_setLocationEngineRequest = _class.instanceMethodId(
    r'setLocationEngineRequest',
    r'(Lorg/maplibre/android/location/engine/LocationEngineRequest;)V',
  );

  static final _setLocationEngineRequest =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setLocationEngineRequest(org.maplibre.android.location.engine.LocationEngineRequest locationEngineRequest)`
  void setLocationEngineRequest(
    locationenginerequest$_.LocationEngineRequest locationEngineRequest,
  ) {
    final _$locationEngineRequest = locationEngineRequest.reference;
    _setLocationEngineRequest(
      reference.pointer,
      _id_setLocationEngineRequest as jni$_.JMethodIDPtr,
      _$locationEngineRequest.pointer,
    ).check();
  }

  static final _id_getLocationEngineRequest = _class.instanceMethodId(
    r'getLocationEngineRequest',
    r'()Lorg/maplibre/android/location/engine/LocationEngineRequest;',
  );

  static final _getLocationEngineRequest =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.location.engine.LocationEngineRequest getLocationEngineRequest()`
  /// The returned object must be released after use, by calling the [release] method.
  locationenginerequest$_.LocationEngineRequest getLocationEngineRequest() {
    return _getLocationEngineRequest(
      reference.pointer,
      _id_getLocationEngineRequest as jni$_.JMethodIDPtr,
    ).object<locationenginerequest$_.LocationEngineRequest>(
      const locationenginerequest$_.$LocationEngineRequest$Type(),
    );
  }

  static final _id_getLocationEngine = _class.instanceMethodId(
    r'getLocationEngine',
    r'()Lorg/maplibre/android/location/engine/LocationEngine;',
  );

  static final _getLocationEngine =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.location.engine.LocationEngine getLocationEngine()`
  /// The returned object must be released after use, by calling the [release] method.
  locationengine$_.LocationEngine? getLocationEngine() {
    return _getLocationEngine(
      reference.pointer,
      _id_getLocationEngine as jni$_.JMethodIDPtr,
    ).object<locationengine$_.LocationEngine?>(
      const locationengine$_.$LocationEngine$NullableType(),
    );
  }

  static final _id_setCompassEngine = _class.instanceMethodId(
    r'setCompassEngine',
    r'(Lorg/maplibre/android/location/CompassEngine;)V',
  );

  static final _setCompassEngine =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setCompassEngine(org.maplibre.android.location.CompassEngine compassEngine)`
  void setCompassEngine(compassengine$_.CompassEngine? compassEngine) {
    final _$compassEngine = compassEngine?.reference ?? jni$_.jNullReference;
    _setCompassEngine(
      reference.pointer,
      _id_setCompassEngine as jni$_.JMethodIDPtr,
      _$compassEngine.pointer,
    ).check();
  }

  static final _id_getCompassEngine = _class.instanceMethodId(
    r'getCompassEngine',
    r'()Lorg/maplibre/android/location/CompassEngine;',
  );

  static final _getCompassEngine =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.location.CompassEngine getCompassEngine()`
  /// The returned object must be released after use, by calling the [release] method.
  compassengine$_.CompassEngine? getCompassEngine() {
    return _getCompassEngine(
      reference.pointer,
      _id_getCompassEngine as jni$_.JMethodIDPtr,
    ).object<compassengine$_.CompassEngine?>(
      const compassengine$_.$CompassEngine$NullableType(),
    );
  }

  static final _id_getLastKnownLocation = _class.instanceMethodId(
    r'getLastKnownLocation',
    r'()Landroid/location/Location;',
  );

  static final _getLastKnownLocation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.location.Location getLastKnownLocation()`
  /// The returned object must be released after use, by calling the [release] method.
  location$_.Location? getLastKnownLocation() {
    return _getLastKnownLocation(
      reference.pointer,
      _id_getLastKnownLocation as jni$_.JMethodIDPtr,
    ).object<location$_.Location?>(const location$_.$Location$NullableType());
  }

  static final _id_addOnLocationClickListener = _class.instanceMethodId(
    r'addOnLocationClickListener',
    r'(Lorg/maplibre/android/location/OnLocationClickListener;)V',
  );

  static final _addOnLocationClickListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addOnLocationClickListener(org.maplibre.android.location.OnLocationClickListener onLocationClickListener)`
  void addOnLocationClickListener(
    onlocationclicklistener$_.OnLocationClickListener onLocationClickListener,
  ) {
    final _$onLocationClickListener = onLocationClickListener.reference;
    _addOnLocationClickListener(
      reference.pointer,
      _id_addOnLocationClickListener as jni$_.JMethodIDPtr,
      _$onLocationClickListener.pointer,
    ).check();
  }

  static final _id_removeOnLocationClickListener = _class.instanceMethodId(
    r'removeOnLocationClickListener',
    r'(Lorg/maplibre/android/location/OnLocationClickListener;)V',
  );

  static final _removeOnLocationClickListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void removeOnLocationClickListener(org.maplibre.android.location.OnLocationClickListener onLocationClickListener)`
  void removeOnLocationClickListener(
    onlocationclicklistener$_.OnLocationClickListener onLocationClickListener,
  ) {
    final _$onLocationClickListener = onLocationClickListener.reference;
    _removeOnLocationClickListener(
      reference.pointer,
      _id_removeOnLocationClickListener as jni$_.JMethodIDPtr,
      _$onLocationClickListener.pointer,
    ).check();
  }

  static final _id_addOnLocationLongClickListener = _class.instanceMethodId(
    r'addOnLocationLongClickListener',
    r'(Lorg/maplibre/android/location/OnLocationLongClickListener;)V',
  );

  static final _addOnLocationLongClickListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addOnLocationLongClickListener(org.maplibre.android.location.OnLocationLongClickListener onLocationLongClickListener)`
  void addOnLocationLongClickListener(
    onlocationlongclicklistener$_.OnLocationLongClickListener
    onLocationLongClickListener,
  ) {
    final _$onLocationLongClickListener = onLocationLongClickListener.reference;
    _addOnLocationLongClickListener(
      reference.pointer,
      _id_addOnLocationLongClickListener as jni$_.JMethodIDPtr,
      _$onLocationLongClickListener.pointer,
    ).check();
  }

  static final _id_removeOnLocationLongClickListener = _class.instanceMethodId(
    r'removeOnLocationLongClickListener',
    r'(Lorg/maplibre/android/location/OnLocationLongClickListener;)V',
  );

  static final _removeOnLocationLongClickListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void removeOnLocationLongClickListener(org.maplibre.android.location.OnLocationLongClickListener onLocationLongClickListener)`
  void removeOnLocationLongClickListener(
    onlocationlongclicklistener$_.OnLocationLongClickListener
    onLocationLongClickListener,
  ) {
    final _$onLocationLongClickListener = onLocationLongClickListener.reference;
    _removeOnLocationLongClickListener(
      reference.pointer,
      _id_removeOnLocationLongClickListener as jni$_.JMethodIDPtr,
      _$onLocationLongClickListener.pointer,
    ).check();
  }

  static final _id_addOnCameraTrackingChangedListener = _class.instanceMethodId(
    r'addOnCameraTrackingChangedListener',
    r'(Lorg/maplibre/android/location/OnCameraTrackingChangedListener;)V',
  );

  static final _addOnCameraTrackingChangedListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addOnCameraTrackingChangedListener(org.maplibre.android.location.OnCameraTrackingChangedListener onCameraTrackingChangedListener)`
  void addOnCameraTrackingChangedListener(
    oncameratrackingchangedlistener$_.OnCameraTrackingChangedListener
    onCameraTrackingChangedListener,
  ) {
    final _$onCameraTrackingChangedListener =
        onCameraTrackingChangedListener.reference;
    _addOnCameraTrackingChangedListener(
      reference.pointer,
      _id_addOnCameraTrackingChangedListener as jni$_.JMethodIDPtr,
      _$onCameraTrackingChangedListener.pointer,
    ).check();
  }

  static final _id_removeOnCameraTrackingChangedListener = _class
      .instanceMethodId(
        r'removeOnCameraTrackingChangedListener',
        r'(Lorg/maplibre/android/location/OnCameraTrackingChangedListener;)V',
      );

  static final _removeOnCameraTrackingChangedListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void removeOnCameraTrackingChangedListener(org.maplibre.android.location.OnCameraTrackingChangedListener onCameraTrackingChangedListener)`
  void removeOnCameraTrackingChangedListener(
    oncameratrackingchangedlistener$_.OnCameraTrackingChangedListener
    onCameraTrackingChangedListener,
  ) {
    final _$onCameraTrackingChangedListener =
        onCameraTrackingChangedListener.reference;
    _removeOnCameraTrackingChangedListener(
      reference.pointer,
      _id_removeOnCameraTrackingChangedListener as jni$_.JMethodIDPtr,
      _$onCameraTrackingChangedListener.pointer,
    ).check();
  }

  static final _id_addOnRenderModeChangedListener = _class.instanceMethodId(
    r'addOnRenderModeChangedListener',
    r'(Lorg/maplibre/android/location/OnRenderModeChangedListener;)V',
  );

  static final _addOnRenderModeChangedListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addOnRenderModeChangedListener(org.maplibre.android.location.OnRenderModeChangedListener onRenderModeChangedListener)`
  void addOnRenderModeChangedListener(
    onrendermodechangedlistener$_.OnRenderModeChangedListener
    onRenderModeChangedListener,
  ) {
    final _$onRenderModeChangedListener = onRenderModeChangedListener.reference;
    _addOnRenderModeChangedListener(
      reference.pointer,
      _id_addOnRenderModeChangedListener as jni$_.JMethodIDPtr,
      _$onRenderModeChangedListener.pointer,
    ).check();
  }

  static final _id_removeRenderModeChangedListener = _class.instanceMethodId(
    r'removeRenderModeChangedListener',
    r'(Lorg/maplibre/android/location/OnRenderModeChangedListener;)V',
  );

  static final _removeRenderModeChangedListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void removeRenderModeChangedListener(org.maplibre.android.location.OnRenderModeChangedListener onRenderModeChangedListener)`
  void removeRenderModeChangedListener(
    onrendermodechangedlistener$_.OnRenderModeChangedListener
    onRenderModeChangedListener,
  ) {
    final _$onRenderModeChangedListener = onRenderModeChangedListener.reference;
    _removeRenderModeChangedListener(
      reference.pointer,
      _id_removeRenderModeChangedListener as jni$_.JMethodIDPtr,
      _$onRenderModeChangedListener.pointer,
    ).check();
  }

  static final _id_addOnLocationStaleListener = _class.instanceMethodId(
    r'addOnLocationStaleListener',
    r'(Lorg/maplibre/android/location/OnLocationStaleListener;)V',
  );

  static final _addOnLocationStaleListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addOnLocationStaleListener(org.maplibre.android.location.OnLocationStaleListener onLocationStaleListener)`
  void addOnLocationStaleListener(
    onlocationstalelistener$_.OnLocationStaleListener onLocationStaleListener,
  ) {
    final _$onLocationStaleListener = onLocationStaleListener.reference;
    _addOnLocationStaleListener(
      reference.pointer,
      _id_addOnLocationStaleListener as jni$_.JMethodIDPtr,
      _$onLocationStaleListener.pointer,
    ).check();
  }

  static final _id_removeOnLocationStaleListener = _class.instanceMethodId(
    r'removeOnLocationStaleListener',
    r'(Lorg/maplibre/android/location/OnLocationStaleListener;)V',
  );

  static final _removeOnLocationStaleListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void removeOnLocationStaleListener(org.maplibre.android.location.OnLocationStaleListener onLocationStaleListener)`
  void removeOnLocationStaleListener(
    onlocationstalelistener$_.OnLocationStaleListener onLocationStaleListener,
  ) {
    final _$onLocationStaleListener = onLocationStaleListener.reference;
    _removeOnLocationStaleListener(
      reference.pointer,
      _id_removeOnLocationStaleListener as jni$_.JMethodIDPtr,
      _$onLocationStaleListener.pointer,
    ).check();
  }

  static final _id_onStart = _class.instanceMethodId(r'onStart', r'()V');

  static final _onStart =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onStart()`
  void onStart() {
    _onStart(reference.pointer, _id_onStart as jni$_.JMethodIDPtr).check();
  }

  static final _id_onStop = _class.instanceMethodId(r'onStop', r'()V');

  static final _onStop =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onStop()`
  void onStop() {
    _onStop(reference.pointer, _id_onStop as jni$_.JMethodIDPtr).check();
  }

  static final _id_onDestroy = _class.instanceMethodId(r'onDestroy', r'()V');

  static final _onDestroy =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onDestroy()`
  void onDestroy() {
    _onDestroy(reference.pointer, _id_onDestroy as jni$_.JMethodIDPtr).check();
  }

  static final _id_onStartLoadingMap = _class.instanceMethodId(
    r'onStartLoadingMap',
    r'()V',
  );

  static final _onStartLoadingMap =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onStartLoadingMap()`
  void onStartLoadingMap() {
    _onStartLoadingMap(
      reference.pointer,
      _id_onStartLoadingMap as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_onFinishLoadingStyle = _class.instanceMethodId(
    r'onFinishLoadingStyle',
    r'()V',
  );

  static final _onFinishLoadingStyle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onFinishLoadingStyle()`
  void onFinishLoadingStyle() {
    _onFinishLoadingStyle(
      reference.pointer,
      _id_onFinishLoadingStyle as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_isLocationComponentActivated = _class.instanceMethodId(
    r'isLocationComponentActivated',
    r'()Z',
  );

  static final _isLocationComponentActivated =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isLocationComponentActivated()`
  bool isLocationComponentActivated() {
    return _isLocationComponentActivated(
      reference.pointer,
      _id_isLocationComponentActivated as jni$_.JMethodIDPtr,
    ).boolean;
  }
}

final class $LocationComponent$NullableType
    extends jni$_.JObjType<LocationComponent?> {
  @jni$_.internal
  const $LocationComponent$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/location/LocationComponent;';

  @jni$_.internal
  @core$_.override
  LocationComponent? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : LocationComponent.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LocationComponent?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($LocationComponent$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LocationComponent$NullableType) &&
        other is $LocationComponent$NullableType;
  }
}

final class $LocationComponent$Type extends jni$_.JObjType<LocationComponent> {
  @jni$_.internal
  const $LocationComponent$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/location/LocationComponent;';

  @jni$_.internal
  @core$_.override
  LocationComponent fromReference(jni$_.JReference reference) =>
      LocationComponent.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LocationComponent?> get nullableType =>
      const $LocationComponent$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($LocationComponent$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LocationComponent$Type) &&
        other is $LocationComponent$Type;
  }
}
