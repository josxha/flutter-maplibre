// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'Layer.dart' as layer$_;

import 'PropertyValue.dart' as propertyvalue$_;

import 'TransitionOptions.dart' as transitionoptions$_;

/// from: `org.maplibre.android.style.layers.FillExtrusionLayer`
class FillExtrusionLayer extends layer$_.Layer {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<FillExtrusionLayer> $type;

  @jni$_.internal
  FillExtrusionLayer.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/style/layers/FillExtrusionLayer',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $FillExtrusionLayer$NullableType();
  static const type = $FillExtrusionLayer$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FillExtrusionLayer(jni$_.JString? string, jni$_.JString? string1) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return FillExtrusionLayer.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$string.pointer,
        _$string1.pointer,
      ).reference,
    );
  }

  static final _id_setSourceLayer = _class.instanceMethodId(
    r'setSourceLayer',
    r'(Ljava/lang/String;)V',
  );

  static final _setSourceLayer =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setSourceLayer(java.lang.String string)`
  void setSourceLayer(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _setSourceLayer(
      reference.pointer,
      _id_setSourceLayer as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).check();
  }

  static final _id_withSourceLayer = _class.instanceMethodId(
    r'withSourceLayer',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/FillExtrusionLayer;',
  );

  static final _withSourceLayer =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.FillExtrusionLayer withSourceLayer(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  FillExtrusionLayer withSourceLayer(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _withSourceLayer(
      reference.pointer,
      _id_withSourceLayer as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<FillExtrusionLayer>(const $FillExtrusionLayer$Type());
  }

  static final _id_getSourceId = _class.instanceMethodId(
    r'getSourceId',
    r'()Ljava/lang/String;',
  );

  static final _getSourceId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getSourceId()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getSourceId() {
    return _getSourceId(
      reference.pointer,
      _id_getSourceId as jni$_.JMethodIDPtr,
    ).object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_getSourceLayer = _class.instanceMethodId(
    r'getSourceLayer',
    r'()Ljava/lang/String;',
  );

  static final _getSourceLayer =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getSourceLayer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getSourceLayer() {
    return _getSourceLayer(
      reference.pointer,
      _id_getSourceLayer as jni$_.JMethodIDPtr,
    ).object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_setFilter = _class.instanceMethodId(
    r'setFilter',
    r'(Lorg/maplibre/android/style/expressions/Expression;)V',
  );

  static final _setFilter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setFilter(org.maplibre.android.style.expressions.Expression expression)`
  void setFilter(jni$_.JObject expression) {
    final _$expression = expression.reference;
    _setFilter(
      reference.pointer,
      _id_setFilter as jni$_.JMethodIDPtr,
      _$expression.pointer,
    ).check();
  }

  static final _id_withFilter = _class.instanceMethodId(
    r'withFilter',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/FillExtrusionLayer;',
  );

  static final _withFilter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.FillExtrusionLayer withFilter(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  FillExtrusionLayer withFilter(jni$_.JObject expression) {
    final _$expression = expression.reference;
    return _withFilter(
      reference.pointer,
      _id_withFilter as jni$_.JMethodIDPtr,
      _$expression.pointer,
    ).object<FillExtrusionLayer>(const $FillExtrusionLayer$Type());
  }

  static final _id_getFilter = _class.instanceMethodId(
    r'getFilter',
    r'()Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _getFilter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.expressions.Expression getFilter()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFilter() {
    return _getFilter(
      reference.pointer,
      _id_getFilter as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_withProperties = _class.instanceMethodId(
    r'withProperties',
    r'([Lorg/maplibre/android/style/layers/PropertyValue;)Lorg/maplibre/android/style/layers/FillExtrusionLayer;',
  );

  static final _withProperties =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.FillExtrusionLayer withProperties(java.lang.Object[] propertyValues)`
  /// The returned object must be released after use, by calling the [release] method.
  FillExtrusionLayer withProperties(
    jni$_.JArray<propertyvalue$_.PropertyValue<jni$_.JObject?>?> propertyValues,
  ) {
    final _$propertyValues = propertyValues.reference;
    return _withProperties(
      reference.pointer,
      _id_withProperties as jni$_.JMethodIDPtr,
      _$propertyValues.pointer,
    ).object<FillExtrusionLayer>(const $FillExtrusionLayer$Type());
  }

  static final _id_getFillExtrusionOpacity = _class.instanceMethodId(
    r'getFillExtrusionOpacity',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getFillExtrusionOpacity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getFillExtrusionOpacity()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?> getFillExtrusionOpacity() {
    return _getFillExtrusionOpacity(
      reference.pointer,
      _id_getFillExtrusionOpacity as jni$_.JMethodIDPtr,
    ).object<propertyvalue$_.PropertyValue<jni$_.JFloat?>>(
      const propertyvalue$_.$PropertyValue$Type<jni$_.JFloat?>(
        jni$_.JFloatNullableType(),
      ),
    );
  }

  static final _id_getFillExtrusionOpacityTransition = _class.instanceMethodId(
    r'getFillExtrusionOpacityTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getFillExtrusionOpacityTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getFillExtrusionOpacityTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions getFillExtrusionOpacityTransition() {
    return _getFillExtrusionOpacityTransition(
      reference.pointer,
      _id_getFillExtrusionOpacityTransition as jni$_.JMethodIDPtr,
    ).object<transitionoptions$_.TransitionOptions>(
      const transitionoptions$_.$TransitionOptions$Type(),
    );
  }

  static final _id_setFillExtrusionOpacityTransition = _class.instanceMethodId(
    r'setFillExtrusionOpacityTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setFillExtrusionOpacityTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setFillExtrusionOpacityTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setFillExtrusionOpacityTransition(
    transitionoptions$_.TransitionOptions transitionOptions,
  ) {
    final _$transitionOptions = transitionOptions.reference;
    _setFillExtrusionOpacityTransition(
      reference.pointer,
      _id_setFillExtrusionOpacityTransition as jni$_.JMethodIDPtr,
      _$transitionOptions.pointer,
    ).check();
  }

  static final _id_getFillExtrusionColor = _class.instanceMethodId(
    r'getFillExtrusionColor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getFillExtrusionColor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getFillExtrusionColor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?> getFillExtrusionColor() {
    return _getFillExtrusionColor(
      reference.pointer,
      _id_getFillExtrusionColor as jni$_.JMethodIDPtr,
    ).object<propertyvalue$_.PropertyValue<jni$_.JString?>>(
      const propertyvalue$_.$PropertyValue$Type<jni$_.JString?>(
        jni$_.JStringNullableType(),
      ),
    );
  }

  static final _id_getFillExtrusionColorAsInt = _class.instanceMethodId(
    r'getFillExtrusionColorAsInt',
    r'()I',
  );

  static final _getFillExtrusionColorAsInt =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getFillExtrusionColorAsInt()`
  int getFillExtrusionColorAsInt() {
    return _getFillExtrusionColorAsInt(
      reference.pointer,
      _id_getFillExtrusionColorAsInt as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getFillExtrusionColorTransition = _class.instanceMethodId(
    r'getFillExtrusionColorTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getFillExtrusionColorTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getFillExtrusionColorTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions getFillExtrusionColorTransition() {
    return _getFillExtrusionColorTransition(
      reference.pointer,
      _id_getFillExtrusionColorTransition as jni$_.JMethodIDPtr,
    ).object<transitionoptions$_.TransitionOptions>(
      const transitionoptions$_.$TransitionOptions$Type(),
    );
  }

  static final _id_setFillExtrusionColorTransition = _class.instanceMethodId(
    r'setFillExtrusionColorTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setFillExtrusionColorTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setFillExtrusionColorTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setFillExtrusionColorTransition(
    transitionoptions$_.TransitionOptions transitionOptions,
  ) {
    final _$transitionOptions = transitionOptions.reference;
    _setFillExtrusionColorTransition(
      reference.pointer,
      _id_setFillExtrusionColorTransition as jni$_.JMethodIDPtr,
      _$transitionOptions.pointer,
    ).check();
  }

  static final _id_getFillExtrusionTranslate = _class.instanceMethodId(
    r'getFillExtrusionTranslate',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getFillExtrusionTranslate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getFillExtrusionTranslate()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>
  getFillExtrusionTranslate() {
    return _getFillExtrusionTranslate(
      reference.pointer,
      _id_getFillExtrusionTranslate as jni$_.JMethodIDPtr,
    ).object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>>(
      const propertyvalue$_.$PropertyValue$Type<jni$_.JArray<jni$_.JFloat?>?>(
        jni$_.JArrayNullableType<jni$_.JFloat?>(jni$_.JFloatNullableType()),
      ),
    );
  }

  static final _id_getFillExtrusionTranslateTransition = _class
      .instanceMethodId(
        r'getFillExtrusionTranslateTransition',
        r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
      );

  static final _getFillExtrusionTranslateTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getFillExtrusionTranslateTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions getFillExtrusionTranslateTransition() {
    return _getFillExtrusionTranslateTransition(
      reference.pointer,
      _id_getFillExtrusionTranslateTransition as jni$_.JMethodIDPtr,
    ).object<transitionoptions$_.TransitionOptions>(
      const transitionoptions$_.$TransitionOptions$Type(),
    );
  }

  static final _id_setFillExtrusionTranslateTransition = _class
      .instanceMethodId(
        r'setFillExtrusionTranslateTransition',
        r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
      );

  static final _setFillExtrusionTranslateTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setFillExtrusionTranslateTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setFillExtrusionTranslateTransition(
    transitionoptions$_.TransitionOptions transitionOptions,
  ) {
    final _$transitionOptions = transitionOptions.reference;
    _setFillExtrusionTranslateTransition(
      reference.pointer,
      _id_setFillExtrusionTranslateTransition as jni$_.JMethodIDPtr,
      _$transitionOptions.pointer,
    ).check();
  }

  static final _id_getFillExtrusionTranslateAnchor = _class.instanceMethodId(
    r'getFillExtrusionTranslateAnchor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getFillExtrusionTranslateAnchor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getFillExtrusionTranslateAnchor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?>
  getFillExtrusionTranslateAnchor() {
    return _getFillExtrusionTranslateAnchor(
      reference.pointer,
      _id_getFillExtrusionTranslateAnchor as jni$_.JMethodIDPtr,
    ).object<propertyvalue$_.PropertyValue<jni$_.JString?>>(
      const propertyvalue$_.$PropertyValue$Type<jni$_.JString?>(
        jni$_.JStringNullableType(),
      ),
    );
  }

  static final _id_getFillExtrusionPattern = _class.instanceMethodId(
    r'getFillExtrusionPattern',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getFillExtrusionPattern =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getFillExtrusionPattern()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?> getFillExtrusionPattern() {
    return _getFillExtrusionPattern(
      reference.pointer,
      _id_getFillExtrusionPattern as jni$_.JMethodIDPtr,
    ).object<propertyvalue$_.PropertyValue<jni$_.JString?>>(
      const propertyvalue$_.$PropertyValue$Type<jni$_.JString?>(
        jni$_.JStringNullableType(),
      ),
    );
  }

  static final _id_getFillExtrusionPatternTransition = _class.instanceMethodId(
    r'getFillExtrusionPatternTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getFillExtrusionPatternTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getFillExtrusionPatternTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions getFillExtrusionPatternTransition() {
    return _getFillExtrusionPatternTransition(
      reference.pointer,
      _id_getFillExtrusionPatternTransition as jni$_.JMethodIDPtr,
    ).object<transitionoptions$_.TransitionOptions>(
      const transitionoptions$_.$TransitionOptions$Type(),
    );
  }

  static final _id_setFillExtrusionPatternTransition = _class.instanceMethodId(
    r'setFillExtrusionPatternTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setFillExtrusionPatternTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setFillExtrusionPatternTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setFillExtrusionPatternTransition(
    transitionoptions$_.TransitionOptions transitionOptions,
  ) {
    final _$transitionOptions = transitionOptions.reference;
    _setFillExtrusionPatternTransition(
      reference.pointer,
      _id_setFillExtrusionPatternTransition as jni$_.JMethodIDPtr,
      _$transitionOptions.pointer,
    ).check();
  }

  static final _id_getFillExtrusionHeight = _class.instanceMethodId(
    r'getFillExtrusionHeight',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getFillExtrusionHeight =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getFillExtrusionHeight()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?> getFillExtrusionHeight() {
    return _getFillExtrusionHeight(
      reference.pointer,
      _id_getFillExtrusionHeight as jni$_.JMethodIDPtr,
    ).object<propertyvalue$_.PropertyValue<jni$_.JFloat?>>(
      const propertyvalue$_.$PropertyValue$Type<jni$_.JFloat?>(
        jni$_.JFloatNullableType(),
      ),
    );
  }

  static final _id_getFillExtrusionHeightTransition = _class.instanceMethodId(
    r'getFillExtrusionHeightTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getFillExtrusionHeightTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getFillExtrusionHeightTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions getFillExtrusionHeightTransition() {
    return _getFillExtrusionHeightTransition(
      reference.pointer,
      _id_getFillExtrusionHeightTransition as jni$_.JMethodIDPtr,
    ).object<transitionoptions$_.TransitionOptions>(
      const transitionoptions$_.$TransitionOptions$Type(),
    );
  }

  static final _id_setFillExtrusionHeightTransition = _class.instanceMethodId(
    r'setFillExtrusionHeightTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setFillExtrusionHeightTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setFillExtrusionHeightTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setFillExtrusionHeightTransition(
    transitionoptions$_.TransitionOptions transitionOptions,
  ) {
    final _$transitionOptions = transitionOptions.reference;
    _setFillExtrusionHeightTransition(
      reference.pointer,
      _id_setFillExtrusionHeightTransition as jni$_.JMethodIDPtr,
      _$transitionOptions.pointer,
    ).check();
  }

  static final _id_getFillExtrusionBase = _class.instanceMethodId(
    r'getFillExtrusionBase',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getFillExtrusionBase =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getFillExtrusionBase()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?> getFillExtrusionBase() {
    return _getFillExtrusionBase(
      reference.pointer,
      _id_getFillExtrusionBase as jni$_.JMethodIDPtr,
    ).object<propertyvalue$_.PropertyValue<jni$_.JFloat?>>(
      const propertyvalue$_.$PropertyValue$Type<jni$_.JFloat?>(
        jni$_.JFloatNullableType(),
      ),
    );
  }

  static final _id_getFillExtrusionBaseTransition = _class.instanceMethodId(
    r'getFillExtrusionBaseTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getFillExtrusionBaseTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getFillExtrusionBaseTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions getFillExtrusionBaseTransition() {
    return _getFillExtrusionBaseTransition(
      reference.pointer,
      _id_getFillExtrusionBaseTransition as jni$_.JMethodIDPtr,
    ).object<transitionoptions$_.TransitionOptions>(
      const transitionoptions$_.$TransitionOptions$Type(),
    );
  }

  static final _id_setFillExtrusionBaseTransition = _class.instanceMethodId(
    r'setFillExtrusionBaseTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setFillExtrusionBaseTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setFillExtrusionBaseTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setFillExtrusionBaseTransition(
    transitionoptions$_.TransitionOptions transitionOptions,
  ) {
    final _$transitionOptions = transitionOptions.reference;
    _setFillExtrusionBaseTransition(
      reference.pointer,
      _id_setFillExtrusionBaseTransition as jni$_.JMethodIDPtr,
      _$transitionOptions.pointer,
    ).check();
  }

  static final _id_getFillExtrusionVerticalGradient = _class.instanceMethodId(
    r'getFillExtrusionVerticalGradient',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getFillExtrusionVerticalGradient =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getFillExtrusionVerticalGradient()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JBoolean?>
  getFillExtrusionVerticalGradient() {
    return _getFillExtrusionVerticalGradient(
      reference.pointer,
      _id_getFillExtrusionVerticalGradient as jni$_.JMethodIDPtr,
    ).object<propertyvalue$_.PropertyValue<jni$_.JBoolean?>>(
      const propertyvalue$_.$PropertyValue$Type<jni$_.JBoolean?>(
        jni$_.JBooleanNullableType(),
      ),
    );
  }
}

final class $FillExtrusionLayer$NullableType
    extends jni$_.JObjType<FillExtrusionLayer?> {
  @jni$_.internal
  const $FillExtrusionLayer$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/style/layers/FillExtrusionLayer;';

  @jni$_.internal
  @core$_.override
  FillExtrusionLayer? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : FillExtrusionLayer.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const layer$_.$Layer$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FillExtrusionLayer?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($FillExtrusionLayer$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FillExtrusionLayer$NullableType) &&
        other is $FillExtrusionLayer$NullableType;
  }
}

final class $FillExtrusionLayer$Type
    extends jni$_.JObjType<FillExtrusionLayer> {
  @jni$_.internal
  const $FillExtrusionLayer$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/style/layers/FillExtrusionLayer;';

  @jni$_.internal
  @core$_.override
  FillExtrusionLayer fromReference(jni$_.JReference reference) =>
      FillExtrusionLayer.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const layer$_.$Layer$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FillExtrusionLayer?> get nullableType =>
      const $FillExtrusionLayer$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($FillExtrusionLayer$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FillExtrusionLayer$Type) &&
        other is $FillExtrusionLayer$Type;
  }
}
