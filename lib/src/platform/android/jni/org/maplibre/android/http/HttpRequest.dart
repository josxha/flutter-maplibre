// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'HttpResponder.dart' as httpresponder$_;

/// from: `org.maplibre.android.http.HttpRequest`
class HttpRequest extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<HttpRequest> $type;

  @jni$_.internal
  HttpRequest.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'org/maplibre/android/http/HttpRequest');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $HttpRequest$NullableType();
  static const type = $HttpRequest$Type();

  /// from: `static public final int CONNECTION_ERROR`
  static const CONNECTION_ERROR = 0;

  /// from: `static public final int TEMPORARY_ERROR`
  static const TEMPORARY_ERROR = 1;

  /// from: `static public final int PERMANENT_ERROR`
  static const PERMANENT_ERROR = 2;
  static final _id_executeRequest = _class.instanceMethodId(
    r'executeRequest',
    r'(Lorg/maplibre/android/http/HttpResponder;JLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V',
  );

  static final _executeRequest = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int64,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public abstract void executeRequest(org.maplibre.android.http.HttpResponder httpResponder, long j, java.lang.String string, java.lang.String string1, java.lang.String string2, boolean z)`
  void executeRequest(
    httpresponder$_.HttpResponder? httpResponder,
    int j,
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JString? string2,
    bool z,
  ) {
    final _$httpResponder = httpResponder?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    _executeRequest(
            reference.pointer,
            _id_executeRequest as jni$_.JMethodIDPtr,
            _$httpResponder.pointer,
            j,
            _$string.pointer,
            _$string1.pointer,
            _$string2.pointer,
            z ? 1 : 0)
        .check();
  }

  static final _id_cancelRequest = _class.instanceMethodId(
    r'cancelRequest',
    r'()V',
  );

  static final _cancelRequest = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void cancelRequest()`
  void cancelRequest() {
    _cancelRequest(reference.pointer, _id_cancelRequest as jni$_.JMethodIDPtr)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $HttpRequest> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'executeRequest(Lorg/maplibre/android/http/HttpResponder;JLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V') {
        _$impls[$p]!.executeRequest(
          $a![0]?.as(const httpresponder$_.$HttpResponder$Type(),
              releaseOriginal: true),
          $a![1]!
              .as(const jni$_.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
          $a![2]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![3]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![4]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![5]!
              .as(const jni$_.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'cancelRequest()V') {
        _$impls[$p]!.cancelRequest();
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $HttpRequest $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.http.HttpRequest',
      $p,
      _$invokePointer,
      [
        if ($impl.executeRequest$async)
          r'executeRequest(Lorg/maplibre/android/http/HttpResponder;JLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V',
        if ($impl.cancelRequest$async) r'cancelRequest()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory HttpRequest.implement(
    $HttpRequest $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return HttpRequest.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $HttpRequest {
  factory $HttpRequest({
    required void Function(
            httpresponder$_.HttpResponder? httpResponder,
            int j,
            jni$_.JString? string,
            jni$_.JString? string1,
            jni$_.JString? string2,
            bool z)
        executeRequest,
    bool executeRequest$async,
    required void Function() cancelRequest,
    bool cancelRequest$async,
  }) = _$HttpRequest;

  void executeRequest(
      httpresponder$_.HttpResponder? httpResponder,
      int j,
      jni$_.JString? string,
      jni$_.JString? string1,
      jni$_.JString? string2,
      bool z);
  bool get executeRequest$async => false;
  void cancelRequest();
  bool get cancelRequest$async => false;
}

final class _$HttpRequest with $HttpRequest {
  _$HttpRequest({
    required void Function(
            httpresponder$_.HttpResponder? httpResponder,
            int j,
            jni$_.JString? string,
            jni$_.JString? string1,
            jni$_.JString? string2,
            bool z)
        executeRequest,
    this.executeRequest$async = false,
    required void Function() cancelRequest,
    this.cancelRequest$async = false,
  })  : _executeRequest = executeRequest,
        _cancelRequest = cancelRequest;

  final void Function(
      httpresponder$_.HttpResponder? httpResponder,
      int j,
      jni$_.JString? string,
      jni$_.JString? string1,
      jni$_.JString? string2,
      bool z) _executeRequest;
  final bool executeRequest$async;
  final void Function() _cancelRequest;
  final bool cancelRequest$async;

  void executeRequest(
      httpresponder$_.HttpResponder? httpResponder,
      int j,
      jni$_.JString? string,
      jni$_.JString? string1,
      jni$_.JString? string2,
      bool z) {
    return _executeRequest(httpResponder, j, string, string1, string2, z);
  }

  void cancelRequest() {
    return _cancelRequest();
  }
}

final class $HttpRequest$NullableType extends jni$_.JObjType<HttpRequest?> {
  @jni$_.internal
  const $HttpRequest$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/http/HttpRequest;';

  @jni$_.internal
  @core$_.override
  HttpRequest? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : HttpRequest.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HttpRequest?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HttpRequest$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HttpRequest$NullableType) &&
        other is $HttpRequest$NullableType;
  }
}

final class $HttpRequest$Type extends jni$_.JObjType<HttpRequest> {
  @jni$_.internal
  const $HttpRequest$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/http/HttpRequest;';

  @jni$_.internal
  @core$_.override
  HttpRequest fromReference(jni$_.JReference reference) =>
      HttpRequest.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HttpRequest?> get nullableType =>
      const $HttpRequest$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HttpRequest$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HttpRequest$Type) &&
        other is $HttpRequest$Type;
  }
}
