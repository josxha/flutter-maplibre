// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `org.maplibre.android.http.HttpResponder`
class HttpResponder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<HttpResponder> $type;

  @jni$_.internal
  HttpResponder.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'org/maplibre/android/http/HttpResponder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $HttpResponder$NullableType();
  static const type = $HttpResponder$Type();
  static final _id_onResponse = _class.instanceMethodId(
    r'onResponse',
    r'(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[B)V',
  );

  static final _onResponse = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onResponse(int i, java.lang.String string, java.lang.String string1, java.lang.String string2, java.lang.String string3, java.lang.String string4, java.lang.String string5, byte[] bs)`
  void onResponse(
    int i,
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JString? string2,
    jni$_.JString? string3,
    jni$_.JString? string4,
    jni$_.JString? string5,
    jni$_.JByteArray? bs,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    final _$string3 = string3?.reference ?? jni$_.jNullReference;
    final _$string4 = string4?.reference ?? jni$_.jNullReference;
    final _$string5 = string5?.reference ?? jni$_.jNullReference;
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    _onResponse(
            reference.pointer,
            _id_onResponse as jni$_.JMethodIDPtr,
            i,
            _$string.pointer,
            _$string1.pointer,
            _$string2.pointer,
            _$string3.pointer,
            _$string4.pointer,
            _$string5.pointer,
            _$bs.pointer)
        .check();
  }

  static final _id_handleFailure = _class.instanceMethodId(
    r'handleFailure',
    r'(ILjava/lang/String;)V',
  );

  static final _handleFailure = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void handleFailure(int i, java.lang.String string)`
  void handleFailure(
    int i,
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _handleFailure(reference.pointer, _id_handleFailure as jni$_.JMethodIDPtr,
            i, _$string.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $HttpResponder> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onResponse(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[B)V') {
        _$impls[$p]!.onResponse(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![1]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![2]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![3]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![4]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![5]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![6]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![7]?.as(const jni$_.JByteArrayType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'handleFailure(ILjava/lang/String;)V') {
        _$impls[$p]!.handleFailure(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![1]?.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $HttpResponder $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.http.HttpResponder',
      $p,
      _$invokePointer,
      [
        if ($impl.onResponse$async)
          r'onResponse(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[B)V',
        if ($impl.handleFailure$async) r'handleFailure(ILjava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory HttpResponder.implement(
    $HttpResponder $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return HttpResponder.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $HttpResponder {
  factory $HttpResponder({
    required void Function(
            int i,
            jni$_.JString? string,
            jni$_.JString? string1,
            jni$_.JString? string2,
            jni$_.JString? string3,
            jni$_.JString? string4,
            jni$_.JString? string5,
            jni$_.JByteArray? bs)
        onResponse,
    bool onResponse$async,
    required void Function(int i, jni$_.JString? string) handleFailure,
    bool handleFailure$async,
  }) = _$HttpResponder;

  void onResponse(
      int i,
      jni$_.JString? string,
      jni$_.JString? string1,
      jni$_.JString? string2,
      jni$_.JString? string3,
      jni$_.JString? string4,
      jni$_.JString? string5,
      jni$_.JByteArray? bs);
  bool get onResponse$async => false;
  void handleFailure(int i, jni$_.JString? string);
  bool get handleFailure$async => false;
}

final class _$HttpResponder with $HttpResponder {
  _$HttpResponder({
    required void Function(
            int i,
            jni$_.JString? string,
            jni$_.JString? string1,
            jni$_.JString? string2,
            jni$_.JString? string3,
            jni$_.JString? string4,
            jni$_.JString? string5,
            jni$_.JByteArray? bs)
        onResponse,
    this.onResponse$async = false,
    required void Function(int i, jni$_.JString? string) handleFailure,
    this.handleFailure$async = false,
  })  : _onResponse = onResponse,
        _handleFailure = handleFailure;

  final void Function(
      int i,
      jni$_.JString? string,
      jni$_.JString? string1,
      jni$_.JString? string2,
      jni$_.JString? string3,
      jni$_.JString? string4,
      jni$_.JString? string5,
      jni$_.JByteArray? bs) _onResponse;
  final bool onResponse$async;
  final void Function(int i, jni$_.JString? string) _handleFailure;
  final bool handleFailure$async;

  void onResponse(
      int i,
      jni$_.JString? string,
      jni$_.JString? string1,
      jni$_.JString? string2,
      jni$_.JString? string3,
      jni$_.JString? string4,
      jni$_.JString? string5,
      jni$_.JByteArray? bs) {
    return _onResponse(
        i, string, string1, string2, string3, string4, string5, bs);
  }

  void handleFailure(int i, jni$_.JString? string) {
    return _handleFailure(i, string);
  }
}

final class $HttpResponder$NullableType extends jni$_.JObjType<HttpResponder?> {
  @jni$_.internal
  const $HttpResponder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/http/HttpResponder;';

  @jni$_.internal
  @core$_.override
  HttpResponder? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : HttpResponder.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HttpResponder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HttpResponder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HttpResponder$NullableType) &&
        other is $HttpResponder$NullableType;
  }
}

final class $HttpResponder$Type extends jni$_.JObjType<HttpResponder> {
  @jni$_.internal
  const $HttpResponder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/http/HttpResponder;';

  @jni$_.internal
  @core$_.override
  HttpResponder fromReference(jni$_.JReference reference) =>
      HttpResponder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HttpResponder?> get nullableType =>
      const $HttpResponder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HttpResponder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HttpResponder$Type) &&
        other is $HttpResponder$Type;
  }
}
