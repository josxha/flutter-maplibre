// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `org.maplibre.android.log.LoggerDefinition`
class LoggerDefinition extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<LoggerDefinition> $type;

  @jni$_.internal
  LoggerDefinition.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'org/maplibre/android/log/LoggerDefinition');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $LoggerDefinition$NullableType();
  static const type = $LoggerDefinition$Type();
  static final _id_v = _class.instanceMethodId(
    r'v',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _v = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void v(java.lang.String string, java.lang.String string1)`
  void v(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _v(reference.pointer, _id_v as jni$_.JMethodIDPtr, _$string.pointer,
            _$string1.pointer)
        .check();
  }

  static final _id_v$1 = _class.instanceMethodId(
    r'v',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
  );

  static final _v$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void v(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  void v$1(
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? throwable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$throwable = throwable?.reference ?? jni$_.jNullReference;
    _v$1(reference.pointer, _id_v$1 as jni$_.JMethodIDPtr, _$string.pointer,
            _$string1.pointer, _$throwable.pointer)
        .check();
  }

  static final _id_d = _class.instanceMethodId(
    r'd',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _d = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void d(java.lang.String string, java.lang.String string1)`
  void d(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _d(reference.pointer, _id_d as jni$_.JMethodIDPtr, _$string.pointer,
            _$string1.pointer)
        .check();
  }

  static final _id_d$1 = _class.instanceMethodId(
    r'd',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
  );

  static final _d$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void d(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  void d$1(
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? throwable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$throwable = throwable?.reference ?? jni$_.jNullReference;
    _d$1(reference.pointer, _id_d$1 as jni$_.JMethodIDPtr, _$string.pointer,
            _$string1.pointer, _$throwable.pointer)
        .check();
  }

  static final _id_i = _class.instanceMethodId(
    r'i',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _i = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void i(java.lang.String string, java.lang.String string1)`
  void i(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _i(reference.pointer, _id_i as jni$_.JMethodIDPtr, _$string.pointer,
            _$string1.pointer)
        .check();
  }

  static final _id_i$1 = _class.instanceMethodId(
    r'i',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
  );

  static final _i$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void i(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  void i$1(
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? throwable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$throwable = throwable?.reference ?? jni$_.jNullReference;
    _i$1(reference.pointer, _id_i$1 as jni$_.JMethodIDPtr, _$string.pointer,
            _$string1.pointer, _$throwable.pointer)
        .check();
  }

  static final _id_w = _class.instanceMethodId(
    r'w',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _w = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void w(java.lang.String string, java.lang.String string1)`
  void w(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _w(reference.pointer, _id_w as jni$_.JMethodIDPtr, _$string.pointer,
            _$string1.pointer)
        .check();
  }

  static final _id_w$1 = _class.instanceMethodId(
    r'w',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
  );

  static final _w$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void w(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  void w$1(
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? throwable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$throwable = throwable?.reference ?? jni$_.jNullReference;
    _w$1(reference.pointer, _id_w$1 as jni$_.JMethodIDPtr, _$string.pointer,
            _$string1.pointer, _$throwable.pointer)
        .check();
  }

  static final _id_e = _class.instanceMethodId(
    r'e',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _e = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void e(java.lang.String string, java.lang.String string1)`
  void e(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _e(reference.pointer, _id_e as jni$_.JMethodIDPtr, _$string.pointer,
            _$string1.pointer)
        .check();
  }

  static final _id_e$1 = _class.instanceMethodId(
    r'e',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
  );

  static final _e$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void e(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  void e$1(
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? throwable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$throwable = throwable?.reference ?? jni$_.jNullReference;
    _e$1(reference.pointer, _id_e$1 as jni$_.JMethodIDPtr, _$string.pointer,
            _$string1.pointer, _$throwable.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $LoggerDefinition> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'v(Ljava/lang/String;Ljava/lang/String;)V') {
        _$impls[$p]!.v(
          $a![0]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V') {
        _$impls[$p]!.v$1(
          $a![0]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![2]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'd(Ljava/lang/String;Ljava/lang/String;)V') {
        _$impls[$p]!.d(
          $a![0]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'd(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V') {
        _$impls[$p]!.d$1(
          $a![0]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![2]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'i(Ljava/lang/String;Ljava/lang/String;)V') {
        _$impls[$p]!.i(
          $a![0]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'i(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V') {
        _$impls[$p]!.i$1(
          $a![0]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![2]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'w(Ljava/lang/String;Ljava/lang/String;)V') {
        _$impls[$p]!.w(
          $a![0]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V') {
        _$impls[$p]!.w$1(
          $a![0]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![2]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'e(Ljava/lang/String;Ljava/lang/String;)V') {
        _$impls[$p]!.e(
          $a![0]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V') {
        _$impls[$p]!.e$1(
          $a![0]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![2]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $LoggerDefinition $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.log.LoggerDefinition',
      $p,
      _$invokePointer,
      [
        if ($impl.v$async) r'v(Ljava/lang/String;Ljava/lang/String;)V',
        if ($impl.v$1$async)
          r'v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
        if ($impl.d$async) r'd(Ljava/lang/String;Ljava/lang/String;)V',
        if ($impl.d$1$async)
          r'd(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
        if ($impl.i$async) r'i(Ljava/lang/String;Ljava/lang/String;)V',
        if ($impl.i$1$async)
          r'i(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
        if ($impl.w$async) r'w(Ljava/lang/String;Ljava/lang/String;)V',
        if ($impl.w$1$async)
          r'w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
        if ($impl.e$async) r'e(Ljava/lang/String;Ljava/lang/String;)V',
        if ($impl.e$1$async)
          r'e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory LoggerDefinition.implement(
    $LoggerDefinition $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return LoggerDefinition.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $LoggerDefinition {
  factory $LoggerDefinition({
    required void Function(jni$_.JString? string, jni$_.JString? string1) v,
    bool v$async,
    required void Function(jni$_.JString? string, jni$_.JString? string1,
            jni$_.JObject? throwable)
        v$1,
    bool v$1$async,
    required void Function(jni$_.JString? string, jni$_.JString? string1) d,
    bool d$async,
    required void Function(jni$_.JString? string, jni$_.JString? string1,
            jni$_.JObject? throwable)
        d$1,
    bool d$1$async,
    required void Function(jni$_.JString? string, jni$_.JString? string1) i,
    bool i$async,
    required void Function(jni$_.JString? string, jni$_.JString? string1,
            jni$_.JObject? throwable)
        i$1,
    bool i$1$async,
    required void Function(jni$_.JString? string, jni$_.JString? string1) w,
    bool w$async,
    required void Function(jni$_.JString? string, jni$_.JString? string1,
            jni$_.JObject? throwable)
        w$1,
    bool w$1$async,
    required void Function(jni$_.JString? string, jni$_.JString? string1) e,
    bool e$async,
    required void Function(jni$_.JString? string, jni$_.JString? string1,
            jni$_.JObject? throwable)
        e$1,
    bool e$1$async,
  }) = _$LoggerDefinition;

  void v(jni$_.JString? string, jni$_.JString? string1);
  bool get v$async => false;
  void v$1(
      jni$_.JString? string, jni$_.JString? string1, jni$_.JObject? throwable);
  bool get v$1$async => false;
  void d(jni$_.JString? string, jni$_.JString? string1);
  bool get d$async => false;
  void d$1(
      jni$_.JString? string, jni$_.JString? string1, jni$_.JObject? throwable);
  bool get d$1$async => false;
  void i(jni$_.JString? string, jni$_.JString? string1);
  bool get i$async => false;
  void i$1(
      jni$_.JString? string, jni$_.JString? string1, jni$_.JObject? throwable);
  bool get i$1$async => false;
  void w(jni$_.JString? string, jni$_.JString? string1);
  bool get w$async => false;
  void w$1(
      jni$_.JString? string, jni$_.JString? string1, jni$_.JObject? throwable);
  bool get w$1$async => false;
  void e(jni$_.JString? string, jni$_.JString? string1);
  bool get e$async => false;
  void e$1(
      jni$_.JString? string, jni$_.JString? string1, jni$_.JObject? throwable);
  bool get e$1$async => false;
}

final class _$LoggerDefinition with $LoggerDefinition {
  _$LoggerDefinition({
    required void Function(jni$_.JString? string, jni$_.JString? string1) v,
    this.v$async = false,
    required void Function(jni$_.JString? string, jni$_.JString? string1,
            jni$_.JObject? throwable)
        v$1,
    this.v$1$async = false,
    required void Function(jni$_.JString? string, jni$_.JString? string1) d,
    this.d$async = false,
    required void Function(jni$_.JString? string, jni$_.JString? string1,
            jni$_.JObject? throwable)
        d$1,
    this.d$1$async = false,
    required void Function(jni$_.JString? string, jni$_.JString? string1) i,
    this.i$async = false,
    required void Function(jni$_.JString? string, jni$_.JString? string1,
            jni$_.JObject? throwable)
        i$1,
    this.i$1$async = false,
    required void Function(jni$_.JString? string, jni$_.JString? string1) w,
    this.w$async = false,
    required void Function(jni$_.JString? string, jni$_.JString? string1,
            jni$_.JObject? throwable)
        w$1,
    this.w$1$async = false,
    required void Function(jni$_.JString? string, jni$_.JString? string1) e,
    this.e$async = false,
    required void Function(jni$_.JString? string, jni$_.JString? string1,
            jni$_.JObject? throwable)
        e$1,
    this.e$1$async = false,
  })  : _v = v,
        _v$1 = v$1,
        _d = d,
        _d$1 = d$1,
        _i = i,
        _i$1 = i$1,
        _w = w,
        _w$1 = w$1,
        _e = e,
        _e$1 = e$1;

  final void Function(jni$_.JString? string, jni$_.JString? string1) _v;
  final bool v$async;
  final void Function(jni$_.JString? string, jni$_.JString? string1,
      jni$_.JObject? throwable) _v$1;
  final bool v$1$async;
  final void Function(jni$_.JString? string, jni$_.JString? string1) _d;
  final bool d$async;
  final void Function(jni$_.JString? string, jni$_.JString? string1,
      jni$_.JObject? throwable) _d$1;
  final bool d$1$async;
  final void Function(jni$_.JString? string, jni$_.JString? string1) _i;
  final bool i$async;
  final void Function(jni$_.JString? string, jni$_.JString? string1,
      jni$_.JObject? throwable) _i$1;
  final bool i$1$async;
  final void Function(jni$_.JString? string, jni$_.JString? string1) _w;
  final bool w$async;
  final void Function(jni$_.JString? string, jni$_.JString? string1,
      jni$_.JObject? throwable) _w$1;
  final bool w$1$async;
  final void Function(jni$_.JString? string, jni$_.JString? string1) _e;
  final bool e$async;
  final void Function(jni$_.JString? string, jni$_.JString? string1,
      jni$_.JObject? throwable) _e$1;
  final bool e$1$async;

  void v(jni$_.JString? string, jni$_.JString? string1) {
    return _v(string, string1);
  }

  void v$1(
      jni$_.JString? string, jni$_.JString? string1, jni$_.JObject? throwable) {
    return _v$1(string, string1, throwable);
  }

  void d(jni$_.JString? string, jni$_.JString? string1) {
    return _d(string, string1);
  }

  void d$1(
      jni$_.JString? string, jni$_.JString? string1, jni$_.JObject? throwable) {
    return _d$1(string, string1, throwable);
  }

  void i(jni$_.JString? string, jni$_.JString? string1) {
    return _i(string, string1);
  }

  void i$1(
      jni$_.JString? string, jni$_.JString? string1, jni$_.JObject? throwable) {
    return _i$1(string, string1, throwable);
  }

  void w(jni$_.JString? string, jni$_.JString? string1) {
    return _w(string, string1);
  }

  void w$1(
      jni$_.JString? string, jni$_.JString? string1, jni$_.JObject? throwable) {
    return _w$1(string, string1, throwable);
  }

  void e(jni$_.JString? string, jni$_.JString? string1) {
    return _e(string, string1);
  }

  void e$1(
      jni$_.JString? string, jni$_.JString? string1, jni$_.JObject? throwable) {
    return _e$1(string, string1, throwable);
  }
}

final class $LoggerDefinition$NullableType
    extends jni$_.JObjType<LoggerDefinition?> {
  @jni$_.internal
  const $LoggerDefinition$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/log/LoggerDefinition;';

  @jni$_.internal
  @core$_.override
  LoggerDefinition? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : LoggerDefinition.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LoggerDefinition?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($LoggerDefinition$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LoggerDefinition$NullableType) &&
        other is $LoggerDefinition$NullableType;
  }
}

final class $LoggerDefinition$Type extends jni$_.JObjType<LoggerDefinition> {
  @jni$_.internal
  const $LoggerDefinition$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/log/LoggerDefinition;';

  @jni$_.internal
  @core$_.override
  LoggerDefinition fromReference(jni$_.JReference reference) =>
      LoggerDefinition.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LoggerDefinition?> get nullableType =>
      const $LoggerDefinition$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($LoggerDefinition$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LoggerDefinition$Type) &&
        other is $LoggerDefinition$Type;
  }
}
