// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'Layer.dart' as layer$_;

import 'PropertyValue.dart' as propertyvalue$_;

import 'TransitionOptions.dart' as transitionoptions$_;

/// from: `org.maplibre.android.style.layers.CircleLayer`
class CircleLayer extends layer$_.Layer {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CircleLayer> $type;

  @jni$_.internal
  CircleLayer.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'org/maplibre/android/style/layers/CircleLayer');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CircleLayer$NullableType();
  static const type = $CircleLayer$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CircleLayer(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return CircleLayer.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$string.pointer, _$string1.pointer)
        .reference);
  }

  static final _id_setSourceLayer = _class.instanceMethodId(
    r'setSourceLayer',
    r'(Ljava/lang/String;)V',
  );

  static final _setSourceLayer = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setSourceLayer(java.lang.String string)`
  void setSourceLayer(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _setSourceLayer(reference.pointer, _id_setSourceLayer as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_withSourceLayer = _class.instanceMethodId(
    r'withSourceLayer',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/CircleLayer;',
  );

  static final _withSourceLayer = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public org.maplibre.android.style.layers.CircleLayer withSourceLayer(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  CircleLayer? withSourceLayer(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _withSourceLayer(reference.pointer,
            _id_withSourceLayer as jni$_.JMethodIDPtr, _$string.pointer)
        .object<CircleLayer?>(const $CircleLayer$NullableType());
  }

  static final _id_getSourceId = _class.instanceMethodId(
    r'getSourceId',
    r'()Ljava/lang/String;',
  );

  static final _getSourceId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getSourceId()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getSourceId() {
    return _getSourceId(
            reference.pointer, _id_getSourceId as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getSourceLayer = _class.instanceMethodId(
    r'getSourceLayer',
    r'()Ljava/lang/String;',
  );

  static final _getSourceLayer = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getSourceLayer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getSourceLayer() {
    return _getSourceLayer(
            reference.pointer, _id_getSourceLayer as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_setFilter = _class.instanceMethodId(
    r'setFilter',
    r'(Lorg/maplibre/android/style/expressions/Expression;)V',
  );

  static final _setFilter = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setFilter(org.maplibre.android.style.expressions.Expression expression)`
  void setFilter(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    _setFilter(reference.pointer, _id_setFilter as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .check();
  }

  static final _id_withFilter = _class.instanceMethodId(
    r'withFilter',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/CircleLayer;',
  );

  static final _withFilter = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public org.maplibre.android.style.layers.CircleLayer withFilter(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  CircleLayer? withFilter(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _withFilter(reference.pointer, _id_withFilter as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<CircleLayer?>(const $CircleLayer$NullableType());
  }

  static final _id_getFilter = _class.instanceMethodId(
    r'getFilter',
    r'()Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _getFilter = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.expressions.Expression getFilter()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFilter() {
    return _getFilter(reference.pointer, _id_getFilter as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_withProperties = _class.instanceMethodId(
    r'withProperties',
    r'([Lorg/maplibre/android/style/layers/PropertyValue;)Lorg/maplibre/android/style/layers/CircleLayer;',
  );

  static final _withProperties = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public org.maplibre.android.style.layers.CircleLayer withProperties(java.lang.Object[] propertyValues)`
  /// The returned object must be released after use, by calling the [release] method.
  CircleLayer? withProperties(
    jni$_.JArray<propertyvalue$_.PropertyValue<jni$_.JObject?>?>?
        propertyValues,
  ) {
    final _$propertyValues = propertyValues?.reference ?? jni$_.jNullReference;
    return _withProperties(reference.pointer,
            _id_withProperties as jni$_.JMethodIDPtr, _$propertyValues.pointer)
        .object<CircleLayer?>(const $CircleLayer$NullableType());
  }

  static final _id_getCircleSortKey = _class.instanceMethodId(
    r'getCircleSortKey',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleSortKey = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleSortKey()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?>? getCircleSortKey() {
    return _getCircleSortKey(
            reference.pointer, _id_getCircleSortKey as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_getCircleRadius = _class.instanceMethodId(
    r'getCircleRadius',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleRadius = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleRadius()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?>? getCircleRadius() {
    return _getCircleRadius(
            reference.pointer, _id_getCircleRadius as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_getCircleRadiusTransition = _class.instanceMethodId(
    r'getCircleRadiusTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getCircleRadiusTransition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getCircleRadiusTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getCircleRadiusTransition() {
    return _getCircleRadiusTransition(reference.pointer,
            _id_getCircleRadiusTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setCircleRadiusTransition = _class.instanceMethodId(
    r'setCircleRadiusTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setCircleRadiusTransition = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setCircleRadiusTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setCircleRadiusTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setCircleRadiusTransition(
            reference.pointer,
            _id_setCircleRadiusTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getCircleColor = _class.instanceMethodId(
    r'getCircleColor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleColor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleColor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?>? getCircleColor() {
    return _getCircleColor(
            reference.pointer, _id_getCircleColor as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getCircleColorAsInt = _class.instanceMethodId(
    r'getCircleColorAsInt',
    r'()I',
  );

  static final _getCircleColorAsInt = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getCircleColorAsInt()`
  int getCircleColorAsInt() {
    return _getCircleColorAsInt(
            reference.pointer, _id_getCircleColorAsInt as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getCircleColorTransition = _class.instanceMethodId(
    r'getCircleColorTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getCircleColorTransition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getCircleColorTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getCircleColorTransition() {
    return _getCircleColorTransition(reference.pointer,
            _id_getCircleColorTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setCircleColorTransition = _class.instanceMethodId(
    r'setCircleColorTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setCircleColorTransition = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setCircleColorTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setCircleColorTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setCircleColorTransition(
            reference.pointer,
            _id_setCircleColorTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getCircleBlur = _class.instanceMethodId(
    r'getCircleBlur',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleBlur = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleBlur()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?>? getCircleBlur() {
    return _getCircleBlur(
            reference.pointer, _id_getCircleBlur as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_getCircleBlurTransition = _class.instanceMethodId(
    r'getCircleBlurTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getCircleBlurTransition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getCircleBlurTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getCircleBlurTransition() {
    return _getCircleBlurTransition(reference.pointer,
            _id_getCircleBlurTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setCircleBlurTransition = _class.instanceMethodId(
    r'setCircleBlurTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setCircleBlurTransition = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setCircleBlurTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setCircleBlurTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setCircleBlurTransition(
            reference.pointer,
            _id_setCircleBlurTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getCircleOpacity = _class.instanceMethodId(
    r'getCircleOpacity',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleOpacity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleOpacity()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?>? getCircleOpacity() {
    return _getCircleOpacity(
            reference.pointer, _id_getCircleOpacity as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_getCircleOpacityTransition = _class.instanceMethodId(
    r'getCircleOpacityTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getCircleOpacityTransition =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getCircleOpacityTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getCircleOpacityTransition() {
    return _getCircleOpacityTransition(reference.pointer,
            _id_getCircleOpacityTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setCircleOpacityTransition = _class.instanceMethodId(
    r'setCircleOpacityTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setCircleOpacityTransition =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setCircleOpacityTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setCircleOpacityTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setCircleOpacityTransition(
            reference.pointer,
            _id_setCircleOpacityTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getCircleTranslate = _class.instanceMethodId(
    r'getCircleTranslate',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleTranslate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleTranslate()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?
      getCircleTranslate() {
    return _getCircleTranslate(
            reference.pointer, _id_getCircleTranslate as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JFloat?>?>(
                jni$_.JArrayNullableType<jni$_.JFloat?>(
                    jni$_.JFloatNullableType())));
  }

  static final _id_getCircleTranslateTransition = _class.instanceMethodId(
    r'getCircleTranslateTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getCircleTranslateTransition =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getCircleTranslateTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getCircleTranslateTransition() {
    return _getCircleTranslateTransition(reference.pointer,
            _id_getCircleTranslateTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setCircleTranslateTransition = _class.instanceMethodId(
    r'setCircleTranslateTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setCircleTranslateTransition =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setCircleTranslateTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setCircleTranslateTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setCircleTranslateTransition(
            reference.pointer,
            _id_setCircleTranslateTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getCircleTranslateAnchor = _class.instanceMethodId(
    r'getCircleTranslateAnchor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleTranslateAnchor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleTranslateAnchor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?>? getCircleTranslateAnchor() {
    return _getCircleTranslateAnchor(reference.pointer,
            _id_getCircleTranslateAnchor as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getCirclePitchScale = _class.instanceMethodId(
    r'getCirclePitchScale',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCirclePitchScale = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCirclePitchScale()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?>? getCirclePitchScale() {
    return _getCirclePitchScale(
            reference.pointer, _id_getCirclePitchScale as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getCirclePitchAlignment = _class.instanceMethodId(
    r'getCirclePitchAlignment',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCirclePitchAlignment = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCirclePitchAlignment()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?>? getCirclePitchAlignment() {
    return _getCirclePitchAlignment(reference.pointer,
            _id_getCirclePitchAlignment as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getCircleStrokeWidth = _class.instanceMethodId(
    r'getCircleStrokeWidth',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleStrokeWidth = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleStrokeWidth()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?>? getCircleStrokeWidth() {
    return _getCircleStrokeWidth(
            reference.pointer, _id_getCircleStrokeWidth as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_getCircleStrokeWidthTransition = _class.instanceMethodId(
    r'getCircleStrokeWidthTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getCircleStrokeWidthTransition =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getCircleStrokeWidthTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getCircleStrokeWidthTransition() {
    return _getCircleStrokeWidthTransition(reference.pointer,
            _id_getCircleStrokeWidthTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setCircleStrokeWidthTransition = _class.instanceMethodId(
    r'setCircleStrokeWidthTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setCircleStrokeWidthTransition =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setCircleStrokeWidthTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setCircleStrokeWidthTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setCircleStrokeWidthTransition(
            reference.pointer,
            _id_setCircleStrokeWidthTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getCircleStrokeColor = _class.instanceMethodId(
    r'getCircleStrokeColor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleStrokeColor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleStrokeColor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?>? getCircleStrokeColor() {
    return _getCircleStrokeColor(
            reference.pointer, _id_getCircleStrokeColor as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getCircleStrokeColorAsInt = _class.instanceMethodId(
    r'getCircleStrokeColorAsInt',
    r'()I',
  );

  static final _getCircleStrokeColorAsInt = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getCircleStrokeColorAsInt()`
  int getCircleStrokeColorAsInt() {
    return _getCircleStrokeColorAsInt(reference.pointer,
            _id_getCircleStrokeColorAsInt as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getCircleStrokeColorTransition = _class.instanceMethodId(
    r'getCircleStrokeColorTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getCircleStrokeColorTransition =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getCircleStrokeColorTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getCircleStrokeColorTransition() {
    return _getCircleStrokeColorTransition(reference.pointer,
            _id_getCircleStrokeColorTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setCircleStrokeColorTransition = _class.instanceMethodId(
    r'setCircleStrokeColorTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setCircleStrokeColorTransition =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setCircleStrokeColorTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setCircleStrokeColorTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setCircleStrokeColorTransition(
            reference.pointer,
            _id_setCircleStrokeColorTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getCircleStrokeOpacity = _class.instanceMethodId(
    r'getCircleStrokeOpacity',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleStrokeOpacity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleStrokeOpacity()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?>? getCircleStrokeOpacity() {
    return _getCircleStrokeOpacity(
            reference.pointer, _id_getCircleStrokeOpacity as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_getCircleStrokeOpacityTransition = _class.instanceMethodId(
    r'getCircleStrokeOpacityTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getCircleStrokeOpacityTransition =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getCircleStrokeOpacityTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getCircleStrokeOpacityTransition() {
    return _getCircleStrokeOpacityTransition(reference.pointer,
            _id_getCircleStrokeOpacityTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setCircleStrokeOpacityTransition = _class.instanceMethodId(
    r'setCircleStrokeOpacityTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setCircleStrokeOpacityTransition =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setCircleStrokeOpacityTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setCircleStrokeOpacityTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setCircleStrokeOpacityTransition(
            reference.pointer,
            _id_setCircleStrokeOpacityTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }
}

final class $CircleLayer$NullableType extends jni$_.JObjType<CircleLayer?> {
  @jni$_.internal
  const $CircleLayer$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/style/layers/CircleLayer;';

  @jni$_.internal
  @core$_.override
  CircleLayer? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : CircleLayer.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const layer$_.$Layer$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CircleLayer?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($CircleLayer$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CircleLayer$NullableType) &&
        other is $CircleLayer$NullableType;
  }
}

final class $CircleLayer$Type extends jni$_.JObjType<CircleLayer> {
  @jni$_.internal
  const $CircleLayer$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/style/layers/CircleLayer;';

  @jni$_.internal
  @core$_.override
  CircleLayer fromReference(jni$_.JReference reference) =>
      CircleLayer.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const layer$_.$Layer$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CircleLayer?> get nullableType =>
      const $CircleLayer$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($CircleLayer$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CircleLayer$Type) &&
        other is $CircleLayer$Type;
  }
}
