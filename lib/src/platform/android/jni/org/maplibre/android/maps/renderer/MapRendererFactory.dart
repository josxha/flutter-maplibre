// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'surfaceview/SurfaceViewMapRenderer.dart' as surfaceviewmaprenderer$_;

import 'textureview/TextureViewMapRenderer.dart' as textureviewmaprenderer$_;

/// from: `org.maplibre.android.maps.renderer.MapRendererFactory`
class MapRendererFactory extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MapRendererFactory> $type;

  @jni$_.internal
  MapRendererFactory.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/maps/renderer/MapRendererFactory');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MapRendererFactory$NullableType();
  static const type = $MapRendererFactory$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapRendererFactory() {
    return MapRendererFactory.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_newTextureViewMapRenderer = _class.staticMethodId(
    r'newTextureViewMapRenderer',
    r'(Landroid/content/Context;Landroid/view/TextureView;Ljava/lang/String;ZLjava/lang/Runnable;)Lorg/maplibre/android/maps/renderer/textureview/TextureViewMapRenderer;',
  );

  static final _newTextureViewMapRenderer = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.maps.renderer.textureview.TextureViewMapRenderer newTextureViewMapRenderer(android.content.Context context, android.view.TextureView textureView, java.lang.String string, boolean z, java.lang.Runnable runnable)`
  /// The returned object must be released after use, by calling the [release] method.
  static textureviewmaprenderer$_.TextureViewMapRenderer?
      newTextureViewMapRenderer(
    jni$_.JObject context,
    jni$_.JObject? textureView,
    jni$_.JString? string,
    bool z,
    jni$_.JObject? runnable,
  ) {
    final _$context = context.reference;
    final _$textureView = textureView?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$runnable = runnable?.reference ?? jni$_.jNullReference;
    return _newTextureViewMapRenderer(
            _class.reference.pointer,
            _id_newTextureViewMapRenderer as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$textureView.pointer,
            _$string.pointer,
            z ? 1 : 0,
            _$runnable.pointer)
        .object<textureviewmaprenderer$_.TextureViewMapRenderer?>(
            const textureviewmaprenderer$_
                .$TextureViewMapRenderer$NullableType());
  }

  static final _id_newSurfaceViewMapRenderer = _class.staticMethodId(
    r'newSurfaceViewMapRenderer',
    r'(Landroid/content/Context;Ljava/lang/String;ZLjava/lang/Runnable;)Lorg/maplibre/android/maps/renderer/surfaceview/SurfaceViewMapRenderer;',
  );

  static final _newSurfaceViewMapRenderer = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public org.maplibre.android.maps.renderer.surfaceview.SurfaceViewMapRenderer newSurfaceViewMapRenderer(android.content.Context context, java.lang.String string, boolean z, java.lang.Runnable runnable)`
  /// The returned object must be released after use, by calling the [release] method.
  static surfaceviewmaprenderer$_.SurfaceViewMapRenderer?
      newSurfaceViewMapRenderer(
    jni$_.JObject context,
    jni$_.JString? string,
    bool z,
    jni$_.JObject? runnable,
  ) {
    final _$context = context.reference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$runnable = runnable?.reference ?? jni$_.jNullReference;
    return _newSurfaceViewMapRenderer(
            _class.reference.pointer,
            _id_newSurfaceViewMapRenderer as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer,
            z ? 1 : 0,
            _$runnable.pointer)
        .object<surfaceviewmaprenderer$_.SurfaceViewMapRenderer?>(
            const surfaceviewmaprenderer$_
                .$SurfaceViewMapRenderer$NullableType());
  }
}

final class $MapRendererFactory$NullableType
    extends jni$_.JObjType<MapRendererFactory?> {
  @jni$_.internal
  const $MapRendererFactory$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/maps/renderer/MapRendererFactory;';

  @jni$_.internal
  @core$_.override
  MapRendererFactory? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MapRendererFactory.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MapRendererFactory?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MapRendererFactory$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapRendererFactory$NullableType) &&
        other is $MapRendererFactory$NullableType;
  }
}

final class $MapRendererFactory$Type
    extends jni$_.JObjType<MapRendererFactory> {
  @jni$_.internal
  const $MapRendererFactory$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/maps/renderer/MapRendererFactory;';

  @jni$_.internal
  @core$_.override
  MapRendererFactory fromReference(jni$_.JReference reference) =>
      MapRendererFactory.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MapRendererFactory?> get nullableType =>
      const $MapRendererFactory$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MapRendererFactory$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapRendererFactory$Type) &&
        other is $MapRendererFactory$Type;
  }
}
