// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../../../../../java/net/URI.dart' as uri$_;

import '../../../../../java/net/URL.dart' as url$_;

import '../../geometry/LatLngQuad.dart' as latlngquad$_;

import 'Source.dart' as source$_;

/// from: `org.maplibre.android.style.sources.ImageSource`
class ImageSource extends source$_.Source {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ImageSource> $type;

  @jni$_.internal
  ImageSource.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/style/sources/ImageSource',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ImageSource$NullableType();
  static const type = $ImageSource$Type();
  static final _id_new$ = _class.constructorId(r'(J)V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int64,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public void <init>(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageSource(int j) {
    return ImageSource.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        j,
      ).reference,
    );
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/android/geometry/LatLngQuad;Ljava/net/URL;)V',
  );

  static final _new$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(java.lang.String string, org.maplibre.android.geometry.LatLngQuad latLngQuad, java.net.URL uRL)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageSource.new$1(
    jni$_.JString? string,
    latlngquad$_.LatLngQuad? latLngQuad,
    url$_.URL uRL,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$latLngQuad = latLngQuad?.reference ?? jni$_.jNullReference;
    final _$uRL = uRL.reference;
    return ImageSource.fromReference(
      _new$1(
        _class.reference.pointer,
        _id_new$1 as jni$_.JMethodIDPtr,
        _$string.pointer,
        _$latLngQuad.pointer,
        _$uRL.pointer,
      ).reference,
    );
  }

  static final _id_new$2 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/android/geometry/LatLngQuad;Ljava/net/URI;)V',
  );

  static final _new$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(java.lang.String string, org.maplibre.android.geometry.LatLngQuad latLngQuad, java.net.URI uRI)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageSource.new$2(
    jni$_.JString? string,
    latlngquad$_.LatLngQuad? latLngQuad,
    uri$_.URI uRI,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$latLngQuad = latLngQuad?.reference ?? jni$_.jNullReference;
    final _$uRI = uRI.reference;
    return ImageSource.fromReference(
      _new$2(
        _class.reference.pointer,
        _id_new$2 as jni$_.JMethodIDPtr,
        _$string.pointer,
        _$latLngQuad.pointer,
        _$uRI.pointer,
      ).reference,
    );
  }

  static final _id_new$3 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/android/geometry/LatLngQuad;Landroid/graphics/Bitmap;)V',
  );

  static final _new$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(java.lang.String string, org.maplibre.android.geometry.LatLngQuad latLngQuad, android.graphics.Bitmap bitmap)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageSource.new$3(
    jni$_.JString? string,
    latlngquad$_.LatLngQuad? latLngQuad,
    jni$_.JObject bitmap,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$latLngQuad = latLngQuad?.reference ?? jni$_.jNullReference;
    final _$bitmap = bitmap.reference;
    return ImageSource.fromReference(
      _new$3(
        _class.reference.pointer,
        _id_new$3 as jni$_.JMethodIDPtr,
        _$string.pointer,
        _$latLngQuad.pointer,
        _$bitmap.pointer,
      ).reference,
    );
  }

  static final _id_new$4 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/android/geometry/LatLngQuad;I)V',
  );

  static final _new$4 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void <init>(java.lang.String string, org.maplibre.android.geometry.LatLngQuad latLngQuad, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ImageSource.new$4(
    jni$_.JString? string,
    latlngquad$_.LatLngQuad? latLngQuad,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$latLngQuad = latLngQuad?.reference ?? jni$_.jNullReference;
    return ImageSource.fromReference(
      _new$4(
        _class.reference.pointer,
        _id_new$4 as jni$_.JMethodIDPtr,
        _$string.pointer,
        _$latLngQuad.pointer,
        i,
      ).reference,
    );
  }

  static final _id_setUrl = _class.instanceMethodId(
    r'setUrl',
    r'(Ljava/net/URL;)V',
  );

  static final _setUrl =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final void setUrl(java.net.URL uRL)`
  void setUrl(url$_.URL uRL) {
    final _$uRL = uRL.reference;
    _setUrl(
      reference.pointer,
      _id_setUrl as jni$_.JMethodIDPtr,
      _$uRL.pointer,
    ).check();
  }

  static final _id_setUrl$1 = _class.instanceMethodId(
    r'setUrl',
    r'(Ljava/lang/String;)V',
  );

  static final _setUrl$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final void setUrl(java.lang.String string)`
  void setUrl$1(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _setUrl$1(
      reference.pointer,
      _id_setUrl$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).check();
  }

  static final _id_setUri = _class.instanceMethodId(
    r'setUri',
    r'(Ljava/net/URI;)V',
  );

  static final _setUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final void setUri(java.net.URI uRI)`
  void setUri(uri$_.URI uRI) {
    final _$uRI = uRI.reference;
    _setUri(
      reference.pointer,
      _id_setUri as jni$_.JMethodIDPtr,
      _$uRI.pointer,
    ).check();
  }

  static final _id_setUri$1 = _class.instanceMethodId(
    r'setUri',
    r'(Ljava/lang/String;)V',
  );

  static final _setUri$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final void setUri(java.lang.String string)`
  void setUri$1(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _setUri$1(
      reference.pointer,
      _id_setUri$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).check();
  }

  static final _id_setImage = _class.instanceMethodId(
    r'setImage',
    r'(Landroid/graphics/Bitmap;)V',
  );

  static final _setImage =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final void setImage(android.graphics.Bitmap bitmap)`
  void setImage(jni$_.JObject bitmap) {
    final _$bitmap = bitmap.reference;
    _setImage(
      reference.pointer,
      _id_setImage as jni$_.JMethodIDPtr,
      _$bitmap.pointer,
    ).check();
  }

  static final _id_setImage$1 = _class.instanceMethodId(r'setImage', r'(I)V');

  static final _setImage$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public final void setImage(int i)`
  void setImage$1(int i) {
    _setImage$1(
      reference.pointer,
      _id_setImage$1 as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_getUrl = _class.instanceMethodId(
    r'getUrl',
    r'()Ljava/lang/String;',
  );

  static final _getUrl =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final java.lang.String getUrl()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getUrl() {
    return _getUrl(
      reference.pointer,
      _id_getUrl as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getUri = _class.instanceMethodId(
    r'getUri',
    r'()Ljava/lang/String;',
  );

  static final _getUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final java.lang.String getUri()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getUri() {
    return _getUri(
      reference.pointer,
      _id_getUri as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_setCoordinates = _class.instanceMethodId(
    r'setCoordinates',
    r'(Lorg/maplibre/android/geometry/LatLngQuad;)V',
  );

  static final _setCoordinates =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final void setCoordinates(org.maplibre.android.geometry.LatLngQuad latLngQuad)`
  void setCoordinates(latlngquad$_.LatLngQuad? latLngQuad) {
    final _$latLngQuad = latLngQuad?.reference ?? jni$_.jNullReference;
    _setCoordinates(
      reference.pointer,
      _id_setCoordinates as jni$_.JMethodIDPtr,
      _$latLngQuad.pointer,
    ).check();
  }
}

final class $ImageSource$NullableType extends jni$_.JObjType<ImageSource?> {
  @jni$_.internal
  const $ImageSource$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/style/sources/ImageSource;';

  @jni$_.internal
  @core$_.override
  ImageSource? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : ImageSource.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const source$_.$Source$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ImageSource?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($ImageSource$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageSource$NullableType) &&
        other is $ImageSource$NullableType;
  }
}

final class $ImageSource$Type extends jni$_.JObjType<ImageSource> {
  @jni$_.internal
  const $ImageSource$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/style/sources/ImageSource;';

  @jni$_.internal
  @core$_.override
  ImageSource fromReference(jni$_.JReference reference) =>
      ImageSource.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const source$_.$Source$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ImageSource?> get nullableType =>
      const $ImageSource$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($ImageSource$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageSource$Type) &&
        other is $ImageSource$Type;
  }
}
