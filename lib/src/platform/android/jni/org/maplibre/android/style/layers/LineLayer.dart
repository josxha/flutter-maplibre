// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'Layer.dart' as layer$_;

import 'PropertyValue.dart' as propertyvalue$_;

import 'TransitionOptions.dart' as transitionoptions$_;

/// from: `org.maplibre.android.style.layers.LineLayer`
class LineLayer extends layer$_.Layer {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<LineLayer> $type;

  @jni$_.internal
  LineLayer.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'org/maplibre/android/style/layers/LineLayer');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $LineLayer$NullableType();
  static const type = $LineLayer$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory LineLayer(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return LineLayer.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$string.pointer, _$string1.pointer)
        .reference);
  }

  static final _id_setSourceLayer = _class.instanceMethodId(
    r'setSourceLayer',
    r'(Ljava/lang/String;)V',
  );

  static final _setSourceLayer = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setSourceLayer(java.lang.String string)`
  void setSourceLayer(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _setSourceLayer(reference.pointer, _id_setSourceLayer as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_withSourceLayer = _class.instanceMethodId(
    r'withSourceLayer',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/LineLayer;',
  );

  static final _withSourceLayer = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public org.maplibre.android.style.layers.LineLayer withSourceLayer(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  LineLayer? withSourceLayer(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _withSourceLayer(reference.pointer,
            _id_withSourceLayer as jni$_.JMethodIDPtr, _$string.pointer)
        .object<LineLayer?>(const $LineLayer$NullableType());
  }

  static final _id_getSourceId = _class.instanceMethodId(
    r'getSourceId',
    r'()Ljava/lang/String;',
  );

  static final _getSourceId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getSourceId()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getSourceId() {
    return _getSourceId(
            reference.pointer, _id_getSourceId as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getSourceLayer = _class.instanceMethodId(
    r'getSourceLayer',
    r'()Ljava/lang/String;',
  );

  static final _getSourceLayer = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getSourceLayer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getSourceLayer() {
    return _getSourceLayer(
            reference.pointer, _id_getSourceLayer as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_setFilter = _class.instanceMethodId(
    r'setFilter',
    r'(Lorg/maplibre/android/style/expressions/Expression;)V',
  );

  static final _setFilter = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setFilter(org.maplibre.android.style.expressions.Expression expression)`
  void setFilter(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    _setFilter(reference.pointer, _id_setFilter as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .check();
  }

  static final _id_withFilter = _class.instanceMethodId(
    r'withFilter',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/LineLayer;',
  );

  static final _withFilter = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public org.maplibre.android.style.layers.LineLayer withFilter(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  LineLayer? withFilter(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _withFilter(reference.pointer, _id_withFilter as jni$_.JMethodIDPtr,
            _$expression.pointer)
        .object<LineLayer?>(const $LineLayer$NullableType());
  }

  static final _id_getFilter = _class.instanceMethodId(
    r'getFilter',
    r'()Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _getFilter = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.expressions.Expression getFilter()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFilter() {
    return _getFilter(reference.pointer, _id_getFilter as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_withProperties = _class.instanceMethodId(
    r'withProperties',
    r'([Lorg/maplibre/android/style/layers/PropertyValue;)Lorg/maplibre/android/style/layers/LineLayer;',
  );

  static final _withProperties = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public org.maplibre.android.style.layers.LineLayer withProperties(java.lang.Object[] propertyValues)`
  /// The returned object must be released after use, by calling the [release] method.
  LineLayer? withProperties(
    jni$_.JArray<propertyvalue$_.PropertyValue<jni$_.JObject?>?>?
        propertyValues,
  ) {
    final _$propertyValues = propertyValues?.reference ?? jni$_.jNullReference;
    return _withProperties(reference.pointer,
            _id_withProperties as jni$_.JMethodIDPtr, _$propertyValues.pointer)
        .object<LineLayer?>(const $LineLayer$NullableType());
  }

  static final _id_getLineCap = _class.instanceMethodId(
    r'getLineCap',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getLineCap = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getLineCap()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?>? getLineCap() {
    return _getLineCap(reference.pointer, _id_getLineCap as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getLineJoin = _class.instanceMethodId(
    r'getLineJoin',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getLineJoin = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getLineJoin()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?>? getLineJoin() {
    return _getLineJoin(
            reference.pointer, _id_getLineJoin as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getLineMiterLimit = _class.instanceMethodId(
    r'getLineMiterLimit',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getLineMiterLimit = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getLineMiterLimit()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?>? getLineMiterLimit() {
    return _getLineMiterLimit(
            reference.pointer, _id_getLineMiterLimit as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_getLineRoundLimit = _class.instanceMethodId(
    r'getLineRoundLimit',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getLineRoundLimit = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getLineRoundLimit()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?>? getLineRoundLimit() {
    return _getLineRoundLimit(
            reference.pointer, _id_getLineRoundLimit as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_getLineSortKey = _class.instanceMethodId(
    r'getLineSortKey',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getLineSortKey = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getLineSortKey()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?>? getLineSortKey() {
    return _getLineSortKey(
            reference.pointer, _id_getLineSortKey as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_getLineOpacity = _class.instanceMethodId(
    r'getLineOpacity',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getLineOpacity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getLineOpacity()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?>? getLineOpacity() {
    return _getLineOpacity(
            reference.pointer, _id_getLineOpacity as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_getLineOpacityTransition = _class.instanceMethodId(
    r'getLineOpacityTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getLineOpacityTransition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getLineOpacityTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getLineOpacityTransition() {
    return _getLineOpacityTransition(reference.pointer,
            _id_getLineOpacityTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setLineOpacityTransition = _class.instanceMethodId(
    r'setLineOpacityTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setLineOpacityTransition = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setLineOpacityTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setLineOpacityTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setLineOpacityTransition(
            reference.pointer,
            _id_setLineOpacityTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getLineColor = _class.instanceMethodId(
    r'getLineColor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getLineColor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getLineColor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?>? getLineColor() {
    return _getLineColor(
            reference.pointer, _id_getLineColor as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getLineColorAsInt = _class.instanceMethodId(
    r'getLineColorAsInt',
    r'()I',
  );

  static final _getLineColorAsInt = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getLineColorAsInt()`
  int getLineColorAsInt() {
    return _getLineColorAsInt(
            reference.pointer, _id_getLineColorAsInt as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getLineColorTransition = _class.instanceMethodId(
    r'getLineColorTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getLineColorTransition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getLineColorTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getLineColorTransition() {
    return _getLineColorTransition(
            reference.pointer, _id_getLineColorTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setLineColorTransition = _class.instanceMethodId(
    r'setLineColorTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setLineColorTransition = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setLineColorTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setLineColorTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setLineColorTransition(
            reference.pointer,
            _id_setLineColorTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getLineTranslate = _class.instanceMethodId(
    r'getLineTranslate',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getLineTranslate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getLineTranslate()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?
      getLineTranslate() {
    return _getLineTranslate(
            reference.pointer, _id_getLineTranslate as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JFloat?>?>(
                jni$_.JArrayNullableType<jni$_.JFloat?>(
                    jni$_.JFloatNullableType())));
  }

  static final _id_getLineTranslateTransition = _class.instanceMethodId(
    r'getLineTranslateTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getLineTranslateTransition =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getLineTranslateTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getLineTranslateTransition() {
    return _getLineTranslateTransition(reference.pointer,
            _id_getLineTranslateTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setLineTranslateTransition = _class.instanceMethodId(
    r'setLineTranslateTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setLineTranslateTransition =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setLineTranslateTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setLineTranslateTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setLineTranslateTransition(
            reference.pointer,
            _id_setLineTranslateTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getLineTranslateAnchor = _class.instanceMethodId(
    r'getLineTranslateAnchor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getLineTranslateAnchor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getLineTranslateAnchor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?>? getLineTranslateAnchor() {
    return _getLineTranslateAnchor(
            reference.pointer, _id_getLineTranslateAnchor as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getLineWidth = _class.instanceMethodId(
    r'getLineWidth',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getLineWidth = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getLineWidth()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?>? getLineWidth() {
    return _getLineWidth(
            reference.pointer, _id_getLineWidth as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_getLineWidthTransition = _class.instanceMethodId(
    r'getLineWidthTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getLineWidthTransition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getLineWidthTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getLineWidthTransition() {
    return _getLineWidthTransition(
            reference.pointer, _id_getLineWidthTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setLineWidthTransition = _class.instanceMethodId(
    r'setLineWidthTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setLineWidthTransition = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setLineWidthTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setLineWidthTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setLineWidthTransition(
            reference.pointer,
            _id_setLineWidthTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getLineGapWidth = _class.instanceMethodId(
    r'getLineGapWidth',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getLineGapWidth = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getLineGapWidth()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?>? getLineGapWidth() {
    return _getLineGapWidth(
            reference.pointer, _id_getLineGapWidth as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_getLineGapWidthTransition = _class.instanceMethodId(
    r'getLineGapWidthTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getLineGapWidthTransition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getLineGapWidthTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getLineGapWidthTransition() {
    return _getLineGapWidthTransition(reference.pointer,
            _id_getLineGapWidthTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setLineGapWidthTransition = _class.instanceMethodId(
    r'setLineGapWidthTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setLineGapWidthTransition = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setLineGapWidthTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setLineGapWidthTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setLineGapWidthTransition(
            reference.pointer,
            _id_setLineGapWidthTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getLineOffset = _class.instanceMethodId(
    r'getLineOffset',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getLineOffset = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getLineOffset()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?>? getLineOffset() {
    return _getLineOffset(
            reference.pointer, _id_getLineOffset as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_getLineOffsetTransition = _class.instanceMethodId(
    r'getLineOffsetTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getLineOffsetTransition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getLineOffsetTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getLineOffsetTransition() {
    return _getLineOffsetTransition(reference.pointer,
            _id_getLineOffsetTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setLineOffsetTransition = _class.instanceMethodId(
    r'setLineOffsetTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setLineOffsetTransition = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setLineOffsetTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setLineOffsetTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setLineOffsetTransition(
            reference.pointer,
            _id_setLineOffsetTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getLineBlur = _class.instanceMethodId(
    r'getLineBlur',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getLineBlur = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getLineBlur()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?>? getLineBlur() {
    return _getLineBlur(
            reference.pointer, _id_getLineBlur as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_getLineBlurTransition = _class.instanceMethodId(
    r'getLineBlurTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getLineBlurTransition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getLineBlurTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getLineBlurTransition() {
    return _getLineBlurTransition(
            reference.pointer, _id_getLineBlurTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setLineBlurTransition = _class.instanceMethodId(
    r'setLineBlurTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setLineBlurTransition = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setLineBlurTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setLineBlurTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setLineBlurTransition(
            reference.pointer,
            _id_setLineBlurTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getLineDasharray = _class.instanceMethodId(
    r'getLineDasharray',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getLineDasharray = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getLineDasharray()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?
      getLineDasharray() {
    return _getLineDasharray(
            reference.pointer, _id_getLineDasharray as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JArray<jni$_.JFloat?>?>?>(
            const propertyvalue$_
                .$PropertyValue$NullableType<jni$_.JArray<jni$_.JFloat?>?>(
                jni$_.JArrayNullableType<jni$_.JFloat?>(
                    jni$_.JFloatNullableType())));
  }

  static final _id_getLineDasharrayTransition = _class.instanceMethodId(
    r'getLineDasharrayTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getLineDasharrayTransition =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getLineDasharrayTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getLineDasharrayTransition() {
    return _getLineDasharrayTransition(reference.pointer,
            _id_getLineDasharrayTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setLineDasharrayTransition = _class.instanceMethodId(
    r'setLineDasharrayTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setLineDasharrayTransition =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setLineDasharrayTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setLineDasharrayTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setLineDasharrayTransition(
            reference.pointer,
            _id_setLineDasharrayTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getLinePattern = _class.instanceMethodId(
    r'getLinePattern',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getLinePattern = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getLinePattern()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?>? getLinePattern() {
    return _getLinePattern(
            reference.pointer, _id_getLinePattern as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getLinePatternTransition = _class.instanceMethodId(
    r'getLinePatternTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getLinePatternTransition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getLinePatternTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions? getLinePatternTransition() {
    return _getLinePatternTransition(reference.pointer,
            _id_getLinePatternTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions?>(
            const transitionoptions$_.$TransitionOptions$NullableType());
  }

  static final _id_setLinePatternTransition = _class.instanceMethodId(
    r'setLinePatternTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setLinePatternTransition = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setLinePatternTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setLinePatternTransition(
    transitionoptions$_.TransitionOptions? transitionOptions,
  ) {
    final _$transitionOptions =
        transitionOptions?.reference ?? jni$_.jNullReference;
    _setLinePatternTransition(
            reference.pointer,
            _id_setLinePatternTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getLineGradient = _class.instanceMethodId(
    r'getLineGradient',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getLineGradient = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getLineGradient()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?>? getLineGradient() {
    return _getLineGradient(
            reference.pointer, _id_getLineGradient as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>?>(
            const propertyvalue$_.$PropertyValue$NullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getLineGradientAsInt = _class.instanceMethodId(
    r'getLineGradientAsInt',
    r'()I',
  );

  static final _getLineGradientAsInt = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getLineGradientAsInt()`
  int getLineGradientAsInt() {
    return _getLineGradientAsInt(
            reference.pointer, _id_getLineGradientAsInt as jni$_.JMethodIDPtr)
        .integer;
  }
}

final class $LineLayer$NullableType extends jni$_.JObjType<LineLayer?> {
  @jni$_.internal
  const $LineLayer$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/style/layers/LineLayer;';

  @jni$_.internal
  @core$_.override
  LineLayer? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : LineLayer.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const layer$_.$Layer$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LineLayer?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($LineLayer$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LineLayer$NullableType) &&
        other is $LineLayer$NullableType;
  }
}

final class $LineLayer$Type extends jni$_.JObjType<LineLayer> {
  @jni$_.internal
  const $LineLayer$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/style/layers/LineLayer;';

  @jni$_.internal
  @core$_.override
  LineLayer fromReference(jni$_.JReference reference) =>
      LineLayer.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const layer$_.$Layer$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LineLayer?> get nullableType =>
      const $LineLayer$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($LineLayer$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LineLayer$Type) && other is $LineLayer$Type;
  }
}
