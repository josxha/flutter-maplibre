// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `org.maplibre.android.utils.AnimatorUtils$OnAnimationEndListener`
class AnimatorUtils$OnAnimationEndListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AnimatorUtils$OnAnimationEndListener> $type;

  @jni$_.internal
  AnimatorUtils$OnAnimationEndListener.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/utils/AnimatorUtils$OnAnimationEndListener');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $AnimatorUtils$OnAnimationEndListener$NullableType();
  static const type = $AnimatorUtils$OnAnimationEndListener$Type();
  static final _id_onAnimationEnd = _class.instanceMethodId(
    r'onAnimationEnd',
    r'()V',
  );

  static final _onAnimationEnd = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void onAnimationEnd()`
  void onAnimationEnd() {
    _onAnimationEnd(reference.pointer, _id_onAnimationEnd as jni$_.JMethodIDPtr)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $AnimatorUtils$OnAnimationEndListener> _$impls =
      {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onAnimationEnd()V') {
        _$impls[$p]!.onAnimationEnd();
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $AnimatorUtils$OnAnimationEndListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.utils.AnimatorUtils$OnAnimationEndListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onAnimationEnd$async) r'onAnimationEnd()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory AnimatorUtils$OnAnimationEndListener.implement(
    $AnimatorUtils$OnAnimationEndListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return AnimatorUtils$OnAnimationEndListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $AnimatorUtils$OnAnimationEndListener {
  factory $AnimatorUtils$OnAnimationEndListener({
    required void Function() onAnimationEnd,
    bool onAnimationEnd$async,
  }) = _$AnimatorUtils$OnAnimationEndListener;

  void onAnimationEnd();
  bool get onAnimationEnd$async => false;
}

final class _$AnimatorUtils$OnAnimationEndListener
    with $AnimatorUtils$OnAnimationEndListener {
  _$AnimatorUtils$OnAnimationEndListener({
    required void Function() onAnimationEnd,
    this.onAnimationEnd$async = false,
  }) : _onAnimationEnd = onAnimationEnd;

  final void Function() _onAnimationEnd;
  final bool onAnimationEnd$async;

  void onAnimationEnd() {
    return _onAnimationEnd();
  }
}

final class $AnimatorUtils$OnAnimationEndListener$NullableType
    extends jni$_.JObjType<AnimatorUtils$OnAnimationEndListener?> {
  @jni$_.internal
  const $AnimatorUtils$OnAnimationEndListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/utils/AnimatorUtils$OnAnimationEndListener;';

  @jni$_.internal
  @core$_.override
  AnimatorUtils$OnAnimationEndListener? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : AnimatorUtils$OnAnimationEndListener.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AnimatorUtils$OnAnimationEndListener?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($AnimatorUtils$OnAnimationEndListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($AnimatorUtils$OnAnimationEndListener$NullableType) &&
        other is $AnimatorUtils$OnAnimationEndListener$NullableType;
  }
}

final class $AnimatorUtils$OnAnimationEndListener$Type
    extends jni$_.JObjType<AnimatorUtils$OnAnimationEndListener> {
  @jni$_.internal
  const $AnimatorUtils$OnAnimationEndListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/utils/AnimatorUtils$OnAnimationEndListener;';

  @jni$_.internal
  @core$_.override
  AnimatorUtils$OnAnimationEndListener fromReference(
          jni$_.JReference reference) =>
      AnimatorUtils$OnAnimationEndListener.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AnimatorUtils$OnAnimationEndListener?> get nullableType =>
      const $AnimatorUtils$OnAnimationEndListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AnimatorUtils$OnAnimationEndListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AnimatorUtils$OnAnimationEndListener$Type) &&
        other is $AnimatorUtils$OnAnimationEndListener$Type;
  }
}

/// from: `org.maplibre.android.utils.AnimatorUtils`
class AnimatorUtils extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AnimatorUtils> $type;

  @jni$_.internal
  AnimatorUtils.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'org/maplibre/android/utils/AnimatorUtils');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AnimatorUtils$NullableType();
  static const type = $AnimatorUtils$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory AnimatorUtils() {
    return AnimatorUtils.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_animate = _class.staticMethodId(
    r'animate',
    r'(Landroid/view/View;ILorg/maplibre/android/utils/AnimatorUtils$OnAnimationEndListener;)V',
  );

  static final _animate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public void animate(android.view.View view, int i, org.maplibre.android.utils.AnimatorUtils$OnAnimationEndListener onAnimationEndListener)`
  static void animate(
    jni$_.JObject view,
    int i,
    AnimatorUtils$OnAnimationEndListener? onAnimationEndListener,
  ) {
    final _$view = view.reference;
    final _$onAnimationEndListener =
        onAnimationEndListener?.reference ?? jni$_.jNullReference;
    _animate(_class.reference.pointer, _id_animate as jni$_.JMethodIDPtr,
            _$view.pointer, i, _$onAnimationEndListener.pointer)
        .check();
  }

  static final _id_animate$1 = _class.staticMethodId(
    r'animate',
    r'(Landroid/view/View;IILorg/maplibre/android/utils/AnimatorUtils$OnAnimationEndListener;)V',
  );

  static final _animate$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public void animate(android.view.View view, int i, int i1, org.maplibre.android.utils.AnimatorUtils$OnAnimationEndListener onAnimationEndListener)`
  static void animate$1(
    jni$_.JObject? view,
    int i,
    int i1,
    AnimatorUtils$OnAnimationEndListener? onAnimationEndListener,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$onAnimationEndListener =
        onAnimationEndListener?.reference ?? jni$_.jNullReference;
    _animate$1(_class.reference.pointer, _id_animate$1 as jni$_.JMethodIDPtr,
            _$view.pointer, i, i1, _$onAnimationEndListener.pointer)
        .check();
  }

  static final _id_animate$2 = _class.staticMethodId(
    r'animate',
    r'(Landroid/view/View;I)V',
  );

  static final _animate$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `static public void animate(android.view.View view, int i)`
  static void animate$2(
    jni$_.JObject view,
    int i,
  ) {
    final _$view = view.reference;
    _animate$2(_class.reference.pointer, _id_animate$2 as jni$_.JMethodIDPtr,
            _$view.pointer, i)
        .check();
  }

  static final _id_animate$3 = _class.staticMethodId(
    r'animate',
    r'(Landroid/view/View;II)V',
  );

  static final _animate$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int)>();

  /// from: `static public void animate(android.view.View view, int i, int i1)`
  static void animate$3(
    jni$_.JObject view,
    int i,
    int i1,
  ) {
    final _$view = view.reference;
    _animate$3(_class.reference.pointer, _id_animate$3 as jni$_.JMethodIDPtr,
            _$view.pointer, i, i1)
        .check();
  }

  static final _id_rotate = _class.staticMethodId(
    r'rotate',
    r'(Landroid/view/View;F)V',
  );

  static final _rotate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, double)>();

  /// from: `static public void rotate(android.view.View view, float f)`
  static void rotate(
    jni$_.JObject view,
    double f,
  ) {
    final _$view = view.reference;
    _rotate(_class.reference.pointer, _id_rotate as jni$_.JMethodIDPtr,
            _$view.pointer, f)
        .check();
  }

  static final _id_rotateBy = _class.staticMethodId(
    r'rotateBy',
    r'(Landroid/view/View;F)V',
  );

  static final _rotateBy = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, double)>();

  /// from: `static public void rotateBy(android.view.View view, float f)`
  static void rotateBy(
    jni$_.JObject view,
    double f,
  ) {
    final _$view = view.reference;
    _rotateBy(_class.reference.pointer, _id_rotateBy as jni$_.JMethodIDPtr,
            _$view.pointer, f)
        .check();
  }

  static final _id_alpha = _class.staticMethodId(
    r'alpha',
    r'(Landroid/view/View;FLorg/maplibre/android/utils/AnimatorUtils$OnAnimationEndListener;)V',
  );

  static final _alpha = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              double,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public void alpha(android.view.View view, float f, org.maplibre.android.utils.AnimatorUtils$OnAnimationEndListener onAnimationEndListener)`
  static void alpha(
    jni$_.JObject view,
    double f,
    AnimatorUtils$OnAnimationEndListener? onAnimationEndListener,
  ) {
    final _$view = view.reference;
    final _$onAnimationEndListener =
        onAnimationEndListener?.reference ?? jni$_.jNullReference;
    _alpha(_class.reference.pointer, _id_alpha as jni$_.JMethodIDPtr,
            _$view.pointer, f, _$onAnimationEndListener.pointer)
        .check();
  }

  static final _id_alpha$1 = _class.staticMethodId(
    r'alpha',
    r'(Landroid/view/View;F)V',
  );

  static final _alpha$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, double)>();

  /// from: `static public void alpha(android.view.View view, float f)`
  static void alpha$1(
    jni$_.JObject view,
    double f,
  ) {
    final _$view = view.reference;
    _alpha$1(_class.reference.pointer, _id_alpha$1 as jni$_.JMethodIDPtr,
            _$view.pointer, f)
        .check();
  }
}

final class $AnimatorUtils$NullableType extends jni$_.JObjType<AnimatorUtils?> {
  @jni$_.internal
  const $AnimatorUtils$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/utils/AnimatorUtils;';

  @jni$_.internal
  @core$_.override
  AnimatorUtils? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : AnimatorUtils.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AnimatorUtils?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AnimatorUtils$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AnimatorUtils$NullableType) &&
        other is $AnimatorUtils$NullableType;
  }
}

final class $AnimatorUtils$Type extends jni$_.JObjType<AnimatorUtils> {
  @jni$_.internal
  const $AnimatorUtils$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/utils/AnimatorUtils;';

  @jni$_.internal
  @core$_.override
  AnimatorUtils fromReference(jni$_.JReference reference) =>
      AnimatorUtils.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AnimatorUtils?> get nullableType =>
      const $AnimatorUtils$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AnimatorUtils$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AnimatorUtils$Type) &&
        other is $AnimatorUtils$Type;
  }
}
