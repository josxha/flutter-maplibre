// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../../../geojson/Feature.dart' as feature$_;

import '../../geometry/LatLngBounds.dart' as latlngbounds$_;

import 'CustomGeometrySourceOptions.dart' as customgeometrysourceoptions$_;

import 'GeometryTileProvider.dart' as geometrytileprovider$_;

import 'Source.dart' as source$_;

/// from: `org.maplibre.android.style.sources.CustomGeometrySource$Companion`
class CustomGeometrySource$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CustomGeometrySource$Companion> $type;

  @jni$_.internal
  CustomGeometrySource$Companion.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/style/sources/CustomGeometrySource$Companion',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CustomGeometrySource$Companion$NullableType();
  static const type = $CustomGeometrySource$Companion$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CustomGeometrySource$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return CustomGeometrySource$Companion.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$defaultConstructorMarker.pointer,
      ).reference,
    );
  }
}

final class $CustomGeometrySource$Companion$NullableType
    extends jni$_.JObjType<CustomGeometrySource$Companion?> {
  @jni$_.internal
  const $CustomGeometrySource$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/style/sources/CustomGeometrySource$Companion;';

  @jni$_.internal
  @core$_.override
  CustomGeometrySource$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : CustomGeometrySource$Companion.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CustomGeometrySource$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CustomGeometrySource$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CustomGeometrySource$Companion$NullableType) &&
        other is $CustomGeometrySource$Companion$NullableType;
  }
}

final class $CustomGeometrySource$Companion$Type
    extends jni$_.JObjType<CustomGeometrySource$Companion> {
  @jni$_.internal
  const $CustomGeometrySource$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/style/sources/CustomGeometrySource$Companion;';

  @jni$_.internal
  @core$_.override
  CustomGeometrySource$Companion fromReference(jni$_.JReference reference) =>
      CustomGeometrySource$Companion.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CustomGeometrySource$Companion?> get nullableType =>
      const $CustomGeometrySource$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CustomGeometrySource$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomGeometrySource$Companion$Type) &&
        other is $CustomGeometrySource$Companion$Type;
  }
}

/// from: `org.maplibre.android.style.sources.CustomGeometrySource$GeometryTileRequest`
class CustomGeometrySource$GeometryTileRequest extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CustomGeometrySource$GeometryTileRequest> $type;

  @jni$_.internal
  CustomGeometrySource$GeometryTileRequest.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/style/sources/CustomGeometrySource$GeometryTileRequest',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $CustomGeometrySource$GeometryTileRequest$NullableType();
  static const type = $CustomGeometrySource$GeometryTileRequest$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lorg/maplibre/android/style/sources/CustomGeometrySource$TileID;Lorg/maplibre/android/style/sources/GeometryTileProvider;Ljava/util/Map;Ljava/util/Map;Lorg/maplibre/android/style/sources/CustomGeometrySource;Ljava/util/concurrent/atomic/AtomicBoolean;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(org.maplibre.android.style.sources.CustomGeometrySource$TileID tileID, org.maplibre.android.style.sources.GeometryTileProvider geometryTileProvider, java.util.Map map, java.util.Map map1, org.maplibre.android.style.sources.CustomGeometrySource customGeometrySource, java.util.concurrent.atomic.AtomicBoolean atomicBoolean)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CustomGeometrySource$GeometryTileRequest(
    CustomGeometrySource$TileID tileID,
    geometrytileprovider$_.GeometryTileProvider? geometryTileProvider,
    jni$_.JMap<
      CustomGeometrySource$TileID,
      CustomGeometrySource$GeometryTileRequest
    >?
    map,
    jni$_.JMap<CustomGeometrySource$TileID, jni$_.JObject?>? map1,
    CustomGeometrySource? customGeometrySource,
    jni$_.JObject? atomicBoolean,
  ) {
    final _$tileID = tileID.reference;
    final _$geometryTileProvider =
        geometryTileProvider?.reference ?? jni$_.jNullReference;
    final _$map = map?.reference ?? jni$_.jNullReference;
    final _$map1 = map1?.reference ?? jni$_.jNullReference;
    final _$customGeometrySource =
        customGeometrySource?.reference ?? jni$_.jNullReference;
    final _$atomicBoolean = atomicBoolean?.reference ?? jni$_.jNullReference;
    return CustomGeometrySource$GeometryTileRequest.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$tileID.pointer,
        _$geometryTileProvider.pointer,
        _$map.pointer,
        _$map1.pointer,
        _$customGeometrySource.pointer,
        _$atomicBoolean.pointer,
      ).reference,
    );
  }

  static final _id_run = _class.instanceMethodId(r'run', r'()V');

  static final _run =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void run()`
  void run() {
    _run(reference.pointer, _id_run as jni$_.JMethodIDPtr).check();
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(jni$_.JObject? object) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(
      reference.pointer,
      _id_equals as jni$_.JMethodIDPtr,
      _$object.pointer,
    ).boolean;
  }
}

final class $CustomGeometrySource$GeometryTileRequest$NullableType
    extends jni$_.JObjType<CustomGeometrySource$GeometryTileRequest?> {
  @jni$_.internal
  const $CustomGeometrySource$GeometryTileRequest$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/style/sources/CustomGeometrySource$GeometryTileRequest;';

  @jni$_.internal
  @core$_.override
  CustomGeometrySource$GeometryTileRequest? fromReference(
    jni$_.JReference reference,
  ) =>
      reference.isNull
          ? null
          : CustomGeometrySource$GeometryTileRequest.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CustomGeometrySource$GeometryTileRequest?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($CustomGeometrySource$GeometryTileRequest$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CustomGeometrySource$GeometryTileRequest$NullableType) &&
        other is $CustomGeometrySource$GeometryTileRequest$NullableType;
  }
}

final class $CustomGeometrySource$GeometryTileRequest$Type
    extends jni$_.JObjType<CustomGeometrySource$GeometryTileRequest> {
  @jni$_.internal
  const $CustomGeometrySource$GeometryTileRequest$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/style/sources/CustomGeometrySource$GeometryTileRequest;';

  @jni$_.internal
  @core$_.override
  CustomGeometrySource$GeometryTileRequest fromReference(
    jni$_.JReference reference,
  ) => CustomGeometrySource$GeometryTileRequest.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CustomGeometrySource$GeometryTileRequest?> get nullableType =>
      const $CustomGeometrySource$GeometryTileRequest$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CustomGeometrySource$GeometryTileRequest$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CustomGeometrySource$GeometryTileRequest$Type) &&
        other is $CustomGeometrySource$GeometryTileRequest$Type;
  }
}

/// from: `org.maplibre.android.style.sources.CustomGeometrySource$TileID`
class CustomGeometrySource$TileID extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CustomGeometrySource$TileID> $type;

  @jni$_.internal
  CustomGeometrySource$TileID.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/style/sources/CustomGeometrySource$TileID',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CustomGeometrySource$TileID$NullableType();
  static const type = $CustomGeometrySource$TileID$Type();
  static final _id_new$ = _class.constructorId(r'(III)V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              int,
            )
          >();

  /// from: `public void <init>(int i, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CustomGeometrySource$TileID(int i, int i1, int i2) {
    return CustomGeometrySource$TileID.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        i,
        i1,
        i2,
      ).reference,
    );
  }

  static final _id_getZ = _class.instanceMethodId(r'getZ', r'()I');

  static final _getZ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final int getZ()`
  int getZ() {
    return _getZ(reference.pointer, _id_getZ as jni$_.JMethodIDPtr).integer;
  }

  static final _id_setZ = _class.instanceMethodId(r'setZ', r'(I)V');

  static final _setZ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public final void setZ(int i)`
  void setZ(int i) {
    _setZ(reference.pointer, _id_setZ as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_getX = _class.instanceMethodId(r'getX', r'()I');

  static final _getX =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final int getX()`
  int getX() {
    return _getX(reference.pointer, _id_getX as jni$_.JMethodIDPtr).integer;
  }

  static final _id_setX = _class.instanceMethodId(r'setX', r'(I)V');

  static final _setX =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public final void setX(int i)`
  void setX(int i) {
    _setX(reference.pointer, _id_setX as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_getY = _class.instanceMethodId(r'getY', r'()I');

  static final _getY =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final int getY()`
  int getY() {
    return _getY(reference.pointer, _id_getY as jni$_.JMethodIDPtr).integer;
  }

  static final _id_setY = _class.instanceMethodId(r'setY', r'(I)V');

  static final _setY =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public final void setY(int i)`
  void setY(int i) {
    _setY(reference.pointer, _id_setY as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_hashCode$1 = _class.instanceMethodId(r'hashCode', r'()I');

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(
      reference.pointer,
      _id_hashCode$1 as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(jni$_.JObject? object) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(
      reference.pointer,
      _id_equals as jni$_.JMethodIDPtr,
      _$object.pointer,
    ).boolean;
  }
}

final class $CustomGeometrySource$TileID$NullableType
    extends jni$_.JObjType<CustomGeometrySource$TileID?> {
  @jni$_.internal
  const $CustomGeometrySource$TileID$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/style/sources/CustomGeometrySource$TileID;';

  @jni$_.internal
  @core$_.override
  CustomGeometrySource$TileID? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : CustomGeometrySource$TileID.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CustomGeometrySource$TileID?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CustomGeometrySource$TileID$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomGeometrySource$TileID$NullableType) &&
        other is $CustomGeometrySource$TileID$NullableType;
  }
}

final class $CustomGeometrySource$TileID$Type
    extends jni$_.JObjType<CustomGeometrySource$TileID> {
  @jni$_.internal
  const $CustomGeometrySource$TileID$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/style/sources/CustomGeometrySource$TileID;';

  @jni$_.internal
  @core$_.override
  CustomGeometrySource$TileID fromReference(jni$_.JReference reference) =>
      CustomGeometrySource$TileID.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CustomGeometrySource$TileID?> get nullableType =>
      const $CustomGeometrySource$TileID$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($CustomGeometrySource$TileID$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomGeometrySource$TileID$Type) &&
        other is $CustomGeometrySource$TileID$Type;
  }
}

/// from: `org.maplibre.android.style.sources.CustomGeometrySource`
class CustomGeometrySource extends source$_.Source {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<CustomGeometrySource> $type;

  @jni$_.internal
  CustomGeometrySource.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/style/sources/CustomGeometrySource',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $CustomGeometrySource$NullableType();
  static const type = $CustomGeometrySource$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lorg/maplibre/android/style/sources/CustomGeometrySource$Companion;',
  );

  /// from: `static public final org.maplibre.android.style.sources.CustomGeometrySource$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static CustomGeometrySource$Companion get Companion =>
      _id_Companion.get(_class, const $CustomGeometrySource$Companion$Type());

  static final _id_THREAD_PREFIX = _class.staticFieldId(
    r'THREAD_PREFIX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String THREAD_PREFIX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get THREAD_PREFIX =>
      _id_THREAD_PREFIX.get(_class, const jni$_.JStringType());

  /// from: `static public final int THREAD_POOL_LIMIT`
  static const THREAD_POOL_LIMIT = 4;
  static final _id_new$ = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/android/style/sources/CustomGeometrySourceOptions;Lorg/maplibre/android/style/sources/GeometryTileProvider;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(java.lang.String string, org.maplibre.android.style.sources.CustomGeometrySourceOptions customGeometrySourceOptions, org.maplibre.android.style.sources.GeometryTileProvider geometryTileProvider)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CustomGeometrySource(
    jni$_.JString? string,
    customgeometrysourceoptions$_.CustomGeometrySourceOptions?
    customGeometrySourceOptions,
    geometrytileprovider$_.GeometryTileProvider? geometryTileProvider,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$customGeometrySourceOptions =
        customGeometrySourceOptions?.reference ?? jni$_.jNullReference;
    final _$geometryTileProvider =
        geometryTileProvider?.reference ?? jni$_.jNullReference;
    return CustomGeometrySource.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$string.pointer,
        _$customGeometrySourceOptions.pointer,
        _$geometryTileProvider.pointer,
      ).reference,
    );
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/android/style/sources/GeometryTileProvider;)V',
  );

  static final _new$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(java.lang.String string, org.maplibre.android.style.sources.GeometryTileProvider geometryTileProvider)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CustomGeometrySource.new$1(
    jni$_.JString? string,
    geometrytileprovider$_.GeometryTileProvider? geometryTileProvider,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$geometryTileProvider =
        geometryTileProvider?.reference ?? jni$_.jNullReference;
    return CustomGeometrySource.fromReference(
      _new$1(
        _class.reference.pointer,
        _id_new$1 as jni$_.JMethodIDPtr,
        _$string.pointer,
        _$geometryTileProvider.pointer,
      ).reference,
    );
  }

  static final _id_invalidateRegion = _class.instanceMethodId(
    r'invalidateRegion',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;)V',
  );

  static final _invalidateRegion =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final void invalidateRegion(org.maplibre.android.geometry.LatLngBounds latLngBounds)`
  void invalidateRegion(latlngbounds$_.LatLngBounds latLngBounds) {
    final _$latLngBounds = latLngBounds.reference;
    _invalidateRegion(
      reference.pointer,
      _id_invalidateRegion as jni$_.JMethodIDPtr,
      _$latLngBounds.pointer,
    ).check();
  }

  static final _id_invalidateTile = _class.instanceMethodId(
    r'invalidateTile',
    r'(III)V',
  );

  static final _invalidateTile =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              int,
            )
          >();

  /// from: `public final void invalidateTile(int i, int i1, int i2)`
  void invalidateTile(int i, int i1, int i2) {
    _invalidateTile(
      reference.pointer,
      _id_invalidateTile as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
    ).check();
  }

  static final _id_setTileData = _class.instanceMethodId(
    r'setTileData',
    r'(IIILorg/maplibre/geojson/FeatureCollection;)V',
  );

  static final _setTileData =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final void setTileData(int i, int i1, int i2, org.maplibre.geojson.FeatureCollection featureCollection)`
  void setTileData(int i, int i1, int i2, jni$_.JObject featureCollection) {
    final _$featureCollection = featureCollection.reference;
    _setTileData(
      reference.pointer,
      _id_setTileData as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
      _$featureCollection.pointer,
    ).check();
  }

  static final _id_querySourceFeatures = _class.instanceMethodId(
    r'querySourceFeatures',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Ljava/util/List;',
  );

  static final _querySourceFeatures =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final java.util.List querySourceFeatures(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<feature$_.Feature> querySourceFeatures(
    jni$_.JObject? expression,
  ) {
    final _$expression = expression?.reference ?? jni$_.jNullReference;
    return _querySourceFeatures(
      reference.pointer,
      _id_querySourceFeatures as jni$_.JMethodIDPtr,
      _$expression.pointer,
    ).object<jni$_.JList<feature$_.Feature>>(
      const jni$_.JListType<feature$_.Feature>(feature$_.$Feature$Type()),
    );
  }
}

final class $CustomGeometrySource$NullableType
    extends jni$_.JObjType<CustomGeometrySource?> {
  @jni$_.internal
  const $CustomGeometrySource$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/style/sources/CustomGeometrySource;';

  @jni$_.internal
  @core$_.override
  CustomGeometrySource? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : CustomGeometrySource.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const source$_.$Source$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CustomGeometrySource?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($CustomGeometrySource$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomGeometrySource$NullableType) &&
        other is $CustomGeometrySource$NullableType;
  }
}

final class $CustomGeometrySource$Type
    extends jni$_.JObjType<CustomGeometrySource> {
  @jni$_.internal
  const $CustomGeometrySource$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/style/sources/CustomGeometrySource;';

  @jni$_.internal
  @core$_.override
  CustomGeometrySource fromReference(jni$_.JReference reference) =>
      CustomGeometrySource.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const source$_.$Source$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<CustomGeometrySource?> get nullableType =>
      const $CustomGeometrySource$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($CustomGeometrySource$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomGeometrySource$Type) &&
        other is $CustomGeometrySource$Type;
  }
}
