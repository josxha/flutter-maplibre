// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'Layer.dart' as layer$_;

import 'PropertyValue.dart' as propertyvalue$_;

import 'TransitionOptions.dart' as transitionoptions$_;

/// from: `org.maplibre.android.style.layers.RasterLayer`
class RasterLayer extends layer$_.Layer {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<RasterLayer> $type;

  @jni$_.internal
  RasterLayer.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/style/layers/RasterLayer',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $RasterLayer$NullableType();
  static const type = $RasterLayer$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory RasterLayer(jni$_.JString? string, jni$_.JString? string1) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return RasterLayer.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$string.pointer,
        _$string1.pointer,
      ).reference,
    );
  }

  static final _id_setSourceLayer = _class.instanceMethodId(
    r'setSourceLayer',
    r'(Ljava/lang/String;)V',
  );

  static final _setSourceLayer =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setSourceLayer(java.lang.String string)`
  void setSourceLayer(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _setSourceLayer(
      reference.pointer,
      _id_setSourceLayer as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).check();
  }

  static final _id_withSourceLayer = _class.instanceMethodId(
    r'withSourceLayer',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/RasterLayer;',
  );

  static final _withSourceLayer =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.RasterLayer withSourceLayer(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  RasterLayer withSourceLayer(jni$_.JString? string) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _withSourceLayer(
      reference.pointer,
      _id_withSourceLayer as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<RasterLayer>(const $RasterLayer$Type());
  }

  static final _id_getSourceId = _class.instanceMethodId(
    r'getSourceId',
    r'()Ljava/lang/String;',
  );

  static final _getSourceId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getSourceId()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getSourceId() {
    return _getSourceId(
      reference.pointer,
      _id_getSourceId as jni$_.JMethodIDPtr,
    ).object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_withProperties = _class.instanceMethodId(
    r'withProperties',
    r'([Lorg/maplibre/android/style/layers/PropertyValue;)Lorg/maplibre/android/style/layers/RasterLayer;',
  );

  static final _withProperties =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.RasterLayer withProperties(java.lang.Object[] propertyValues)`
  /// The returned object must be released after use, by calling the [release] method.
  RasterLayer withProperties(
    jni$_.JArray<propertyvalue$_.PropertyValue<jni$_.JObject?>?> propertyValues,
  ) {
    final _$propertyValues = propertyValues.reference;
    return _withProperties(
      reference.pointer,
      _id_withProperties as jni$_.JMethodIDPtr,
      _$propertyValues.pointer,
    ).object<RasterLayer>(const $RasterLayer$Type());
  }

  static final _id_getRasterOpacity = _class.instanceMethodId(
    r'getRasterOpacity',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getRasterOpacity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getRasterOpacity()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?> getRasterOpacity() {
    return _getRasterOpacity(
      reference.pointer,
      _id_getRasterOpacity as jni$_.JMethodIDPtr,
    ).object<propertyvalue$_.PropertyValue<jni$_.JFloat?>>(
      const propertyvalue$_.$PropertyValue$Type<jni$_.JFloat?>(
        jni$_.JFloatNullableType(),
      ),
    );
  }

  static final _id_getRasterOpacityTransition = _class.instanceMethodId(
    r'getRasterOpacityTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getRasterOpacityTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getRasterOpacityTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions getRasterOpacityTransition() {
    return _getRasterOpacityTransition(
      reference.pointer,
      _id_getRasterOpacityTransition as jni$_.JMethodIDPtr,
    ).object<transitionoptions$_.TransitionOptions>(
      const transitionoptions$_.$TransitionOptions$Type(),
    );
  }

  static final _id_setRasterOpacityTransition = _class.instanceMethodId(
    r'setRasterOpacityTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setRasterOpacityTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setRasterOpacityTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setRasterOpacityTransition(
    transitionoptions$_.TransitionOptions transitionOptions,
  ) {
    final _$transitionOptions = transitionOptions.reference;
    _setRasterOpacityTransition(
      reference.pointer,
      _id_setRasterOpacityTransition as jni$_.JMethodIDPtr,
      _$transitionOptions.pointer,
    ).check();
  }

  static final _id_getRasterHueRotate = _class.instanceMethodId(
    r'getRasterHueRotate',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getRasterHueRotate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getRasterHueRotate()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?> getRasterHueRotate() {
    return _getRasterHueRotate(
      reference.pointer,
      _id_getRasterHueRotate as jni$_.JMethodIDPtr,
    ).object<propertyvalue$_.PropertyValue<jni$_.JFloat?>>(
      const propertyvalue$_.$PropertyValue$Type<jni$_.JFloat?>(
        jni$_.JFloatNullableType(),
      ),
    );
  }

  static final _id_getRasterHueRotateTransition = _class.instanceMethodId(
    r'getRasterHueRotateTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getRasterHueRotateTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getRasterHueRotateTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions getRasterHueRotateTransition() {
    return _getRasterHueRotateTransition(
      reference.pointer,
      _id_getRasterHueRotateTransition as jni$_.JMethodIDPtr,
    ).object<transitionoptions$_.TransitionOptions>(
      const transitionoptions$_.$TransitionOptions$Type(),
    );
  }

  static final _id_setRasterHueRotateTransition = _class.instanceMethodId(
    r'setRasterHueRotateTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setRasterHueRotateTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setRasterHueRotateTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setRasterHueRotateTransition(
    transitionoptions$_.TransitionOptions transitionOptions,
  ) {
    final _$transitionOptions = transitionOptions.reference;
    _setRasterHueRotateTransition(
      reference.pointer,
      _id_setRasterHueRotateTransition as jni$_.JMethodIDPtr,
      _$transitionOptions.pointer,
    ).check();
  }

  static final _id_getRasterBrightnessMin = _class.instanceMethodId(
    r'getRasterBrightnessMin',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getRasterBrightnessMin =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getRasterBrightnessMin()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?> getRasterBrightnessMin() {
    return _getRasterBrightnessMin(
      reference.pointer,
      _id_getRasterBrightnessMin as jni$_.JMethodIDPtr,
    ).object<propertyvalue$_.PropertyValue<jni$_.JFloat?>>(
      const propertyvalue$_.$PropertyValue$Type<jni$_.JFloat?>(
        jni$_.JFloatNullableType(),
      ),
    );
  }

  static final _id_getRasterBrightnessMinTransition = _class.instanceMethodId(
    r'getRasterBrightnessMinTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getRasterBrightnessMinTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getRasterBrightnessMinTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions getRasterBrightnessMinTransition() {
    return _getRasterBrightnessMinTransition(
      reference.pointer,
      _id_getRasterBrightnessMinTransition as jni$_.JMethodIDPtr,
    ).object<transitionoptions$_.TransitionOptions>(
      const transitionoptions$_.$TransitionOptions$Type(),
    );
  }

  static final _id_setRasterBrightnessMinTransition = _class.instanceMethodId(
    r'setRasterBrightnessMinTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setRasterBrightnessMinTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setRasterBrightnessMinTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setRasterBrightnessMinTransition(
    transitionoptions$_.TransitionOptions transitionOptions,
  ) {
    final _$transitionOptions = transitionOptions.reference;
    _setRasterBrightnessMinTransition(
      reference.pointer,
      _id_setRasterBrightnessMinTransition as jni$_.JMethodIDPtr,
      _$transitionOptions.pointer,
    ).check();
  }

  static final _id_getRasterBrightnessMax = _class.instanceMethodId(
    r'getRasterBrightnessMax',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getRasterBrightnessMax =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getRasterBrightnessMax()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?> getRasterBrightnessMax() {
    return _getRasterBrightnessMax(
      reference.pointer,
      _id_getRasterBrightnessMax as jni$_.JMethodIDPtr,
    ).object<propertyvalue$_.PropertyValue<jni$_.JFloat?>>(
      const propertyvalue$_.$PropertyValue$Type<jni$_.JFloat?>(
        jni$_.JFloatNullableType(),
      ),
    );
  }

  static final _id_getRasterBrightnessMaxTransition = _class.instanceMethodId(
    r'getRasterBrightnessMaxTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getRasterBrightnessMaxTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getRasterBrightnessMaxTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions getRasterBrightnessMaxTransition() {
    return _getRasterBrightnessMaxTransition(
      reference.pointer,
      _id_getRasterBrightnessMaxTransition as jni$_.JMethodIDPtr,
    ).object<transitionoptions$_.TransitionOptions>(
      const transitionoptions$_.$TransitionOptions$Type(),
    );
  }

  static final _id_setRasterBrightnessMaxTransition = _class.instanceMethodId(
    r'setRasterBrightnessMaxTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setRasterBrightnessMaxTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setRasterBrightnessMaxTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setRasterBrightnessMaxTransition(
    transitionoptions$_.TransitionOptions transitionOptions,
  ) {
    final _$transitionOptions = transitionOptions.reference;
    _setRasterBrightnessMaxTransition(
      reference.pointer,
      _id_setRasterBrightnessMaxTransition as jni$_.JMethodIDPtr,
      _$transitionOptions.pointer,
    ).check();
  }

  static final _id_getRasterSaturation = _class.instanceMethodId(
    r'getRasterSaturation',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getRasterSaturation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getRasterSaturation()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?> getRasterSaturation() {
    return _getRasterSaturation(
      reference.pointer,
      _id_getRasterSaturation as jni$_.JMethodIDPtr,
    ).object<propertyvalue$_.PropertyValue<jni$_.JFloat?>>(
      const propertyvalue$_.$PropertyValue$Type<jni$_.JFloat?>(
        jni$_.JFloatNullableType(),
      ),
    );
  }

  static final _id_getRasterSaturationTransition = _class.instanceMethodId(
    r'getRasterSaturationTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getRasterSaturationTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getRasterSaturationTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions getRasterSaturationTransition() {
    return _getRasterSaturationTransition(
      reference.pointer,
      _id_getRasterSaturationTransition as jni$_.JMethodIDPtr,
    ).object<transitionoptions$_.TransitionOptions>(
      const transitionoptions$_.$TransitionOptions$Type(),
    );
  }

  static final _id_setRasterSaturationTransition = _class.instanceMethodId(
    r'setRasterSaturationTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setRasterSaturationTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setRasterSaturationTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setRasterSaturationTransition(
    transitionoptions$_.TransitionOptions transitionOptions,
  ) {
    final _$transitionOptions = transitionOptions.reference;
    _setRasterSaturationTransition(
      reference.pointer,
      _id_setRasterSaturationTransition as jni$_.JMethodIDPtr,
      _$transitionOptions.pointer,
    ).check();
  }

  static final _id_getRasterContrast = _class.instanceMethodId(
    r'getRasterContrast',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getRasterContrast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getRasterContrast()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?> getRasterContrast() {
    return _getRasterContrast(
      reference.pointer,
      _id_getRasterContrast as jni$_.JMethodIDPtr,
    ).object<propertyvalue$_.PropertyValue<jni$_.JFloat?>>(
      const propertyvalue$_.$PropertyValue$Type<jni$_.JFloat?>(
        jni$_.JFloatNullableType(),
      ),
    );
  }

  static final _id_getRasterContrastTransition = _class.instanceMethodId(
    r'getRasterContrastTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getRasterContrastTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getRasterContrastTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions getRasterContrastTransition() {
    return _getRasterContrastTransition(
      reference.pointer,
      _id_getRasterContrastTransition as jni$_.JMethodIDPtr,
    ).object<transitionoptions$_.TransitionOptions>(
      const transitionoptions$_.$TransitionOptions$Type(),
    );
  }

  static final _id_setRasterContrastTransition = _class.instanceMethodId(
    r'setRasterContrastTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setRasterContrastTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setRasterContrastTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setRasterContrastTransition(
    transitionoptions$_.TransitionOptions transitionOptions,
  ) {
    final _$transitionOptions = transitionOptions.reference;
    _setRasterContrastTransition(
      reference.pointer,
      _id_setRasterContrastTransition as jni$_.JMethodIDPtr,
      _$transitionOptions.pointer,
    ).check();
  }

  static final _id_getRasterResampling = _class.instanceMethodId(
    r'getRasterResampling',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getRasterResampling =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getRasterResampling()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?> getRasterResampling() {
    return _getRasterResampling(
      reference.pointer,
      _id_getRasterResampling as jni$_.JMethodIDPtr,
    ).object<propertyvalue$_.PropertyValue<jni$_.JString?>>(
      const propertyvalue$_.$PropertyValue$Type<jni$_.JString?>(
        jni$_.JStringNullableType(),
      ),
    );
  }

  static final _id_getRasterFadeDuration = _class.instanceMethodId(
    r'getRasterFadeDuration',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getRasterFadeDuration =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getRasterFadeDuration()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?> getRasterFadeDuration() {
    return _getRasterFadeDuration(
      reference.pointer,
      _id_getRasterFadeDuration as jni$_.JMethodIDPtr,
    ).object<propertyvalue$_.PropertyValue<jni$_.JFloat?>>(
      const propertyvalue$_.$PropertyValue$Type<jni$_.JFloat?>(
        jni$_.JFloatNullableType(),
      ),
    );
  }
}

final class $RasterLayer$NullableType extends jni$_.JObjType<RasterLayer?> {
  @jni$_.internal
  const $RasterLayer$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/style/layers/RasterLayer;';

  @jni$_.internal
  @core$_.override
  RasterLayer? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : RasterLayer.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const layer$_.$Layer$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<RasterLayer?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($RasterLayer$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($RasterLayer$NullableType) &&
        other is $RasterLayer$NullableType;
  }
}

final class $RasterLayer$Type extends jni$_.JObjType<RasterLayer> {
  @jni$_.internal
  const $RasterLayer$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lorg/maplibre/android/style/layers/RasterLayer;';

  @jni$_.internal
  @core$_.override
  RasterLayer fromReference(jni$_.JReference reference) =>
      RasterLayer.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const layer$_.$Layer$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<RasterLayer?> get nullableType =>
      const $RasterLayer$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($RasterLayer$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($RasterLayer$Type) &&
        other is $RasterLayer$Type;
  }
}
