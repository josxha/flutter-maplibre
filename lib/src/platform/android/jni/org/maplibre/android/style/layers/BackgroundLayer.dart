// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'Layer.dart' as layer$_;

import 'PropertyValue.dart' as propertyvalue$_;

import 'TransitionOptions.dart' as transitionoptions$_;

/// from: `org.maplibre.android.style.layers.BackgroundLayer`
class BackgroundLayer extends layer$_.Layer {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BackgroundLayer> $type;

  @jni$_.internal
  BackgroundLayer.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/style/layers/BackgroundLayer');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BackgroundLayer$NullableType();
  static const type = $BackgroundLayer$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory BackgroundLayer(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return BackgroundLayer.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$string.pointer)
        .reference);
  }

  static final _id_withProperties = _class.instanceMethodId(
    r'withProperties',
    r'([Lorg/maplibre/android/style/layers/PropertyValue;)Lorg/maplibre/android/style/layers/BackgroundLayer;',
  );

  static final _withProperties = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public org.maplibre.android.style.layers.BackgroundLayer withProperties(java.lang.Object[] propertyValues)`
  /// The returned object must be released after use, by calling the [release] method.
  BackgroundLayer withProperties(
    jni$_.JArray<propertyvalue$_.PropertyValue<jni$_.JObject?>?> propertyValues,
  ) {
    final _$propertyValues = propertyValues.reference;
    return _withProperties(reference.pointer,
            _id_withProperties as jni$_.JMethodIDPtr, _$propertyValues.pointer)
        .object<BackgroundLayer>(const $BackgroundLayer$Type());
  }

  static final _id_getBackgroundColor = _class.instanceMethodId(
    r'getBackgroundColor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getBackgroundColor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getBackgroundColor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?> getBackgroundColor() {
    return _getBackgroundColor(
            reference.pointer, _id_getBackgroundColor as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>>(
            const propertyvalue$_.$PropertyValue$Type<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getBackgroundColorAsInt = _class.instanceMethodId(
    r'getBackgroundColorAsInt',
    r'()I',
  );

  static final _getBackgroundColorAsInt = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getBackgroundColorAsInt()`
  int getBackgroundColorAsInt() {
    return _getBackgroundColorAsInt(reference.pointer,
            _id_getBackgroundColorAsInt as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getBackgroundColorTransition = _class.instanceMethodId(
    r'getBackgroundColorTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getBackgroundColorTransition =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getBackgroundColorTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions getBackgroundColorTransition() {
    return _getBackgroundColorTransition(reference.pointer,
            _id_getBackgroundColorTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions>(
            const transitionoptions$_.$TransitionOptions$Type());
  }

  static final _id_setBackgroundColorTransition = _class.instanceMethodId(
    r'setBackgroundColorTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setBackgroundColorTransition =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setBackgroundColorTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setBackgroundColorTransition(
    transitionoptions$_.TransitionOptions transitionOptions,
  ) {
    final _$transitionOptions = transitionOptions.reference;
    _setBackgroundColorTransition(
            reference.pointer,
            _id_setBackgroundColorTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getBackgroundPattern = _class.instanceMethodId(
    r'getBackgroundPattern',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getBackgroundPattern = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getBackgroundPattern()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JString?> getBackgroundPattern() {
    return _getBackgroundPattern(
            reference.pointer, _id_getBackgroundPattern as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JString?>>(
            const propertyvalue$_.$PropertyValue$Type<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getBackgroundPatternTransition = _class.instanceMethodId(
    r'getBackgroundPatternTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getBackgroundPatternTransition =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getBackgroundPatternTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions getBackgroundPatternTransition() {
    return _getBackgroundPatternTransition(reference.pointer,
            _id_getBackgroundPatternTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions>(
            const transitionoptions$_.$TransitionOptions$Type());
  }

  static final _id_setBackgroundPatternTransition = _class.instanceMethodId(
    r'setBackgroundPatternTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setBackgroundPatternTransition =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setBackgroundPatternTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setBackgroundPatternTransition(
    transitionoptions$_.TransitionOptions transitionOptions,
  ) {
    final _$transitionOptions = transitionOptions.reference;
    _setBackgroundPatternTransition(
            reference.pointer,
            _id_setBackgroundPatternTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }

  static final _id_getBackgroundOpacity = _class.instanceMethodId(
    r'getBackgroundOpacity',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getBackgroundOpacity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getBackgroundOpacity()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue$_.PropertyValue<jni$_.JFloat?> getBackgroundOpacity() {
    return _getBackgroundOpacity(
            reference.pointer, _id_getBackgroundOpacity as jni$_.JMethodIDPtr)
        .object<propertyvalue$_.PropertyValue<jni$_.JFloat?>>(
            const propertyvalue$_.$PropertyValue$Type<jni$_.JFloat?>(
                jni$_.JFloatNullableType()));
  }

  static final _id_getBackgroundOpacityTransition = _class.instanceMethodId(
    r'getBackgroundOpacityTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getBackgroundOpacityTransition =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getBackgroundOpacityTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions$_.TransitionOptions getBackgroundOpacityTransition() {
    return _getBackgroundOpacityTransition(reference.pointer,
            _id_getBackgroundOpacityTransition as jni$_.JMethodIDPtr)
        .object<transitionoptions$_.TransitionOptions>(
            const transitionoptions$_.$TransitionOptions$Type());
  }

  static final _id_setBackgroundOpacityTransition = _class.instanceMethodId(
    r'setBackgroundOpacityTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setBackgroundOpacityTransition =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setBackgroundOpacityTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setBackgroundOpacityTransition(
    transitionoptions$_.TransitionOptions transitionOptions,
  ) {
    final _$transitionOptions = transitionOptions.reference;
    _setBackgroundOpacityTransition(
            reference.pointer,
            _id_setBackgroundOpacityTransition as jni$_.JMethodIDPtr,
            _$transitionOptions.pointer)
        .check();
  }
}

final class $BackgroundLayer$NullableType
    extends jni$_.JObjType<BackgroundLayer?> {
  @jni$_.internal
  const $BackgroundLayer$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/style/layers/BackgroundLayer;';

  @jni$_.internal
  @core$_.override
  BackgroundLayer? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : BackgroundLayer.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const layer$_.$Layer$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BackgroundLayer?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($BackgroundLayer$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BackgroundLayer$NullableType) &&
        other is $BackgroundLayer$NullableType;
  }
}

final class $BackgroundLayer$Type extends jni$_.JObjType<BackgroundLayer> {
  @jni$_.internal
  const $BackgroundLayer$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/style/layers/BackgroundLayer;';

  @jni$_.internal
  @core$_.override
  BackgroundLayer fromReference(jni$_.JReference reference) =>
      BackgroundLayer.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const layer$_.$Layer$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BackgroundLayer?> get nullableType =>
      const $BackgroundLayer$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($BackgroundLayer$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BackgroundLayer$Type) &&
        other is $BackgroundLayer$Type;
  }
}
