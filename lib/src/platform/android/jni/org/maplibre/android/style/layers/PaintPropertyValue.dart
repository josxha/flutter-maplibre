// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'PropertyValue.dart' as propertyvalue$_;

/// from: `org.maplibre.android.style.layers.PaintPropertyValue`
class PaintPropertyValue<$T extends jni$_.JObject?>
    extends propertyvalue$_.PropertyValue<$T?> {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PaintPropertyValue<$T>> $type;

  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  PaintPropertyValue.fromReference(
    this.T,
    jni$_.JReference reference,
  )   : $type = type<$T>(T),
        super.fromReference(T.nullableType, reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/style/layers/PaintPropertyValue');

  /// The type which includes information such as the signature of this class.
  static $PaintPropertyValue$NullableType<$T>
      nullableType<$T extends jni$_.JObject?>(
    jni$_.JObjType<$T> T,
  ) {
    return $PaintPropertyValue$NullableType<$T>(
      T,
    );
  }

  static $PaintPropertyValue$Type<$T> type<$T extends jni$_.JObject?>(
    jni$_.JObjType<$T> T,
  ) {
    return $PaintPropertyValue$Type<$T>(
      T,
    );
  }

  static final _id_new$ = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/Object;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, T object)`
  /// The returned object must be released after use, by calling the [release] method.
  factory PaintPropertyValue(
    jni$_.JString? string,
    $T? object, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$object = object?.reference ?? jni$_.jNullReference;
    return PaintPropertyValue<$T>.fromReference(
        T,
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr,
                _$string.pointer, _$object.pointer)
            .reference);
  }
}

final class $PaintPropertyValue$NullableType<$T extends jni$_.JObject?>
    extends jni$_.JObjType<PaintPropertyValue<$T>?> {
  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  const $PaintPropertyValue$NullableType(
    this.T,
  );

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/style/layers/PaintPropertyValue;';

  @jni$_.internal
  @core$_.override
  PaintPropertyValue<$T>? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PaintPropertyValue<$T>.fromReference(
              T,
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType =>
      propertyvalue$_.$PropertyValue$NullableType<$T?>(T.nullableType);

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PaintPropertyValue<$T>?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => Object.hash($PaintPropertyValue$NullableType, T);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PaintPropertyValue$NullableType<$T>) &&
        other is $PaintPropertyValue$NullableType<$T> &&
        T == other.T;
  }
}

final class $PaintPropertyValue$Type<$T extends jni$_.JObject?>
    extends jni$_.JObjType<PaintPropertyValue<$T>> {
  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  const $PaintPropertyValue$Type(
    this.T,
  );

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/style/layers/PaintPropertyValue;';

  @jni$_.internal
  @core$_.override
  PaintPropertyValue<$T> fromReference(jni$_.JReference reference) =>
      PaintPropertyValue<$T>.fromReference(
        T,
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType =>
      propertyvalue$_.$PropertyValue$NullableType<$T?>(T.nullableType);

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PaintPropertyValue<$T>?> get nullableType =>
      $PaintPropertyValue$NullableType<$T>(T);

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => Object.hash($PaintPropertyValue$Type, T);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PaintPropertyValue$Type<$T>) &&
        other is $PaintPropertyValue$Type<$T> &&
        T == other.T;
  }
}
