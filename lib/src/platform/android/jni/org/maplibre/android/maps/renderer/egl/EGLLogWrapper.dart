// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `org.maplibre.android.maps.renderer.egl.EGLLogWrapper`
class EGLLogWrapper extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<EGLLogWrapper> $type;

  @jni$_.internal
  EGLLogWrapper.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'org/maplibre/android/maps/renderer/egl/EGLLogWrapper');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $EGLLogWrapper$NullableType();
  static const type = $EGLLogWrapper$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljavax/microedition/khronos/egl/EGL;ILjava/io/Writer;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(javax.microedition.khronos.egl.EGL eGL, int i, java.io.Writer writer)`
  /// The returned object must be released after use, by calling the [release] method.
  factory EGLLogWrapper(
    jni$_.JObject? eGL,
    int i,
    jni$_.JObject? writer,
  ) {
    final _$eGL = eGL?.reference ?? jni$_.jNullReference;
    final _$writer = writer?.reference ?? jni$_.jNullReference;
    return EGLLogWrapper.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$eGL.pointer, i, _$writer.pointer)
        .reference);
  }

  static final _id_eglChooseConfig = _class.instanceMethodId(
    r'eglChooseConfig',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;[I[Ljavax/microedition/khronos/egl/EGLConfig;I[I)Z',
  );

  static final _eglChooseConfig = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, int[] is, javax.microedition.khronos.egl.EGLConfig[] eGLConfigs, int i, int[] is1)`
  bool eglChooseConfig(
    jni$_.JObject? eGLDisplay,
    jni$_.JIntArray? is$,
    jni$_.JArray<jni$_.JObject?>? eGLConfigs,
    int i,
    jni$_.JIntArray? is1,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    final _$eGLConfigs = eGLConfigs?.reference ?? jni$_.jNullReference;
    final _$is1 = is1?.reference ?? jni$_.jNullReference;
    return _eglChooseConfig(
            reference.pointer,
            _id_eglChooseConfig as jni$_.JMethodIDPtr,
            _$eGLDisplay.pointer,
            _$is$.pointer,
            _$eGLConfigs.pointer,
            i,
            _$is1.pointer)
        .boolean;
  }

  static final _id_eglCopyBuffers = _class.instanceMethodId(
    r'eglCopyBuffers',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;Ljava/lang/Object;)Z',
  );

  static final _eglCopyBuffers = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLSurface eGLSurface, java.lang.Object object)`
  bool eglCopyBuffers(
    jni$_.JObject? eGLDisplay,
    jni$_.JObject? eGLSurface,
    jni$_.JObject? object,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    final _$eGLSurface = eGLSurface?.reference ?? jni$_.jNullReference;
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _eglCopyBuffers(
            reference.pointer,
            _id_eglCopyBuffers as jni$_.JMethodIDPtr,
            _$eGLDisplay.pointer,
            _$eGLSurface.pointer,
            _$object.pointer)
        .boolean;
  }

  static final _id_eglCreateContext = _class.instanceMethodId(
    r'eglCreateContext',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;Ljavax/microedition/khronos/egl/EGLContext;[I)Ljavax/microedition/khronos/egl/EGLContext;',
  );

  static final _eglCreateContext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLConfig eGLConfig, javax.microedition.khronos.egl.EGLContext eGLContext, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? eglCreateContext(
    jni$_.JObject? eGLDisplay,
    jni$_.JObject? eGLConfig,
    jni$_.JObject? eGLContext,
    jni$_.JIntArray? is$,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    final _$eGLConfig = eGLConfig?.reference ?? jni$_.jNullReference;
    final _$eGLContext = eGLContext?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _eglCreateContext(
            reference.pointer,
            _id_eglCreateContext as jni$_.JMethodIDPtr,
            _$eGLDisplay.pointer,
            _$eGLConfig.pointer,
            _$eGLContext.pointer,
            _$is$.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_eglCreatePbufferSurface = _class.instanceMethodId(
    r'eglCreatePbufferSurface',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;[I)Ljavax/microedition/khronos/egl/EGLSurface;',
  );

  static final _eglCreatePbufferSurface = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLConfig eGLConfig, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? eglCreatePbufferSurface(
    jni$_.JObject? eGLDisplay,
    jni$_.JObject? eGLConfig,
    jni$_.JIntArray? is$,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    final _$eGLConfig = eGLConfig?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _eglCreatePbufferSurface(
            reference.pointer,
            _id_eglCreatePbufferSurface as jni$_.JMethodIDPtr,
            _$eGLDisplay.pointer,
            _$eGLConfig.pointer,
            _$is$.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_eglCreatePixmapSurface = _class.instanceMethodId(
    r'eglCreatePixmapSurface',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;Ljava/lang/Object;[I)Ljavax/microedition/khronos/egl/EGLSurface;',
  );

  static final _eglCreatePixmapSurface = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public javax.microedition.khronos.egl.EGLSurface eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLConfig eGLConfig, java.lang.Object object, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? eglCreatePixmapSurface(
    jni$_.JObject? eGLDisplay,
    jni$_.JObject? eGLConfig,
    jni$_.JObject? object,
    jni$_.JIntArray? is$,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    final _$eGLConfig = eGLConfig?.reference ?? jni$_.jNullReference;
    final _$object = object?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _eglCreatePixmapSurface(
            reference.pointer,
            _id_eglCreatePixmapSurface as jni$_.JMethodIDPtr,
            _$eGLDisplay.pointer,
            _$eGLConfig.pointer,
            _$object.pointer,
            _$is$.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_eglCreateWindowSurface = _class.instanceMethodId(
    r'eglCreateWindowSurface',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;Ljava/lang/Object;[I)Ljavax/microedition/khronos/egl/EGLSurface;',
  );

  static final _eglCreateWindowSurface = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLConfig eGLConfig, java.lang.Object object, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? eglCreateWindowSurface(
    jni$_.JObject? eGLDisplay,
    jni$_.JObject? eGLConfig,
    jni$_.JObject? object,
    jni$_.JIntArray? is$,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    final _$eGLConfig = eGLConfig?.reference ?? jni$_.jNullReference;
    final _$object = object?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _eglCreateWindowSurface(
            reference.pointer,
            _id_eglCreateWindowSurface as jni$_.JMethodIDPtr,
            _$eGLDisplay.pointer,
            _$eGLConfig.pointer,
            _$object.pointer,
            _$is$.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_eglDestroyContext = _class.instanceMethodId(
    r'eglDestroyContext',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLContext;)Z',
  );

  static final _eglDestroyContext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLContext eGLContext)`
  bool eglDestroyContext(
    jni$_.JObject? eGLDisplay,
    jni$_.JObject? eGLContext,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    final _$eGLContext = eGLContext?.reference ?? jni$_.jNullReference;
    return _eglDestroyContext(
            reference.pointer,
            _id_eglDestroyContext as jni$_.JMethodIDPtr,
            _$eGLDisplay.pointer,
            _$eGLContext.pointer)
        .boolean;
  }

  static final _id_eglDestroySurface = _class.instanceMethodId(
    r'eglDestroySurface',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;)Z',
  );

  static final _eglDestroySurface = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLSurface eGLSurface)`
  bool eglDestroySurface(
    jni$_.JObject? eGLDisplay,
    jni$_.JObject? eGLSurface,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    final _$eGLSurface = eGLSurface?.reference ?? jni$_.jNullReference;
    return _eglDestroySurface(
            reference.pointer,
            _id_eglDestroySurface as jni$_.JMethodIDPtr,
            _$eGLDisplay.pointer,
            _$eGLSurface.pointer)
        .boolean;
  }

  static final _id_eglGetConfigAttrib = _class.instanceMethodId(
    r'eglGetConfigAttrib',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;I[I)Z',
  );

  static final _eglGetConfigAttrib = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLConfig eGLConfig, int i, int[] is)`
  bool eglGetConfigAttrib(
    jni$_.JObject? eGLDisplay,
    jni$_.JObject? eGLConfig,
    int i,
    jni$_.JIntArray? is$,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    final _$eGLConfig = eGLConfig?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _eglGetConfigAttrib(
            reference.pointer,
            _id_eglGetConfigAttrib as jni$_.JMethodIDPtr,
            _$eGLDisplay.pointer,
            _$eGLConfig.pointer,
            i,
            _$is$.pointer)
        .boolean;
  }

  static final _id_eglGetConfigs = _class.instanceMethodId(
    r'eglGetConfigs',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;[Ljavax/microedition/khronos/egl/EGLConfig;I[I)Z',
  );

  static final _eglGetConfigs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLConfig[] eGLConfigs, int i, int[] is)`
  bool eglGetConfigs(
    jni$_.JObject? eGLDisplay,
    jni$_.JArray<jni$_.JObject?>? eGLConfigs,
    int i,
    jni$_.JIntArray? is$,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    final _$eGLConfigs = eGLConfigs?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _eglGetConfigs(
            reference.pointer,
            _id_eglGetConfigs as jni$_.JMethodIDPtr,
            _$eGLDisplay.pointer,
            _$eGLConfigs.pointer,
            i,
            _$is$.pointer)
        .boolean;
  }

  static final _id_eglGetCurrentContext = _class.instanceMethodId(
    r'eglGetCurrentContext',
    r'()Ljavax/microedition/khronos/egl/EGLContext;',
  );

  static final _eglGetCurrentContext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public javax.microedition.khronos.egl.EGLContext eglGetCurrentContext()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? eglGetCurrentContext() {
    return _eglGetCurrentContext(
            reference.pointer, _id_eglGetCurrentContext as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_eglGetCurrentDisplay = _class.instanceMethodId(
    r'eglGetCurrentDisplay',
    r'()Ljavax/microedition/khronos/egl/EGLDisplay;',
  );

  static final _eglGetCurrentDisplay = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public javax.microedition.khronos.egl.EGLDisplay eglGetCurrentDisplay()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? eglGetCurrentDisplay() {
    return _eglGetCurrentDisplay(
            reference.pointer, _id_eglGetCurrentDisplay as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_eglGetCurrentSurface = _class.instanceMethodId(
    r'eglGetCurrentSurface',
    r'(I)Ljavax/microedition/khronos/egl/EGLSurface;',
  );

  static final _eglGetCurrentSurface = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public javax.microedition.khronos.egl.EGLSurface eglGetCurrentSurface(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? eglGetCurrentSurface(
    int i,
  ) {
    return _eglGetCurrentSurface(reference.pointer,
            _id_eglGetCurrentSurface as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_eglGetDisplay = _class.instanceMethodId(
    r'eglGetDisplay',
    r'(Ljava/lang/Object;)Ljavax/microedition/khronos/egl/EGLDisplay;',
  );

  static final _eglGetDisplay = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? eglGetDisplay(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _eglGetDisplay(reference.pointer,
            _id_eglGetDisplay as jni$_.JMethodIDPtr, _$object.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_eglGetError = _class.instanceMethodId(
    r'eglGetError',
    r'()I',
  );

  static final _eglGetError = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int eglGetError()`
  int eglGetError() {
    return _eglGetError(
            reference.pointer, _id_eglGetError as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_eglInitialize = _class.instanceMethodId(
    r'eglInitialize',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;[I)Z',
  );

  static final _eglInitialize = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, int[] is)`
  bool eglInitialize(
    jni$_.JObject? eGLDisplay,
    jni$_.JIntArray? is$,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _eglInitialize(
            reference.pointer,
            _id_eglInitialize as jni$_.JMethodIDPtr,
            _$eGLDisplay.pointer,
            _$is$.pointer)
        .boolean;
  }

  static final _id_eglMakeCurrent = _class.instanceMethodId(
    r'eglMakeCurrent',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;Ljavax/microedition/khronos/egl/EGLSurface;Ljavax/microedition/khronos/egl/EGLContext;)Z',
  );

  static final _eglMakeCurrent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLSurface eGLSurface, javax.microedition.khronos.egl.EGLSurface eGLSurface1, javax.microedition.khronos.egl.EGLContext eGLContext)`
  bool eglMakeCurrent(
    jni$_.JObject? eGLDisplay,
    jni$_.JObject? eGLSurface,
    jni$_.JObject? eGLSurface1,
    jni$_.JObject? eGLContext,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    final _$eGLSurface = eGLSurface?.reference ?? jni$_.jNullReference;
    final _$eGLSurface1 = eGLSurface1?.reference ?? jni$_.jNullReference;
    final _$eGLContext = eGLContext?.reference ?? jni$_.jNullReference;
    return _eglMakeCurrent(
            reference.pointer,
            _id_eglMakeCurrent as jni$_.JMethodIDPtr,
            _$eGLDisplay.pointer,
            _$eGLSurface.pointer,
            _$eGLSurface1.pointer,
            _$eGLContext.pointer)
        .boolean;
  }

  static final _id_eglQueryContext = _class.instanceMethodId(
    r'eglQueryContext',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLContext;I[I)Z',
  );

  static final _eglQueryContext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean eglQueryContext(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLContext eGLContext, int i, int[] is)`
  bool eglQueryContext(
    jni$_.JObject? eGLDisplay,
    jni$_.JObject? eGLContext,
    int i,
    jni$_.JIntArray? is$,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    final _$eGLContext = eGLContext?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _eglQueryContext(
            reference.pointer,
            _id_eglQueryContext as jni$_.JMethodIDPtr,
            _$eGLDisplay.pointer,
            _$eGLContext.pointer,
            i,
            _$is$.pointer)
        .boolean;
  }

  static final _id_eglQueryString = _class.instanceMethodId(
    r'eglQueryString',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;I)Ljava/lang/String;',
  );

  static final _eglQueryString = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public java.lang.String eglQueryString(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? eglQueryString(
    jni$_.JObject? eGLDisplay,
    int i,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    return _eglQueryString(reference.pointer,
            _id_eglQueryString as jni$_.JMethodIDPtr, _$eGLDisplay.pointer, i)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_eglQuerySurface = _class.instanceMethodId(
    r'eglQuerySurface',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;I[I)Z',
  );

  static final _eglQuerySurface = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLSurface eGLSurface, int i, int[] is)`
  bool eglQuerySurface(
    jni$_.JObject? eGLDisplay,
    jni$_.JObject? eGLSurface,
    int i,
    jni$_.JIntArray? is$,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    final _$eGLSurface = eGLSurface?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _eglQuerySurface(
            reference.pointer,
            _id_eglQuerySurface as jni$_.JMethodIDPtr,
            _$eGLDisplay.pointer,
            _$eGLSurface.pointer,
            i,
            _$is$.pointer)
        .boolean;
  }

  static final _id_eglSwapBuffers = _class.instanceMethodId(
    r'eglSwapBuffers',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;)Z',
  );

  static final _eglSwapBuffers = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLSurface eGLSurface)`
  bool eglSwapBuffers(
    jni$_.JObject? eGLDisplay,
    jni$_.JObject? eGLSurface,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    final _$eGLSurface = eGLSurface?.reference ?? jni$_.jNullReference;
    return _eglSwapBuffers(
            reference.pointer,
            _id_eglSwapBuffers as jni$_.JMethodIDPtr,
            _$eGLDisplay.pointer,
            _$eGLSurface.pointer)
        .boolean;
  }

  static final _id_eglTerminate = _class.instanceMethodId(
    r'eglTerminate',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;)Z',
  );

  static final _eglTerminate = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean eglTerminate(javax.microedition.khronos.egl.EGLDisplay eGLDisplay)`
  bool eglTerminate(
    jni$_.JObject? eGLDisplay,
  ) {
    final _$eGLDisplay = eGLDisplay?.reference ?? jni$_.jNullReference;
    return _eglTerminate(reference.pointer,
            _id_eglTerminate as jni$_.JMethodIDPtr, _$eGLDisplay.pointer)
        .boolean;
  }

  static final _id_eglWaitGL = _class.instanceMethodId(
    r'eglWaitGL',
    r'()Z',
  );

  static final _eglWaitGL = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean eglWaitGL()`
  bool eglWaitGL() {
    return _eglWaitGL(reference.pointer, _id_eglWaitGL as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_eglWaitNative = _class.instanceMethodId(
    r'eglWaitNative',
    r'(ILjava/lang/Object;)Z',
  );

  static final _eglWaitNative = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean eglWaitNative(int i, java.lang.Object object)`
  bool eglWaitNative(
    int i,
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _eglWaitNative(reference.pointer,
            _id_eglWaitNative as jni$_.JMethodIDPtr, i, _$object.pointer)
        .boolean;
  }

  static final _id_getErrorString = _class.staticMethodId(
    r'getErrorString',
    r'(I)Ljava/lang/String;',
  );

  static final _getErrorString = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public java.lang.String getErrorString(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? getErrorString(
    int i,
  ) {
    return _getErrorString(_class.reference.pointer,
            _id_getErrorString as jni$_.JMethodIDPtr, i)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }
}

final class $EGLLogWrapper$NullableType extends jni$_.JObjType<EGLLogWrapper?> {
  @jni$_.internal
  const $EGLLogWrapper$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/maps/renderer/egl/EGLLogWrapper;';

  @jni$_.internal
  @core$_.override
  EGLLogWrapper? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : EGLLogWrapper.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<EGLLogWrapper?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($EGLLogWrapper$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($EGLLogWrapper$NullableType) &&
        other is $EGLLogWrapper$NullableType;
  }
}

final class $EGLLogWrapper$Type extends jni$_.JObjType<EGLLogWrapper> {
  @jni$_.internal
  const $EGLLogWrapper$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/maps/renderer/egl/EGLLogWrapper;';

  @jni$_.internal
  @core$_.override
  EGLLogWrapper fromReference(jni$_.JReference reference) =>
      EGLLogWrapper.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<EGLLogWrapper?> get nullableType =>
      const $EGLLogWrapper$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($EGLLogWrapper$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($EGLLogWrapper$Type) &&
        other is $EGLLogWrapper$Type;
  }
}
