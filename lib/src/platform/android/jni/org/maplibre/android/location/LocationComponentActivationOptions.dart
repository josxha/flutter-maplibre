// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../maps/Style.dart' as style$_;

import 'LocationComponentOptions.dart' as locationcomponentoptions$_;

import 'engine/LocationEngine.dart' as locationengine$_;

import 'engine/LocationEngineRequest.dart' as locationenginerequest$_;

/// from: `org.maplibre.android.location.LocationComponentActivationOptions$Builder`
class LocationComponentActivationOptions$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<LocationComponentActivationOptions$Builder> $type;

  @jni$_.internal
  LocationComponentActivationOptions$Builder.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/location/LocationComponentActivationOptions$Builder',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $LocationComponentActivationOptions$Builder$NullableType();
  static const type = $LocationComponentActivationOptions$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;Lorg/maplibre/android/maps/Style;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.content.Context context, org.maplibre.android.maps.Style style)`
  /// The returned object must be released after use, by calling the [release] method.
  factory LocationComponentActivationOptions$Builder(
    jni$_.JObject context,
    style$_.Style style,
  ) {
    final _$context = context.reference;
    final _$style = style.reference;
    return LocationComponentActivationOptions$Builder.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$context.pointer,
        _$style.pointer,
      ).reference,
    );
  }

  static final _id_locationEngine = _class.instanceMethodId(
    r'locationEngine',
    r'(Lorg/maplibre/android/location/engine/LocationEngine;)Lorg/maplibre/android/location/LocationComponentActivationOptions$Builder;',
  );

  static final _locationEngine =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public org.maplibre.android.location.LocationComponentActivationOptions$Builder locationEngine(org.maplibre.android.location.engine.LocationEngine locationEngine)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentActivationOptions$Builder locationEngine(
    locationengine$_.LocationEngine? locationEngine,
  ) {
    final _$locationEngine = locationEngine?.reference ?? jni$_.jNullReference;
    return _locationEngine(
      reference.pointer,
      _id_locationEngine as jni$_.JMethodIDPtr,
      _$locationEngine.pointer,
    ).object<LocationComponentActivationOptions$Builder>(
      const $LocationComponentActivationOptions$Builder$Type(),
    );
  }

  static final _id_locationEngineRequest = _class.instanceMethodId(
    r'locationEngineRequest',
    r'(Lorg/maplibre/android/location/engine/LocationEngineRequest;)Lorg/maplibre/android/location/LocationComponentActivationOptions$Builder;',
  );

  static final _locationEngineRequest =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public org.maplibre.android.location.LocationComponentActivationOptions$Builder locationEngineRequest(org.maplibre.android.location.engine.LocationEngineRequest locationEngineRequest)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentActivationOptions$Builder? locationEngineRequest(
    locationenginerequest$_.LocationEngineRequest? locationEngineRequest,
  ) {
    final _$locationEngineRequest =
        locationEngineRequest?.reference ?? jni$_.jNullReference;
    return _locationEngineRequest(
      reference.pointer,
      _id_locationEngineRequest as jni$_.JMethodIDPtr,
      _$locationEngineRequest.pointer,
    ).object<LocationComponentActivationOptions$Builder?>(
      const $LocationComponentActivationOptions$Builder$NullableType(),
    );
  }

  static final _id_locationComponentOptions = _class.instanceMethodId(
    r'locationComponentOptions',
    r'(Lorg/maplibre/android/location/LocationComponentOptions;)Lorg/maplibre/android/location/LocationComponentActivationOptions$Builder;',
  );

  static final _locationComponentOptions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public org.maplibre.android.location.LocationComponentActivationOptions$Builder locationComponentOptions(org.maplibre.android.location.LocationComponentOptions locationComponentOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentActivationOptions$Builder? locationComponentOptions(
    locationcomponentoptions$_.LocationComponentOptions?
    locationComponentOptions,
  ) {
    final _$locationComponentOptions =
        locationComponentOptions?.reference ?? jni$_.jNullReference;
    return _locationComponentOptions(
      reference.pointer,
      _id_locationComponentOptions as jni$_.JMethodIDPtr,
      _$locationComponentOptions.pointer,
    ).object<LocationComponentActivationOptions$Builder?>(
      const $LocationComponentActivationOptions$Builder$NullableType(),
    );
  }

  static final _id_styleRes = _class.instanceMethodId(
    r'styleRes',
    r'(I)Lorg/maplibre/android/location/LocationComponentActivationOptions$Builder;',
  );

  static final _styleRes =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public org.maplibre.android.location.LocationComponentActivationOptions$Builder styleRes(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentActivationOptions$Builder? styleRes(int i) {
    return _styleRes(
      reference.pointer,
      _id_styleRes as jni$_.JMethodIDPtr,
      i,
    ).object<LocationComponentActivationOptions$Builder?>(
      const $LocationComponentActivationOptions$Builder$NullableType(),
    );
  }

  static final _id_useDefaultLocationEngine = _class.instanceMethodId(
    r'useDefaultLocationEngine',
    r'(Z)Lorg/maplibre/android/location/LocationComponentActivationOptions$Builder;',
  );

  static final _useDefaultLocationEngine =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public org.maplibre.android.location.LocationComponentActivationOptions$Builder useDefaultLocationEngine(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentActivationOptions$Builder? useDefaultLocationEngine(bool z) {
    return _useDefaultLocationEngine(
      reference.pointer,
      _id_useDefaultLocationEngine as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<LocationComponentActivationOptions$Builder?>(
      const $LocationComponentActivationOptions$Builder$NullableType(),
    );
  }

  static final _id_useSpecializedLocationLayer = _class.instanceMethodId(
    r'useSpecializedLocationLayer',
    r'(Z)Lorg/maplibre/android/location/LocationComponentActivationOptions$Builder;',
  );

  static final _useSpecializedLocationLayer =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public org.maplibre.android.location.LocationComponentActivationOptions$Builder useSpecializedLocationLayer(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentActivationOptions$Builder? useSpecializedLocationLayer(
    bool z,
  ) {
    return _useSpecializedLocationLayer(
      reference.pointer,
      _id_useSpecializedLocationLayer as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<LocationComponentActivationOptions$Builder?>(
      const $LocationComponentActivationOptions$Builder$NullableType(),
    );
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Lorg/maplibre/android/location/LocationComponentActivationOptions;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.location.LocationComponentActivationOptions build()`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentActivationOptions? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<LocationComponentActivationOptions?>(
      const $LocationComponentActivationOptions$NullableType(),
    );
  }
}

final class $LocationComponentActivationOptions$Builder$NullableType
    extends jni$_.JObjType<LocationComponentActivationOptions$Builder?> {
  @jni$_.internal
  const $LocationComponentActivationOptions$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/location/LocationComponentActivationOptions$Builder;';

  @jni$_.internal
  @core$_.override
  LocationComponentActivationOptions$Builder? fromReference(
    jni$_.JReference reference,
  ) =>
      reference.isNull
          ? null
          : LocationComponentActivationOptions$Builder.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LocationComponentActivationOptions$Builder?>
  get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($LocationComponentActivationOptions$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($LocationComponentActivationOptions$Builder$NullableType) &&
        other is $LocationComponentActivationOptions$Builder$NullableType;
  }
}

final class $LocationComponentActivationOptions$Builder$Type
    extends jni$_.JObjType<LocationComponentActivationOptions$Builder> {
  @jni$_.internal
  const $LocationComponentActivationOptions$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/location/LocationComponentActivationOptions$Builder;';

  @jni$_.internal
  @core$_.override
  LocationComponentActivationOptions$Builder fromReference(
    jni$_.JReference reference,
  ) => LocationComponentActivationOptions$Builder.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LocationComponentActivationOptions$Builder?>
  get nullableType =>
      const $LocationComponentActivationOptions$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($LocationComponentActivationOptions$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($LocationComponentActivationOptions$Builder$Type) &&
        other is $LocationComponentActivationOptions$Builder$Type;
  }
}

/// from: `org.maplibre.android.location.LocationComponentActivationOptions`
class LocationComponentActivationOptions extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<LocationComponentActivationOptions> $type;

  @jni$_.internal
  LocationComponentActivationOptions.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'org/maplibre/android/location/LocationComponentActivationOptions',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $LocationComponentActivationOptions$NullableType();
  static const type = $LocationComponentActivationOptions$Type();
  static final _id_builder = _class.staticMethodId(
    r'builder',
    r'(Landroid/content/Context;Lorg/maplibre/android/maps/Style;)Lorg/maplibre/android/location/LocationComponentActivationOptions$Builder;',
  );

  static final _builder =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public org.maplibre.android.location.LocationComponentActivationOptions$Builder builder(android.content.Context context, org.maplibre.android.maps.Style style)`
  /// The returned object must be released after use, by calling the [release] method.
  static LocationComponentActivationOptions$Builder builder(
    jni$_.JObject context,
    style$_.Style style,
  ) {
    final _$context = context.reference;
    final _$style = style.reference;
    return _builder(
      _class.reference.pointer,
      _id_builder as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$style.pointer,
    ).object<LocationComponentActivationOptions$Builder>(
      const $LocationComponentActivationOptions$Builder$Type(),
    );
  }

  static final _id_context = _class.instanceMethodId(
    r'context',
    r'()Landroid/content/Context;',
  );

  static final _context =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.Context context()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject context() {
    return _context(
      reference.pointer,
      _id_context as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_style = _class.instanceMethodId(
    r'style',
    r'()Lorg/maplibre/android/maps/Style;',
  );

  static final _style =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.maps.Style style()`
  /// The returned object must be released after use, by calling the [release] method.
  style$_.Style style() {
    return _style(
      reference.pointer,
      _id_style as jni$_.JMethodIDPtr,
    ).object<style$_.Style>(const style$_.$Style$Type());
  }

  static final _id_locationEngine = _class.instanceMethodId(
    r'locationEngine',
    r'()Lorg/maplibre/android/location/engine/LocationEngine;',
  );

  static final _locationEngine =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.location.engine.LocationEngine locationEngine()`
  /// The returned object must be released after use, by calling the [release] method.
  locationengine$_.LocationEngine? locationEngine() {
    return _locationEngine(
      reference.pointer,
      _id_locationEngine as jni$_.JMethodIDPtr,
    ).object<locationengine$_.LocationEngine?>(
      const locationengine$_.$LocationEngine$NullableType(),
    );
  }

  static final _id_locationEngineRequest = _class.instanceMethodId(
    r'locationEngineRequest',
    r'()Lorg/maplibre/android/location/engine/LocationEngineRequest;',
  );

  static final _locationEngineRequest =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.location.engine.LocationEngineRequest locationEngineRequest()`
  /// The returned object must be released after use, by calling the [release] method.
  locationenginerequest$_.LocationEngineRequest? locationEngineRequest() {
    return _locationEngineRequest(
      reference.pointer,
      _id_locationEngineRequest as jni$_.JMethodIDPtr,
    ).object<locationenginerequest$_.LocationEngineRequest?>(
      const locationenginerequest$_.$LocationEngineRequest$NullableType(),
    );
  }

  static final _id_locationComponentOptions = _class.instanceMethodId(
    r'locationComponentOptions',
    r'()Lorg/maplibre/android/location/LocationComponentOptions;',
  );

  static final _locationComponentOptions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public org.maplibre.android.location.LocationComponentOptions locationComponentOptions()`
  /// The returned object must be released after use, by calling the [release] method.
  locationcomponentoptions$_.LocationComponentOptions?
  locationComponentOptions() {
    return _locationComponentOptions(
      reference.pointer,
      _id_locationComponentOptions as jni$_.JMethodIDPtr,
    ).object<locationcomponentoptions$_.LocationComponentOptions?>(
      const locationcomponentoptions$_.$LocationComponentOptions$NullableType(),
    );
  }

  static final _id_styleRes = _class.instanceMethodId(r'styleRes', r'()I');

  static final _styleRes =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int styleRes()`
  int styleRes() {
    return _styleRes(
      reference.pointer,
      _id_styleRes as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_useDefaultLocationEngine = _class.instanceMethodId(
    r'useDefaultLocationEngine',
    r'()Z',
  );

  static final _useDefaultLocationEngine =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean useDefaultLocationEngine()`
  bool useDefaultLocationEngine() {
    return _useDefaultLocationEngine(
      reference.pointer,
      _id_useDefaultLocationEngine as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_useSpecializedLocationLayer = _class.instanceMethodId(
    r'useSpecializedLocationLayer',
    r'()Z',
  );

  static final _useSpecializedLocationLayer =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean useSpecializedLocationLayer()`
  bool useSpecializedLocationLayer() {
    return _useSpecializedLocationLayer(
      reference.pointer,
      _id_useSpecializedLocationLayer as jni$_.JMethodIDPtr,
    ).boolean;
  }
}

final class $LocationComponentActivationOptions$NullableType
    extends jni$_.JObjType<LocationComponentActivationOptions?> {
  @jni$_.internal
  const $LocationComponentActivationOptions$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/location/LocationComponentActivationOptions;';

  @jni$_.internal
  @core$_.override
  LocationComponentActivationOptions? fromReference(
    jni$_.JReference reference,
  ) =>
      reference.isNull
          ? null
          : LocationComponentActivationOptions.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LocationComponentActivationOptions?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($LocationComponentActivationOptions$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($LocationComponentActivationOptions$NullableType) &&
        other is $LocationComponentActivationOptions$NullableType;
  }
}

final class $LocationComponentActivationOptions$Type
    extends jni$_.JObjType<LocationComponentActivationOptions> {
  @jni$_.internal
  const $LocationComponentActivationOptions$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lorg/maplibre/android/location/LocationComponentActivationOptions;';

  @jni$_.internal
  @core$_.override
  LocationComponentActivationOptions fromReference(
    jni$_.JReference reference,
  ) => LocationComponentActivationOptions.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<LocationComponentActivationOptions?> get nullableType =>
      const $LocationComponentActivationOptions$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($LocationComponentActivationOptions$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LocationComponentActivationOptions$Type) &&
        other is $LocationComponentActivationOptions$Type;
  }
}
