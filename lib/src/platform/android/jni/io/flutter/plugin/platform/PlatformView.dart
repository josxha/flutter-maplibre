// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: type=lint

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `io.flutter.plugin.platform.PlatformView`
class PlatformView extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PlatformView> $type;

  @jni$_.internal
  PlatformView.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'io/flutter/plugin/platform/PlatformView',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PlatformView$NullableType();
  static const type = $PlatformView$Type();
  static final _id_getView = _class.instanceMethodId(
    r'getView',
    r'()Landroid/view/View;',
  );

  static final _getView =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.view.View getView()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getView() {
    return _getView(
      reference.pointer,
      _id_getView as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onFlutterViewAttached = _class.instanceMethodId(
    r'onFlutterViewAttached',
    r'(Landroid/view/View;)V',
  );

  static final _onFlutterViewAttached =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onFlutterViewAttached(android.view.View view)`
  void onFlutterViewAttached(
    jni$_.JObject view,
  ) {
    final _$view = view.reference;
    _onFlutterViewAttached(
      reference.pointer,
      _id_onFlutterViewAttached as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_onFlutterViewDetached = _class.instanceMethodId(
    r'onFlutterViewDetached',
    r'()V',
  );

  static final _onFlutterViewDetached =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onFlutterViewDetached()`
  void onFlutterViewDetached() {
    _onFlutterViewDetached(
      reference.pointer,
      _id_onFlutterViewDetached as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_dispose = _class.instanceMethodId(
    r'dispose',
    r'()V',
  );

  static final _dispose =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract void dispose()`
  void dispose() {
    _dispose(reference.pointer, _id_dispose as jni$_.JMethodIDPtr).check();
  }

  static final _id_onInputConnectionLocked = _class.instanceMethodId(
    r'onInputConnectionLocked',
    r'()V',
  );

  static final _onInputConnectionLocked =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onInputConnectionLocked()`
  void onInputConnectionLocked() {
    _onInputConnectionLocked(
      reference.pointer,
      _id_onInputConnectionLocked as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_onInputConnectionUnlocked = _class.instanceMethodId(
    r'onInputConnectionUnlocked',
    r'()V',
  );

  static final _onInputConnectionUnlocked =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onInputConnectionUnlocked()`
  void onInputConnectionUnlocked() {
    _onInputConnectionUnlocked(
      reference.pointer,
      _id_onInputConnectionUnlocked as jni$_.JMethodIDPtr,
    ).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PlatformView> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'getView()Landroid/view/View;') {
        final $r = _$impls[$p]!.getView();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'onFlutterViewAttached(Landroid/view/View;)V') {
        _$impls[$p]!.onFlutterViewAttached(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onFlutterViewDetached()V') {
        _$impls[$p]!.onFlutterViewDetached();
        return jni$_.nullptr;
      }
      if ($d == r'dispose()V') {
        _$impls[$p]!.dispose();
        return jni$_.nullptr;
      }
      if ($d == r'onInputConnectionLocked()V') {
        _$impls[$p]!.onInputConnectionLocked();
        return jni$_.nullptr;
      }
      if ($d == r'onInputConnectionUnlocked()V') {
        _$impls[$p]!.onInputConnectionUnlocked();
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PlatformView $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.platform.PlatformView',
      $p,
      _$invokePointer,
      [
        if ($impl.onFlutterViewAttached$async)
          r'onFlutterViewAttached(Landroid/view/View;)V',
        if ($impl.onFlutterViewDetached$async) r'onFlutterViewDetached()V',
        if ($impl.dispose$async) r'dispose()V',
        if ($impl.onInputConnectionLocked$async) r'onInputConnectionLocked()V',
        if ($impl.onInputConnectionUnlocked$async)
          r'onInputConnectionUnlocked()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PlatformView.implement(
    $PlatformView $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PlatformView.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PlatformView {
  factory $PlatformView({
    required jni$_.JObject? Function() getView,
    required void Function(jni$_.JObject view) onFlutterViewAttached,
    bool onFlutterViewAttached$async,
    required void Function() onFlutterViewDetached,
    bool onFlutterViewDetached$async,
    required void Function() dispose,
    bool dispose$async,
    required void Function() onInputConnectionLocked,
    bool onInputConnectionLocked$async,
    required void Function() onInputConnectionUnlocked,
    bool onInputConnectionUnlocked$async,
  }) = _$PlatformView;

  jni$_.JObject? getView();
  void onFlutterViewAttached(jni$_.JObject view);
  bool get onFlutterViewAttached$async => false;
  void onFlutterViewDetached();
  bool get onFlutterViewDetached$async => false;
  void dispose();
  bool get dispose$async => false;
  void onInputConnectionLocked();
  bool get onInputConnectionLocked$async => false;
  void onInputConnectionUnlocked();
  bool get onInputConnectionUnlocked$async => false;
}

final class _$PlatformView with $PlatformView {
  _$PlatformView({
    required jni$_.JObject? Function() getView,
    required void Function(jni$_.JObject view) onFlutterViewAttached,
    this.onFlutterViewAttached$async = false,
    required void Function() onFlutterViewDetached,
    this.onFlutterViewDetached$async = false,
    required void Function() dispose,
    this.dispose$async = false,
    required void Function() onInputConnectionLocked,
    this.onInputConnectionLocked$async = false,
    required void Function() onInputConnectionUnlocked,
    this.onInputConnectionUnlocked$async = false,
  }) : _getView = getView,
       _onFlutterViewAttached = onFlutterViewAttached,
       _onFlutterViewDetached = onFlutterViewDetached,
       _dispose = dispose,
       _onInputConnectionLocked = onInputConnectionLocked,
       _onInputConnectionUnlocked = onInputConnectionUnlocked;

  final jni$_.JObject? Function() _getView;
  final void Function(jni$_.JObject view) _onFlutterViewAttached;
  final bool onFlutterViewAttached$async;
  final void Function() _onFlutterViewDetached;
  final bool onFlutterViewDetached$async;
  final void Function() _dispose;
  final bool dispose$async;
  final void Function() _onInputConnectionLocked;
  final bool onInputConnectionLocked$async;
  final void Function() _onInputConnectionUnlocked;
  final bool onInputConnectionUnlocked$async;

  jni$_.JObject? getView() {
    return _getView();
  }

  void onFlutterViewAttached(jni$_.JObject view) {
    return _onFlutterViewAttached(view);
  }

  void onFlutterViewDetached() {
    return _onFlutterViewDetached();
  }

  void dispose() {
    return _dispose();
  }

  void onInputConnectionLocked() {
    return _onInputConnectionLocked();
  }

  void onInputConnectionUnlocked() {
    return _onInputConnectionUnlocked();
  }
}

final class $PlatformView$NullableType extends jni$_.JObjType<PlatformView?> {
  @jni$_.internal
  const $PlatformView$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lio/flutter/plugin/platform/PlatformView;';

  @jni$_.internal
  @core$_.override
  PlatformView? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : PlatformView.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PlatformView?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PlatformView$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PlatformView$NullableType) &&
        other is $PlatformView$NullableType;
  }
}

final class $PlatformView$Type extends jni$_.JObjType<PlatformView> {
  @jni$_.internal
  const $PlatformView$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lio/flutter/plugin/platform/PlatformView;';

  @jni$_.internal
  @core$_.override
  PlatformView fromReference(jni$_.JReference reference) =>
      PlatformView.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PlatformView?> get nullableType =>
      const $PlatformView$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PlatformView$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PlatformView$Type) &&
        other is $PlatformView$Type;
  }
}
