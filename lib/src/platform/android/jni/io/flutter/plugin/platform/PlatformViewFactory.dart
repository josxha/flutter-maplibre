// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: type=lint

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../../../../android/content/Context.dart' as context$_;

import 'PlatformView.dart' as platformview$_;

/// from: `io.flutter.plugin.platform.PlatformViewFactory`
class PlatformViewFactory extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PlatformViewFactory> $type;

  @jni$_.internal
  PlatformViewFactory.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'io/flutter/plugin/platform/PlatformViewFactory',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PlatformViewFactory$NullableType();
  static const type = $PlatformViewFactory$Type();
  static final _id_create = _class.instanceMethodId(
    r'create',
    r'(Landroid/content/Context;ILjava/lang/Object;)Lio/flutter/plugin/platform/PlatformView;',
  );

  static final _create =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract io.flutter.plugin.platform.PlatformView create(android.content.Context context, int i, java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  platformview$_.PlatformView create(
    context$_.Context? context,
    int i,
    jni$_.JObject? object,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _create(
      reference.pointer,
      _id_create as jni$_.JMethodIDPtr,
      _$context.pointer,
      i,
      _$object.pointer,
    ).object<platformview$_.PlatformView>(
      const platformview$_.$PlatformView$Type(),
    );
  }

  static final _id_getCreateArgsCodec = _class.instanceMethodId(
    r'getCreateArgsCodec',
    r'()Lio/flutter/plugin/common/MessageCodec;',
  );

  static final _getCreateArgsCodec =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final io.flutter.plugin.common.MessageCodec<java.lang.Object> getCreateArgsCodec()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCreateArgsCodec() {
    return _getCreateArgsCodec(
      reference.pointer,
      _id_getCreateArgsCodec as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $PlatformViewFactory$NullableType
    extends jni$_.JObjType<PlatformViewFactory?> {
  @jni$_.internal
  const $PlatformViewFactory$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lio/flutter/plugin/platform/PlatformViewFactory;';

  @jni$_.internal
  @core$_.override
  PlatformViewFactory? fromReference(jni$_.JReference reference) =>
      reference.isNull
      ? null
      : PlatformViewFactory.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PlatformViewFactory?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PlatformViewFactory$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PlatformViewFactory$NullableType) &&
        other is $PlatformViewFactory$NullableType;
  }
}

final class $PlatformViewFactory$Type
    extends jni$_.JObjType<PlatformViewFactory> {
  @jni$_.internal
  const $PlatformViewFactory$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lio/flutter/plugin/platform/PlatformViewFactory;';

  @jni$_.internal
  @core$_.override
  PlatformViewFactory fromReference(jni$_.JReference reference) =>
      PlatformViewFactory.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PlatformViewFactory?> get nullableType =>
      const $PlatformViewFactory$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PlatformViewFactory$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PlatformViewFactory$Type) &&
        other is $PlatformViewFactory$Type;
  }
}
