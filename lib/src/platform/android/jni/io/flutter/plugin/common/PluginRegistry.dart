// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `io.flutter.plugin.common.PluginRegistry$ActivityResultListener`
class PluginRegistry$ActivityResultListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PluginRegistry$ActivityResultListener> $type;

  @jni$_.internal
  PluginRegistry$ActivityResultListener.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'io/flutter/plugin/common/PluginRegistry$ActivityResultListener');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $PluginRegistry$ActivityResultListener$NullableType();
  static const type = $PluginRegistry$ActivityResultListener$Type();
  static final _id_onActivityResult = _class.instanceMethodId(
    r'onActivityResult',
    r'(IILandroid/content/Intent;)Z',
  );

  static final _onActivityResult = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean onActivityResult(int i, int i1, android.content.Intent intent)`
  bool onActivityResult(
    int i,
    int i1,
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _onActivityResult(reference.pointer,
            _id_onActivityResult as jni$_.JMethodIDPtr, i, i1, _$intent.pointer)
        .boolean;
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PluginRegistry$ActivityResultListener> _$impls =
      {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onActivityResult(IILandroid/content/Intent;)Z') {
        final $r = _$impls[$p]!.onActivityResult(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![1]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![2]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.JBoolean($r).reference.toPointer();
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PluginRegistry$ActivityResultListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$ActivityResultListener',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry$ActivityResultListener.implement(
    $PluginRegistry$ActivityResultListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry$ActivityResultListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry$ActivityResultListener {
  factory $PluginRegistry$ActivityResultListener({
    required bool Function(int i, int i1, jni$_.JObject? intent)
        onActivityResult,
  }) = _$PluginRegistry$ActivityResultListener;

  bool onActivityResult(int i, int i1, jni$_.JObject? intent);
}

final class _$PluginRegistry$ActivityResultListener
    with $PluginRegistry$ActivityResultListener {
  _$PluginRegistry$ActivityResultListener({
    required bool Function(int i, int i1, jni$_.JObject? intent)
        onActivityResult,
  }) : _onActivityResult = onActivityResult;

  final bool Function(int i, int i1, jni$_.JObject? intent) _onActivityResult;

  bool onActivityResult(int i, int i1, jni$_.JObject? intent) {
    return _onActivityResult(i, i1, intent);
  }
}

final class $PluginRegistry$ActivityResultListener$NullableType
    extends jni$_.JObjType<PluginRegistry$ActivityResultListener?> {
  @jni$_.internal
  const $PluginRegistry$ActivityResultListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$ActivityResultListener? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PluginRegistry$ActivityResultListener.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$ActivityResultListener?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($PluginRegistry$ActivityResultListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$ActivityResultListener$NullableType) &&
        other is $PluginRegistry$ActivityResultListener$NullableType;
  }
}

final class $PluginRegistry$ActivityResultListener$Type
    extends jni$_.JObjType<PluginRegistry$ActivityResultListener> {
  @jni$_.internal
  const $PluginRegistry$ActivityResultListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$ActivityResultListener fromReference(
          jni$_.JReference reference) =>
      PluginRegistry$ActivityResultListener.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$ActivityResultListener?> get nullableType =>
      const $PluginRegistry$ActivityResultListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PluginRegistry$ActivityResultListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry$ActivityResultListener$Type) &&
        other is $PluginRegistry$ActivityResultListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$NewIntentListener`
class PluginRegistry$NewIntentListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PluginRegistry$NewIntentListener> $type;

  @jni$_.internal
  PluginRegistry$NewIntentListener.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'io/flutter/plugin/common/PluginRegistry$NewIntentListener');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PluginRegistry$NewIntentListener$NullableType();
  static const type = $PluginRegistry$NewIntentListener$Type();
  static final _id_onNewIntent = _class.instanceMethodId(
    r'onNewIntent',
    r'(Landroid/content/Intent;)Z',
  );

  static final _onNewIntent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean onNewIntent(android.content.Intent intent)`
  bool onNewIntent(
    jni$_.JObject intent,
  ) {
    final _$intent = intent.reference;
    return _onNewIntent(reference.pointer,
            _id_onNewIntent as jni$_.JMethodIDPtr, _$intent.pointer)
        .boolean;
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PluginRegistry$NewIntentListener> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onNewIntent(Landroid/content/Intent;)Z') {
        final $r = _$impls[$p]!.onNewIntent(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.JBoolean($r).reference.toPointer();
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PluginRegistry$NewIntentListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$NewIntentListener',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry$NewIntentListener.implement(
    $PluginRegistry$NewIntentListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry$NewIntentListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry$NewIntentListener {
  factory $PluginRegistry$NewIntentListener({
    required bool Function(jni$_.JObject intent) onNewIntent,
  }) = _$PluginRegistry$NewIntentListener;

  bool onNewIntent(jni$_.JObject intent);
}

final class _$PluginRegistry$NewIntentListener
    with $PluginRegistry$NewIntentListener {
  _$PluginRegistry$NewIntentListener({
    required bool Function(jni$_.JObject intent) onNewIntent,
  }) : _onNewIntent = onNewIntent;

  final bool Function(jni$_.JObject intent) _onNewIntent;

  bool onNewIntent(jni$_.JObject intent) {
    return _onNewIntent(intent);
  }
}

final class $PluginRegistry$NewIntentListener$NullableType
    extends jni$_.JObjType<PluginRegistry$NewIntentListener?> {
  @jni$_.internal
  const $PluginRegistry$NewIntentListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$NewIntentListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$NewIntentListener? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PluginRegistry$NewIntentListener.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$NewIntentListener?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PluginRegistry$NewIntentListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$NewIntentListener$NullableType) &&
        other is $PluginRegistry$NewIntentListener$NullableType;
  }
}

final class $PluginRegistry$NewIntentListener$Type
    extends jni$_.JObjType<PluginRegistry$NewIntentListener> {
  @jni$_.internal
  const $PluginRegistry$NewIntentListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$NewIntentListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$NewIntentListener fromReference(jni$_.JReference reference) =>
      PluginRegistry$NewIntentListener.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$NewIntentListener?> get nullableType =>
      const $PluginRegistry$NewIntentListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PluginRegistry$NewIntentListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry$NewIntentListener$Type) &&
        other is $PluginRegistry$NewIntentListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$PluginRegistrantCallback`
class PluginRegistry$PluginRegistrantCallback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PluginRegistry$PluginRegistrantCallback> $type;

  @jni$_.internal
  PluginRegistry$PluginRegistrantCallback.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'io/flutter/plugin/common/PluginRegistry$PluginRegistrantCallback');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $PluginRegistry$PluginRegistrantCallback$NullableType();
  static const type = $PluginRegistry$PluginRegistrantCallback$Type();
  static final _id_registerWith = _class.instanceMethodId(
    r'registerWith',
    r'(Lio/flutter/plugin/common/PluginRegistry;)V',
  );

  static final _registerWith = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void registerWith(io.flutter.plugin.common.PluginRegistry pluginRegistry)`
  void registerWith(
    PluginRegistry pluginRegistry,
  ) {
    final _$pluginRegistry = pluginRegistry.reference;
    _registerWith(reference.pointer, _id_registerWith as jni$_.JMethodIDPtr,
            _$pluginRegistry.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PluginRegistry$PluginRegistrantCallback>
      _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'registerWith(Lio/flutter/plugin/common/PluginRegistry;)V') {
        _$impls[$p]!.registerWith(
          $a![0]!.as(const $PluginRegistry$Type(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PluginRegistry$PluginRegistrantCallback $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$PluginRegistrantCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.registerWith$async)
          r'registerWith(Lio/flutter/plugin/common/PluginRegistry;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry$PluginRegistrantCallback.implement(
    $PluginRegistry$PluginRegistrantCallback $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry$PluginRegistrantCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry$PluginRegistrantCallback {
  factory $PluginRegistry$PluginRegistrantCallback({
    required void Function(PluginRegistry pluginRegistry) registerWith,
    bool registerWith$async,
  }) = _$PluginRegistry$PluginRegistrantCallback;

  void registerWith(PluginRegistry pluginRegistry);
  bool get registerWith$async => false;
}

final class _$PluginRegistry$PluginRegistrantCallback
    with $PluginRegistry$PluginRegistrantCallback {
  _$PluginRegistry$PluginRegistrantCallback({
    required void Function(PluginRegistry pluginRegistry) registerWith,
    this.registerWith$async = false,
  }) : _registerWith = registerWith;

  final void Function(PluginRegistry pluginRegistry) _registerWith;
  final bool registerWith$async;

  void registerWith(PluginRegistry pluginRegistry) {
    return _registerWith(pluginRegistry);
  }
}

final class $PluginRegistry$PluginRegistrantCallback$NullableType
    extends jni$_.JObjType<PluginRegistry$PluginRegistrantCallback?> {
  @jni$_.internal
  const $PluginRegistry$PluginRegistrantCallback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$PluginRegistrantCallback;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$PluginRegistrantCallback? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PluginRegistry$PluginRegistrantCallback.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$PluginRegistrantCallback?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($PluginRegistry$PluginRegistrantCallback$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$PluginRegistrantCallback$NullableType) &&
        other is $PluginRegistry$PluginRegistrantCallback$NullableType;
  }
}

final class $PluginRegistry$PluginRegistrantCallback$Type
    extends jni$_.JObjType<PluginRegistry$PluginRegistrantCallback> {
  @jni$_.internal
  const $PluginRegistry$PluginRegistrantCallback$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$PluginRegistrantCallback;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$PluginRegistrantCallback fromReference(
          jni$_.JReference reference) =>
      PluginRegistry$PluginRegistrantCallback.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$PluginRegistrantCallback?> get nullableType =>
      const $PluginRegistry$PluginRegistrantCallback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PluginRegistry$PluginRegistrantCallback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$PluginRegistrantCallback$Type) &&
        other is $PluginRegistry$PluginRegistrantCallback$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$Registrar`
class PluginRegistry$Registrar extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PluginRegistry$Registrar> $type;

  @jni$_.internal
  PluginRegistry$Registrar.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'io/flutter/plugin/common/PluginRegistry$Registrar');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PluginRegistry$Registrar$NullableType();
  static const type = $PluginRegistry$Registrar$Type();
  static final _id_activity = _class.instanceMethodId(
    r'activity',
    r'()Landroid/app/Activity;',
  );

  static final _activity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.app.Activity activity()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? activity() {
    return _activity(reference.pointer, _id_activity as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_context = _class.instanceMethodId(
    r'context',
    r'()Landroid/content/Context;',
  );

  static final _context = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.Context context()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject context() {
    return _context(reference.pointer, _id_context as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_activeContext = _class.instanceMethodId(
    r'activeContext',
    r'()Landroid/content/Context;',
  );

  static final _activeContext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.Context activeContext()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject activeContext() {
    return _activeContext(
            reference.pointer, _id_activeContext as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_messenger = _class.instanceMethodId(
    r'messenger',
    r'()Lio/flutter/plugin/common/BinaryMessenger;',
  );

  static final _messenger = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract io.flutter.plugin.common.BinaryMessenger messenger()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject messenger() {
    return _messenger(reference.pointer, _id_messenger as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_textures = _class.instanceMethodId(
    r'textures',
    r'()Lio/flutter/view/TextureRegistry;',
  );

  static final _textures = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract io.flutter.view.TextureRegistry textures()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject textures() {
    return _textures(reference.pointer, _id_textures as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_platformViewRegistry = _class.instanceMethodId(
    r'platformViewRegistry',
    r'()Lio/flutter/plugin/platform/PlatformViewRegistry;',
  );

  static final _platformViewRegistry = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject platformViewRegistry() {
    return _platformViewRegistry(
            reference.pointer, _id_platformViewRegistry as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_view = _class.instanceMethodId(
    r'view',
    r'()Lio/flutter/view/FlutterView;',
  );

  static final _view = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract io.flutter.view.FlutterView view()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject view() {
    return _view(reference.pointer, _id_view as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_lookupKeyForAsset = _class.instanceMethodId(
    r'lookupKeyForAsset',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _lookupKeyForAsset = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.String lookupKeyForAsset(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString lookupKeyForAsset(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _lookupKeyForAsset(reference.pointer,
            _id_lookupKeyForAsset as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_lookupKeyForAsset$1 = _class.instanceMethodId(
    r'lookupKeyForAsset',
    r'(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _lookupKeyForAsset$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.String lookupKeyForAsset(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString lookupKeyForAsset$1(
    jni$_.JString string,
    jni$_.JString string1,
  ) {
    final _$string = string.reference;
    final _$string1 = string1.reference;
    return _lookupKeyForAsset$1(
            reference.pointer,
            _id_lookupKeyForAsset$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_publish = _class.instanceMethodId(
    r'publish',
    r'(Ljava/lang/Object;)Lio/flutter/plugin/common/PluginRegistry$Registrar;',
  );

  static final _publish = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract io.flutter.plugin.common.PluginRegistry$Registrar publish(java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  PluginRegistry$Registrar publish(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _publish(reference.pointer, _id_publish as jni$_.JMethodIDPtr,
            _$object.pointer)
        .object<PluginRegistry$Registrar>(
            const $PluginRegistry$Registrar$Type());
  }

  static final _id_addRequestPermissionsResultListener =
      _class.instanceMethodId(
    r'addRequestPermissionsResultListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;',
  );

  static final _addRequestPermissionsResultListener =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract io.flutter.plugin.common.PluginRegistry$Registrar addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener requestPermissionsResultListener)`
  /// The returned object must be released after use, by calling the [release] method.
  PluginRegistry$Registrar addRequestPermissionsResultListener(
    PluginRegistry$RequestPermissionsResultListener
        requestPermissionsResultListener,
  ) {
    final _$requestPermissionsResultListener =
        requestPermissionsResultListener.reference;
    return _addRequestPermissionsResultListener(
            reference.pointer,
            _id_addRequestPermissionsResultListener as jni$_.JMethodIDPtr,
            _$requestPermissionsResultListener.pointer)
        .object<PluginRegistry$Registrar>(
            const $PluginRegistry$Registrar$Type());
  }

  static final _id_addActivityResultListener = _class.instanceMethodId(
    r'addActivityResultListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;',
  );

  static final _addActivityResultListener = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract io.flutter.plugin.common.PluginRegistry$Registrar addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener activityResultListener)`
  /// The returned object must be released after use, by calling the [release] method.
  PluginRegistry$Registrar addActivityResultListener(
    PluginRegistry$ActivityResultListener activityResultListener,
  ) {
    final _$activityResultListener = activityResultListener.reference;
    return _addActivityResultListener(
            reference.pointer,
            _id_addActivityResultListener as jni$_.JMethodIDPtr,
            _$activityResultListener.pointer)
        .object<PluginRegistry$Registrar>(
            const $PluginRegistry$Registrar$Type());
  }

  static final _id_addNewIntentListener = _class.instanceMethodId(
    r'addNewIntentListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$NewIntentListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;',
  );

  static final _addNewIntentListener = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract io.flutter.plugin.common.PluginRegistry$Registrar addNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener newIntentListener)`
  /// The returned object must be released after use, by calling the [release] method.
  PluginRegistry$Registrar addNewIntentListener(
    PluginRegistry$NewIntentListener newIntentListener,
  ) {
    final _$newIntentListener = newIntentListener.reference;
    return _addNewIntentListener(
            reference.pointer,
            _id_addNewIntentListener as jni$_.JMethodIDPtr,
            _$newIntentListener.pointer)
        .object<PluginRegistry$Registrar>(
            const $PluginRegistry$Registrar$Type());
  }

  static final _id_addUserLeaveHintListener = _class.instanceMethodId(
    r'addUserLeaveHintListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$UserLeaveHintListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;',
  );

  static final _addUserLeaveHintListener = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract io.flutter.plugin.common.PluginRegistry$Registrar addUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener userLeaveHintListener)`
  /// The returned object must be released after use, by calling the [release] method.
  PluginRegistry$Registrar addUserLeaveHintListener(
    PluginRegistry$UserLeaveHintListener userLeaveHintListener,
  ) {
    final _$userLeaveHintListener = userLeaveHintListener.reference;
    return _addUserLeaveHintListener(
            reference.pointer,
            _id_addUserLeaveHintListener as jni$_.JMethodIDPtr,
            _$userLeaveHintListener.pointer)
        .object<PluginRegistry$Registrar>(
            const $PluginRegistry$Registrar$Type());
  }

  static final _id_addWindowFocusChangedListener = _class.instanceMethodId(
    r'addWindowFocusChangedListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;',
  );

  static final _addWindowFocusChangedListener =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract io.flutter.plugin.common.PluginRegistry$Registrar addWindowFocusChangedListener(io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener windowFocusChangedListener)`
  /// The returned object must be released after use, by calling the [release] method.
  PluginRegistry$Registrar addWindowFocusChangedListener(
    PluginRegistry$WindowFocusChangedListener windowFocusChangedListener,
  ) {
    final _$windowFocusChangedListener = windowFocusChangedListener.reference;
    return _addWindowFocusChangedListener(
            reference.pointer,
            _id_addWindowFocusChangedListener as jni$_.JMethodIDPtr,
            _$windowFocusChangedListener.pointer)
        .object<PluginRegistry$Registrar>(
            const $PluginRegistry$Registrar$Type());
  }

  static final _id_addViewDestroyListener = _class.instanceMethodId(
    r'addViewDestroyListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$ViewDestroyListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;',
  );

  static final _addViewDestroyListener = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract io.flutter.plugin.common.PluginRegistry$Registrar addViewDestroyListener(io.flutter.plugin.common.PluginRegistry$ViewDestroyListener viewDestroyListener)`
  /// The returned object must be released after use, by calling the [release] method.
  PluginRegistry$Registrar addViewDestroyListener(
    PluginRegistry$ViewDestroyListener viewDestroyListener,
  ) {
    final _$viewDestroyListener = viewDestroyListener.reference;
    return _addViewDestroyListener(
            reference.pointer,
            _id_addViewDestroyListener as jni$_.JMethodIDPtr,
            _$viewDestroyListener.pointer)
        .object<PluginRegistry$Registrar>(
            const $PluginRegistry$Registrar$Type());
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PluginRegistry$Registrar> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'activity()Landroid/app/Activity;') {
        final $r = _$impls[$p]!.activity();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'context()Landroid/content/Context;') {
        final $r = _$impls[$p]!.context();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'activeContext()Landroid/content/Context;') {
        final $r = _$impls[$p]!.activeContext();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'messenger()Lio/flutter/plugin/common/BinaryMessenger;') {
        final $r = _$impls[$p]!.messenger();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'textures()Lio/flutter/view/TextureRegistry;') {
        final $r = _$impls[$p]!.textures();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'platformViewRegistry()Lio/flutter/plugin/platform/PlatformViewRegistry;') {
        final $r = _$impls[$p]!.platformViewRegistry();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'view()Lio/flutter/view/FlutterView;') {
        final $r = _$impls[$p]!.view();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'lookupKeyForAsset(Ljava/lang/String;)Ljava/lang/String;') {
        final $r = _$impls[$p]!.lookupKeyForAsset(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'lookupKeyForAsset(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;') {
        final $r = _$impls[$p]!.lookupKeyForAsset$1(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![1]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'publish(Ljava/lang/Object;)Lio/flutter/plugin/common/PluginRegistry$Registrar;') {
        final $r = _$impls[$p]!.publish(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'addRequestPermissionsResultListener(Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;') {
        final $r = _$impls[$p]!.addRequestPermissionsResultListener(
          $a![0]!.as(
              const $PluginRegistry$RequestPermissionsResultListener$Type(),
              releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'addActivityResultListener(Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;') {
        final $r = _$impls[$p]!.addActivityResultListener(
          $a![0]!.as(const $PluginRegistry$ActivityResultListener$Type(),
              releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'addNewIntentListener(Lio/flutter/plugin/common/PluginRegistry$NewIntentListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;') {
        final $r = _$impls[$p]!.addNewIntentListener(
          $a![0]!.as(const $PluginRegistry$NewIntentListener$Type(),
              releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'addUserLeaveHintListener(Lio/flutter/plugin/common/PluginRegistry$UserLeaveHintListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;') {
        final $r = _$impls[$p]!.addUserLeaveHintListener(
          $a![0]!.as(const $PluginRegistry$UserLeaveHintListener$Type(),
              releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'addWindowFocusChangedListener(Lio/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;') {
        final $r = _$impls[$p]!.addWindowFocusChangedListener(
          $a![0]!.as(const $PluginRegistry$WindowFocusChangedListener$Type(),
              releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'addViewDestroyListener(Lio/flutter/plugin/common/PluginRegistry$ViewDestroyListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;') {
        final $r = _$impls[$p]!.addViewDestroyListener(
          $a![0]!.as(const $PluginRegistry$ViewDestroyListener$Type(),
              releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PluginRegistry$Registrar $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$Registrar',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry$Registrar.implement(
    $PluginRegistry$Registrar $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry$Registrar.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry$Registrar {
  factory $PluginRegistry$Registrar({
    required jni$_.JObject? Function() activity,
    required jni$_.JObject Function() context,
    required jni$_.JObject Function() activeContext,
    required jni$_.JObject Function() messenger,
    required jni$_.JObject Function() textures,
    required jni$_.JObject Function() platformViewRegistry,
    required jni$_.JObject Function() view,
    required jni$_.JString Function(jni$_.JString string) lookupKeyForAsset,
    required jni$_.JString Function(jni$_.JString string, jni$_.JString string1)
        lookupKeyForAsset$1,
    required PluginRegistry$Registrar Function(jni$_.JObject? object) publish,
    required PluginRegistry$Registrar Function(
            PluginRegistry$RequestPermissionsResultListener
                requestPermissionsResultListener)
        addRequestPermissionsResultListener,
    required PluginRegistry$Registrar Function(
            PluginRegistry$ActivityResultListener activityResultListener)
        addActivityResultListener,
    required PluginRegistry$Registrar Function(
            PluginRegistry$NewIntentListener newIntentListener)
        addNewIntentListener,
    required PluginRegistry$Registrar Function(
            PluginRegistry$UserLeaveHintListener userLeaveHintListener)
        addUserLeaveHintListener,
    required PluginRegistry$Registrar Function(
            PluginRegistry$WindowFocusChangedListener
                windowFocusChangedListener)
        addWindowFocusChangedListener,
    required PluginRegistry$Registrar Function(
            PluginRegistry$ViewDestroyListener viewDestroyListener)
        addViewDestroyListener,
  }) = _$PluginRegistry$Registrar;

  jni$_.JObject? activity();
  jni$_.JObject context();
  jni$_.JObject activeContext();
  jni$_.JObject messenger();
  jni$_.JObject textures();
  jni$_.JObject platformViewRegistry();
  jni$_.JObject view();
  jni$_.JString lookupKeyForAsset(jni$_.JString string);
  jni$_.JString lookupKeyForAsset$1(
      jni$_.JString string, jni$_.JString string1);
  PluginRegistry$Registrar publish(jni$_.JObject? object);
  PluginRegistry$Registrar addRequestPermissionsResultListener(
      PluginRegistry$RequestPermissionsResultListener
          requestPermissionsResultListener);
  PluginRegistry$Registrar addActivityResultListener(
      PluginRegistry$ActivityResultListener activityResultListener);
  PluginRegistry$Registrar addNewIntentListener(
      PluginRegistry$NewIntentListener newIntentListener);
  PluginRegistry$Registrar addUserLeaveHintListener(
      PluginRegistry$UserLeaveHintListener userLeaveHintListener);
  PluginRegistry$Registrar addWindowFocusChangedListener(
      PluginRegistry$WindowFocusChangedListener windowFocusChangedListener);
  PluginRegistry$Registrar addViewDestroyListener(
      PluginRegistry$ViewDestroyListener viewDestroyListener);
}

final class _$PluginRegistry$Registrar with $PluginRegistry$Registrar {
  _$PluginRegistry$Registrar({
    required jni$_.JObject? Function() activity,
    required jni$_.JObject Function() context,
    required jni$_.JObject Function() activeContext,
    required jni$_.JObject Function() messenger,
    required jni$_.JObject Function() textures,
    required jni$_.JObject Function() platformViewRegistry,
    required jni$_.JObject Function() view,
    required jni$_.JString Function(jni$_.JString string) lookupKeyForAsset,
    required jni$_.JString Function(jni$_.JString string, jni$_.JString string1)
        lookupKeyForAsset$1,
    required PluginRegistry$Registrar Function(jni$_.JObject? object) publish,
    required PluginRegistry$Registrar Function(
            PluginRegistry$RequestPermissionsResultListener
                requestPermissionsResultListener)
        addRequestPermissionsResultListener,
    required PluginRegistry$Registrar Function(
            PluginRegistry$ActivityResultListener activityResultListener)
        addActivityResultListener,
    required PluginRegistry$Registrar Function(
            PluginRegistry$NewIntentListener newIntentListener)
        addNewIntentListener,
    required PluginRegistry$Registrar Function(
            PluginRegistry$UserLeaveHintListener userLeaveHintListener)
        addUserLeaveHintListener,
    required PluginRegistry$Registrar Function(
            PluginRegistry$WindowFocusChangedListener
                windowFocusChangedListener)
        addWindowFocusChangedListener,
    required PluginRegistry$Registrar Function(
            PluginRegistry$ViewDestroyListener viewDestroyListener)
        addViewDestroyListener,
  })  : _activity = activity,
        _context = context,
        _activeContext = activeContext,
        _messenger = messenger,
        _textures = textures,
        _platformViewRegistry = platformViewRegistry,
        _view = view,
        _lookupKeyForAsset = lookupKeyForAsset,
        _lookupKeyForAsset$1 = lookupKeyForAsset$1,
        _publish = publish,
        _addRequestPermissionsResultListener =
            addRequestPermissionsResultListener,
        _addActivityResultListener = addActivityResultListener,
        _addNewIntentListener = addNewIntentListener,
        _addUserLeaveHintListener = addUserLeaveHintListener,
        _addWindowFocusChangedListener = addWindowFocusChangedListener,
        _addViewDestroyListener = addViewDestroyListener;

  final jni$_.JObject? Function() _activity;
  final jni$_.JObject Function() _context;
  final jni$_.JObject Function() _activeContext;
  final jni$_.JObject Function() _messenger;
  final jni$_.JObject Function() _textures;
  final jni$_.JObject Function() _platformViewRegistry;
  final jni$_.JObject Function() _view;
  final jni$_.JString Function(jni$_.JString string) _lookupKeyForAsset;
  final jni$_.JString Function(jni$_.JString string, jni$_.JString string1)
      _lookupKeyForAsset$1;
  final PluginRegistry$Registrar Function(jni$_.JObject? object) _publish;
  final PluginRegistry$Registrar Function(
          PluginRegistry$RequestPermissionsResultListener
              requestPermissionsResultListener)
      _addRequestPermissionsResultListener;
  final PluginRegistry$Registrar Function(
          PluginRegistry$ActivityResultListener activityResultListener)
      _addActivityResultListener;
  final PluginRegistry$Registrar Function(
      PluginRegistry$NewIntentListener newIntentListener) _addNewIntentListener;
  final PluginRegistry$Registrar Function(
          PluginRegistry$UserLeaveHintListener userLeaveHintListener)
      _addUserLeaveHintListener;
  final PluginRegistry$Registrar Function(
          PluginRegistry$WindowFocusChangedListener windowFocusChangedListener)
      _addWindowFocusChangedListener;
  final PluginRegistry$Registrar Function(
          PluginRegistry$ViewDestroyListener viewDestroyListener)
      _addViewDestroyListener;

  jni$_.JObject? activity() {
    return _activity();
  }

  jni$_.JObject context() {
    return _context();
  }

  jni$_.JObject activeContext() {
    return _activeContext();
  }

  jni$_.JObject messenger() {
    return _messenger();
  }

  jni$_.JObject textures() {
    return _textures();
  }

  jni$_.JObject platformViewRegistry() {
    return _platformViewRegistry();
  }

  jni$_.JObject view() {
    return _view();
  }

  jni$_.JString lookupKeyForAsset(jni$_.JString string) {
    return _lookupKeyForAsset(string);
  }

  jni$_.JString lookupKeyForAsset$1(
      jni$_.JString string, jni$_.JString string1) {
    return _lookupKeyForAsset$1(string, string1);
  }

  PluginRegistry$Registrar publish(jni$_.JObject? object) {
    return _publish(object);
  }

  PluginRegistry$Registrar addRequestPermissionsResultListener(
      PluginRegistry$RequestPermissionsResultListener
          requestPermissionsResultListener) {
    return _addRequestPermissionsResultListener(
        requestPermissionsResultListener);
  }

  PluginRegistry$Registrar addActivityResultListener(
      PluginRegistry$ActivityResultListener activityResultListener) {
    return _addActivityResultListener(activityResultListener);
  }

  PluginRegistry$Registrar addNewIntentListener(
      PluginRegistry$NewIntentListener newIntentListener) {
    return _addNewIntentListener(newIntentListener);
  }

  PluginRegistry$Registrar addUserLeaveHintListener(
      PluginRegistry$UserLeaveHintListener userLeaveHintListener) {
    return _addUserLeaveHintListener(userLeaveHintListener);
  }

  PluginRegistry$Registrar addWindowFocusChangedListener(
      PluginRegistry$WindowFocusChangedListener windowFocusChangedListener) {
    return _addWindowFocusChangedListener(windowFocusChangedListener);
  }

  PluginRegistry$Registrar addViewDestroyListener(
      PluginRegistry$ViewDestroyListener viewDestroyListener) {
    return _addViewDestroyListener(viewDestroyListener);
  }
}

final class $PluginRegistry$Registrar$NullableType
    extends jni$_.JObjType<PluginRegistry$Registrar?> {
  @jni$_.internal
  const $PluginRegistry$Registrar$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$Registrar;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$Registrar? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PluginRegistry$Registrar.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$Registrar?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PluginRegistry$Registrar$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry$Registrar$NullableType) &&
        other is $PluginRegistry$Registrar$NullableType;
  }
}

final class $PluginRegistry$Registrar$Type
    extends jni$_.JObjType<PluginRegistry$Registrar> {
  @jni$_.internal
  const $PluginRegistry$Registrar$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$Registrar;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$Registrar fromReference(jni$_.JReference reference) =>
      PluginRegistry$Registrar.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$Registrar?> get nullableType =>
      const $PluginRegistry$Registrar$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PluginRegistry$Registrar$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry$Registrar$Type) &&
        other is $PluginRegistry$Registrar$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener`
class PluginRegistry$RequestPermissionsResultListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PluginRegistry$RequestPermissionsResultListener> $type;

  @jni$_.internal
  PluginRegistry$RequestPermissionsResultListener.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'io/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $PluginRegistry$RequestPermissionsResultListener$NullableType();
  static const type = $PluginRegistry$RequestPermissionsResultListener$Type();
  static final _id_onRequestPermissionsResult = _class.instanceMethodId(
    r'onRequestPermissionsResult',
    r'(I[Ljava/lang/String;[I)Z',
  );

  static final _onRequestPermissionsResult =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)`
  bool onRequestPermissionsResult(
    int i,
    jni$_.JArray<jni$_.JString?> strings,
    jni$_.JIntArray is$,
  ) {
    final _$strings = strings.reference;
    final _$is$ = is$.reference;
    return _onRequestPermissionsResult(
            reference.pointer,
            _id_onRequestPermissionsResult as jni$_.JMethodIDPtr,
            i,
            _$strings.pointer,
            _$is$.pointer)
        .boolean;
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PluginRegistry$RequestPermissionsResultListener>
      _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onRequestPermissionsResult(I[Ljava/lang/String;[I)Z') {
        final $r = _$impls[$p]!.onRequestPermissionsResult(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![1]!.as(
              const jni$_.JArrayType<jni$_.JString?>(
                  jni$_.JStringNullableType()),
              releaseOriginal: true),
          $a![2]!.as(const jni$_.JIntArrayType(), releaseOriginal: true),
        );
        return jni$_.JBoolean($r).reference.toPointer();
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PluginRegistry$RequestPermissionsResultListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry$RequestPermissionsResultListener.implement(
    $PluginRegistry$RequestPermissionsResultListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry$RequestPermissionsResultListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry$RequestPermissionsResultListener {
  factory $PluginRegistry$RequestPermissionsResultListener({
    required bool Function(
            int i, jni$_.JArray<jni$_.JString?> strings, jni$_.JIntArray is$)
        onRequestPermissionsResult,
  }) = _$PluginRegistry$RequestPermissionsResultListener;

  bool onRequestPermissionsResult(
      int i, jni$_.JArray<jni$_.JString?> strings, jni$_.JIntArray is$);
}

final class _$PluginRegistry$RequestPermissionsResultListener
    with $PluginRegistry$RequestPermissionsResultListener {
  _$PluginRegistry$RequestPermissionsResultListener({
    required bool Function(
            int i, jni$_.JArray<jni$_.JString?> strings, jni$_.JIntArray is$)
        onRequestPermissionsResult,
  }) : _onRequestPermissionsResult = onRequestPermissionsResult;

  final bool Function(
          int i, jni$_.JArray<jni$_.JString?> strings, jni$_.JIntArray is$)
      _onRequestPermissionsResult;

  bool onRequestPermissionsResult(
      int i, jni$_.JArray<jni$_.JString?> strings, jni$_.JIntArray is$) {
    return _onRequestPermissionsResult(i, strings, is$);
  }
}

final class $PluginRegistry$RequestPermissionsResultListener$NullableType
    extends jni$_.JObjType<PluginRegistry$RequestPermissionsResultListener?> {
  @jni$_.internal
  const $PluginRegistry$RequestPermissionsResultListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$RequestPermissionsResultListener? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PluginRegistry$RequestPermissionsResultListener.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$RequestPermissionsResultListener?>
      get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($PluginRegistry$RequestPermissionsResultListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$RequestPermissionsResultListener$NullableType) &&
        other is $PluginRegistry$RequestPermissionsResultListener$NullableType;
  }
}

final class $PluginRegistry$RequestPermissionsResultListener$Type
    extends jni$_.JObjType<PluginRegistry$RequestPermissionsResultListener> {
  @jni$_.internal
  const $PluginRegistry$RequestPermissionsResultListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$RequestPermissionsResultListener fromReference(
          jni$_.JReference reference) =>
      PluginRegistry$RequestPermissionsResultListener.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$RequestPermissionsResultListener?>
      get nullableType =>
          const $PluginRegistry$RequestPermissionsResultListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($PluginRegistry$RequestPermissionsResultListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$RequestPermissionsResultListener$Type) &&
        other is $PluginRegistry$RequestPermissionsResultListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener`
class PluginRegistry$UserLeaveHintListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PluginRegistry$UserLeaveHintListener> $type;

  @jni$_.internal
  PluginRegistry$UserLeaveHintListener.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'io/flutter/plugin/common/PluginRegistry$UserLeaveHintListener');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $PluginRegistry$UserLeaveHintListener$NullableType();
  static const type = $PluginRegistry$UserLeaveHintListener$Type();
  static final _id_onUserLeaveHint = _class.instanceMethodId(
    r'onUserLeaveHint',
    r'()V',
  );

  static final _onUserLeaveHint = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void onUserLeaveHint()`
  void onUserLeaveHint() {
    _onUserLeaveHint(
            reference.pointer, _id_onUserLeaveHint as jni$_.JMethodIDPtr)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PluginRegistry$UserLeaveHintListener> _$impls =
      {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onUserLeaveHint()V') {
        _$impls[$p]!.onUserLeaveHint();
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PluginRegistry$UserLeaveHintListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onUserLeaveHint$async) r'onUserLeaveHint()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry$UserLeaveHintListener.implement(
    $PluginRegistry$UserLeaveHintListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry$UserLeaveHintListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry$UserLeaveHintListener {
  factory $PluginRegistry$UserLeaveHintListener({
    required void Function() onUserLeaveHint,
    bool onUserLeaveHint$async,
  }) = _$PluginRegistry$UserLeaveHintListener;

  void onUserLeaveHint();
  bool get onUserLeaveHint$async => false;
}

final class _$PluginRegistry$UserLeaveHintListener
    with $PluginRegistry$UserLeaveHintListener {
  _$PluginRegistry$UserLeaveHintListener({
    required void Function() onUserLeaveHint,
    this.onUserLeaveHint$async = false,
  }) : _onUserLeaveHint = onUserLeaveHint;

  final void Function() _onUserLeaveHint;
  final bool onUserLeaveHint$async;

  void onUserLeaveHint() {
    return _onUserLeaveHint();
  }
}

final class $PluginRegistry$UserLeaveHintListener$NullableType
    extends jni$_.JObjType<PluginRegistry$UserLeaveHintListener?> {
  @jni$_.internal
  const $PluginRegistry$UserLeaveHintListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$UserLeaveHintListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$UserLeaveHintListener? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PluginRegistry$UserLeaveHintListener.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$UserLeaveHintListener?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($PluginRegistry$UserLeaveHintListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$UserLeaveHintListener$NullableType) &&
        other is $PluginRegistry$UserLeaveHintListener$NullableType;
  }
}

final class $PluginRegistry$UserLeaveHintListener$Type
    extends jni$_.JObjType<PluginRegistry$UserLeaveHintListener> {
  @jni$_.internal
  const $PluginRegistry$UserLeaveHintListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$UserLeaveHintListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$UserLeaveHintListener fromReference(
          jni$_.JReference reference) =>
      PluginRegistry$UserLeaveHintListener.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$UserLeaveHintListener?> get nullableType =>
      const $PluginRegistry$UserLeaveHintListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PluginRegistry$UserLeaveHintListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry$UserLeaveHintListener$Type) &&
        other is $PluginRegistry$UserLeaveHintListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$ViewDestroyListener`
class PluginRegistry$ViewDestroyListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PluginRegistry$ViewDestroyListener> $type;

  @jni$_.internal
  PluginRegistry$ViewDestroyListener.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'io/flutter/plugin/common/PluginRegistry$ViewDestroyListener');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $PluginRegistry$ViewDestroyListener$NullableType();
  static const type = $PluginRegistry$ViewDestroyListener$Type();
  static final _id_onViewDestroy = _class.instanceMethodId(
    r'onViewDestroy',
    r'(Lio/flutter/view/FlutterNativeView;)Z',
  );

  static final _onViewDestroy = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean onViewDestroy(io.flutter.view.FlutterNativeView flutterNativeView)`
  bool onViewDestroy(
    jni$_.JObject flutterNativeView,
  ) {
    final _$flutterNativeView = flutterNativeView.reference;
    return _onViewDestroy(
            reference.pointer,
            _id_onViewDestroy as jni$_.JMethodIDPtr,
            _$flutterNativeView.pointer)
        .boolean;
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PluginRegistry$ViewDestroyListener> _$impls =
      {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onViewDestroy(Lio/flutter/view/FlutterNativeView;)Z') {
        final $r = _$impls[$p]!.onViewDestroy(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.JBoolean($r).reference.toPointer();
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PluginRegistry$ViewDestroyListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$ViewDestroyListener',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry$ViewDestroyListener.implement(
    $PluginRegistry$ViewDestroyListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry$ViewDestroyListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry$ViewDestroyListener {
  factory $PluginRegistry$ViewDestroyListener({
    required bool Function(jni$_.JObject flutterNativeView) onViewDestroy,
  }) = _$PluginRegistry$ViewDestroyListener;

  bool onViewDestroy(jni$_.JObject flutterNativeView);
}

final class _$PluginRegistry$ViewDestroyListener
    with $PluginRegistry$ViewDestroyListener {
  _$PluginRegistry$ViewDestroyListener({
    required bool Function(jni$_.JObject flutterNativeView) onViewDestroy,
  }) : _onViewDestroy = onViewDestroy;

  final bool Function(jni$_.JObject flutterNativeView) _onViewDestroy;

  bool onViewDestroy(jni$_.JObject flutterNativeView) {
    return _onViewDestroy(flutterNativeView);
  }
}

final class $PluginRegistry$ViewDestroyListener$NullableType
    extends jni$_.JObjType<PluginRegistry$ViewDestroyListener?> {
  @jni$_.internal
  const $PluginRegistry$ViewDestroyListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$ViewDestroyListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$ViewDestroyListener? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PluginRegistry$ViewDestroyListener.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$ViewDestroyListener?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($PluginRegistry$ViewDestroyListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$ViewDestroyListener$NullableType) &&
        other is $PluginRegistry$ViewDestroyListener$NullableType;
  }
}

final class $PluginRegistry$ViewDestroyListener$Type
    extends jni$_.JObjType<PluginRegistry$ViewDestroyListener> {
  @jni$_.internal
  const $PluginRegistry$ViewDestroyListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$ViewDestroyListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$ViewDestroyListener fromReference(
          jni$_.JReference reference) =>
      PluginRegistry$ViewDestroyListener.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$ViewDestroyListener?> get nullableType =>
      const $PluginRegistry$ViewDestroyListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PluginRegistry$ViewDestroyListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry$ViewDestroyListener$Type) &&
        other is $PluginRegistry$ViewDestroyListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener`
class PluginRegistry$WindowFocusChangedListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PluginRegistry$WindowFocusChangedListener> $type;

  @jni$_.internal
  PluginRegistry$WindowFocusChangedListener.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'io/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $PluginRegistry$WindowFocusChangedListener$NullableType();
  static const type = $PluginRegistry$WindowFocusChangedListener$Type();
  static final _id_onWindowFocusChanged = _class.instanceMethodId(
    r'onWindowFocusChanged',
    r'(Z)V',
  );

  static final _onWindowFocusChanged = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract void onWindowFocusChanged(boolean z)`
  void onWindowFocusChanged(
    bool z,
  ) {
    _onWindowFocusChanged(reference.pointer,
            _id_onWindowFocusChanged as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PluginRegistry$WindowFocusChangedListener>
      _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onWindowFocusChanged(Z)V') {
        _$impls[$p]!.onWindowFocusChanged(
          $a![0]!
              .as(const jni$_.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PluginRegistry$WindowFocusChangedListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onWindowFocusChanged$async) r'onWindowFocusChanged(Z)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry$WindowFocusChangedListener.implement(
    $PluginRegistry$WindowFocusChangedListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry$WindowFocusChangedListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry$WindowFocusChangedListener {
  factory $PluginRegistry$WindowFocusChangedListener({
    required void Function(bool z) onWindowFocusChanged,
    bool onWindowFocusChanged$async,
  }) = _$PluginRegistry$WindowFocusChangedListener;

  void onWindowFocusChanged(bool z);
  bool get onWindowFocusChanged$async => false;
}

final class _$PluginRegistry$WindowFocusChangedListener
    with $PluginRegistry$WindowFocusChangedListener {
  _$PluginRegistry$WindowFocusChangedListener({
    required void Function(bool z) onWindowFocusChanged,
    this.onWindowFocusChanged$async = false,
  }) : _onWindowFocusChanged = onWindowFocusChanged;

  final void Function(bool z) _onWindowFocusChanged;
  final bool onWindowFocusChanged$async;

  void onWindowFocusChanged(bool z) {
    return _onWindowFocusChanged(z);
  }
}

final class $PluginRegistry$WindowFocusChangedListener$NullableType
    extends jni$_.JObjType<PluginRegistry$WindowFocusChangedListener?> {
  @jni$_.internal
  const $PluginRegistry$WindowFocusChangedListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$WindowFocusChangedListener? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PluginRegistry$WindowFocusChangedListener.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$WindowFocusChangedListener?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($PluginRegistry$WindowFocusChangedListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$WindowFocusChangedListener$NullableType) &&
        other is $PluginRegistry$WindowFocusChangedListener$NullableType;
  }
}

final class $PluginRegistry$WindowFocusChangedListener$Type
    extends jni$_.JObjType<PluginRegistry$WindowFocusChangedListener> {
  @jni$_.internal
  const $PluginRegistry$WindowFocusChangedListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$WindowFocusChangedListener fromReference(
          jni$_.JReference reference) =>
      PluginRegistry$WindowFocusChangedListener.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$WindowFocusChangedListener?> get nullableType =>
      const $PluginRegistry$WindowFocusChangedListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($PluginRegistry$WindowFocusChangedListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$WindowFocusChangedListener$Type) &&
        other is $PluginRegistry$WindowFocusChangedListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry`
class PluginRegistry extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PluginRegistry> $type;

  @jni$_.internal
  PluginRegistry.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'io/flutter/plugin/common/PluginRegistry');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PluginRegistry$NullableType();
  static const type = $PluginRegistry$Type();
  static final _id_registrarFor = _class.instanceMethodId(
    r'registrarFor',
    r'(Ljava/lang/String;)Lio/flutter/plugin/common/PluginRegistry$Registrar;',
  );

  static final _registrarFor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  PluginRegistry$Registrar registrarFor(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _registrarFor(reference.pointer,
            _id_registrarFor as jni$_.JMethodIDPtr, _$string.pointer)
        .object<PluginRegistry$Registrar>(
            const $PluginRegistry$Registrar$Type());
  }

  static final _id_hasPlugin = _class.instanceMethodId(
    r'hasPlugin',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasPlugin = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean hasPlugin(java.lang.String string)`
  bool hasPlugin(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _hasPlugin(reference.pointer, _id_hasPlugin as jni$_.JMethodIDPtr,
            _$string.pointer)
        .boolean;
  }

  static final _id_valuePublishedByPlugin = _class.instanceMethodId(
    r'valuePublishedByPlugin',
    r'(Ljava/lang/String;)Ljava/lang/Object;',
  );

  static final _valuePublishedByPlugin = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract T valuePublishedByPlugin(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? valuePublishedByPlugin<$T extends jni$_.JObject?>(
    jni$_.JString string, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string.reference;
    return _valuePublishedByPlugin(reference.pointer,
            _id_valuePublishedByPlugin as jni$_.JMethodIDPtr, _$string.pointer)
        .object<$T?>(T.nullableType);
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PluginRegistry> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'registrarFor(Ljava/lang/String;)Lio/flutter/plugin/common/PluginRegistry$Registrar;') {
        final $r = _$impls[$p]!.registrarFor(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'hasPlugin(Ljava/lang/String;)Z') {
        final $r = _$impls[$p]!.hasPlugin(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d ==
          r'valuePublishedByPlugin(Ljava/lang/String;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.valuePublishedByPlugin(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PluginRegistry $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry.implement(
    $PluginRegistry $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry {
  factory $PluginRegistry({
    required PluginRegistry$Registrar Function(jni$_.JString string)
        registrarFor,
    required bool Function(jni$_.JString string) hasPlugin,
    required jni$_.JObject? Function(jni$_.JString string)
        valuePublishedByPlugin,
  }) = _$PluginRegistry;

  PluginRegistry$Registrar registrarFor(jni$_.JString string);
  bool hasPlugin(jni$_.JString string);
  jni$_.JObject? valuePublishedByPlugin(jni$_.JString string);
}

final class _$PluginRegistry with $PluginRegistry {
  _$PluginRegistry({
    required PluginRegistry$Registrar Function(jni$_.JString string)
        registrarFor,
    required bool Function(jni$_.JString string) hasPlugin,
    required jni$_.JObject? Function(jni$_.JString string)
        valuePublishedByPlugin,
  })  : _registrarFor = registrarFor,
        _hasPlugin = hasPlugin,
        _valuePublishedByPlugin = valuePublishedByPlugin;

  final PluginRegistry$Registrar Function(jni$_.JString string) _registrarFor;
  final bool Function(jni$_.JString string) _hasPlugin;
  final jni$_.JObject? Function(jni$_.JString string) _valuePublishedByPlugin;

  PluginRegistry$Registrar registrarFor(jni$_.JString string) {
    return _registrarFor(string);
  }

  bool hasPlugin(jni$_.JString string) {
    return _hasPlugin(string);
  }

  jni$_.JObject? valuePublishedByPlugin(jni$_.JString string) {
    return _valuePublishedByPlugin(string);
  }
}

final class $PluginRegistry$NullableType
    extends jni$_.JObjType<PluginRegistry?> {
  @jni$_.internal
  const $PluginRegistry$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lio/flutter/plugin/common/PluginRegistry;';

  @jni$_.internal
  @core$_.override
  PluginRegistry? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : PluginRegistry.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PluginRegistry$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry$NullableType) &&
        other is $PluginRegistry$NullableType;
  }
}

final class $PluginRegistry$Type extends jni$_.JObjType<PluginRegistry> {
  @jni$_.internal
  const $PluginRegistry$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lio/flutter/plugin/common/PluginRegistry;';

  @jni$_.internal
  @core$_.override
  PluginRegistry fromReference(jni$_.JReference reference) =>
      PluginRegistry.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry?> get nullableType =>
      const $PluginRegistry$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PluginRegistry$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry$Type) &&
        other is $PluginRegistry$Type;
  }
}
