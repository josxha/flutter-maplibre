// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: document_ignores
// ignore_for_file: avoid_catches_without_on_clauses
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `io.flutter.plugin.common.PluginRegistry$ActivityResultListener`
class PluginRegistry$ActivityResultListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PluginRegistry$ActivityResultListener> $type;

  @jni$_.internal
  PluginRegistry$ActivityResultListener.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'io/flutter/plugin/common/PluginRegistry$ActivityResultListener',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $PluginRegistry$ActivityResultListener$NullableType();
  static const type = $PluginRegistry$ActivityResultListener$Type();
  static final _id_onActivityResult = _class.instanceMethodId(
    r'onActivityResult',
    r'(IILandroid/content/Intent;)Z',
  );

  static final _onActivityResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Int32, jni$_.Int32, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean onActivityResult(int i, int i1, android.content.Intent intent)`
  bool onActivityResult(int i, int i1, jni$_.JObject? intent) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _onActivityResult(
      reference.pointer,
      _id_onActivityResult as jni$_.JMethodIDPtr,
      i,
      i1,
      _$intent.pointer,
    ).boolean;
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PluginRegistry$ActivityResultListener> _$impls =
      {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onActivityResult(IILandroid/content/Intent;)Z') {
        final $r = _$impls[$p]!.onActivityResult(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![1]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![2]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.JBoolean($r).reference.toPointer();
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PluginRegistry$ActivityResultListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$ActivityResultListener',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry$ActivityResultListener.implement(
    $PluginRegistry$ActivityResultListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry$ActivityResultListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry$ActivityResultListener {
  factory $PluginRegistry$ActivityResultListener({
    required bool Function(int i, int i1, jni$_.JObject? intent)
    onActivityResult,
  }) = _$PluginRegistry$ActivityResultListener;

  bool onActivityResult(int i, int i1, jni$_.JObject? intent);
}

final class _$PluginRegistry$ActivityResultListener
    with $PluginRegistry$ActivityResultListener {
  _$PluginRegistry$ActivityResultListener({
    required bool Function(int i, int i1, jni$_.JObject? intent)
    onActivityResult,
  }) : _onActivityResult = onActivityResult;

  final bool Function(int i, int i1, jni$_.JObject? intent) _onActivityResult;

  bool onActivityResult(int i, int i1, jni$_.JObject? intent) {
    return _onActivityResult(i, i1, intent);
  }
}

final class $PluginRegistry$ActivityResultListener$NullableType
    extends jni$_.JObjType<PluginRegistry$ActivityResultListener?> {
  @jni$_.internal
  const $PluginRegistry$ActivityResultListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$ActivityResultListener? fromReference(
    jni$_.JReference reference,
  ) =>
      reference.isNull
          ? null
          : PluginRegistry$ActivityResultListener.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$ActivityResultListener?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($PluginRegistry$ActivityResultListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$ActivityResultListener$NullableType) &&
        other is $PluginRegistry$ActivityResultListener$NullableType;
  }
}

final class $PluginRegistry$ActivityResultListener$Type
    extends jni$_.JObjType<PluginRegistry$ActivityResultListener> {
  @jni$_.internal
  const $PluginRegistry$ActivityResultListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$ActivityResultListener fromReference(
    jni$_.JReference reference,
  ) => PluginRegistry$ActivityResultListener.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$ActivityResultListener?> get nullableType =>
      const $PluginRegistry$ActivityResultListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PluginRegistry$ActivityResultListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry$ActivityResultListener$Type) &&
        other is $PluginRegistry$ActivityResultListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$NewIntentListener`
class PluginRegistry$NewIntentListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PluginRegistry$NewIntentListener> $type;

  @jni$_.internal
  PluginRegistry$NewIntentListener.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'io/flutter/plugin/common/PluginRegistry$NewIntentListener',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PluginRegistry$NewIntentListener$NullableType();
  static const type = $PluginRegistry$NewIntentListener$Type();
  static final _id_onNewIntent = _class.instanceMethodId(
    r'onNewIntent',
    r'(Landroid/content/Intent;)Z',
  );

  static final _onNewIntent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean onNewIntent(android.content.Intent intent)`
  bool onNewIntent(jni$_.JObject intent) {
    final _$intent = intent.reference;
    return _onNewIntent(
      reference.pointer,
      _id_onNewIntent as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).boolean;
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PluginRegistry$NewIntentListener> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onNewIntent(Landroid/content/Intent;)Z') {
        final $r = _$impls[$p]!.onNewIntent(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.JBoolean($r).reference.toPointer();
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PluginRegistry$NewIntentListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$NewIntentListener',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry$NewIntentListener.implement(
    $PluginRegistry$NewIntentListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry$NewIntentListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry$NewIntentListener {
  factory $PluginRegistry$NewIntentListener({
    required bool Function(jni$_.JObject intent) onNewIntent,
  }) = _$PluginRegistry$NewIntentListener;

  bool onNewIntent(jni$_.JObject intent);
}

final class _$PluginRegistry$NewIntentListener
    with $PluginRegistry$NewIntentListener {
  _$PluginRegistry$NewIntentListener({
    required bool Function(jni$_.JObject intent) onNewIntent,
  }) : _onNewIntent = onNewIntent;

  final bool Function(jni$_.JObject intent) _onNewIntent;

  bool onNewIntent(jni$_.JObject intent) {
    return _onNewIntent(intent);
  }
}

final class $PluginRegistry$NewIntentListener$NullableType
    extends jni$_.JObjType<PluginRegistry$NewIntentListener?> {
  @jni$_.internal
  const $PluginRegistry$NewIntentListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$NewIntentListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$NewIntentListener? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PluginRegistry$NewIntentListener.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$NewIntentListener?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PluginRegistry$NewIntentListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$NewIntentListener$NullableType) &&
        other is $PluginRegistry$NewIntentListener$NullableType;
  }
}

final class $PluginRegistry$NewIntentListener$Type
    extends jni$_.JObjType<PluginRegistry$NewIntentListener> {
  @jni$_.internal
  const $PluginRegistry$NewIntentListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$NewIntentListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$NewIntentListener fromReference(jni$_.JReference reference) =>
      PluginRegistry$NewIntentListener.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$NewIntentListener?> get nullableType =>
      const $PluginRegistry$NewIntentListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PluginRegistry$NewIntentListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry$NewIntentListener$Type) &&
        other is $PluginRegistry$NewIntentListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener`
class PluginRegistry$RequestPermissionsResultListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PluginRegistry$RequestPermissionsResultListener> $type;

  @jni$_.internal
  PluginRegistry$RequestPermissionsResultListener.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'io/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $PluginRegistry$RequestPermissionsResultListener$NullableType();
  static const type = $PluginRegistry$RequestPermissionsResultListener$Type();
  static final _id_onRequestPermissionsResult = _class.instanceMethodId(
    r'onRequestPermissionsResult',
    r'(I[Ljava/lang/String;[I)Z',
  );

  static final _onRequestPermissionsResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)`
  bool onRequestPermissionsResult(
    int i,
    jni$_.JArray<jni$_.JString?> strings,
    jni$_.JIntArray is$,
  ) {
    final _$strings = strings.reference;
    final _$is$ = is$.reference;
    return _onRequestPermissionsResult(
      reference.pointer,
      _id_onRequestPermissionsResult as jni$_.JMethodIDPtr,
      i,
      _$strings.pointer,
      _$is$.pointer,
    ).boolean;
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PluginRegistry$RequestPermissionsResultListener>
  _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onRequestPermissionsResult(I[Ljava/lang/String;[I)Z') {
        final $r = _$impls[$p]!.onRequestPermissionsResult(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![1]!.as(
            const jni$_.JArrayType<jni$_.JString?>(jni$_.JStringNullableType()),
            releaseOriginal: true,
          ),
          $a![2]!.as(const jni$_.JIntArrayType(), releaseOriginal: true),
        );
        return jni$_.JBoolean($r).reference.toPointer();
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PluginRegistry$RequestPermissionsResultListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry$RequestPermissionsResultListener.implement(
    $PluginRegistry$RequestPermissionsResultListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry$RequestPermissionsResultListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry$RequestPermissionsResultListener {
  factory $PluginRegistry$RequestPermissionsResultListener({
    required bool Function(
      int i,
      jni$_.JArray<jni$_.JString?> strings,
      jni$_.JIntArray is$,
    )
    onRequestPermissionsResult,
  }) = _$PluginRegistry$RequestPermissionsResultListener;

  bool onRequestPermissionsResult(
    int i,
    jni$_.JArray<jni$_.JString?> strings,
    jni$_.JIntArray is$,
  );
}

final class _$PluginRegistry$RequestPermissionsResultListener
    with $PluginRegistry$RequestPermissionsResultListener {
  _$PluginRegistry$RequestPermissionsResultListener({
    required bool Function(
      int i,
      jni$_.JArray<jni$_.JString?> strings,
      jni$_.JIntArray is$,
    )
    onRequestPermissionsResult,
  }) : _onRequestPermissionsResult = onRequestPermissionsResult;

  final bool Function(
    int i,
    jni$_.JArray<jni$_.JString?> strings,
    jni$_.JIntArray is$,
  )
  _onRequestPermissionsResult;

  bool onRequestPermissionsResult(
    int i,
    jni$_.JArray<jni$_.JString?> strings,
    jni$_.JIntArray is$,
  ) {
    return _onRequestPermissionsResult(i, strings, is$);
  }
}

final class $PluginRegistry$RequestPermissionsResultListener$NullableType
    extends jni$_.JObjType<PluginRegistry$RequestPermissionsResultListener?> {
  @jni$_.internal
  const $PluginRegistry$RequestPermissionsResultListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$RequestPermissionsResultListener? fromReference(
    jni$_.JReference reference,
  ) =>
      reference.isNull
          ? null
          : PluginRegistry$RequestPermissionsResultListener.fromReference(
            reference,
          );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$RequestPermissionsResultListener?>
  get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($PluginRegistry$RequestPermissionsResultListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$RequestPermissionsResultListener$NullableType) &&
        other is $PluginRegistry$RequestPermissionsResultListener$NullableType;
  }
}

final class $PluginRegistry$RequestPermissionsResultListener$Type
    extends jni$_.JObjType<PluginRegistry$RequestPermissionsResultListener> {
  @jni$_.internal
  const $PluginRegistry$RequestPermissionsResultListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$RequestPermissionsResultListener fromReference(
    jni$_.JReference reference,
  ) => PluginRegistry$RequestPermissionsResultListener.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$RequestPermissionsResultListener?>
  get nullableType =>
      const $PluginRegistry$RequestPermissionsResultListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($PluginRegistry$RequestPermissionsResultListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$RequestPermissionsResultListener$Type) &&
        other is $PluginRegistry$RequestPermissionsResultListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener`
class PluginRegistry$UserLeaveHintListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PluginRegistry$UserLeaveHintListener> $type;

  @jni$_.internal
  PluginRegistry$UserLeaveHintListener.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'io/flutter/plugin/common/PluginRegistry$UserLeaveHintListener',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $PluginRegistry$UserLeaveHintListener$NullableType();
  static const type = $PluginRegistry$UserLeaveHintListener$Type();
  static final _id_onUserLeaveHint = _class.instanceMethodId(
    r'onUserLeaveHint',
    r'()V',
  );

  static final _onUserLeaveHint =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract void onUserLeaveHint()`
  void onUserLeaveHint() {
    _onUserLeaveHint(
      reference.pointer,
      _id_onUserLeaveHint as jni$_.JMethodIDPtr,
    ).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PluginRegistry$UserLeaveHintListener> _$impls =
      {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onUserLeaveHint()V') {
        _$impls[$p]!.onUserLeaveHint();
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PluginRegistry$UserLeaveHintListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener',
      $p,
      _$invokePointer,
      [if ($impl.onUserLeaveHint$async) r'onUserLeaveHint()V'],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry$UserLeaveHintListener.implement(
    $PluginRegistry$UserLeaveHintListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry$UserLeaveHintListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry$UserLeaveHintListener {
  factory $PluginRegistry$UserLeaveHintListener({
    required void Function() onUserLeaveHint,
    bool onUserLeaveHint$async,
  }) = _$PluginRegistry$UserLeaveHintListener;

  void onUserLeaveHint();
  bool get onUserLeaveHint$async => false;
}

final class _$PluginRegistry$UserLeaveHintListener
    with $PluginRegistry$UserLeaveHintListener {
  _$PluginRegistry$UserLeaveHintListener({
    required void Function() onUserLeaveHint,
    this.onUserLeaveHint$async = false,
  }) : _onUserLeaveHint = onUserLeaveHint;

  final void Function() _onUserLeaveHint;
  final bool onUserLeaveHint$async;

  void onUserLeaveHint() {
    return _onUserLeaveHint();
  }
}

final class $PluginRegistry$UserLeaveHintListener$NullableType
    extends jni$_.JObjType<PluginRegistry$UserLeaveHintListener?> {
  @jni$_.internal
  const $PluginRegistry$UserLeaveHintListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$UserLeaveHintListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$UserLeaveHintListener? fromReference(
    jni$_.JReference reference,
  ) =>
      reference.isNull
          ? null
          : PluginRegistry$UserLeaveHintListener.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$UserLeaveHintListener?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($PluginRegistry$UserLeaveHintListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$UserLeaveHintListener$NullableType) &&
        other is $PluginRegistry$UserLeaveHintListener$NullableType;
  }
}

final class $PluginRegistry$UserLeaveHintListener$Type
    extends jni$_.JObjType<PluginRegistry$UserLeaveHintListener> {
  @jni$_.internal
  const $PluginRegistry$UserLeaveHintListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$UserLeaveHintListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$UserLeaveHintListener fromReference(
    jni$_.JReference reference,
  ) => PluginRegistry$UserLeaveHintListener.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$UserLeaveHintListener?> get nullableType =>
      const $PluginRegistry$UserLeaveHintListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PluginRegistry$UserLeaveHintListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry$UserLeaveHintListener$Type) &&
        other is $PluginRegistry$UserLeaveHintListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener`
class PluginRegistry$WindowFocusChangedListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PluginRegistry$WindowFocusChangedListener> $type;

  @jni$_.internal
  PluginRegistry$WindowFocusChangedListener.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'io/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $PluginRegistry$WindowFocusChangedListener$NullableType();
  static const type = $PluginRegistry$WindowFocusChangedListener$Type();
  static final _id_onWindowFocusChanged = _class.instanceMethodId(
    r'onWindowFocusChanged',
    r'(Z)V',
  );

  static final _onWindowFocusChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public abstract void onWindowFocusChanged(boolean z)`
  void onWindowFocusChanged(bool z) {
    _onWindowFocusChanged(
      reference.pointer,
      _id_onWindowFocusChanged as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PluginRegistry$WindowFocusChangedListener>
  _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onWindowFocusChanged(Z)V') {
        _$impls[$p]!.onWindowFocusChanged(
          $a![0]!
              .as(const jni$_.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PluginRegistry$WindowFocusChangedListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener',
      $p,
      _$invokePointer,
      [if ($impl.onWindowFocusChanged$async) r'onWindowFocusChanged(Z)V'],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry$WindowFocusChangedListener.implement(
    $PluginRegistry$WindowFocusChangedListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry$WindowFocusChangedListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry$WindowFocusChangedListener {
  factory $PluginRegistry$WindowFocusChangedListener({
    required void Function(bool z) onWindowFocusChanged,
    bool onWindowFocusChanged$async,
  }) = _$PluginRegistry$WindowFocusChangedListener;

  void onWindowFocusChanged(bool z);
  bool get onWindowFocusChanged$async => false;
}

final class _$PluginRegistry$WindowFocusChangedListener
    with $PluginRegistry$WindowFocusChangedListener {
  _$PluginRegistry$WindowFocusChangedListener({
    required void Function(bool z) onWindowFocusChanged,
    this.onWindowFocusChanged$async = false,
  }) : _onWindowFocusChanged = onWindowFocusChanged;

  final void Function(bool z) _onWindowFocusChanged;
  final bool onWindowFocusChanged$async;

  void onWindowFocusChanged(bool z) {
    return _onWindowFocusChanged(z);
  }
}

final class $PluginRegistry$WindowFocusChangedListener$NullableType
    extends jni$_.JObjType<PluginRegistry$WindowFocusChangedListener?> {
  @jni$_.internal
  const $PluginRegistry$WindowFocusChangedListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$WindowFocusChangedListener? fromReference(
    jni$_.JReference reference,
  ) =>
      reference.isNull
          ? null
          : PluginRegistry$WindowFocusChangedListener.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$WindowFocusChangedListener?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($PluginRegistry$WindowFocusChangedListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$WindowFocusChangedListener$NullableType) &&
        other is $PluginRegistry$WindowFocusChangedListener$NullableType;
  }
}

final class $PluginRegistry$WindowFocusChangedListener$Type
    extends jni$_.JObjType<PluginRegistry$WindowFocusChangedListener> {
  @jni$_.internal
  const $PluginRegistry$WindowFocusChangedListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener;';

  @jni$_.internal
  @core$_.override
  PluginRegistry$WindowFocusChangedListener fromReference(
    jni$_.JReference reference,
  ) => PluginRegistry$WindowFocusChangedListener.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry$WindowFocusChangedListener?> get nullableType =>
      const $PluginRegistry$WindowFocusChangedListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($PluginRegistry$WindowFocusChangedListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry$WindowFocusChangedListener$Type) &&
        other is $PluginRegistry$WindowFocusChangedListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry`
class PluginRegistry extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PluginRegistry> $type;

  @jni$_.internal
  PluginRegistry.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'io/flutter/plugin/common/PluginRegistry',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PluginRegistry$NullableType();
  static const type = $PluginRegistry$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PluginRegistry> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(0, descriptor.address, args.address),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<
      jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)
    >
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PluginRegistry $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry.implement($PluginRegistry $impl) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry.fromReference($i.implementReference());
  }
}

abstract base mixin class $PluginRegistry {
  factory $PluginRegistry() = _$PluginRegistry;
}

final class _$PluginRegistry with $PluginRegistry {
  _$PluginRegistry();
}

final class $PluginRegistry$NullableType
    extends jni$_.JObjType<PluginRegistry?> {
  @jni$_.internal
  const $PluginRegistry$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lio/flutter/plugin/common/PluginRegistry;';

  @jni$_.internal
  @core$_.override
  PluginRegistry? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : PluginRegistry.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PluginRegistry$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry$NullableType) &&
        other is $PluginRegistry$NullableType;
  }
}

final class $PluginRegistry$Type extends jni$_.JObjType<PluginRegistry> {
  @jni$_.internal
  const $PluginRegistry$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lio/flutter/plugin/common/PluginRegistry;';

  @jni$_.internal
  @core$_.override
  PluginRegistry fromReference(jni$_.JReference reference) =>
      PluginRegistry.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PluginRegistry?> get nullableType =>
      const $PluginRegistry$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PluginRegistry$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry$Type) &&
        other is $PluginRegistry$Type;
  }
}
