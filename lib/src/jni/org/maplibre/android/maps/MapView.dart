// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'MapLibreMapOptions.dart' as maplibremapoptions_;

import 'OnMapReadyCallback.dart' as onmapreadycallback_;

import 'renderer/MapRenderer.dart' as maprenderer_;

import 'widgets/CompassView.dart' as compassview_;

/// from: `org.maplibre.android.maps.MapView$OnCameraDidChangeListener`
class MapView_OnCameraDidChangeListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnCameraDidChangeListener> $type = type;

  MapView_OnCameraDidChangeListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnCameraDidChangeListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnCameraDidChangeListenerType();
  static final _id_onCameraDidChange = _class.instanceMethodId(
    r'onCameraDidChange',
    r'(Z)V',
  );

  static final _onCameraDidChange = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public abstract void onCameraDidChange(boolean z)`
  void onCameraDidChange(
    bool z,
  ) {
    _onCameraDidChange(reference.pointer,
            _id_onCameraDidChange as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }
}

final class $MapView_OnCameraDidChangeListenerType
    extends jni.JObjType<MapView_OnCameraDidChangeListener> {
  const $MapView_OnCameraDidChangeListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnCameraDidChangeListener;';

  @override
  MapView_OnCameraDidChangeListener fromReference(jni.JReference reference) =>
      MapView_OnCameraDidChangeListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnCameraDidChangeListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnCameraDidChangeListenerType) &&
        other is $MapView_OnCameraDidChangeListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnCameraIsChangingListener`
class MapView_OnCameraIsChangingListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnCameraIsChangingListener> $type = type;

  MapView_OnCameraIsChangingListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnCameraIsChangingListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnCameraIsChangingListenerType();
  static final _id_onCameraIsChanging = _class.instanceMethodId(
    r'onCameraIsChanging',
    r'()V',
  );

  static final _onCameraIsChanging = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onCameraIsChanging()`
  void onCameraIsChanging() {
    _onCameraIsChanging(
            reference.pointer, _id_onCameraIsChanging as jni.JMethodIDPtr)
        .check();
  }
}

final class $MapView_OnCameraIsChangingListenerType
    extends jni.JObjType<MapView_OnCameraIsChangingListener> {
  const $MapView_OnCameraIsChangingListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnCameraIsChangingListener;';

  @override
  MapView_OnCameraIsChangingListener fromReference(jni.JReference reference) =>
      MapView_OnCameraIsChangingListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnCameraIsChangingListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnCameraIsChangingListenerType) &&
        other is $MapView_OnCameraIsChangingListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnCameraWillChangeListener`
class MapView_OnCameraWillChangeListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnCameraWillChangeListener> $type = type;

  MapView_OnCameraWillChangeListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnCameraWillChangeListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnCameraWillChangeListenerType();
  static final _id_onCameraWillChange = _class.instanceMethodId(
    r'onCameraWillChange',
    r'(Z)V',
  );

  static final _onCameraWillChange = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public abstract void onCameraWillChange(boolean z)`
  void onCameraWillChange(
    bool z,
  ) {
    _onCameraWillChange(reference.pointer,
            _id_onCameraWillChange as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }
}

final class $MapView_OnCameraWillChangeListenerType
    extends jni.JObjType<MapView_OnCameraWillChangeListener> {
  const $MapView_OnCameraWillChangeListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnCameraWillChangeListener;';

  @override
  MapView_OnCameraWillChangeListener fromReference(jni.JReference reference) =>
      MapView_OnCameraWillChangeListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnCameraWillChangeListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnCameraWillChangeListenerType) &&
        other is $MapView_OnCameraWillChangeListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnCanRemoveUnusedStyleImageListener`
class MapView_OnCanRemoveUnusedStyleImageListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnCanRemoveUnusedStyleImageListener> $type =
      type;

  MapView_OnCanRemoveUnusedStyleImageListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnCanRemoveUnusedStyleImageListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnCanRemoveUnusedStyleImageListenerType();
  static final _id_onCanRemoveUnusedStyleImage = _class.instanceMethodId(
    r'onCanRemoveUnusedStyleImage',
    r'(Ljava/lang/String;)Z',
  );

  static final _onCanRemoveUnusedStyleImage = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract boolean onCanRemoveUnusedStyleImage(java.lang.String string)`
  bool onCanRemoveUnusedStyleImage(
    jni.JString string,
  ) {
    return _onCanRemoveUnusedStyleImage(
            reference.pointer,
            _id_onCanRemoveUnusedStyleImage as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }
}

final class $MapView_OnCanRemoveUnusedStyleImageListenerType
    extends jni.JObjType<MapView_OnCanRemoveUnusedStyleImageListener> {
  const $MapView_OnCanRemoveUnusedStyleImageListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnCanRemoveUnusedStyleImageListener;';

  @override
  MapView_OnCanRemoveUnusedStyleImageListener fromReference(
          jni.JReference reference) =>
      MapView_OnCanRemoveUnusedStyleImageListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($MapView_OnCanRemoveUnusedStyleImageListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MapView_OnCanRemoveUnusedStyleImageListenerType) &&
        other is $MapView_OnCanRemoveUnusedStyleImageListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnDidBecomeIdleListener`
class MapView_OnDidBecomeIdleListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnDidBecomeIdleListener> $type = type;

  MapView_OnDidBecomeIdleListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnDidBecomeIdleListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnDidBecomeIdleListenerType();
  static final _id_onDidBecomeIdle = _class.instanceMethodId(
    r'onDidBecomeIdle',
    r'()V',
  );

  static final _onDidBecomeIdle = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onDidBecomeIdle()`
  void onDidBecomeIdle() {
    _onDidBecomeIdle(reference.pointer, _id_onDidBecomeIdle as jni.JMethodIDPtr)
        .check();
  }
}

final class $MapView_OnDidBecomeIdleListenerType
    extends jni.JObjType<MapView_OnDidBecomeIdleListener> {
  const $MapView_OnDidBecomeIdleListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnDidBecomeIdleListener;';

  @override
  MapView_OnDidBecomeIdleListener fromReference(jni.JReference reference) =>
      MapView_OnDidBecomeIdleListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnDidBecomeIdleListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnDidBecomeIdleListenerType) &&
        other is $MapView_OnDidBecomeIdleListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnDidFailLoadingMapListener`
class MapView_OnDidFailLoadingMapListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnDidFailLoadingMapListener> $type = type;

  MapView_OnDidFailLoadingMapListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnDidFailLoadingMapListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnDidFailLoadingMapListenerType();
  static final _id_onDidFailLoadingMap = _class.instanceMethodId(
    r'onDidFailLoadingMap',
    r'(Ljava/lang/String;)V',
  );

  static final _onDidFailLoadingMap = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onDidFailLoadingMap(java.lang.String string)`
  void onDidFailLoadingMap(
    jni.JString string,
  ) {
    _onDidFailLoadingMap(
            reference.pointer,
            _id_onDidFailLoadingMap as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }
}

final class $MapView_OnDidFailLoadingMapListenerType
    extends jni.JObjType<MapView_OnDidFailLoadingMapListener> {
  const $MapView_OnDidFailLoadingMapListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnDidFailLoadingMapListener;';

  @override
  MapView_OnDidFailLoadingMapListener fromReference(jni.JReference reference) =>
      MapView_OnDidFailLoadingMapListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnDidFailLoadingMapListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnDidFailLoadingMapListenerType) &&
        other is $MapView_OnDidFailLoadingMapListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnDidFinishLoadingMapListener`
class MapView_OnDidFinishLoadingMapListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnDidFinishLoadingMapListener> $type = type;

  MapView_OnDidFinishLoadingMapListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnDidFinishLoadingMapListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnDidFinishLoadingMapListenerType();
  static final _id_onDidFinishLoadingMap = _class.instanceMethodId(
    r'onDidFinishLoadingMap',
    r'()V',
  );

  static final _onDidFinishLoadingMap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onDidFinishLoadingMap()`
  void onDidFinishLoadingMap() {
    _onDidFinishLoadingMap(
            reference.pointer, _id_onDidFinishLoadingMap as jni.JMethodIDPtr)
        .check();
  }
}

final class $MapView_OnDidFinishLoadingMapListenerType
    extends jni.JObjType<MapView_OnDidFinishLoadingMapListener> {
  const $MapView_OnDidFinishLoadingMapListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnDidFinishLoadingMapListener;';

  @override
  MapView_OnDidFinishLoadingMapListener fromReference(
          jni.JReference reference) =>
      MapView_OnDidFinishLoadingMapListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnDidFinishLoadingMapListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnDidFinishLoadingMapListenerType) &&
        other is $MapView_OnDidFinishLoadingMapListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnDidFinishLoadingStyleListener`
class MapView_OnDidFinishLoadingStyleListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnDidFinishLoadingStyleListener> $type = type;

  MapView_OnDidFinishLoadingStyleListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnDidFinishLoadingStyleListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnDidFinishLoadingStyleListenerType();
  static final _id_onDidFinishLoadingStyle = _class.instanceMethodId(
    r'onDidFinishLoadingStyle',
    r'()V',
  );

  static final _onDidFinishLoadingStyle = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onDidFinishLoadingStyle()`
  void onDidFinishLoadingStyle() {
    _onDidFinishLoadingStyle(
            reference.pointer, _id_onDidFinishLoadingStyle as jni.JMethodIDPtr)
        .check();
  }
}

final class $MapView_OnDidFinishLoadingStyleListenerType
    extends jni.JObjType<MapView_OnDidFinishLoadingStyleListener> {
  const $MapView_OnDidFinishLoadingStyleListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnDidFinishLoadingStyleListener;';

  @override
  MapView_OnDidFinishLoadingStyleListener fromReference(
          jni.JReference reference) =>
      MapView_OnDidFinishLoadingStyleListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnDidFinishLoadingStyleListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MapView_OnDidFinishLoadingStyleListenerType) &&
        other is $MapView_OnDidFinishLoadingStyleListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnDidFinishRenderingFrameListener`
class MapView_OnDidFinishRenderingFrameListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnDidFinishRenderingFrameListener> $type =
      type;

  MapView_OnDidFinishRenderingFrameListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnDidFinishRenderingFrameListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnDidFinishRenderingFrameListenerType();
  static final _id_onDidFinishRenderingFrame = _class.instanceMethodId(
    r'onDidFinishRenderingFrame',
    r'(ZDD)V',
  );

  static final _onDidFinishRenderingFrame = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Double, ffi.Double)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, double, double)>();

  /// from: `public abstract void onDidFinishRenderingFrame(boolean z, double d, double d1)`
  void onDidFinishRenderingFrame(
    bool z,
    double d,
    double d1,
  ) {
    _onDidFinishRenderingFrame(reference.pointer,
            _id_onDidFinishRenderingFrame as jni.JMethodIDPtr, z ? 1 : 0, d, d1)
        .check();
  }
}

final class $MapView_OnDidFinishRenderingFrameListenerType
    extends jni.JObjType<MapView_OnDidFinishRenderingFrameListener> {
  const $MapView_OnDidFinishRenderingFrameListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnDidFinishRenderingFrameListener;';

  @override
  MapView_OnDidFinishRenderingFrameListener fromReference(
          jni.JReference reference) =>
      MapView_OnDidFinishRenderingFrameListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnDidFinishRenderingFrameListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MapView_OnDidFinishRenderingFrameListenerType) &&
        other is $MapView_OnDidFinishRenderingFrameListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnDidFinishRenderingMapListener`
class MapView_OnDidFinishRenderingMapListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnDidFinishRenderingMapListener> $type = type;

  MapView_OnDidFinishRenderingMapListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnDidFinishRenderingMapListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnDidFinishRenderingMapListenerType();
  static final _id_onDidFinishRenderingMap = _class.instanceMethodId(
    r'onDidFinishRenderingMap',
    r'(Z)V',
  );

  static final _onDidFinishRenderingMap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public abstract void onDidFinishRenderingMap(boolean z)`
  void onDidFinishRenderingMap(
    bool z,
  ) {
    _onDidFinishRenderingMap(reference.pointer,
            _id_onDidFinishRenderingMap as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }
}

final class $MapView_OnDidFinishRenderingMapListenerType
    extends jni.JObjType<MapView_OnDidFinishRenderingMapListener> {
  const $MapView_OnDidFinishRenderingMapListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnDidFinishRenderingMapListener;';

  @override
  MapView_OnDidFinishRenderingMapListener fromReference(
          jni.JReference reference) =>
      MapView_OnDidFinishRenderingMapListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnDidFinishRenderingMapListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MapView_OnDidFinishRenderingMapListenerType) &&
        other is $MapView_OnDidFinishRenderingMapListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnGlyphsErrorListener`
class MapView_OnGlyphsErrorListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnGlyphsErrorListener> $type = type;

  MapView_OnGlyphsErrorListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnGlyphsErrorListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnGlyphsErrorListenerType();
  static final _id_onGlyphsError = _class.instanceMethodId(
    r'onGlyphsError',
    r'([Ljava/lang/String;II)V',
  );

  static final _onGlyphsError = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: `public abstract void onGlyphsError(java.lang.String[] strings, int i, int i1)`
  void onGlyphsError(
    jni.JArray<jni.JString> strings,
    int i,
    int i1,
  ) {
    _onGlyphsError(reference.pointer, _id_onGlyphsError as jni.JMethodIDPtr,
            strings.reference.pointer, i, i1)
        .check();
  }
}

final class $MapView_OnGlyphsErrorListenerType
    extends jni.JObjType<MapView_OnGlyphsErrorListener> {
  const $MapView_OnGlyphsErrorListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnGlyphsErrorListener;';

  @override
  MapView_OnGlyphsErrorListener fromReference(jni.JReference reference) =>
      MapView_OnGlyphsErrorListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnGlyphsErrorListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnGlyphsErrorListenerType) &&
        other is $MapView_OnGlyphsErrorListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnGlyphsLoadedListener`
class MapView_OnGlyphsLoadedListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnGlyphsLoadedListener> $type = type;

  MapView_OnGlyphsLoadedListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnGlyphsLoadedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnGlyphsLoadedListenerType();
  static final _id_onGlyphsLoaded = _class.instanceMethodId(
    r'onGlyphsLoaded',
    r'([Ljava/lang/String;II)V',
  );

  static final _onGlyphsLoaded = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: `public abstract void onGlyphsLoaded(java.lang.String[] strings, int i, int i1)`
  void onGlyphsLoaded(
    jni.JArray<jni.JString> strings,
    int i,
    int i1,
  ) {
    _onGlyphsLoaded(reference.pointer, _id_onGlyphsLoaded as jni.JMethodIDPtr,
            strings.reference.pointer, i, i1)
        .check();
  }
}

final class $MapView_OnGlyphsLoadedListenerType
    extends jni.JObjType<MapView_OnGlyphsLoadedListener> {
  const $MapView_OnGlyphsLoadedListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnGlyphsLoadedListener;';

  @override
  MapView_OnGlyphsLoadedListener fromReference(jni.JReference reference) =>
      MapView_OnGlyphsLoadedListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnGlyphsLoadedListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnGlyphsLoadedListenerType) &&
        other is $MapView_OnGlyphsLoadedListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnGlyphsRequestedListener`
class MapView_OnGlyphsRequestedListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnGlyphsRequestedListener> $type = type;

  MapView_OnGlyphsRequestedListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnGlyphsRequestedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnGlyphsRequestedListenerType();
  static final _id_onGlyphsRequested = _class.instanceMethodId(
    r'onGlyphsRequested',
    r'([Ljava/lang/String;II)V',
  );

  static final _onGlyphsRequested = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: `public abstract void onGlyphsRequested(java.lang.String[] strings, int i, int i1)`
  void onGlyphsRequested(
    jni.JArray<jni.JString> strings,
    int i,
    int i1,
  ) {
    _onGlyphsRequested(
            reference.pointer,
            _id_onGlyphsRequested as jni.JMethodIDPtr,
            strings.reference.pointer,
            i,
            i1)
        .check();
  }
}

final class $MapView_OnGlyphsRequestedListenerType
    extends jni.JObjType<MapView_OnGlyphsRequestedListener> {
  const $MapView_OnGlyphsRequestedListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnGlyphsRequestedListener;';

  @override
  MapView_OnGlyphsRequestedListener fromReference(jni.JReference reference) =>
      MapView_OnGlyphsRequestedListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnGlyphsRequestedListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnGlyphsRequestedListenerType) &&
        other is $MapView_OnGlyphsRequestedListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnPostCompileShaderListener`
class MapView_OnPostCompileShaderListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnPostCompileShaderListener> $type = type;

  MapView_OnPostCompileShaderListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnPostCompileShaderListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnPostCompileShaderListenerType();
  static final _id_onPostCompileShader = _class.instanceMethodId(
    r'onPostCompileShader',
    r'(IILjava/lang/String;)V',
  );

  static final _onPostCompileShader = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, int, ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onPostCompileShader(int i, int i1, java.lang.String string)`
  void onPostCompileShader(
    int i,
    int i1,
    jni.JString string,
  ) {
    _onPostCompileShader(
            reference.pointer,
            _id_onPostCompileShader as jni.JMethodIDPtr,
            i,
            i1,
            string.reference.pointer)
        .check();
  }
}

final class $MapView_OnPostCompileShaderListenerType
    extends jni.JObjType<MapView_OnPostCompileShaderListener> {
  const $MapView_OnPostCompileShaderListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnPostCompileShaderListener;';

  @override
  MapView_OnPostCompileShaderListener fromReference(jni.JReference reference) =>
      MapView_OnPostCompileShaderListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnPostCompileShaderListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnPostCompileShaderListenerType) &&
        other is $MapView_OnPostCompileShaderListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnPreCompileShaderListener`
class MapView_OnPreCompileShaderListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnPreCompileShaderListener> $type = type;

  MapView_OnPreCompileShaderListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnPreCompileShaderListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnPreCompileShaderListenerType();
  static final _id_onPreCompileShader = _class.instanceMethodId(
    r'onPreCompileShader',
    r'(IILjava/lang/String;)V',
  );

  static final _onPreCompileShader = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, int, ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onPreCompileShader(int i, int i1, java.lang.String string)`
  void onPreCompileShader(
    int i,
    int i1,
    jni.JString string,
  ) {
    _onPreCompileShader(
            reference.pointer,
            _id_onPreCompileShader as jni.JMethodIDPtr,
            i,
            i1,
            string.reference.pointer)
        .check();
  }
}

final class $MapView_OnPreCompileShaderListenerType
    extends jni.JObjType<MapView_OnPreCompileShaderListener> {
  const $MapView_OnPreCompileShaderListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnPreCompileShaderListener;';

  @override
  MapView_OnPreCompileShaderListener fromReference(jni.JReference reference) =>
      MapView_OnPreCompileShaderListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnPreCompileShaderListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnPreCompileShaderListenerType) &&
        other is $MapView_OnPreCompileShaderListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnShaderCompileFailedListener`
class MapView_OnShaderCompileFailedListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnShaderCompileFailedListener> $type = type;

  MapView_OnShaderCompileFailedListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnShaderCompileFailedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnShaderCompileFailedListenerType();
  static final _id_onShaderCompileFailed = _class.instanceMethodId(
    r'onShaderCompileFailed',
    r'(IILjava/lang/String;)V',
  );

  static final _onShaderCompileFailed = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, int, ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onShaderCompileFailed(int i, int i1, java.lang.String string)`
  void onShaderCompileFailed(
    int i,
    int i1,
    jni.JString string,
  ) {
    _onShaderCompileFailed(
            reference.pointer,
            _id_onShaderCompileFailed as jni.JMethodIDPtr,
            i,
            i1,
            string.reference.pointer)
        .check();
  }
}

final class $MapView_OnShaderCompileFailedListenerType
    extends jni.JObjType<MapView_OnShaderCompileFailedListener> {
  const $MapView_OnShaderCompileFailedListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnShaderCompileFailedListener;';

  @override
  MapView_OnShaderCompileFailedListener fromReference(
          jni.JReference reference) =>
      MapView_OnShaderCompileFailedListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnShaderCompileFailedListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnShaderCompileFailedListenerType) &&
        other is $MapView_OnShaderCompileFailedListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnSourceChangedListener`
class MapView_OnSourceChangedListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnSourceChangedListener> $type = type;

  MapView_OnSourceChangedListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnSourceChangedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnSourceChangedListenerType();
  static final _id_onSourceChangedListener = _class.instanceMethodId(
    r'onSourceChangedListener',
    r'(Ljava/lang/String;)V',
  );

  static final _onSourceChangedListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onSourceChangedListener(java.lang.String string)`
  void onSourceChangedListener(
    jni.JString string,
  ) {
    _onSourceChangedListener(
            reference.pointer,
            _id_onSourceChangedListener as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }
}

final class $MapView_OnSourceChangedListenerType
    extends jni.JObjType<MapView_OnSourceChangedListener> {
  const $MapView_OnSourceChangedListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnSourceChangedListener;';

  @override
  MapView_OnSourceChangedListener fromReference(jni.JReference reference) =>
      MapView_OnSourceChangedListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnSourceChangedListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnSourceChangedListenerType) &&
        other is $MapView_OnSourceChangedListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnSpriteErrorListener`
class MapView_OnSpriteErrorListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnSpriteErrorListener> $type = type;

  MapView_OnSpriteErrorListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnSpriteErrorListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnSpriteErrorListenerType();
  static final _id_onSpriteError = _class.instanceMethodId(
    r'onSpriteError',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _onSpriteError = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onSpriteError(java.lang.String string, java.lang.String string1)`
  void onSpriteError(
    jni.JString string,
    jni.JString string1,
  ) {
    _onSpriteError(reference.pointer, _id_onSpriteError as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }
}

final class $MapView_OnSpriteErrorListenerType
    extends jni.JObjType<MapView_OnSpriteErrorListener> {
  const $MapView_OnSpriteErrorListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnSpriteErrorListener;';

  @override
  MapView_OnSpriteErrorListener fromReference(jni.JReference reference) =>
      MapView_OnSpriteErrorListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnSpriteErrorListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnSpriteErrorListenerType) &&
        other is $MapView_OnSpriteErrorListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnSpriteLoadedListener`
class MapView_OnSpriteLoadedListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnSpriteLoadedListener> $type = type;

  MapView_OnSpriteLoadedListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnSpriteLoadedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnSpriteLoadedListenerType();
  static final _id_onSpriteLoaded = _class.instanceMethodId(
    r'onSpriteLoaded',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _onSpriteLoaded = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onSpriteLoaded(java.lang.String string, java.lang.String string1)`
  void onSpriteLoaded(
    jni.JString string,
    jni.JString string1,
  ) {
    _onSpriteLoaded(reference.pointer, _id_onSpriteLoaded as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }
}

final class $MapView_OnSpriteLoadedListenerType
    extends jni.JObjType<MapView_OnSpriteLoadedListener> {
  const $MapView_OnSpriteLoadedListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnSpriteLoadedListener;';

  @override
  MapView_OnSpriteLoadedListener fromReference(jni.JReference reference) =>
      MapView_OnSpriteLoadedListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnSpriteLoadedListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnSpriteLoadedListenerType) &&
        other is $MapView_OnSpriteLoadedListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnSpriteRequestedListener`
class MapView_OnSpriteRequestedListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnSpriteRequestedListener> $type = type;

  MapView_OnSpriteRequestedListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnSpriteRequestedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnSpriteRequestedListenerType();
  static final _id_onSpriteRequested = _class.instanceMethodId(
    r'onSpriteRequested',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _onSpriteRequested = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onSpriteRequested(java.lang.String string, java.lang.String string1)`
  void onSpriteRequested(
    jni.JString string,
    jni.JString string1,
  ) {
    _onSpriteRequested(
            reference.pointer,
            _id_onSpriteRequested as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .check();
  }
}

final class $MapView_OnSpriteRequestedListenerType
    extends jni.JObjType<MapView_OnSpriteRequestedListener> {
  const $MapView_OnSpriteRequestedListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnSpriteRequestedListener;';

  @override
  MapView_OnSpriteRequestedListener fromReference(jni.JReference reference) =>
      MapView_OnSpriteRequestedListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnSpriteRequestedListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnSpriteRequestedListenerType) &&
        other is $MapView_OnSpriteRequestedListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnStyleImageMissingListener`
class MapView_OnStyleImageMissingListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnStyleImageMissingListener> $type = type;

  MapView_OnStyleImageMissingListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnStyleImageMissingListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnStyleImageMissingListenerType();
  static final _id_onStyleImageMissing = _class.instanceMethodId(
    r'onStyleImageMissing',
    r'(Ljava/lang/String;)V',
  );

  static final _onStyleImageMissing = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onStyleImageMissing(java.lang.String string)`
  void onStyleImageMissing(
    jni.JString string,
  ) {
    _onStyleImageMissing(
            reference.pointer,
            _id_onStyleImageMissing as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }
}

final class $MapView_OnStyleImageMissingListenerType
    extends jni.JObjType<MapView_OnStyleImageMissingListener> {
  const $MapView_OnStyleImageMissingListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnStyleImageMissingListener;';

  @override
  MapView_OnStyleImageMissingListener fromReference(jni.JReference reference) =>
      MapView_OnStyleImageMissingListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnStyleImageMissingListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnStyleImageMissingListenerType) &&
        other is $MapView_OnStyleImageMissingListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnTileActionListener`
class MapView_OnTileActionListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnTileActionListener> $type = type;

  MapView_OnTileActionListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnTileActionListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnTileActionListenerType();
  static final _id_onTileAction = _class.instanceMethodId(
    r'onTileAction',
    r'(Lorg/maplibre/android/tile/TileOperation;IIIIILjava/lang/String;)V',
  );

  static final _onTileAction = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onTileAction(org.maplibre.android.tile.TileOperation tileOperation, int i, int i1, int i2, int i3, int i4, java.lang.String string)`
  void onTileAction(
    jni.JObject tileOperation,
    int i,
    int i1,
    int i2,
    int i3,
    int i4,
    jni.JString string,
  ) {
    _onTileAction(
            reference.pointer,
            _id_onTileAction as jni.JMethodIDPtr,
            tileOperation.reference.pointer,
            i,
            i1,
            i2,
            i3,
            i4,
            string.reference.pointer)
        .check();
  }
}

final class $MapView_OnTileActionListenerType
    extends jni.JObjType<MapView_OnTileActionListener> {
  const $MapView_OnTileActionListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnTileActionListener;';

  @override
  MapView_OnTileActionListener fromReference(jni.JReference reference) =>
      MapView_OnTileActionListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnTileActionListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnTileActionListenerType) &&
        other is $MapView_OnTileActionListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnWillStartLoadingMapListener`
class MapView_OnWillStartLoadingMapListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnWillStartLoadingMapListener> $type = type;

  MapView_OnWillStartLoadingMapListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnWillStartLoadingMapListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnWillStartLoadingMapListenerType();
  static final _id_onWillStartLoadingMap = _class.instanceMethodId(
    r'onWillStartLoadingMap',
    r'()V',
  );

  static final _onWillStartLoadingMap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onWillStartLoadingMap()`
  void onWillStartLoadingMap() {
    _onWillStartLoadingMap(
            reference.pointer, _id_onWillStartLoadingMap as jni.JMethodIDPtr)
        .check();
  }
}

final class $MapView_OnWillStartLoadingMapListenerType
    extends jni.JObjType<MapView_OnWillStartLoadingMapListener> {
  const $MapView_OnWillStartLoadingMapListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnWillStartLoadingMapListener;';

  @override
  MapView_OnWillStartLoadingMapListener fromReference(
          jni.JReference reference) =>
      MapView_OnWillStartLoadingMapListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnWillStartLoadingMapListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnWillStartLoadingMapListenerType) &&
        other is $MapView_OnWillStartLoadingMapListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnWillStartRenderingFrameListener`
class MapView_OnWillStartRenderingFrameListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnWillStartRenderingFrameListener> $type =
      type;

  MapView_OnWillStartRenderingFrameListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnWillStartRenderingFrameListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnWillStartRenderingFrameListenerType();
  static final _id_onWillStartRenderingFrame = _class.instanceMethodId(
    r'onWillStartRenderingFrame',
    r'()V',
  );

  static final _onWillStartRenderingFrame = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onWillStartRenderingFrame()`
  void onWillStartRenderingFrame() {
    _onWillStartRenderingFrame(reference.pointer,
            _id_onWillStartRenderingFrame as jni.JMethodIDPtr)
        .check();
  }
}

final class $MapView_OnWillStartRenderingFrameListenerType
    extends jni.JObjType<MapView_OnWillStartRenderingFrameListener> {
  const $MapView_OnWillStartRenderingFrameListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnWillStartRenderingFrameListener;';

  @override
  MapView_OnWillStartRenderingFrameListener fromReference(
          jni.JReference reference) =>
      MapView_OnWillStartRenderingFrameListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnWillStartRenderingFrameListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MapView_OnWillStartRenderingFrameListenerType) &&
        other is $MapView_OnWillStartRenderingFrameListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnWillStartRenderingMapListener`
class MapView_OnWillStartRenderingMapListener extends jni.JObject {
  @override
  late final jni.JObjType<MapView_OnWillStartRenderingMapListener> $type = type;

  MapView_OnWillStartRenderingMapListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnWillStartRenderingMapListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnWillStartRenderingMapListenerType();
  static final _id_onWillStartRenderingMap = _class.instanceMethodId(
    r'onWillStartRenderingMap',
    r'()V',
  );

  static final _onWillStartRenderingMap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onWillStartRenderingMap()`
  void onWillStartRenderingMap() {
    _onWillStartRenderingMap(
            reference.pointer, _id_onWillStartRenderingMap as jni.JMethodIDPtr)
        .check();
  }
}

final class $MapView_OnWillStartRenderingMapListenerType
    extends jni.JObjType<MapView_OnWillStartRenderingMapListener> {
  const $MapView_OnWillStartRenderingMapListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnWillStartRenderingMapListener;';

  @override
  MapView_OnWillStartRenderingMapListener fromReference(
          jni.JReference reference) =>
      MapView_OnWillStartRenderingMapListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapView_OnWillStartRenderingMapListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MapView_OnWillStartRenderingMapListenerType) &&
        other is $MapView_OnWillStartRenderingMapListenerType;
  }
}

/// from: `org.maplibre.android.maps.MapView`
class MapView extends jni.JObject {
  @override
  late final jni.JObjType<MapView> $type = type;

  MapView.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/maps/MapView');

  /// The type which includes information such as the signature of this class.
  static const type = $MapViewType();
  static final _id_new0 = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapView(
    jni.JObject context,
  ) {
    return MapView.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, context.reference.pointer)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapView.new1(
    jni.JObject context,
    jni.JObject attributeSet,
  ) {
    return MapView.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer)
        .reference);
  }

  static final _id_new2 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;I)V',
  );

  static final _new2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapView.new2(
    jni.JObject context,
    jni.JObject attributeSet,
    int i,
  ) {
    return MapView.fromReference(_new2(
            _class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer,
            i)
        .reference);
  }

  static final _id_new3 = _class.constructorId(
    r'(Landroid/content/Context;Lorg/maplibre/android/maps/MapLibreMapOptions;)V',
  );

  static final _new3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(android.content.Context context, org.maplibre.android.maps.MapLibreMapOptions mapLibreMapOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapView.new3(
    jni.JObject context,
    maplibremapoptions_.MapLibreMapOptions mapLibreMapOptions,
  ) {
    return MapView.fromReference(_new3(
            _class.reference.pointer,
            _id_new3 as jni.JMethodIDPtr,
            context.reference.pointer,
            mapLibreMapOptions.reference.pointer)
        .reference);
  }

  static final _id_initialize = _class.instanceMethodId(
    r'initialize',
    r'(Landroid/content/Context;Lorg/maplibre/android/maps/MapLibreMapOptions;)V',
  );

  static final _initialize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `protected void initialize(android.content.Context context, org.maplibre.android.maps.MapLibreMapOptions mapLibreMapOptions)`
  void initialize(
    jni.JObject context,
    maplibremapoptions_.MapLibreMapOptions mapLibreMapOptions,
  ) {
    _initialize(reference.pointer, _id_initialize as jni.JMethodIDPtr,
            context.reference.pointer, mapLibreMapOptions.reference.pointer)
        .check();
  }

  static final _id_initialiseCompassView = _class.instanceMethodId(
    r'initialiseCompassView',
    r'()Lorg/maplibre/android/maps/widgets/CompassView;',
  );

  static final _initialiseCompassView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected org.maplibre.android.maps.widgets.CompassView initialiseCompassView()`
  /// The returned object must be released after use, by calling the [release] method.
  compassview_.CompassView initialiseCompassView() {
    return _initialiseCompassView(
            reference.pointer, _id_initialiseCompassView as jni.JMethodIDPtr)
        .object(const compassview_.$CompassViewType());
  }

  static final _id_initialiseAttributionView = _class.instanceMethodId(
    r'initialiseAttributionView',
    r'()Landroid/widget/ImageView;',
  );

  static final _initialiseAttributionView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected android.widget.ImageView initialiseAttributionView()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject initialiseAttributionView() {
    return _initialiseAttributionView(reference.pointer,
            _id_initialiseAttributionView as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_initialiseLogoView = _class.instanceMethodId(
    r'initialiseLogoView',
    r'()Landroid/widget/ImageView;',
  );

  static final _initialiseLogoView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected android.widget.ImageView initialiseLogoView()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject initialiseLogoView() {
    return _initialiseLogoView(
            reference.pointer, _id_initialiseLogoView as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_onCreate = _class.instanceMethodId(
    r'onCreate',
    r'(Landroid/os/Bundle;)V',
  );

  static final _onCreate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void onCreate(android.os.Bundle bundle)`
  void onCreate(
    jni.JObject bundle,
  ) {
    _onCreate(reference.pointer, _id_onCreate as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onSaveInstanceState = _class.instanceMethodId(
    r'onSaveInstanceState',
    r'(Landroid/os/Bundle;)V',
  );

  static final _onSaveInstanceState = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void onSaveInstanceState(android.os.Bundle bundle)`
  void onSaveInstanceState(
    jni.JObject bundle,
  ) {
    _onSaveInstanceState(
            reference.pointer,
            _id_onSaveInstanceState as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onStart = _class.instanceMethodId(
    r'onStart',
    r'()V',
  );

  static final _onStart = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onStart()`
  void onStart() {
    _onStart(reference.pointer, _id_onStart as jni.JMethodIDPtr).check();
  }

  static final _id_onResume = _class.instanceMethodId(
    r'onResume',
    r'()V',
  );

  static final _onResume = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onResume()`
  void onResume() {
    _onResume(reference.pointer, _id_onResume as jni.JMethodIDPtr).check();
  }

  static final _id_onPause = _class.instanceMethodId(
    r'onPause',
    r'()V',
  );

  static final _onPause = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onPause()`
  void onPause() {
    _onPause(reference.pointer, _id_onPause as jni.JMethodIDPtr).check();
  }

  static final _id_onStop = _class.instanceMethodId(
    r'onStop',
    r'()V',
  );

  static final _onStop = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onStop()`
  void onStop() {
    _onStop(reference.pointer, _id_onStop as jni.JMethodIDPtr).check();
  }

  static final _id_onDestroy = _class.instanceMethodId(
    r'onDestroy',
    r'()V',
  );

  static final _onDestroy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onDestroy()`
  void onDestroy() {
    _onDestroy(reference.pointer, _id_onDestroy as jni.JMethodIDPtr).check();
  }

  static final _id_queueEvent = _class.instanceMethodId(
    r'queueEvent',
    r'(Ljava/lang/Runnable;)V',
  );

  static final _queueEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void queueEvent(java.lang.Runnable runnable)`
  void queueEvent(
    jni.JObject runnable,
  ) {
    _queueEvent(reference.pointer, _id_queueEvent as jni.JMethodIDPtr,
            runnable.reference.pointer)
        .check();
  }

  static final _id_setMaximumFps = _class.instanceMethodId(
    r'setMaximumFps',
    r'(I)V',
  );

  static final _setMaximumFps = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setMaximumFps(int i)`
  void setMaximumFps(
    int i,
  ) {
    _setMaximumFps(reference.pointer, _id_setMaximumFps as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setRenderingRefreshMode = _class.instanceMethodId(
    r'setRenderingRefreshMode',
    r'(Lorg/maplibre/android/maps/renderer/MapRenderer$RenderingRefreshMode;)V',
  );

  static final _setRenderingRefreshMode = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setRenderingRefreshMode(org.maplibre.android.maps.renderer.MapRenderer$RenderingRefreshMode renderingRefreshMode)`
  void setRenderingRefreshMode(
    maprenderer_.MapRenderer_RenderingRefreshMode renderingRefreshMode,
  ) {
    _setRenderingRefreshMode(
            reference.pointer,
            _id_setRenderingRefreshMode as jni.JMethodIDPtr,
            renderingRefreshMode.reference.pointer)
        .check();
  }

  static final _id_getRenderingRefreshMode = _class.instanceMethodId(
    r'getRenderingRefreshMode',
    r'()Lorg/maplibre/android/maps/renderer/MapRenderer$RenderingRefreshMode;',
  );

  static final _getRenderingRefreshMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.maps.renderer.MapRenderer$RenderingRefreshMode getRenderingRefreshMode()`
  /// The returned object must be released after use, by calling the [release] method.
  maprenderer_.MapRenderer_RenderingRefreshMode getRenderingRefreshMode() {
    return _getRenderingRefreshMode(
            reference.pointer, _id_getRenderingRefreshMode as jni.JMethodIDPtr)
        .object(const maprenderer_.$MapRenderer_RenderingRefreshModeType());
  }

  static final _id_isDestroyed = _class.instanceMethodId(
    r'isDestroyed',
    r'()Z',
  );

  static final _isDestroyed = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isDestroyed()`
  bool isDestroyed() {
    return _isDestroyed(reference.pointer, _id_isDestroyed as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getRenderView = _class.instanceMethodId(
    r'getRenderView',
    r'()Landroid/view/View;',
  );

  static final _getRenderView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public android.view.View getRenderView()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getRenderView() {
    return _getRenderView(
            reference.pointer, _id_getRenderView as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_onTouchEvent = _class.instanceMethodId(
    r'onTouchEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onTouchEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean onTouchEvent(android.view.MotionEvent motionEvent)`
  bool onTouchEvent(
    jni.JObject motionEvent,
  ) {
    return _onTouchEvent(reference.pointer,
            _id_onTouchEvent as jni.JMethodIDPtr, motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyDown = _class.instanceMethodId(
    r'onKeyDown',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyDown = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean onKeyDown(int i, android.view.KeyEvent keyEvent)`
  bool onKeyDown(
    int i,
    jni.JObject keyEvent,
  ) {
    return _onKeyDown(reference.pointer, _id_onKeyDown as jni.JMethodIDPtr, i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyLongPress = _class.instanceMethodId(
    r'onKeyLongPress',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyLongPress = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean onKeyLongPress(int i, android.view.KeyEvent keyEvent)`
  bool onKeyLongPress(
    int i,
    jni.JObject keyEvent,
  ) {
    return _onKeyLongPress(
            reference.pointer,
            _id_onKeyLongPress as jni.JMethodIDPtr,
            i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyUp = _class.instanceMethodId(
    r'onKeyUp',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyUp = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean onKeyUp(int i, android.view.KeyEvent keyEvent)`
  bool onKeyUp(
    int i,
    jni.JObject keyEvent,
  ) {
    return _onKeyUp(reference.pointer, _id_onKeyUp as jni.JMethodIDPtr, i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onTrackballEvent = _class.instanceMethodId(
    r'onTrackballEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onTrackballEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean onTrackballEvent(android.view.MotionEvent motionEvent)`
  bool onTrackballEvent(
    jni.JObject motionEvent,
  ) {
    return _onTrackballEvent(
            reference.pointer,
            _id_onTrackballEvent as jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onGenericMotionEvent = _class.instanceMethodId(
    r'onGenericMotionEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onGenericMotionEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean onGenericMotionEvent(android.view.MotionEvent motionEvent)`
  bool onGenericMotionEvent(
    jni.JObject motionEvent,
  ) {
    return _onGenericMotionEvent(
            reference.pointer,
            _id_onGenericMotionEvent as jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onLowMemory = _class.instanceMethodId(
    r'onLowMemory',
    r'()V',
  );

  static final _onLowMemory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onLowMemory()`
  void onLowMemory() {
    _onLowMemory(reference.pointer, _id_onLowMemory as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onSizeChanged = _class.instanceMethodId(
    r'onSizeChanged',
    r'(IIII)V',
  );

  static final _onSizeChanged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int, int)>();

  /// from: `protected void onSizeChanged(int i, int i1, int i2, int i3)`
  void onSizeChanged(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _onSizeChanged(reference.pointer, _id_onSizeChanged as jni.JMethodIDPtr, i,
            i1, i2, i3)
        .check();
  }

  static final _id_getPixelRatio = _class.instanceMethodId(
    r'getPixelRatio',
    r'()F',
  );

  static final _getPixelRatio = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public float getPixelRatio()`
  double getPixelRatio() {
    return _getPixelRatio(
            reference.pointer, _id_getPixelRatio as jni.JMethodIDPtr)
        .float;
  }

  static final _id_getViewContent = _class.instanceMethodId(
    r'getViewContent',
    r'()Landroid/graphics/Bitmap;',
  );

  static final _getViewContent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.Bitmap getViewContent()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getViewContent() {
    return _getViewContent(
            reference.pointer, _id_getViewContent as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_addOnCameraWillChangeListener = _class.instanceMethodId(
    r'addOnCameraWillChangeListener',
    r'(Lorg/maplibre/android/maps/MapView$OnCameraWillChangeListener;)V',
  );

  static final _addOnCameraWillChangeListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnCameraWillChangeListener(org.maplibre.android.maps.MapView$OnCameraWillChangeListener onCameraWillChangeListener)`
  void addOnCameraWillChangeListener(
    MapView_OnCameraWillChangeListener onCameraWillChangeListener,
  ) {
    _addOnCameraWillChangeListener(
            reference.pointer,
            _id_addOnCameraWillChangeListener as jni.JMethodIDPtr,
            onCameraWillChangeListener.reference.pointer)
        .check();
  }

  static final _id_removeOnCameraWillChangeListener = _class.instanceMethodId(
    r'removeOnCameraWillChangeListener',
    r'(Lorg/maplibre/android/maps/MapView$OnCameraWillChangeListener;)V',
  );

  static final _removeOnCameraWillChangeListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnCameraWillChangeListener(org.maplibre.android.maps.MapView$OnCameraWillChangeListener onCameraWillChangeListener)`
  void removeOnCameraWillChangeListener(
    MapView_OnCameraWillChangeListener onCameraWillChangeListener,
  ) {
    _removeOnCameraWillChangeListener(
            reference.pointer,
            _id_removeOnCameraWillChangeListener as jni.JMethodIDPtr,
            onCameraWillChangeListener.reference.pointer)
        .check();
  }

  static final _id_addOnCameraIsChangingListener = _class.instanceMethodId(
    r'addOnCameraIsChangingListener',
    r'(Lorg/maplibre/android/maps/MapView$OnCameraIsChangingListener;)V',
  );

  static final _addOnCameraIsChangingListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnCameraIsChangingListener(org.maplibre.android.maps.MapView$OnCameraIsChangingListener onCameraIsChangingListener)`
  void addOnCameraIsChangingListener(
    MapView_OnCameraIsChangingListener onCameraIsChangingListener,
  ) {
    _addOnCameraIsChangingListener(
            reference.pointer,
            _id_addOnCameraIsChangingListener as jni.JMethodIDPtr,
            onCameraIsChangingListener.reference.pointer)
        .check();
  }

  static final _id_removeOnCameraIsChangingListener = _class.instanceMethodId(
    r'removeOnCameraIsChangingListener',
    r'(Lorg/maplibre/android/maps/MapView$OnCameraIsChangingListener;)V',
  );

  static final _removeOnCameraIsChangingListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnCameraIsChangingListener(org.maplibre.android.maps.MapView$OnCameraIsChangingListener onCameraIsChangingListener)`
  void removeOnCameraIsChangingListener(
    MapView_OnCameraIsChangingListener onCameraIsChangingListener,
  ) {
    _removeOnCameraIsChangingListener(
            reference.pointer,
            _id_removeOnCameraIsChangingListener as jni.JMethodIDPtr,
            onCameraIsChangingListener.reference.pointer)
        .check();
  }

  static final _id_addOnCameraDidChangeListener = _class.instanceMethodId(
    r'addOnCameraDidChangeListener',
    r'(Lorg/maplibre/android/maps/MapView$OnCameraDidChangeListener;)V',
  );

  static final _addOnCameraDidChangeListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnCameraDidChangeListener(org.maplibre.android.maps.MapView$OnCameraDidChangeListener onCameraDidChangeListener)`
  void addOnCameraDidChangeListener(
    MapView_OnCameraDidChangeListener onCameraDidChangeListener,
  ) {
    _addOnCameraDidChangeListener(
            reference.pointer,
            _id_addOnCameraDidChangeListener as jni.JMethodIDPtr,
            onCameraDidChangeListener.reference.pointer)
        .check();
  }

  static final _id_removeOnCameraDidChangeListener = _class.instanceMethodId(
    r'removeOnCameraDidChangeListener',
    r'(Lorg/maplibre/android/maps/MapView$OnCameraDidChangeListener;)V',
  );

  static final _removeOnCameraDidChangeListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnCameraDidChangeListener(org.maplibre.android.maps.MapView$OnCameraDidChangeListener onCameraDidChangeListener)`
  void removeOnCameraDidChangeListener(
    MapView_OnCameraDidChangeListener onCameraDidChangeListener,
  ) {
    _removeOnCameraDidChangeListener(
            reference.pointer,
            _id_removeOnCameraDidChangeListener as jni.JMethodIDPtr,
            onCameraDidChangeListener.reference.pointer)
        .check();
  }

  static final _id_addOnWillStartLoadingMapListener = _class.instanceMethodId(
    r'addOnWillStartLoadingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnWillStartLoadingMapListener;)V',
  );

  static final _addOnWillStartLoadingMapListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnWillStartLoadingMapListener(org.maplibre.android.maps.MapView$OnWillStartLoadingMapListener onWillStartLoadingMapListener)`
  void addOnWillStartLoadingMapListener(
    MapView_OnWillStartLoadingMapListener onWillStartLoadingMapListener,
  ) {
    _addOnWillStartLoadingMapListener(
            reference.pointer,
            _id_addOnWillStartLoadingMapListener as jni.JMethodIDPtr,
            onWillStartLoadingMapListener.reference.pointer)
        .check();
  }

  static final _id_removeOnWillStartLoadingMapListener =
      _class.instanceMethodId(
    r'removeOnWillStartLoadingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnWillStartLoadingMapListener;)V',
  );

  static final _removeOnWillStartLoadingMapListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnWillStartLoadingMapListener(org.maplibre.android.maps.MapView$OnWillStartLoadingMapListener onWillStartLoadingMapListener)`
  void removeOnWillStartLoadingMapListener(
    MapView_OnWillStartLoadingMapListener onWillStartLoadingMapListener,
  ) {
    _removeOnWillStartLoadingMapListener(
            reference.pointer,
            _id_removeOnWillStartLoadingMapListener as jni.JMethodIDPtr,
            onWillStartLoadingMapListener.reference.pointer)
        .check();
  }

  static final _id_addOnDidFinishLoadingMapListener = _class.instanceMethodId(
    r'addOnDidFinishLoadingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFinishLoadingMapListener;)V',
  );

  static final _addOnDidFinishLoadingMapListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnDidFinishLoadingMapListener(org.maplibre.android.maps.MapView$OnDidFinishLoadingMapListener onDidFinishLoadingMapListener)`
  void addOnDidFinishLoadingMapListener(
    MapView_OnDidFinishLoadingMapListener onDidFinishLoadingMapListener,
  ) {
    _addOnDidFinishLoadingMapListener(
            reference.pointer,
            _id_addOnDidFinishLoadingMapListener as jni.JMethodIDPtr,
            onDidFinishLoadingMapListener.reference.pointer)
        .check();
  }

  static final _id_removeOnDidFinishLoadingMapListener =
      _class.instanceMethodId(
    r'removeOnDidFinishLoadingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFinishLoadingMapListener;)V',
  );

  static final _removeOnDidFinishLoadingMapListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnDidFinishLoadingMapListener(org.maplibre.android.maps.MapView$OnDidFinishLoadingMapListener onDidFinishLoadingMapListener)`
  void removeOnDidFinishLoadingMapListener(
    MapView_OnDidFinishLoadingMapListener onDidFinishLoadingMapListener,
  ) {
    _removeOnDidFinishLoadingMapListener(
            reference.pointer,
            _id_removeOnDidFinishLoadingMapListener as jni.JMethodIDPtr,
            onDidFinishLoadingMapListener.reference.pointer)
        .check();
  }

  static final _id_addOnDidFailLoadingMapListener = _class.instanceMethodId(
    r'addOnDidFailLoadingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFailLoadingMapListener;)V',
  );

  static final _addOnDidFailLoadingMapListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnDidFailLoadingMapListener(org.maplibre.android.maps.MapView$OnDidFailLoadingMapListener onDidFailLoadingMapListener)`
  void addOnDidFailLoadingMapListener(
    MapView_OnDidFailLoadingMapListener onDidFailLoadingMapListener,
  ) {
    _addOnDidFailLoadingMapListener(
            reference.pointer,
            _id_addOnDidFailLoadingMapListener as jni.JMethodIDPtr,
            onDidFailLoadingMapListener.reference.pointer)
        .check();
  }

  static final _id_removeOnDidFailLoadingMapListener = _class.instanceMethodId(
    r'removeOnDidFailLoadingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFailLoadingMapListener;)V',
  );

  static final _removeOnDidFailLoadingMapListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnDidFailLoadingMapListener(org.maplibre.android.maps.MapView$OnDidFailLoadingMapListener onDidFailLoadingMapListener)`
  void removeOnDidFailLoadingMapListener(
    MapView_OnDidFailLoadingMapListener onDidFailLoadingMapListener,
  ) {
    _removeOnDidFailLoadingMapListener(
            reference.pointer,
            _id_removeOnDidFailLoadingMapListener as jni.JMethodIDPtr,
            onDidFailLoadingMapListener.reference.pointer)
        .check();
  }

  static final _id_addOnWillStartRenderingFrameListener =
      _class.instanceMethodId(
    r'addOnWillStartRenderingFrameListener',
    r'(Lorg/maplibre/android/maps/MapView$OnWillStartRenderingFrameListener;)V',
  );

  static final _addOnWillStartRenderingFrameListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnWillStartRenderingFrameListener(org.maplibre.android.maps.MapView$OnWillStartRenderingFrameListener onWillStartRenderingFrameListener)`
  void addOnWillStartRenderingFrameListener(
    MapView_OnWillStartRenderingFrameListener onWillStartRenderingFrameListener,
  ) {
    _addOnWillStartRenderingFrameListener(
            reference.pointer,
            _id_addOnWillStartRenderingFrameListener as jni.JMethodIDPtr,
            onWillStartRenderingFrameListener.reference.pointer)
        .check();
  }

  static final _id_removeOnWillStartRenderingFrameListener =
      _class.instanceMethodId(
    r'removeOnWillStartRenderingFrameListener',
    r'(Lorg/maplibre/android/maps/MapView$OnWillStartRenderingFrameListener;)V',
  );

  static final _removeOnWillStartRenderingFrameListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnWillStartRenderingFrameListener(org.maplibre.android.maps.MapView$OnWillStartRenderingFrameListener onWillStartRenderingFrameListener)`
  void removeOnWillStartRenderingFrameListener(
    MapView_OnWillStartRenderingFrameListener onWillStartRenderingFrameListener,
  ) {
    _removeOnWillStartRenderingFrameListener(
            reference.pointer,
            _id_removeOnWillStartRenderingFrameListener as jni.JMethodIDPtr,
            onWillStartRenderingFrameListener.reference.pointer)
        .check();
  }

  static final _id_addOnDidFinishRenderingFrameListener =
      _class.instanceMethodId(
    r'addOnDidFinishRenderingFrameListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFinishRenderingFrameListener;)V',
  );

  static final _addOnDidFinishRenderingFrameListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnDidFinishRenderingFrameListener(org.maplibre.android.maps.MapView$OnDidFinishRenderingFrameListener onDidFinishRenderingFrameListener)`
  void addOnDidFinishRenderingFrameListener(
    MapView_OnDidFinishRenderingFrameListener onDidFinishRenderingFrameListener,
  ) {
    _addOnDidFinishRenderingFrameListener(
            reference.pointer,
            _id_addOnDidFinishRenderingFrameListener as jni.JMethodIDPtr,
            onDidFinishRenderingFrameListener.reference.pointer)
        .check();
  }

  static final _id_removeOnDidFinishRenderingFrameListener =
      _class.instanceMethodId(
    r'removeOnDidFinishRenderingFrameListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFinishRenderingFrameListener;)V',
  );

  static final _removeOnDidFinishRenderingFrameListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnDidFinishRenderingFrameListener(org.maplibre.android.maps.MapView$OnDidFinishRenderingFrameListener onDidFinishRenderingFrameListener)`
  void removeOnDidFinishRenderingFrameListener(
    MapView_OnDidFinishRenderingFrameListener onDidFinishRenderingFrameListener,
  ) {
    _removeOnDidFinishRenderingFrameListener(
            reference.pointer,
            _id_removeOnDidFinishRenderingFrameListener as jni.JMethodIDPtr,
            onDidFinishRenderingFrameListener.reference.pointer)
        .check();
  }

  static final _id_addOnWillStartRenderingMapListener = _class.instanceMethodId(
    r'addOnWillStartRenderingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnWillStartRenderingMapListener;)V',
  );

  static final _addOnWillStartRenderingMapListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnWillStartRenderingMapListener(org.maplibre.android.maps.MapView$OnWillStartRenderingMapListener onWillStartRenderingMapListener)`
  void addOnWillStartRenderingMapListener(
    MapView_OnWillStartRenderingMapListener onWillStartRenderingMapListener,
  ) {
    _addOnWillStartRenderingMapListener(
            reference.pointer,
            _id_addOnWillStartRenderingMapListener as jni.JMethodIDPtr,
            onWillStartRenderingMapListener.reference.pointer)
        .check();
  }

  static final _id_removeOnWillStartRenderingMapListener =
      _class.instanceMethodId(
    r'removeOnWillStartRenderingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnWillStartRenderingMapListener;)V',
  );

  static final _removeOnWillStartRenderingMapListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnWillStartRenderingMapListener(org.maplibre.android.maps.MapView$OnWillStartRenderingMapListener onWillStartRenderingMapListener)`
  void removeOnWillStartRenderingMapListener(
    MapView_OnWillStartRenderingMapListener onWillStartRenderingMapListener,
  ) {
    _removeOnWillStartRenderingMapListener(
            reference.pointer,
            _id_removeOnWillStartRenderingMapListener as jni.JMethodIDPtr,
            onWillStartRenderingMapListener.reference.pointer)
        .check();
  }

  static final _id_addOnDidFinishRenderingMapListener = _class.instanceMethodId(
    r'addOnDidFinishRenderingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFinishRenderingMapListener;)V',
  );

  static final _addOnDidFinishRenderingMapListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnDidFinishRenderingMapListener(org.maplibre.android.maps.MapView$OnDidFinishRenderingMapListener onDidFinishRenderingMapListener)`
  void addOnDidFinishRenderingMapListener(
    MapView_OnDidFinishRenderingMapListener onDidFinishRenderingMapListener,
  ) {
    _addOnDidFinishRenderingMapListener(
            reference.pointer,
            _id_addOnDidFinishRenderingMapListener as jni.JMethodIDPtr,
            onDidFinishRenderingMapListener.reference.pointer)
        .check();
  }

  static final _id_removeOnDidFinishRenderingMapListener =
      _class.instanceMethodId(
    r'removeOnDidFinishRenderingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFinishRenderingMapListener;)V',
  );

  static final _removeOnDidFinishRenderingMapListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnDidFinishRenderingMapListener(org.maplibre.android.maps.MapView$OnDidFinishRenderingMapListener onDidFinishRenderingMapListener)`
  void removeOnDidFinishRenderingMapListener(
    MapView_OnDidFinishRenderingMapListener onDidFinishRenderingMapListener,
  ) {
    _removeOnDidFinishRenderingMapListener(
            reference.pointer,
            _id_removeOnDidFinishRenderingMapListener as jni.JMethodIDPtr,
            onDidFinishRenderingMapListener.reference.pointer)
        .check();
  }

  static final _id_addOnDidBecomeIdleListener = _class.instanceMethodId(
    r'addOnDidBecomeIdleListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidBecomeIdleListener;)V',
  );

  static final _addOnDidBecomeIdleListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnDidBecomeIdleListener(org.maplibre.android.maps.MapView$OnDidBecomeIdleListener onDidBecomeIdleListener)`
  void addOnDidBecomeIdleListener(
    MapView_OnDidBecomeIdleListener onDidBecomeIdleListener,
  ) {
    _addOnDidBecomeIdleListener(
            reference.pointer,
            _id_addOnDidBecomeIdleListener as jni.JMethodIDPtr,
            onDidBecomeIdleListener.reference.pointer)
        .check();
  }

  static final _id_removeOnDidBecomeIdleListener = _class.instanceMethodId(
    r'removeOnDidBecomeIdleListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidBecomeIdleListener;)V',
  );

  static final _removeOnDidBecomeIdleListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnDidBecomeIdleListener(org.maplibre.android.maps.MapView$OnDidBecomeIdleListener onDidBecomeIdleListener)`
  void removeOnDidBecomeIdleListener(
    MapView_OnDidBecomeIdleListener onDidBecomeIdleListener,
  ) {
    _removeOnDidBecomeIdleListener(
            reference.pointer,
            _id_removeOnDidBecomeIdleListener as jni.JMethodIDPtr,
            onDidBecomeIdleListener.reference.pointer)
        .check();
  }

  static final _id_addOnDidFinishLoadingStyleListener = _class.instanceMethodId(
    r'addOnDidFinishLoadingStyleListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFinishLoadingStyleListener;)V',
  );

  static final _addOnDidFinishLoadingStyleListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnDidFinishLoadingStyleListener(org.maplibre.android.maps.MapView$OnDidFinishLoadingStyleListener onDidFinishLoadingStyleListener)`
  void addOnDidFinishLoadingStyleListener(
    MapView_OnDidFinishLoadingStyleListener onDidFinishLoadingStyleListener,
  ) {
    _addOnDidFinishLoadingStyleListener(
            reference.pointer,
            _id_addOnDidFinishLoadingStyleListener as jni.JMethodIDPtr,
            onDidFinishLoadingStyleListener.reference.pointer)
        .check();
  }

  static final _id_removeOnDidFinishLoadingStyleListener =
      _class.instanceMethodId(
    r'removeOnDidFinishLoadingStyleListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFinishLoadingStyleListener;)V',
  );

  static final _removeOnDidFinishLoadingStyleListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnDidFinishLoadingStyleListener(org.maplibre.android.maps.MapView$OnDidFinishLoadingStyleListener onDidFinishLoadingStyleListener)`
  void removeOnDidFinishLoadingStyleListener(
    MapView_OnDidFinishLoadingStyleListener onDidFinishLoadingStyleListener,
  ) {
    _removeOnDidFinishLoadingStyleListener(
            reference.pointer,
            _id_removeOnDidFinishLoadingStyleListener as jni.JMethodIDPtr,
            onDidFinishLoadingStyleListener.reference.pointer)
        .check();
  }

  static final _id_addOnSourceChangedListener = _class.instanceMethodId(
    r'addOnSourceChangedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnSourceChangedListener;)V',
  );

  static final _addOnSourceChangedListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnSourceChangedListener(org.maplibre.android.maps.MapView$OnSourceChangedListener onSourceChangedListener)`
  void addOnSourceChangedListener(
    MapView_OnSourceChangedListener onSourceChangedListener,
  ) {
    _addOnSourceChangedListener(
            reference.pointer,
            _id_addOnSourceChangedListener as jni.JMethodIDPtr,
            onSourceChangedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnSourceChangedListener = _class.instanceMethodId(
    r'removeOnSourceChangedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnSourceChangedListener;)V',
  );

  static final _removeOnSourceChangedListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnSourceChangedListener(org.maplibre.android.maps.MapView$OnSourceChangedListener onSourceChangedListener)`
  void removeOnSourceChangedListener(
    MapView_OnSourceChangedListener onSourceChangedListener,
  ) {
    _removeOnSourceChangedListener(
            reference.pointer,
            _id_removeOnSourceChangedListener as jni.JMethodIDPtr,
            onSourceChangedListener.reference.pointer)
        .check();
  }

  static final _id_addOnStyleImageMissingListener = _class.instanceMethodId(
    r'addOnStyleImageMissingListener',
    r'(Lorg/maplibre/android/maps/MapView$OnStyleImageMissingListener;)V',
  );

  static final _addOnStyleImageMissingListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnStyleImageMissingListener(org.maplibre.android.maps.MapView$OnStyleImageMissingListener onStyleImageMissingListener)`
  void addOnStyleImageMissingListener(
    MapView_OnStyleImageMissingListener onStyleImageMissingListener,
  ) {
    _addOnStyleImageMissingListener(
            reference.pointer,
            _id_addOnStyleImageMissingListener as jni.JMethodIDPtr,
            onStyleImageMissingListener.reference.pointer)
        .check();
  }

  static final _id_removeOnStyleImageMissingListener = _class.instanceMethodId(
    r'removeOnStyleImageMissingListener',
    r'(Lorg/maplibre/android/maps/MapView$OnStyleImageMissingListener;)V',
  );

  static final _removeOnStyleImageMissingListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnStyleImageMissingListener(org.maplibre.android.maps.MapView$OnStyleImageMissingListener onStyleImageMissingListener)`
  void removeOnStyleImageMissingListener(
    MapView_OnStyleImageMissingListener onStyleImageMissingListener,
  ) {
    _removeOnStyleImageMissingListener(
            reference.pointer,
            _id_removeOnStyleImageMissingListener as jni.JMethodIDPtr,
            onStyleImageMissingListener.reference.pointer)
        .check();
  }

  static final _id_addOnCanRemoveUnusedStyleImageListener =
      _class.instanceMethodId(
    r'addOnCanRemoveUnusedStyleImageListener',
    r'(Lorg/maplibre/android/maps/MapView$OnCanRemoveUnusedStyleImageListener;)V',
  );

  static final _addOnCanRemoveUnusedStyleImageListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnCanRemoveUnusedStyleImageListener(org.maplibre.android.maps.MapView$OnCanRemoveUnusedStyleImageListener onCanRemoveUnusedStyleImageListener)`
  void addOnCanRemoveUnusedStyleImageListener(
    MapView_OnCanRemoveUnusedStyleImageListener
        onCanRemoveUnusedStyleImageListener,
  ) {
    _addOnCanRemoveUnusedStyleImageListener(
            reference.pointer,
            _id_addOnCanRemoveUnusedStyleImageListener as jni.JMethodIDPtr,
            onCanRemoveUnusedStyleImageListener.reference.pointer)
        .check();
  }

  static final _id_removeOnCanRemoveUnusedStyleImageListener =
      _class.instanceMethodId(
    r'removeOnCanRemoveUnusedStyleImageListener',
    r'(Lorg/maplibre/android/maps/MapView$OnCanRemoveUnusedStyleImageListener;)V',
  );

  static final _removeOnCanRemoveUnusedStyleImageListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnCanRemoveUnusedStyleImageListener(org.maplibre.android.maps.MapView$OnCanRemoveUnusedStyleImageListener onCanRemoveUnusedStyleImageListener)`
  void removeOnCanRemoveUnusedStyleImageListener(
    MapView_OnCanRemoveUnusedStyleImageListener
        onCanRemoveUnusedStyleImageListener,
  ) {
    _removeOnCanRemoveUnusedStyleImageListener(
            reference.pointer,
            _id_removeOnCanRemoveUnusedStyleImageListener as jni.JMethodIDPtr,
            onCanRemoveUnusedStyleImageListener.reference.pointer)
        .check();
  }

  static final _id_addOnPreCompileShaderListener = _class.instanceMethodId(
    r'addOnPreCompileShaderListener',
    r'(Lorg/maplibre/android/maps/MapView$OnPreCompileShaderListener;)V',
  );

  static final _addOnPreCompileShaderListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnPreCompileShaderListener(org.maplibre.android.maps.MapView$OnPreCompileShaderListener onPreCompileShaderListener)`
  void addOnPreCompileShaderListener(
    MapView_OnPreCompileShaderListener onPreCompileShaderListener,
  ) {
    _addOnPreCompileShaderListener(
            reference.pointer,
            _id_addOnPreCompileShaderListener as jni.JMethodIDPtr,
            onPreCompileShaderListener.reference.pointer)
        .check();
  }

  static final _id_removeOnPreCompileShaderListener = _class.instanceMethodId(
    r'removeOnPreCompileShaderListener',
    r'(Lorg/maplibre/android/maps/MapView$OnPreCompileShaderListener;)V',
  );

  static final _removeOnPreCompileShaderListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnPreCompileShaderListener(org.maplibre.android.maps.MapView$OnPreCompileShaderListener onPreCompileShaderListener)`
  void removeOnPreCompileShaderListener(
    MapView_OnPreCompileShaderListener onPreCompileShaderListener,
  ) {
    _removeOnPreCompileShaderListener(
            reference.pointer,
            _id_removeOnPreCompileShaderListener as jni.JMethodIDPtr,
            onPreCompileShaderListener.reference.pointer)
        .check();
  }

  static final _id_addOnPostCompileShaderListener = _class.instanceMethodId(
    r'addOnPostCompileShaderListener',
    r'(Lorg/maplibre/android/maps/MapView$OnPostCompileShaderListener;)V',
  );

  static final _addOnPostCompileShaderListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnPostCompileShaderListener(org.maplibre.android.maps.MapView$OnPostCompileShaderListener onPostCompileShaderListener)`
  void addOnPostCompileShaderListener(
    MapView_OnPostCompileShaderListener onPostCompileShaderListener,
  ) {
    _addOnPostCompileShaderListener(
            reference.pointer,
            _id_addOnPostCompileShaderListener as jni.JMethodIDPtr,
            onPostCompileShaderListener.reference.pointer)
        .check();
  }

  static final _id_removeOnPostCompileShaderListener = _class.instanceMethodId(
    r'removeOnPostCompileShaderListener',
    r'(Lorg/maplibre/android/maps/MapView$OnPostCompileShaderListener;)V',
  );

  static final _removeOnPostCompileShaderListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnPostCompileShaderListener(org.maplibre.android.maps.MapView$OnPostCompileShaderListener onPostCompileShaderListener)`
  void removeOnPostCompileShaderListener(
    MapView_OnPostCompileShaderListener onPostCompileShaderListener,
  ) {
    _removeOnPostCompileShaderListener(
            reference.pointer,
            _id_removeOnPostCompileShaderListener as jni.JMethodIDPtr,
            onPostCompileShaderListener.reference.pointer)
        .check();
  }

  static final _id_addOnShaderCompileFailedListener = _class.instanceMethodId(
    r'addOnShaderCompileFailedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnShaderCompileFailedListener;)V',
  );

  static final _addOnShaderCompileFailedListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnShaderCompileFailedListener(org.maplibre.android.maps.MapView$OnShaderCompileFailedListener onShaderCompileFailedListener)`
  void addOnShaderCompileFailedListener(
    MapView_OnShaderCompileFailedListener onShaderCompileFailedListener,
  ) {
    _addOnShaderCompileFailedListener(
            reference.pointer,
            _id_addOnShaderCompileFailedListener as jni.JMethodIDPtr,
            onShaderCompileFailedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnShaderCompileFailedListener =
      _class.instanceMethodId(
    r'removeOnShaderCompileFailedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnShaderCompileFailedListener;)V',
  );

  static final _removeOnShaderCompileFailedListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnShaderCompileFailedListener(org.maplibre.android.maps.MapView$OnShaderCompileFailedListener onShaderCompileFailedListener)`
  void removeOnShaderCompileFailedListener(
    MapView_OnShaderCompileFailedListener onShaderCompileFailedListener,
  ) {
    _removeOnShaderCompileFailedListener(
            reference.pointer,
            _id_removeOnShaderCompileFailedListener as jni.JMethodIDPtr,
            onShaderCompileFailedListener.reference.pointer)
        .check();
  }

  static final _id_addOnGlyphsLoadedListener = _class.instanceMethodId(
    r'addOnGlyphsLoadedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnGlyphsLoadedListener;)V',
  );

  static final _addOnGlyphsLoadedListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnGlyphsLoadedListener(org.maplibre.android.maps.MapView$OnGlyphsLoadedListener onGlyphsLoadedListener)`
  void addOnGlyphsLoadedListener(
    MapView_OnGlyphsLoadedListener onGlyphsLoadedListener,
  ) {
    _addOnGlyphsLoadedListener(
            reference.pointer,
            _id_addOnGlyphsLoadedListener as jni.JMethodIDPtr,
            onGlyphsLoadedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnGlyphsLoadedListener = _class.instanceMethodId(
    r'removeOnGlyphsLoadedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnGlyphsLoadedListener;)V',
  );

  static final _removeOnGlyphsLoadedListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnGlyphsLoadedListener(org.maplibre.android.maps.MapView$OnGlyphsLoadedListener onGlyphsLoadedListener)`
  void removeOnGlyphsLoadedListener(
    MapView_OnGlyphsLoadedListener onGlyphsLoadedListener,
  ) {
    _removeOnGlyphsLoadedListener(
            reference.pointer,
            _id_removeOnGlyphsLoadedListener as jni.JMethodIDPtr,
            onGlyphsLoadedListener.reference.pointer)
        .check();
  }

  static final _id_addOnGlyphsErrorListener = _class.instanceMethodId(
    r'addOnGlyphsErrorListener',
    r'(Lorg/maplibre/android/maps/MapView$OnGlyphsErrorListener;)V',
  );

  static final _addOnGlyphsErrorListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnGlyphsErrorListener(org.maplibre.android.maps.MapView$OnGlyphsErrorListener onGlyphsErrorListener)`
  void addOnGlyphsErrorListener(
    MapView_OnGlyphsErrorListener onGlyphsErrorListener,
  ) {
    _addOnGlyphsErrorListener(
            reference.pointer,
            _id_addOnGlyphsErrorListener as jni.JMethodIDPtr,
            onGlyphsErrorListener.reference.pointer)
        .check();
  }

  static final _id_removeOnGlyphsErrorListener = _class.instanceMethodId(
    r'removeOnGlyphsErrorListener',
    r'(Lorg/maplibre/android/maps/MapView$OnGlyphsErrorListener;)V',
  );

  static final _removeOnGlyphsErrorListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnGlyphsErrorListener(org.maplibre.android.maps.MapView$OnGlyphsErrorListener onGlyphsErrorListener)`
  void removeOnGlyphsErrorListener(
    MapView_OnGlyphsErrorListener onGlyphsErrorListener,
  ) {
    _removeOnGlyphsErrorListener(
            reference.pointer,
            _id_removeOnGlyphsErrorListener as jni.JMethodIDPtr,
            onGlyphsErrorListener.reference.pointer)
        .check();
  }

  static final _id_addOnGlyphsRequestedListener = _class.instanceMethodId(
    r'addOnGlyphsRequestedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnGlyphsRequestedListener;)V',
  );

  static final _addOnGlyphsRequestedListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnGlyphsRequestedListener(org.maplibre.android.maps.MapView$OnGlyphsRequestedListener onGlyphsRequestedListener)`
  void addOnGlyphsRequestedListener(
    MapView_OnGlyphsRequestedListener onGlyphsRequestedListener,
  ) {
    _addOnGlyphsRequestedListener(
            reference.pointer,
            _id_addOnGlyphsRequestedListener as jni.JMethodIDPtr,
            onGlyphsRequestedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnGlyphsRequestedListener = _class.instanceMethodId(
    r'removeOnGlyphsRequestedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnGlyphsRequestedListener;)V',
  );

  static final _removeOnGlyphsRequestedListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnGlyphsRequestedListener(org.maplibre.android.maps.MapView$OnGlyphsRequestedListener onGlyphsRequestedListener)`
  void removeOnGlyphsRequestedListener(
    MapView_OnGlyphsRequestedListener onGlyphsRequestedListener,
  ) {
    _removeOnGlyphsRequestedListener(
            reference.pointer,
            _id_removeOnGlyphsRequestedListener as jni.JMethodIDPtr,
            onGlyphsRequestedListener.reference.pointer)
        .check();
  }

  static final _id_addOnTileActionListener = _class.instanceMethodId(
    r'addOnTileActionListener',
    r'(Lorg/maplibre/android/maps/MapView$OnTileActionListener;)V',
  );

  static final _addOnTileActionListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnTileActionListener(org.maplibre.android.maps.MapView$OnTileActionListener onTileActionListener)`
  void addOnTileActionListener(
    MapView_OnTileActionListener onTileActionListener,
  ) {
    _addOnTileActionListener(
            reference.pointer,
            _id_addOnTileActionListener as jni.JMethodIDPtr,
            onTileActionListener.reference.pointer)
        .check();
  }

  static final _id_removeOnTileActionListener = _class.instanceMethodId(
    r'removeOnTileActionListener',
    r'(Lorg/maplibre/android/maps/MapView$OnTileActionListener;)V',
  );

  static final _removeOnTileActionListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnTileActionListener(org.maplibre.android.maps.MapView$OnTileActionListener onTileActionListener)`
  void removeOnTileActionListener(
    MapView_OnTileActionListener onTileActionListener,
  ) {
    _removeOnTileActionListener(
            reference.pointer,
            _id_removeOnTileActionListener as jni.JMethodIDPtr,
            onTileActionListener.reference.pointer)
        .check();
  }

  static final _id_addOnSpriteLoadedListener = _class.instanceMethodId(
    r'addOnSpriteLoadedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnSpriteLoadedListener;)V',
  );

  static final _addOnSpriteLoadedListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnSpriteLoadedListener(org.maplibre.android.maps.MapView$OnSpriteLoadedListener onSpriteLoadedListener)`
  void addOnSpriteLoadedListener(
    MapView_OnSpriteLoadedListener onSpriteLoadedListener,
  ) {
    _addOnSpriteLoadedListener(
            reference.pointer,
            _id_addOnSpriteLoadedListener as jni.JMethodIDPtr,
            onSpriteLoadedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnSpriteLoadedListener = _class.instanceMethodId(
    r'removeOnSpriteLoadedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnSpriteLoadedListener;)V',
  );

  static final _removeOnSpriteLoadedListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnSpriteLoadedListener(org.maplibre.android.maps.MapView$OnSpriteLoadedListener onSpriteLoadedListener)`
  void removeOnSpriteLoadedListener(
    MapView_OnSpriteLoadedListener onSpriteLoadedListener,
  ) {
    _removeOnSpriteLoadedListener(
            reference.pointer,
            _id_removeOnSpriteLoadedListener as jni.JMethodIDPtr,
            onSpriteLoadedListener.reference.pointer)
        .check();
  }

  static final _id_addOnSpriteErrorListener = _class.instanceMethodId(
    r'addOnSpriteErrorListener',
    r'(Lorg/maplibre/android/maps/MapView$OnSpriteErrorListener;)V',
  );

  static final _addOnSpriteErrorListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnSpriteErrorListener(org.maplibre.android.maps.MapView$OnSpriteErrorListener onSpriteErrorListener)`
  void addOnSpriteErrorListener(
    MapView_OnSpriteErrorListener onSpriteErrorListener,
  ) {
    _addOnSpriteErrorListener(
            reference.pointer,
            _id_addOnSpriteErrorListener as jni.JMethodIDPtr,
            onSpriteErrorListener.reference.pointer)
        .check();
  }

  static final _id_removeOnSpriteErrorListener = _class.instanceMethodId(
    r'removeOnSpriteErrorListener',
    r'(Lorg/maplibre/android/maps/MapView$OnSpriteErrorListener;)V',
  );

  static final _removeOnSpriteErrorListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnSpriteErrorListener(org.maplibre.android.maps.MapView$OnSpriteErrorListener onSpriteErrorListener)`
  void removeOnSpriteErrorListener(
    MapView_OnSpriteErrorListener onSpriteErrorListener,
  ) {
    _removeOnSpriteErrorListener(
            reference.pointer,
            _id_removeOnSpriteErrorListener as jni.JMethodIDPtr,
            onSpriteErrorListener.reference.pointer)
        .check();
  }

  static final _id_addOnSpriteRequestedListener = _class.instanceMethodId(
    r'addOnSpriteRequestedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnSpriteRequestedListener;)V',
  );

  static final _addOnSpriteRequestedListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnSpriteRequestedListener(org.maplibre.android.maps.MapView$OnSpriteRequestedListener onSpriteRequestedListener)`
  void addOnSpriteRequestedListener(
    MapView_OnSpriteRequestedListener onSpriteRequestedListener,
  ) {
    _addOnSpriteRequestedListener(
            reference.pointer,
            _id_addOnSpriteRequestedListener as jni.JMethodIDPtr,
            onSpriteRequestedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnSpriteRequestedListener = _class.instanceMethodId(
    r'removeOnSpriteRequestedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnSpriteRequestedListener;)V',
  );

  static final _removeOnSpriteRequestedListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnSpriteRequestedListener(org.maplibre.android.maps.MapView$OnSpriteRequestedListener onSpriteRequestedListener)`
  void removeOnSpriteRequestedListener(
    MapView_OnSpriteRequestedListener onSpriteRequestedListener,
  ) {
    _removeOnSpriteRequestedListener(
            reference.pointer,
            _id_removeOnSpriteRequestedListener as jni.JMethodIDPtr,
            onSpriteRequestedListener.reference.pointer)
        .check();
  }

  static final _id_getMapAsync = _class.instanceMethodId(
    r'getMapAsync',
    r'(Lorg/maplibre/android/maps/OnMapReadyCallback;)V',
  );

  static final _getMapAsync = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void getMapAsync(org.maplibre.android.maps.OnMapReadyCallback onMapReadyCallback)`
  void getMapAsync(
    onmapreadycallback_.OnMapReadyCallback onMapReadyCallback,
  ) {
    _getMapAsync(reference.pointer, _id_getMapAsync as jni.JMethodIDPtr,
            onMapReadyCallback.reference.pointer)
        .check();
  }

  static final _id_setMapStrictModeEnabled = _class.staticMethodId(
    r'setMapStrictModeEnabled',
    r'(Z)V',
  );

  static final _setMapStrictModeEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public void setMapStrictModeEnabled(boolean z)`
  static void setMapStrictModeEnabled(
    bool z,
  ) {
    _setMapStrictModeEnabled(_class.reference.pointer,
            _id_setMapStrictModeEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }
}

final class $MapViewType extends jni.JObjType<MapView> {
  const $MapViewType();

  @override
  String get signature => r'Lorg/maplibre/android/maps/MapView;';

  @override
  MapView fromReference(jni.JReference reference) =>
      MapView.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MapViewType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapViewType) && other is $MapViewType;
  }
}
