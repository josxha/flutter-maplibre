// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'AttributionDialogManager.dart' as attributiondialogmanager_;

/// from: `org.maplibre.android.maps.UiSettings`
class UiSettings extends jni.JObject {
  @override
  late final jni.JObjType<UiSettings> $type = type;

  UiSettings.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/maps/UiSettings');

  /// The type which includes information such as the signature of this class.
  static const type = $UiSettingsType();
  static final _id_getFlingAnimationBaseTime = _class.instanceMethodId(
    r'getFlingAnimationBaseTime',
    r'()J',
  );

  static final _getFlingAnimationBaseTime = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public long getFlingAnimationBaseTime()`
  int getFlingAnimationBaseTime() {
    return _getFlingAnimationBaseTime(reference.pointer,
            _id_getFlingAnimationBaseTime as jni.JMethodIDPtr)
        .long;
  }

  static final _id_getFlingThreshold = _class.instanceMethodId(
    r'getFlingThreshold',
    r'()J',
  );

  static final _getFlingThreshold = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public long getFlingThreshold()`
  int getFlingThreshold() {
    return _getFlingThreshold(
            reference.pointer, _id_getFlingThreshold as jni.JMethodIDPtr)
        .long;
  }

  static final _id_setFlingAnimationBaseTime = _class.instanceMethodId(
    r'setFlingAnimationBaseTime',
    r'(J)V',
  );

  static final _setFlingAnimationBaseTime = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setFlingAnimationBaseTime(long j)`
  void setFlingAnimationBaseTime(
    int j,
  ) {
    _setFlingAnimationBaseTime(reference.pointer,
            _id_setFlingAnimationBaseTime as jni.JMethodIDPtr, j)
        .check();
  }

  static final _id_setFlingThreshold = _class.instanceMethodId(
    r'setFlingThreshold',
    r'(J)V',
  );

  static final _setFlingThreshold = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setFlingThreshold(long j)`
  void setFlingThreshold(
    int j,
  ) {
    _setFlingThreshold(
            reference.pointer, _id_setFlingThreshold as jni.JMethodIDPtr, j)
        .check();
  }

  static final _id_setCompassEnabled = _class.instanceMethodId(
    r'setCompassEnabled',
    r'(Z)V',
  );

  static final _setCompassEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setCompassEnabled(boolean z)`
  void setCompassEnabled(
    bool z,
  ) {
    _setCompassEnabled(reference.pointer,
            _id_setCompassEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isCompassEnabled = _class.instanceMethodId(
    r'isCompassEnabled',
    r'()Z',
  );

  static final _isCompassEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isCompassEnabled()`
  bool isCompassEnabled() {
    return _isCompassEnabled(
            reference.pointer, _id_isCompassEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setCompassGravity = _class.instanceMethodId(
    r'setCompassGravity',
    r'(I)V',
  );

  static final _setCompassGravity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setCompassGravity(int i)`
  void setCompassGravity(
    int i,
  ) {
    _setCompassGravity(
            reference.pointer, _id_setCompassGravity as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setCompassFadeFacingNorth = _class.instanceMethodId(
    r'setCompassFadeFacingNorth',
    r'(Z)V',
  );

  static final _setCompassFadeFacingNorth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setCompassFadeFacingNorth(boolean z)`
  void setCompassFadeFacingNorth(
    bool z,
  ) {
    _setCompassFadeFacingNorth(reference.pointer,
            _id_setCompassFadeFacingNorth as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setCompassImage = _class.instanceMethodId(
    r'setCompassImage',
    r'(Landroid/graphics/drawable/Drawable;)V',
  );

  static final _setCompassImage = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setCompassImage(android.graphics.drawable.Drawable drawable)`
  void setCompassImage(
    jni.JObject drawable,
  ) {
    _setCompassImage(reference.pointer, _id_setCompassImage as jni.JMethodIDPtr,
            drawable.reference.pointer)
        .check();
  }

  static final _id_isCompassFadeWhenFacingNorth = _class.instanceMethodId(
    r'isCompassFadeWhenFacingNorth',
    r'()Z',
  );

  static final _isCompassFadeWhenFacingNorth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isCompassFadeWhenFacingNorth()`
  bool isCompassFadeWhenFacingNorth() {
    return _isCompassFadeWhenFacingNorth(reference.pointer,
            _id_isCompassFadeWhenFacingNorth as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getCompassGravity = _class.instanceMethodId(
    r'getCompassGravity',
    r'()I',
  );

  static final _getCompassGravity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getCompassGravity()`
  int getCompassGravity() {
    return _getCompassGravity(
            reference.pointer, _id_getCompassGravity as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setCompassMargins = _class.instanceMethodId(
    r'setCompassMargins',
    r'(IIII)V',
  );

  static final _setCompassMargins = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int, int)>();

  /// from: `public void setCompassMargins(int i, int i1, int i2, int i3)`
  void setCompassMargins(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _setCompassMargins(reference.pointer,
            _id_setCompassMargins as jni.JMethodIDPtr, i, i1, i2, i3)
        .check();
  }

  static final _id_getCompassMarginLeft = _class.instanceMethodId(
    r'getCompassMarginLeft',
    r'()I',
  );

  static final _getCompassMarginLeft = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getCompassMarginLeft()`
  int getCompassMarginLeft() {
    return _getCompassMarginLeft(
            reference.pointer, _id_getCompassMarginLeft as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getCompassMarginTop = _class.instanceMethodId(
    r'getCompassMarginTop',
    r'()I',
  );

  static final _getCompassMarginTop = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getCompassMarginTop()`
  int getCompassMarginTop() {
    return _getCompassMarginTop(
            reference.pointer, _id_getCompassMarginTop as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getCompassMarginRight = _class.instanceMethodId(
    r'getCompassMarginRight',
    r'()I',
  );

  static final _getCompassMarginRight = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getCompassMarginRight()`
  int getCompassMarginRight() {
    return _getCompassMarginRight(
            reference.pointer, _id_getCompassMarginRight as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getCompassMarginBottom = _class.instanceMethodId(
    r'getCompassMarginBottom',
    r'()I',
  );

  static final _getCompassMarginBottom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getCompassMarginBottom()`
  int getCompassMarginBottom() {
    return _getCompassMarginBottom(
            reference.pointer, _id_getCompassMarginBottom as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getCompassImage = _class.instanceMethodId(
    r'getCompassImage',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _getCompassImage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.drawable.Drawable getCompassImage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCompassImage() {
    return _getCompassImage(
            reference.pointer, _id_getCompassImage as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setLogoEnabled = _class.instanceMethodId(
    r'setLogoEnabled',
    r'(Z)V',
  );

  static final _setLogoEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setLogoEnabled(boolean z)`
  void setLogoEnabled(
    bool z,
  ) {
    _setLogoEnabled(reference.pointer, _id_setLogoEnabled as jni.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_isLogoEnabled = _class.instanceMethodId(
    r'isLogoEnabled',
    r'()Z',
  );

  static final _isLogoEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isLogoEnabled()`
  bool isLogoEnabled() {
    return _isLogoEnabled(
            reference.pointer, _id_isLogoEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setLogoGravity = _class.instanceMethodId(
    r'setLogoGravity',
    r'(I)V',
  );

  static final _setLogoGravity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setLogoGravity(int i)`
  void setLogoGravity(
    int i,
  ) {
    _setLogoGravity(
            reference.pointer, _id_setLogoGravity as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getLogoGravity = _class.instanceMethodId(
    r'getLogoGravity',
    r'()I',
  );

  static final _getLogoGravity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getLogoGravity()`
  int getLogoGravity() {
    return _getLogoGravity(
            reference.pointer, _id_getLogoGravity as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setLogoMargins = _class.instanceMethodId(
    r'setLogoMargins',
    r'(IIII)V',
  );

  static final _setLogoMargins = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int, int)>();

  /// from: `public void setLogoMargins(int i, int i1, int i2, int i3)`
  void setLogoMargins(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _setLogoMargins(reference.pointer, _id_setLogoMargins as jni.JMethodIDPtr,
            i, i1, i2, i3)
        .check();
  }

  static final _id_getLogoMarginLeft = _class.instanceMethodId(
    r'getLogoMarginLeft',
    r'()I',
  );

  static final _getLogoMarginLeft = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getLogoMarginLeft()`
  int getLogoMarginLeft() {
    return _getLogoMarginLeft(
            reference.pointer, _id_getLogoMarginLeft as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getLogoMarginTop = _class.instanceMethodId(
    r'getLogoMarginTop',
    r'()I',
  );

  static final _getLogoMarginTop = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getLogoMarginTop()`
  int getLogoMarginTop() {
    return _getLogoMarginTop(
            reference.pointer, _id_getLogoMarginTop as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getLogoMarginRight = _class.instanceMethodId(
    r'getLogoMarginRight',
    r'()I',
  );

  static final _getLogoMarginRight = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getLogoMarginRight()`
  int getLogoMarginRight() {
    return _getLogoMarginRight(
            reference.pointer, _id_getLogoMarginRight as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getLogoMarginBottom = _class.instanceMethodId(
    r'getLogoMarginBottom',
    r'()I',
  );

  static final _getLogoMarginBottom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getLogoMarginBottom()`
  int getLogoMarginBottom() {
    return _getLogoMarginBottom(
            reference.pointer, _id_getLogoMarginBottom as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setAttributionEnabled = _class.instanceMethodId(
    r'setAttributionEnabled',
    r'(Z)V',
  );

  static final _setAttributionEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setAttributionEnabled(boolean z)`
  void setAttributionEnabled(
    bool z,
  ) {
    _setAttributionEnabled(reference.pointer,
            _id_setAttributionEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isAttributionEnabled = _class.instanceMethodId(
    r'isAttributionEnabled',
    r'()Z',
  );

  static final _isAttributionEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isAttributionEnabled()`
  bool isAttributionEnabled() {
    return _isAttributionEnabled(
            reference.pointer, _id_isAttributionEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setAttributionDialogManager = _class.instanceMethodId(
    r'setAttributionDialogManager',
    r'(Lorg/maplibre/android/maps/AttributionDialogManager;)V',
  );

  static final _setAttributionDialogManager = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setAttributionDialogManager(org.maplibre.android.maps.AttributionDialogManager attributionDialogManager)`
  void setAttributionDialogManager(
    attributiondialogmanager_.AttributionDialogManager attributionDialogManager,
  ) {
    _setAttributionDialogManager(
            reference.pointer,
            _id_setAttributionDialogManager as jni.JMethodIDPtr,
            attributionDialogManager.reference.pointer)
        .check();
  }

  static final _id_getAttributionDialogManager = _class.instanceMethodId(
    r'getAttributionDialogManager',
    r'()Lorg/maplibre/android/maps/AttributionDialogManager;',
  );

  static final _getAttributionDialogManager = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.maps.AttributionDialogManager getAttributionDialogManager()`
  /// The returned object must be released after use, by calling the [release] method.
  attributiondialogmanager_.AttributionDialogManager
      getAttributionDialogManager() {
    return _getAttributionDialogManager(reference.pointer,
            _id_getAttributionDialogManager as jni.JMethodIDPtr)
        .object(
            const attributiondialogmanager_.$AttributionDialogManagerType());
  }

  static final _id_setAttributionGravity = _class.instanceMethodId(
    r'setAttributionGravity',
    r'(I)V',
  );

  static final _setAttributionGravity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setAttributionGravity(int i)`
  void setAttributionGravity(
    int i,
  ) {
    _setAttributionGravity(
            reference.pointer, _id_setAttributionGravity as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getAttributionGravity = _class.instanceMethodId(
    r'getAttributionGravity',
    r'()I',
  );

  static final _getAttributionGravity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getAttributionGravity()`
  int getAttributionGravity() {
    return _getAttributionGravity(
            reference.pointer, _id_getAttributionGravity as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setAttributionMargins = _class.instanceMethodId(
    r'setAttributionMargins',
    r'(IIII)V',
  );

  static final _setAttributionMargins = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int, int)>();

  /// from: `public void setAttributionMargins(int i, int i1, int i2, int i3)`
  void setAttributionMargins(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _setAttributionMargins(reference.pointer,
            _id_setAttributionMargins as jni.JMethodIDPtr, i, i1, i2, i3)
        .check();
  }

  static final _id_setAttributionTintColor = _class.instanceMethodId(
    r'setAttributionTintColor',
    r'(I)V',
  );

  static final _setAttributionTintColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setAttributionTintColor(int i)`
  void setAttributionTintColor(
    int i,
  ) {
    _setAttributionTintColor(reference.pointer,
            _id_setAttributionTintColor as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getAttributionMarginLeft = _class.instanceMethodId(
    r'getAttributionMarginLeft',
    r'()I',
  );

  static final _getAttributionMarginLeft = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getAttributionMarginLeft()`
  int getAttributionMarginLeft() {
    return _getAttributionMarginLeft(
            reference.pointer, _id_getAttributionMarginLeft as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getAttributionMarginTop = _class.instanceMethodId(
    r'getAttributionMarginTop',
    r'()I',
  );

  static final _getAttributionMarginTop = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getAttributionMarginTop()`
  int getAttributionMarginTop() {
    return _getAttributionMarginTop(
            reference.pointer, _id_getAttributionMarginTop as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getAttributionMarginRight = _class.instanceMethodId(
    r'getAttributionMarginRight',
    r'()I',
  );

  static final _getAttributionMarginRight = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getAttributionMarginRight()`
  int getAttributionMarginRight() {
    return _getAttributionMarginRight(reference.pointer,
            _id_getAttributionMarginRight as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getAttributionMarginBottom = _class.instanceMethodId(
    r'getAttributionMarginBottom',
    r'()I',
  );

  static final _getAttributionMarginBottom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getAttributionMarginBottom()`
  int getAttributionMarginBottom() {
    return _getAttributionMarginBottom(reference.pointer,
            _id_getAttributionMarginBottom as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setRotateGesturesEnabled = _class.instanceMethodId(
    r'setRotateGesturesEnabled',
    r'(Z)V',
  );

  static final _setRotateGesturesEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setRotateGesturesEnabled(boolean z)`
  void setRotateGesturesEnabled(
    bool z,
  ) {
    _setRotateGesturesEnabled(reference.pointer,
            _id_setRotateGesturesEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isRotateGesturesEnabled = _class.instanceMethodId(
    r'isRotateGesturesEnabled',
    r'()Z',
  );

  static final _isRotateGesturesEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isRotateGesturesEnabled()`
  bool isRotateGesturesEnabled() {
    return _isRotateGesturesEnabled(
            reference.pointer, _id_isRotateGesturesEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setTiltGesturesEnabled = _class.instanceMethodId(
    r'setTiltGesturesEnabled',
    r'(Z)V',
  );

  static final _setTiltGesturesEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setTiltGesturesEnabled(boolean z)`
  void setTiltGesturesEnabled(
    bool z,
  ) {
    _setTiltGesturesEnabled(reference.pointer,
            _id_setTiltGesturesEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isTiltGesturesEnabled = _class.instanceMethodId(
    r'isTiltGesturesEnabled',
    r'()Z',
  );

  static final _isTiltGesturesEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isTiltGesturesEnabled()`
  bool isTiltGesturesEnabled() {
    return _isTiltGesturesEnabled(
            reference.pointer, _id_isTiltGesturesEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setZoomGesturesEnabled = _class.instanceMethodId(
    r'setZoomGesturesEnabled',
    r'(Z)V',
  );

  static final _setZoomGesturesEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setZoomGesturesEnabled(boolean z)`
  void setZoomGesturesEnabled(
    bool z,
  ) {
    _setZoomGesturesEnabled(reference.pointer,
            _id_setZoomGesturesEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isZoomGesturesEnabled = _class.instanceMethodId(
    r'isZoomGesturesEnabled',
    r'()Z',
  );

  static final _isZoomGesturesEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isZoomGesturesEnabled()`
  bool isZoomGesturesEnabled() {
    return _isZoomGesturesEnabled(
            reference.pointer, _id_isZoomGesturesEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setDoubleTapGesturesEnabled = _class.instanceMethodId(
    r'setDoubleTapGesturesEnabled',
    r'(Z)V',
  );

  static final _setDoubleTapGesturesEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setDoubleTapGesturesEnabled(boolean z)`
  void setDoubleTapGesturesEnabled(
    bool z,
  ) {
    _setDoubleTapGesturesEnabled(reference.pointer,
            _id_setDoubleTapGesturesEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isDoubleTapGesturesEnabled = _class.instanceMethodId(
    r'isDoubleTapGesturesEnabled',
    r'()Z',
  );

  static final _isDoubleTapGesturesEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isDoubleTapGesturesEnabled()`
  bool isDoubleTapGesturesEnabled() {
    return _isDoubleTapGesturesEnabled(reference.pointer,
            _id_isDoubleTapGesturesEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isQuickZoomGesturesEnabled = _class.instanceMethodId(
    r'isQuickZoomGesturesEnabled',
    r'()Z',
  );

  static final _isQuickZoomGesturesEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isQuickZoomGesturesEnabled()`
  bool isQuickZoomGesturesEnabled() {
    return _isQuickZoomGesturesEnabled(reference.pointer,
            _id_isQuickZoomGesturesEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setQuickZoomGesturesEnabled = _class.instanceMethodId(
    r'setQuickZoomGesturesEnabled',
    r'(Z)V',
  );

  static final _setQuickZoomGesturesEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setQuickZoomGesturesEnabled(boolean z)`
  void setQuickZoomGesturesEnabled(
    bool z,
  ) {
    _setQuickZoomGesturesEnabled(reference.pointer,
            _id_setQuickZoomGesturesEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getZoomRate = _class.instanceMethodId(
    r'getZoomRate',
    r'()F',
  );

  static final _getZoomRate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public float getZoomRate()`
  double getZoomRate() {
    return _getZoomRate(reference.pointer, _id_getZoomRate as jni.JMethodIDPtr)
        .float;
  }

  static final _id_setZoomRate = _class.instanceMethodId(
    r'setZoomRate',
    r'(F)V',
  );

  static final _setZoomRate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public void setZoomRate(float f)`
  void setZoomRate(
    double f,
  ) {
    _setZoomRate(reference.pointer, _id_setZoomRate as jni.JMethodIDPtr, f)
        .check();
  }

  static final _id_isDeselectMarkersOnTap = _class.instanceMethodId(
    r'isDeselectMarkersOnTap',
    r'()Z',
  );

  static final _isDeselectMarkersOnTap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isDeselectMarkersOnTap()`
  bool isDeselectMarkersOnTap() {
    return _isDeselectMarkersOnTap(
            reference.pointer, _id_isDeselectMarkersOnTap as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setDeselectMarkersOnTap = _class.instanceMethodId(
    r'setDeselectMarkersOnTap',
    r'(Z)V',
  );

  static final _setDeselectMarkersOnTap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setDeselectMarkersOnTap(boolean z)`
  void setDeselectMarkersOnTap(
    bool z,
  ) {
    _setDeselectMarkersOnTap(reference.pointer,
            _id_setDeselectMarkersOnTap as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setScrollGesturesEnabled = _class.instanceMethodId(
    r'setScrollGesturesEnabled',
    r'(Z)V',
  );

  static final _setScrollGesturesEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setScrollGesturesEnabled(boolean z)`
  void setScrollGesturesEnabled(
    bool z,
  ) {
    _setScrollGesturesEnabled(reference.pointer,
            _id_setScrollGesturesEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isScrollGesturesEnabled = _class.instanceMethodId(
    r'isScrollGesturesEnabled',
    r'()Z',
  );

  static final _isScrollGesturesEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isScrollGesturesEnabled()`
  bool isScrollGesturesEnabled() {
    return _isScrollGesturesEnabled(
            reference.pointer, _id_isScrollGesturesEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setHorizontalScrollGesturesEnabled = _class.instanceMethodId(
    r'setHorizontalScrollGesturesEnabled',
    r'(Z)V',
  );

  static final _setHorizontalScrollGesturesEnabled =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setHorizontalScrollGesturesEnabled(boolean z)`
  void setHorizontalScrollGesturesEnabled(
    bool z,
  ) {
    _setHorizontalScrollGesturesEnabled(
            reference.pointer,
            _id_setHorizontalScrollGesturesEnabled as jni.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_isHorizontalScrollGesturesEnabled = _class.instanceMethodId(
    r'isHorizontalScrollGesturesEnabled',
    r'()Z',
  );

  static final _isHorizontalScrollGesturesEnabled =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isHorizontalScrollGesturesEnabled()`
  bool isHorizontalScrollGesturesEnabled() {
    return _isHorizontalScrollGesturesEnabled(reference.pointer,
            _id_isHorizontalScrollGesturesEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isScaleVelocityAnimationEnabled = _class.instanceMethodId(
    r'isScaleVelocityAnimationEnabled',
    r'()Z',
  );

  static final _isScaleVelocityAnimationEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isScaleVelocityAnimationEnabled()`
  bool isScaleVelocityAnimationEnabled() {
    return _isScaleVelocityAnimationEnabled(reference.pointer,
            _id_isScaleVelocityAnimationEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setScaleVelocityAnimationEnabled = _class.instanceMethodId(
    r'setScaleVelocityAnimationEnabled',
    r'(Z)V',
  );

  static final _setScaleVelocityAnimationEnabled =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setScaleVelocityAnimationEnabled(boolean z)`
  void setScaleVelocityAnimationEnabled(
    bool z,
  ) {
    _setScaleVelocityAnimationEnabled(reference.pointer,
            _id_setScaleVelocityAnimationEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isRotateVelocityAnimationEnabled = _class.instanceMethodId(
    r'isRotateVelocityAnimationEnabled',
    r'()Z',
  );

  static final _isRotateVelocityAnimationEnabled =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isRotateVelocityAnimationEnabled()`
  bool isRotateVelocityAnimationEnabled() {
    return _isRotateVelocityAnimationEnabled(reference.pointer,
            _id_isRotateVelocityAnimationEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setRotateVelocityAnimationEnabled = _class.instanceMethodId(
    r'setRotateVelocityAnimationEnabled',
    r'(Z)V',
  );

  static final _setRotateVelocityAnimationEnabled =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setRotateVelocityAnimationEnabled(boolean z)`
  void setRotateVelocityAnimationEnabled(
    bool z,
  ) {
    _setRotateVelocityAnimationEnabled(
            reference.pointer,
            _id_setRotateVelocityAnimationEnabled as jni.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_isFlingVelocityAnimationEnabled = _class.instanceMethodId(
    r'isFlingVelocityAnimationEnabled',
    r'()Z',
  );

  static final _isFlingVelocityAnimationEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isFlingVelocityAnimationEnabled()`
  bool isFlingVelocityAnimationEnabled() {
    return _isFlingVelocityAnimationEnabled(reference.pointer,
            _id_isFlingVelocityAnimationEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setFlingVelocityAnimationEnabled = _class.instanceMethodId(
    r'setFlingVelocityAnimationEnabled',
    r'(Z)V',
  );

  static final _setFlingVelocityAnimationEnabled =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setFlingVelocityAnimationEnabled(boolean z)`
  void setFlingVelocityAnimationEnabled(
    bool z,
  ) {
    _setFlingVelocityAnimationEnabled(reference.pointer,
            _id_setFlingVelocityAnimationEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setAllVelocityAnimationsEnabled = _class.instanceMethodId(
    r'setAllVelocityAnimationsEnabled',
    r'(Z)V',
  );

  static final _setAllVelocityAnimationsEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setAllVelocityAnimationsEnabled(boolean z)`
  void setAllVelocityAnimationsEnabled(
    bool z,
  ) {
    _setAllVelocityAnimationsEnabled(reference.pointer,
            _id_setAllVelocityAnimationsEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isIncreaseRotateThresholdWhenScaling =
      _class.instanceMethodId(
    r'isIncreaseRotateThresholdWhenScaling',
    r'()Z',
  );

  static final _isIncreaseRotateThresholdWhenScaling =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isIncreaseRotateThresholdWhenScaling()`
  bool isIncreaseRotateThresholdWhenScaling() {
    return _isIncreaseRotateThresholdWhenScaling(reference.pointer,
            _id_isIncreaseRotateThresholdWhenScaling as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setIncreaseRotateThresholdWhenScaling =
      _class.instanceMethodId(
    r'setIncreaseRotateThresholdWhenScaling',
    r'(Z)V',
  );

  static final _setIncreaseRotateThresholdWhenScaling =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setIncreaseRotateThresholdWhenScaling(boolean z)`
  void setIncreaseRotateThresholdWhenScaling(
    bool z,
  ) {
    _setIncreaseRotateThresholdWhenScaling(
            reference.pointer,
            _id_setIncreaseRotateThresholdWhenScaling as jni.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_isDisableRotateWhenScaling = _class.instanceMethodId(
    r'isDisableRotateWhenScaling',
    r'()Z',
  );

  static final _isDisableRotateWhenScaling = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isDisableRotateWhenScaling()`
  bool isDisableRotateWhenScaling() {
    return _isDisableRotateWhenScaling(reference.pointer,
            _id_isDisableRotateWhenScaling as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setDisableRotateWhenScaling = _class.instanceMethodId(
    r'setDisableRotateWhenScaling',
    r'(Z)V',
  );

  static final _setDisableRotateWhenScaling = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setDisableRotateWhenScaling(boolean z)`
  void setDisableRotateWhenScaling(
    bool z,
  ) {
    _setDisableRotateWhenScaling(reference.pointer,
            _id_setDisableRotateWhenScaling as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isIncreaseScaleThresholdWhenRotating =
      _class.instanceMethodId(
    r'isIncreaseScaleThresholdWhenRotating',
    r'()Z',
  );

  static final _isIncreaseScaleThresholdWhenRotating =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isIncreaseScaleThresholdWhenRotating()`
  bool isIncreaseScaleThresholdWhenRotating() {
    return _isIncreaseScaleThresholdWhenRotating(reference.pointer,
            _id_isIncreaseScaleThresholdWhenRotating as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setIncreaseScaleThresholdWhenRotating =
      _class.instanceMethodId(
    r'setIncreaseScaleThresholdWhenRotating',
    r'(Z)V',
  );

  static final _setIncreaseScaleThresholdWhenRotating =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setIncreaseScaleThresholdWhenRotating(boolean z)`
  void setIncreaseScaleThresholdWhenRotating(
    bool z,
  ) {
    _setIncreaseScaleThresholdWhenRotating(
            reference.pointer,
            _id_setIncreaseScaleThresholdWhenRotating as jni.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_setAllGesturesEnabled = _class.instanceMethodId(
    r'setAllGesturesEnabled',
    r'(Z)V',
  );

  static final _setAllGesturesEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setAllGesturesEnabled(boolean z)`
  void setAllGesturesEnabled(
    bool z,
  ) {
    _setAllGesturesEnabled(reference.pointer,
            _id_setAllGesturesEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_areAllGesturesEnabled = _class.instanceMethodId(
    r'areAllGesturesEnabled',
    r'()Z',
  );

  static final _areAllGesturesEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean areAllGesturesEnabled()`
  bool areAllGesturesEnabled() {
    return _areAllGesturesEnabled(
            reference.pointer, _id_areAllGesturesEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setFocalPoint = _class.instanceMethodId(
    r'setFocalPoint',
    r'(Landroid/graphics/PointF;)V',
  );

  static final _setFocalPoint = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setFocalPoint(android.graphics.PointF pointF)`
  void setFocalPoint(
    jni.JObject pointF,
  ) {
    _setFocalPoint(reference.pointer, _id_setFocalPoint as jni.JMethodIDPtr,
            pointF.reference.pointer)
        .check();
  }

  static final _id_getFocalPoint = _class.instanceMethodId(
    r'getFocalPoint',
    r'()Landroid/graphics/PointF;',
  );

  static final _getFocalPoint = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.PointF getFocalPoint()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFocalPoint() {
    return _getFocalPoint(
            reference.pointer, _id_getFocalPoint as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getHeight = _class.instanceMethodId(
    r'getHeight',
    r'()F',
  );

  static final _getHeight = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public float getHeight()`
  double getHeight() {
    return _getHeight(reference.pointer, _id_getHeight as jni.JMethodIDPtr)
        .float;
  }

  static final _id_getWidth = _class.instanceMethodId(
    r'getWidth',
    r'()F',
  );

  static final _getWidth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public float getWidth()`
  double getWidth() {
    return _getWidth(reference.pointer, _id_getWidth as jni.JMethodIDPtr).float;
  }

  static final _id_invalidate = _class.instanceMethodId(
    r'invalidate',
    r'()V',
  );

  static final _invalidate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void invalidate()`
  void invalidate() {
    _invalidate(reference.pointer, _id_invalidate as jni.JMethodIDPtr).check();
  }
}

final class $UiSettingsType extends jni.JObjType<UiSettings> {
  const $UiSettingsType();

  @override
  String get signature => r'Lorg/maplibre/android/maps/UiSettings;';

  @override
  UiSettings fromReference(jni.JReference reference) =>
      UiSettings.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UiSettingsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UiSettingsType) && other is $UiSettingsType;
  }
}
