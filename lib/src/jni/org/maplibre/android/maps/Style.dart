// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../style/layers/Layer.dart' as layer_;

import '../style/layers/TransitionOptions.dart' as transitionoptions_;

import '../style/light/Light.dart' as light_;

import '../style/sources/Source.dart' as source_;

import '../util/DefaultStyle.dart' as defaultstyle_;

import 'Image.dart' as image_;

import 'ImageContent.dart' as imagecontent_;

import 'ImageStretches.dart' as imagestretches_;

/// from: `org.maplibre.android.maps.Style$Builder$ImageWrapper`
class Style_Builder_ImageWrapper extends jni.JObject {
  @override
  late final jni.JObjType<Style_Builder_ImageWrapper> $type = type;

  Style_Builder_ImageWrapper.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/Style$Builder$ImageWrapper');

  /// The type which includes information such as the signature of this class.
  static const type = $Style_Builder_ImageWrapperType();
  static final _id_new0 = _class.constructorId(
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;Z)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: `public void <init>(java.lang.String string, android.graphics.Bitmap bitmap, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Style_Builder_ImageWrapper(
    jni.JString string,
    jni.JObject bitmap,
    bool z,
  ) {
    return Style_Builder_ImageWrapper.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            z ? 1 : 0)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;ZLjava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, android.graphics.Bitmap bitmap, boolean z, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Style_Builder_ImageWrapper.new1(
    jni.JString string,
    jni.JObject bitmap,
    bool z,
    jni.JList<imagestretches_.ImageStretches> list,
    jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    return Style_Builder_ImageWrapper.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            z ? 1 : 0,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .reference);
  }

  static final _id_getBitmap = _class.instanceMethodId(
    r'getBitmap',
    r'()Landroid/graphics/Bitmap;',
  );

  static final _getBitmap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.Bitmap getBitmap()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getBitmap() {
    return _getBitmap(reference.pointer, _id_getBitmap as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getId = _class.instanceMethodId(
    r'getId',
    r'()Ljava/lang/String;',
  );

  static final _getId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getId()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getId() {
    return _getId(reference.pointer, _id_getId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_isSdf = _class.instanceMethodId(
    r'isSdf',
    r'()Z',
  );

  static final _isSdf = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isSdf()`
  bool isSdf() {
    return _isSdf(reference.pointer, _id_isSdf as jni.JMethodIDPtr).boolean;
  }

  static final _id_getStretchX = _class.instanceMethodId(
    r'getStretchX',
    r'()Ljava/util/List;',
  );

  static final _getStretchX = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getStretchX()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<imagestretches_.ImageStretches> getStretchX() {
    return _getStretchX(reference.pointer, _id_getStretchX as jni.JMethodIDPtr)
        .object(const jni.JListType(imagestretches_.$ImageStretchesType()));
  }

  static final _id_getStretchY = _class.instanceMethodId(
    r'getStretchY',
    r'()Ljava/util/List;',
  );

  static final _getStretchY = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getStretchY()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<imagestretches_.ImageStretches> getStretchY() {
    return _getStretchY(reference.pointer, _id_getStretchY as jni.JMethodIDPtr)
        .object(const jni.JListType(imagestretches_.$ImageStretchesType()));
  }

  static final _id_getContent = _class.instanceMethodId(
    r'getContent',
    r'()Lorg/maplibre/android/maps/ImageContent;',
  );

  static final _getContent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.maps.ImageContent getContent()`
  /// The returned object must be released after use, by calling the [release] method.
  imagecontent_.ImageContent getContent() {
    return _getContent(reference.pointer, _id_getContent as jni.JMethodIDPtr)
        .object(const imagecontent_.$ImageContentType());
  }

  static final _id_convertToImageArray = _class.staticMethodId(
    r'convertToImageArray',
    r'(Ljava/util/HashMap;Z)[Lorg/maplibre/android/maps/Style$Builder$ImageWrapper;',
  );

  static final _convertToImageArray = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `static public java.lang.Object[] convertToImageArray(java.util.HashMap hashMap, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<Style_Builder_ImageWrapper> convertToImageArray(
    jni.JObject hashMap,
    bool z,
  ) {
    return _convertToImageArray(
            _class.reference.pointer,
            _id_convertToImageArray as jni.JMethodIDPtr,
            hashMap.reference.pointer,
            z ? 1 : 0)
        .object(const jni.JArrayType($Style_Builder_ImageWrapperType()));
  }

  static final _id_convertToImageArray1 = _class.staticMethodId(
    r'convertToImageArray',
    r'(Ljava/util/HashMap;ZLjava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)[Lorg/maplibre/android/maps/Style$Builder$ImageWrapper;',
  );

  static final _convertToImageArray1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public java.lang.Object[] convertToImageArray(java.util.HashMap hashMap, boolean z, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<Style_Builder_ImageWrapper> convertToImageArray1(
    jni.JObject hashMap,
    bool z,
    jni.JList<imagestretches_.ImageStretches> list,
    jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    return _convertToImageArray1(
            _class.reference.pointer,
            _id_convertToImageArray1 as jni.JMethodIDPtr,
            hashMap.reference.pointer,
            z ? 1 : 0,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .object(const jni.JArrayType($Style_Builder_ImageWrapperType()));
  }
}

final class $Style_Builder_ImageWrapperType
    extends jni.JObjType<Style_Builder_ImageWrapper> {
  const $Style_Builder_ImageWrapperType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/Style$Builder$ImageWrapper;';

  @override
  Style_Builder_ImageWrapper fromReference(jni.JReference reference) =>
      Style_Builder_ImageWrapper.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Style_Builder_ImageWrapperType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Style_Builder_ImageWrapperType) &&
        other is $Style_Builder_ImageWrapperType;
  }
}

/// from: `org.maplibre.android.maps.Style$Builder$LayerAboveWrapper`
class Style_Builder_LayerAboveWrapper extends Style_Builder_LayerWrapper {
  @override
  late final jni.JObjType<Style_Builder_LayerAboveWrapper> $type = type;

  Style_Builder_LayerAboveWrapper.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/Style$Builder$LayerAboveWrapper');

  /// The type which includes information such as the signature of this class.
  static const type = $Style_Builder_LayerAboveWrapperType();
  static final _id_getAboveLayer = _class.instanceMethodId(
    r'getAboveLayer',
    r'()Ljava/lang/String;',
  );

  static final _getAboveLayer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getAboveLayer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAboveLayer() {
    return _getAboveLayer(
            reference.pointer, _id_getAboveLayer as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $Style_Builder_LayerAboveWrapperType
    extends jni.JObjType<Style_Builder_LayerAboveWrapper> {
  const $Style_Builder_LayerAboveWrapperType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/Style$Builder$LayerAboveWrapper;';

  @override
  Style_Builder_LayerAboveWrapper fromReference(jni.JReference reference) =>
      Style_Builder_LayerAboveWrapper.fromReference(reference);

  @override
  jni.JObjType get superType => const $Style_Builder_LayerWrapperType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($Style_Builder_LayerAboveWrapperType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Style_Builder_LayerAboveWrapperType) &&
        other is $Style_Builder_LayerAboveWrapperType;
  }
}

/// from: `org.maplibre.android.maps.Style$Builder$LayerAtWrapper`
class Style_Builder_LayerAtWrapper extends Style_Builder_LayerWrapper {
  @override
  late final jni.JObjType<Style_Builder_LayerAtWrapper> $type = type;

  Style_Builder_LayerAtWrapper.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/Style$Builder$LayerAtWrapper');

  /// The type which includes information such as the signature of this class.
  static const type = $Style_Builder_LayerAtWrapperType();
  static final _id_getIndex = _class.instanceMethodId(
    r'getIndex',
    r'()I',
  );

  static final _getIndex = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getIndex()`
  int getIndex() {
    return _getIndex(reference.pointer, _id_getIndex as jni.JMethodIDPtr)
        .integer;
  }
}

final class $Style_Builder_LayerAtWrapperType
    extends jni.JObjType<Style_Builder_LayerAtWrapper> {
  const $Style_Builder_LayerAtWrapperType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/Style$Builder$LayerAtWrapper;';

  @override
  Style_Builder_LayerAtWrapper fromReference(jni.JReference reference) =>
      Style_Builder_LayerAtWrapper.fromReference(reference);

  @override
  jni.JObjType get superType => const $Style_Builder_LayerWrapperType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($Style_Builder_LayerAtWrapperType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Style_Builder_LayerAtWrapperType) &&
        other is $Style_Builder_LayerAtWrapperType;
  }
}

/// from: `org.maplibre.android.maps.Style$Builder$LayerBelowWrapper`
class Style_Builder_LayerBelowWrapper extends Style_Builder_LayerWrapper {
  @override
  late final jni.JObjType<Style_Builder_LayerBelowWrapper> $type = type;

  Style_Builder_LayerBelowWrapper.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/Style$Builder$LayerBelowWrapper');

  /// The type which includes information such as the signature of this class.
  static const type = $Style_Builder_LayerBelowWrapperType();
  static final _id_getBelowLayer = _class.instanceMethodId(
    r'getBelowLayer',
    r'()Ljava/lang/String;',
  );

  static final _getBelowLayer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getBelowLayer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getBelowLayer() {
    return _getBelowLayer(
            reference.pointer, _id_getBelowLayer as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $Style_Builder_LayerBelowWrapperType
    extends jni.JObjType<Style_Builder_LayerBelowWrapper> {
  const $Style_Builder_LayerBelowWrapperType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/Style$Builder$LayerBelowWrapper;';

  @override
  Style_Builder_LayerBelowWrapper fromReference(jni.JReference reference) =>
      Style_Builder_LayerBelowWrapper.fromReference(reference);

  @override
  jni.JObjType get superType => const $Style_Builder_LayerWrapperType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($Style_Builder_LayerBelowWrapperType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Style_Builder_LayerBelowWrapperType) &&
        other is $Style_Builder_LayerBelowWrapperType;
  }
}

/// from: `org.maplibre.android.maps.Style$Builder$LayerWrapper`
class Style_Builder_LayerWrapper extends jni.JObject {
  @override
  late final jni.JObjType<Style_Builder_LayerWrapper> $type = type;

  Style_Builder_LayerWrapper.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/Style$Builder$LayerWrapper');

  /// The type which includes information such as the signature of this class.
  static const type = $Style_Builder_LayerWrapperType();
  static final _id_getLayer = _class.instanceMethodId(
    r'getLayer',
    r'()Lorg/maplibre/android/style/layers/Layer;',
  );

  static final _getLayer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.Layer getLayer()`
  /// The returned object must be released after use, by calling the [release] method.
  layer_.Layer getLayer() {
    return _getLayer(reference.pointer, _id_getLayer as jni.JMethodIDPtr)
        .object(const layer_.$LayerType());
  }
}

final class $Style_Builder_LayerWrapperType
    extends jni.JObjType<Style_Builder_LayerWrapper> {
  const $Style_Builder_LayerWrapperType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/Style$Builder$LayerWrapper;';

  @override
  Style_Builder_LayerWrapper fromReference(jni.JReference reference) =>
      Style_Builder_LayerWrapper.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Style_Builder_LayerWrapperType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Style_Builder_LayerWrapperType) &&
        other is $Style_Builder_LayerWrapperType;
  }
}

/// from: `org.maplibre.android.maps.Style$Builder`
class Style_Builder extends jni.JObject {
  @override
  late final jni.JObjType<Style_Builder> $type = type;

  Style_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/maps/Style$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $Style_BuilderType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Style_Builder() {
    return Style_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_fromUrl = _class.instanceMethodId(
    r'fromUrl',
    r'(Ljava/lang/String;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _fromUrl = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder fromUrl(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder fromUrl(
    jni.JString string,
  ) {
    return _fromUrl(reference.pointer, _id_fromUrl as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_fromUri = _class.instanceMethodId(
    r'fromUri',
    r'(Ljava/lang/String;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _fromUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder fromUri(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder fromUri(
    jni.JString string,
  ) {
    return _fromUri(reference.pointer, _id_fromUri as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_fromJson = _class.instanceMethodId(
    r'fromJson',
    r'(Ljava/lang/String;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _fromJson = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder fromJson(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder fromJson(
    jni.JString string,
  ) {
    return _fromJson(reference.pointer, _id_fromJson as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withSource = _class.instanceMethodId(
    r'withSource',
    r'(Lorg/maplibre/android/style/sources/Source;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withSource = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withSource(org.maplibre.android.style.sources.Source source)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withSource(
    source_.Source source,
  ) {
    return _withSource(reference.pointer, _id_withSource as jni.JMethodIDPtr,
            source.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withSources = _class.instanceMethodId(
    r'withSources',
    r'([Lorg/maplibre/android/style/sources/Source;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withSources = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withSources(org.maplibre.android.style.sources.Source[] sources)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withSources(
    jni.JArray<source_.Source> sources,
  ) {
    return _withSources(reference.pointer, _id_withSources as jni.JMethodIDPtr,
            sources.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withLayer = _class.instanceMethodId(
    r'withLayer',
    r'(Lorg/maplibre/android/style/layers/Layer;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withLayer = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withLayer(org.maplibre.android.style.layers.Layer layer)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withLayer(
    layer_.Layer layer,
  ) {
    return _withLayer(reference.pointer, _id_withLayer as jni.JMethodIDPtr,
            layer.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withLayers = _class.instanceMethodId(
    r'withLayers',
    r'([Lorg/maplibre/android/style/layers/Layer;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withLayers = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withLayers(org.maplibre.android.style.layers.Layer[] layers)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withLayers(
    jni.JArray<layer_.Layer> layers,
  ) {
    return _withLayers(reference.pointer, _id_withLayers as jni.JMethodIDPtr,
            layers.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withLayerAt = _class.instanceMethodId(
    r'withLayerAt',
    r'(Lorg/maplibre/android/style/layers/Layer;I)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withLayerAt = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withLayerAt(org.maplibre.android.style.layers.Layer layer, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withLayerAt(
    layer_.Layer layer,
    int i,
  ) {
    return _withLayerAt(reference.pointer, _id_withLayerAt as jni.JMethodIDPtr,
            layer.reference.pointer, i)
        .object(const $Style_BuilderType());
  }

  static final _id_withLayerAbove = _class.instanceMethodId(
    r'withLayerAbove',
    r'(Lorg/maplibre/android/style/layers/Layer;Ljava/lang/String;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withLayerAbove = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withLayerAbove(org.maplibre.android.style.layers.Layer layer, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withLayerAbove(
    layer_.Layer layer,
    jni.JString string,
  ) {
    return _withLayerAbove(
            reference.pointer,
            _id_withLayerAbove as jni.JMethodIDPtr,
            layer.reference.pointer,
            string.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withLayerBelow = _class.instanceMethodId(
    r'withLayerBelow',
    r'(Lorg/maplibre/android/style/layers/Layer;Ljava/lang/String;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withLayerBelow = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withLayerBelow(org.maplibre.android.style.layers.Layer layer, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withLayerBelow(
    layer_.Layer layer,
    jni.JString string,
  ) {
    return _withLayerBelow(
            reference.pointer,
            _id_withLayerBelow as jni.JMethodIDPtr,
            layer.reference.pointer,
            string.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withTransition = _class.instanceMethodId(
    r'withTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    return _withTransition(
            reference.pointer,
            _id_withTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withImage = _class.instanceMethodId(
    r'withImage',
    r'(Ljava/lang/String;Landroid/graphics/drawable/Drawable;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withImage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withImage(java.lang.String string, android.graphics.drawable.Drawable drawable)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withImage(
    jni.JString string,
    jni.JObject drawable,
  ) {
    return _withImage(reference.pointer, _id_withImage as jni.JMethodIDPtr,
            string.reference.pointer, drawable.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withImage1 = _class.instanceMethodId(
    r'withImage',
    r'(Ljava/lang/String;Landroid/graphics/drawable/Drawable;Ljava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withImage1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withImage(java.lang.String string, android.graphics.drawable.Drawable drawable, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withImage1(
    jni.JString string,
    jni.JObject drawable,
    jni.JList<imagestretches_.ImageStretches> list,
    jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    return _withImage1(
            reference.pointer,
            _id_withImage1 as jni.JMethodIDPtr,
            string.reference.pointer,
            drawable.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withDrawableImages = _class.instanceMethodId(
    r'withDrawableImages',
    r'([Landroid/util/Pair;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withDrawableImages = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withDrawableImages(java.lang.Object[] pairs)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withDrawableImages(
    jni.JArray<jni.JObject> pairs,
  ) {
    return _withDrawableImages(reference.pointer,
            _id_withDrawableImages as jni.JMethodIDPtr, pairs.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withImage2 = _class.instanceMethodId(
    r'withImage',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withImage2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withImage(java.lang.String string, android.graphics.Bitmap bitmap)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withImage2(
    jni.JString string,
    jni.JObject bitmap,
  ) {
    return _withImage2(reference.pointer, _id_withImage2 as jni.JMethodIDPtr,
            string.reference.pointer, bitmap.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withImage3 = _class.instanceMethodId(
    r'withImage',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;Ljava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withImage3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withImage(java.lang.String string, android.graphics.Bitmap bitmap, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withImage3(
    jni.JString string,
    jni.JObject bitmap,
    jni.JList<imagestretches_.ImageStretches> list,
    jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    return _withImage3(
            reference.pointer,
            _id_withImage3 as jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withBitmapImages = _class.instanceMethodId(
    r'withBitmapImages',
    r'([Landroid/util/Pair;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withBitmapImages = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withBitmapImages(java.lang.Object[] pairs)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withBitmapImages(
    jni.JArray<jni.JObject> pairs,
  ) {
    return _withBitmapImages(reference.pointer,
            _id_withBitmapImages as jni.JMethodIDPtr, pairs.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withImage4 = _class.instanceMethodId(
    r'withImage',
    r'(Ljava/lang/String;Landroid/graphics/drawable/Drawable;Z)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withImage4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withImage(java.lang.String string, android.graphics.drawable.Drawable drawable, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withImage4(
    jni.JString string,
    jni.JObject drawable,
    bool z,
  ) {
    return _withImage4(reference.pointer, _id_withImage4 as jni.JMethodIDPtr,
            string.reference.pointer, drawable.reference.pointer, z ? 1 : 0)
        .object(const $Style_BuilderType());
  }

  static final _id_withImage5 = _class.instanceMethodId(
    r'withImage',
    r'(Ljava/lang/String;Landroid/graphics/drawable/Drawable;ZLjava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withImage5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withImage(java.lang.String string, android.graphics.drawable.Drawable drawable, boolean z, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withImage5(
    jni.JString string,
    jni.JObject drawable,
    bool z,
    jni.JList<imagestretches_.ImageStretches> list,
    jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    return _withImage5(
            reference.pointer,
            _id_withImage5 as jni.JMethodIDPtr,
            string.reference.pointer,
            drawable.reference.pointer,
            z ? 1 : 0,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withDrawableImages1 = _class.instanceMethodId(
    r'withDrawableImages',
    r'(Z[Landroid/util/Pair;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withDrawableImages1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withDrawableImages(boolean z, java.lang.Object[] pairs)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withDrawableImages1(
    bool z,
    jni.JArray<jni.JObject> pairs,
  ) {
    return _withDrawableImages1(
            reference.pointer,
            _id_withDrawableImages1 as jni.JMethodIDPtr,
            z ? 1 : 0,
            pairs.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withImage6 = _class.instanceMethodId(
    r'withImage',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;Z)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withImage6 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withImage(java.lang.String string, android.graphics.Bitmap bitmap, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withImage6(
    jni.JString string,
    jni.JObject bitmap,
    bool z,
  ) {
    return _withImage6(reference.pointer, _id_withImage6 as jni.JMethodIDPtr,
            string.reference.pointer, bitmap.reference.pointer, z ? 1 : 0)
        .object(const $Style_BuilderType());
  }

  static final _id_withImage7 = _class.instanceMethodId(
    r'withImage',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;ZLjava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withImage7 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withImage(java.lang.String string, android.graphics.Bitmap bitmap, boolean z, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withImage7(
    jni.JString string,
    jni.JObject bitmap,
    bool z,
    jni.JList<imagestretches_.ImageStretches> list,
    jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    return _withImage7(
            reference.pointer,
            _id_withImage7 as jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            z ? 1 : 0,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_withBitmapImages1 = _class.instanceMethodId(
    r'withBitmapImages',
    r'(Z[Landroid/util/Pair;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withBitmapImages1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withBitmapImages(boolean z, java.lang.Object[] pairs)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withBitmapImages1(
    bool z,
    jni.JArray<jni.JObject> pairs,
  ) {
    return _withBitmapImages1(
            reference.pointer,
            _id_withBitmapImages1 as jni.JMethodIDPtr,
            z ? 1 : 0,
            pairs.reference.pointer)
        .object(const $Style_BuilderType());
  }

  static final _id_getUri = _class.instanceMethodId(
    r'getUri',
    r'()Ljava/lang/String;',
  );

  static final _getUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getUri()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getUri() {
    return _getUri(reference.pointer, _id_getUri as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getJson = _class.instanceMethodId(
    r'getJson',
    r'()Ljava/lang/String;',
  );

  static final _getJson = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getJson()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getJson() {
    return _getJson(reference.pointer, _id_getJson as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSources = _class.instanceMethodId(
    r'getSources',
    r'()Ljava/util/List;',
  );

  static final _getSources = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getSources()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<source_.Source> getSources() {
    return _getSources(reference.pointer, _id_getSources as jni.JMethodIDPtr)
        .object(const jni.JListType(source_.$SourceType()));
  }

  static final _id_getLayers = _class.instanceMethodId(
    r'getLayers',
    r'()Ljava/util/List;',
  );

  static final _getLayers = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getLayers()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<Style_Builder_LayerWrapper> getLayers() {
    return _getLayers(reference.pointer, _id_getLayers as jni.JMethodIDPtr)
        .object(const jni.JListType($Style_Builder_LayerWrapperType()));
  }

  static final _id_getImages = _class.instanceMethodId(
    r'getImages',
    r'()Ljava/util/List;',
  );

  static final _getImages = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getImages()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<Style_Builder_ImageWrapper> getImages() {
    return _getImages(reference.pointer, _id_getImages as jni.JMethodIDPtr)
        .object(const jni.JListType($Style_Builder_ImageWrapperType()));
  }
}

final class $Style_BuilderType extends jni.JObjType<Style_Builder> {
  const $Style_BuilderType();

  @override
  String get signature => r'Lorg/maplibre/android/maps/Style$Builder;';

  @override
  Style_Builder fromReference(jni.JReference reference) =>
      Style_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Style_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Style_BuilderType) &&
        other is $Style_BuilderType;
  }
}

/// from: `org.maplibre.android.maps.Style$OnStyleLoaded`
class Style_OnStyleLoaded extends jni.JObject {
  @override
  late final jni.JObjType<Style_OnStyleLoaded> $type = type;

  Style_OnStyleLoaded.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/maps/Style$OnStyleLoaded');

  /// The type which includes information such as the signature of this class.
  static const type = $Style_OnStyleLoadedType();
  static final _id_onStyleLoaded = _class.instanceMethodId(
    r'onStyleLoaded',
    r'(Lorg/maplibre/android/maps/Style;)V',
  );

  static final _onStyleLoaded = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onStyleLoaded(org.maplibre.android.maps.Style style)`
  void onStyleLoaded(
    Style style,
  ) {
    _onStyleLoaded(reference.pointer, _id_onStyleLoaded as jni.JMethodIDPtr,
            style.reference.pointer)
        .check();
  }
}

final class $Style_OnStyleLoadedType extends jni.JObjType<Style_OnStyleLoaded> {
  const $Style_OnStyleLoadedType();

  @override
  String get signature => r'Lorg/maplibre/android/maps/Style$OnStyleLoaded;';

  @override
  Style_OnStyleLoaded fromReference(jni.JReference reference) =>
      Style_OnStyleLoaded.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Style_OnStyleLoadedType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Style_OnStyleLoadedType) &&
        other is $Style_OnStyleLoadedType;
  }
}

/// from: `org.maplibre.android.maps.Style`
class Style extends jni.JObject {
  @override
  late final jni.JObjType<Style> $type = type;

  Style.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'org/maplibre/android/maps/Style');

  /// The type which includes information such as the signature of this class.
  static const type = $StyleType();
  static final _id_getUrl = _class.instanceMethodId(
    r'getUrl',
    r'()Ljava/lang/String;',
  );

  static final _getUrl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getUrl()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getUrl() {
    return _getUrl(reference.pointer, _id_getUrl as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getUri = _class.instanceMethodId(
    r'getUri',
    r'()Ljava/lang/String;',
  );

  static final _getUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getUri()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getUri() {
    return _getUri(reference.pointer, _id_getUri as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getJson = _class.instanceMethodId(
    r'getJson',
    r'()Ljava/lang/String;',
  );

  static final _getJson = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getJson()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getJson() {
    return _getJson(reference.pointer, _id_getJson as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSources = _class.instanceMethodId(
    r'getSources',
    r'()Ljava/util/List;',
  );

  static final _getSources = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getSources()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<source_.Source> getSources() {
    return _getSources(reference.pointer, _id_getSources as jni.JMethodIDPtr)
        .object(const jni.JListType(source_.$SourceType()));
  }

  static final _id_addSource = _class.instanceMethodId(
    r'addSource',
    r'(Lorg/maplibre/android/style/sources/Source;)V',
  );

  static final _addSource = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addSource(org.maplibre.android.style.sources.Source source)`
  void addSource(
    source_.Source source,
  ) {
    _addSource(reference.pointer, _id_addSource as jni.JMethodIDPtr,
            source.reference.pointer)
        .check();
  }

  static final _id_getSource = _class.instanceMethodId(
    r'getSource',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/sources/Source;',
  );

  static final _getSource = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.style.sources.Source getSource(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  source_.Source getSource(
    jni.JString string,
  ) {
    return _getSource(reference.pointer, _id_getSource as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const source_.$SourceType());
  }

  static final _id_getSourceAs = _class.instanceMethodId(
    r'getSourceAs',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/sources/Source;',
  );

  static final _getSourceAs = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public T getSourceAs(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  $T getSourceAs<$T extends jni.JObject>(
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) {
    return _getSourceAs(reference.pointer, _id_getSourceAs as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(T);
  }

  static final _id_removeSource = _class.instanceMethodId(
    r'removeSource',
    r'(Ljava/lang/String;)Z',
  );

  static final _removeSource = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean removeSource(java.lang.String string)`
  bool removeSource(
    jni.JString string,
  ) {
    return _removeSource(reference.pointer,
            _id_removeSource as jni.JMethodIDPtr, string.reference.pointer)
        .boolean;
  }

  static final _id_removeSource1 = _class.instanceMethodId(
    r'removeSource',
    r'(Lorg/maplibre/android/style/sources/Source;)Z',
  );

  static final _removeSource1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean removeSource(org.maplibre.android.style.sources.Source source)`
  bool removeSource1(
    source_.Source source,
  ) {
    return _removeSource1(reference.pointer,
            _id_removeSource1 as jni.JMethodIDPtr, source.reference.pointer)
        .boolean;
  }

  static final _id_addLayer = _class.instanceMethodId(
    r'addLayer',
    r'(Lorg/maplibre/android/style/layers/Layer;)V',
  );

  static final _addLayer = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addLayer(org.maplibre.android.style.layers.Layer layer)`
  void addLayer(
    layer_.Layer layer,
  ) {
    _addLayer(reference.pointer, _id_addLayer as jni.JMethodIDPtr,
            layer.reference.pointer)
        .check();
  }

  static final _id_addLayerBelow = _class.instanceMethodId(
    r'addLayerBelow',
    r'(Lorg/maplibre/android/style/layers/Layer;Ljava/lang/String;)V',
  );

  static final _addLayerBelow = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addLayerBelow(org.maplibre.android.style.layers.Layer layer, java.lang.String string)`
  void addLayerBelow(
    layer_.Layer layer,
    jni.JString string,
  ) {
    _addLayerBelow(reference.pointer, _id_addLayerBelow as jni.JMethodIDPtr,
            layer.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _id_addLayerAbove = _class.instanceMethodId(
    r'addLayerAbove',
    r'(Lorg/maplibre/android/style/layers/Layer;Ljava/lang/String;)V',
  );

  static final _addLayerAbove = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addLayerAbove(org.maplibre.android.style.layers.Layer layer, java.lang.String string)`
  void addLayerAbove(
    layer_.Layer layer,
    jni.JString string,
  ) {
    _addLayerAbove(reference.pointer, _id_addLayerAbove as jni.JMethodIDPtr,
            layer.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _id_addLayerAt = _class.instanceMethodId(
    r'addLayerAt',
    r'(Lorg/maplibre/android/style/layers/Layer;I)V',
  );

  static final _addLayerAt = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `public void addLayerAt(org.maplibre.android.style.layers.Layer layer, int i)`
  void addLayerAt(
    layer_.Layer layer,
    int i,
  ) {
    _addLayerAt(reference.pointer, _id_addLayerAt as jni.JMethodIDPtr,
            layer.reference.pointer, i)
        .check();
  }

  static final _id_getLayer = _class.instanceMethodId(
    r'getLayer',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/Layer;',
  );

  static final _getLayer = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.style.layers.Layer getLayer(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  layer_.Layer getLayer(
    jni.JString string,
  ) {
    return _getLayer(reference.pointer, _id_getLayer as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const layer_.$LayerType());
  }

  static final _id_getLayerAs = _class.instanceMethodId(
    r'getLayerAs',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/Layer;',
  );

  static final _getLayerAs = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public T getLayerAs(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  $T getLayerAs<$T extends jni.JObject>(
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) {
    return _getLayerAs(reference.pointer, _id_getLayerAs as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(T);
  }

  static final _id_getLayers = _class.instanceMethodId(
    r'getLayers',
    r'()Ljava/util/List;',
  );

  static final _getLayers = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getLayers()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<layer_.Layer> getLayers() {
    return _getLayers(reference.pointer, _id_getLayers as jni.JMethodIDPtr)
        .object(const jni.JListType(layer_.$LayerType()));
  }

  static final _id_removeLayer = _class.instanceMethodId(
    r'removeLayer',
    r'(Ljava/lang/String;)Z',
  );

  static final _removeLayer = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean removeLayer(java.lang.String string)`
  bool removeLayer(
    jni.JString string,
  ) {
    return _removeLayer(reference.pointer, _id_removeLayer as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_removeLayer1 = _class.instanceMethodId(
    r'removeLayer',
    r'(Lorg/maplibre/android/style/layers/Layer;)Z',
  );

  static final _removeLayer1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean removeLayer(org.maplibre.android.style.layers.Layer layer)`
  bool removeLayer1(
    layer_.Layer layer,
  ) {
    return _removeLayer1(reference.pointer,
            _id_removeLayer1 as jni.JMethodIDPtr, layer.reference.pointer)
        .boolean;
  }

  static final _id_removeLayerAt = _class.instanceMethodId(
    r'removeLayerAt',
    r'(I)Z',
  );

  static final _removeLayerAt = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public boolean removeLayerAt(int i)`
  bool removeLayerAt(
    int i,
  ) {
    return _removeLayerAt(
            reference.pointer, _id_removeLayerAt as jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_addImage = _class.instanceMethodId(
    r'addImage',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;)V',
  );

  static final _addImage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addImage(java.lang.String string, android.graphics.Bitmap bitmap)`
  void addImage(
    jni.JString string,
    jni.JObject bitmap,
  ) {
    _addImage(reference.pointer, _id_addImage as jni.JMethodIDPtr,
            string.reference.pointer, bitmap.reference.pointer)
        .check();
  }

  static final _id_addImage1 = _class.instanceMethodId(
    r'addImage',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;Ljava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImage1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addImage(java.lang.String string, android.graphics.Bitmap bitmap, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImage1(
    jni.JString string,
    jni.JObject bitmap,
    jni.JList<imagestretches_.ImageStretches> list,
    jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImage1(
            reference.pointer,
            _id_addImage1 as jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImage2 = _class.instanceMethodId(
    r'addImage',
    r'(Ljava/lang/String;Landroid/graphics/drawable/Drawable;)V',
  );

  static final _addImage2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addImage(java.lang.String string, android.graphics.drawable.Drawable drawable)`
  void addImage2(
    jni.JString string,
    jni.JObject drawable,
  ) {
    _addImage2(reference.pointer, _id_addImage2 as jni.JMethodIDPtr,
            string.reference.pointer, drawable.reference.pointer)
        .check();
  }

  static final _id_addImage3 = _class.instanceMethodId(
    r'addImage',
    r'(Ljava/lang/String;Landroid/graphics/drawable/Drawable;Ljava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImage3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addImage(java.lang.String string, android.graphics.drawable.Drawable drawable, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImage3(
    jni.JString string,
    jni.JObject drawable,
    jni.JList<imagestretches_.ImageStretches> list,
    jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImage3(
            reference.pointer,
            _id_addImage3 as jni.JMethodIDPtr,
            string.reference.pointer,
            drawable.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImage4 = _class.instanceMethodId(
    r'addImage',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;Z)V',
  );

  static final _addImage4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: `public void addImage(java.lang.String string, android.graphics.Bitmap bitmap, boolean z)`
  void addImage4(
    jni.JString string,
    jni.JObject bitmap,
    bool z,
  ) {
    _addImage4(reference.pointer, _id_addImage4 as jni.JMethodIDPtr,
            string.reference.pointer, bitmap.reference.pointer, z ? 1 : 0)
        .check();
  }

  static final _id_addImage5 = _class.instanceMethodId(
    r'addImage',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;ZLjava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImage5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addImage(java.lang.String string, android.graphics.Bitmap bitmap, boolean z, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImage5(
    jni.JString string,
    jni.JObject bitmap,
    bool z,
    jni.JList<imagestretches_.ImageStretches> list,
    jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImage5(
            reference.pointer,
            _id_addImage5 as jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            z ? 1 : 0,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImageAsync = _class.instanceMethodId(
    r'addImageAsync',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;)V',
  );

  static final _addImageAsync = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addImageAsync(java.lang.String string, android.graphics.Bitmap bitmap)`
  void addImageAsync(
    jni.JString string,
    jni.JObject bitmap,
  ) {
    _addImageAsync(reference.pointer, _id_addImageAsync as jni.JMethodIDPtr,
            string.reference.pointer, bitmap.reference.pointer)
        .check();
  }

  static final _id_addImageAsync1 = _class.instanceMethodId(
    r'addImageAsync',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;Ljava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImageAsync1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addImageAsync(java.lang.String string, android.graphics.Bitmap bitmap, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImageAsync1(
    jni.JString string,
    jni.JObject bitmap,
    jni.JList<imagestretches_.ImageStretches> list,
    jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImageAsync1(
            reference.pointer,
            _id_addImageAsync1 as jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImageAsync2 = _class.instanceMethodId(
    r'addImageAsync',
    r'(Ljava/lang/String;Landroid/graphics/drawable/Drawable;)V',
  );

  static final _addImageAsync2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addImageAsync(java.lang.String string, android.graphics.drawable.Drawable drawable)`
  void addImageAsync2(
    jni.JString string,
    jni.JObject drawable,
  ) {
    _addImageAsync2(reference.pointer, _id_addImageAsync2 as jni.JMethodIDPtr,
            string.reference.pointer, drawable.reference.pointer)
        .check();
  }

  static final _id_addImageAsync3 = _class.instanceMethodId(
    r'addImageAsync',
    r'(Ljava/lang/String;Landroid/graphics/drawable/Drawable;Ljava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImageAsync3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addImageAsync(java.lang.String string, android.graphics.drawable.Drawable drawable, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImageAsync3(
    jni.JString string,
    jni.JObject drawable,
    jni.JList<imagestretches_.ImageStretches> list,
    jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImageAsync3(
            reference.pointer,
            _id_addImageAsync3 as jni.JMethodIDPtr,
            string.reference.pointer,
            drawable.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImageAsync4 = _class.instanceMethodId(
    r'addImageAsync',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;Z)V',
  );

  static final _addImageAsync4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: `public void addImageAsync(java.lang.String string, android.graphics.Bitmap bitmap, boolean z)`
  void addImageAsync4(
    jni.JString string,
    jni.JObject bitmap,
    bool z,
  ) {
    _addImageAsync4(reference.pointer, _id_addImageAsync4 as jni.JMethodIDPtr,
            string.reference.pointer, bitmap.reference.pointer, z ? 1 : 0)
        .check();
  }

  static final _id_addImageAsync5 = _class.instanceMethodId(
    r'addImageAsync',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;ZLjava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImageAsync5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addImageAsync(java.lang.String string, android.graphics.Bitmap bitmap, boolean z, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImageAsync5(
    jni.JString string,
    jni.JObject bitmap,
    bool z,
    jni.JList<imagestretches_.ImageStretches> list,
    jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImageAsync5(
            reference.pointer,
            _id_addImageAsync5 as jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            z ? 1 : 0,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImages = _class.instanceMethodId(
    r'addImages',
    r'(Ljava/util/HashMap;)V',
  );

  static final _addImages = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addImages(java.util.HashMap hashMap)`
  void addImages(
    jni.JObject hashMap,
  ) {
    _addImages(reference.pointer, _id_addImages as jni.JMethodIDPtr,
            hashMap.reference.pointer)
        .check();
  }

  static final _id_addImages1 = _class.instanceMethodId(
    r'addImages',
    r'(Ljava/util/HashMap;Ljava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImages1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addImages(java.util.HashMap hashMap, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImages1(
    jni.JObject hashMap,
    jni.JList<imagestretches_.ImageStretches> list,
    jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImages1(
            reference.pointer,
            _id_addImages1 as jni.JMethodIDPtr,
            hashMap.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImages2 = _class.instanceMethodId(
    r'addImages',
    r'(Ljava/util/HashMap;Z)V',
  );

  static final _addImages2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `public void addImages(java.util.HashMap hashMap, boolean z)`
  void addImages2(
    jni.JObject hashMap,
    bool z,
  ) {
    _addImages2(reference.pointer, _id_addImages2 as jni.JMethodIDPtr,
            hashMap.reference.pointer, z ? 1 : 0)
        .check();
  }

  static final _id_addImages3 = _class.instanceMethodId(
    r'addImages',
    r'(Ljava/util/HashMap;ZLjava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImages3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addImages(java.util.HashMap hashMap, boolean z, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImages3(
    jni.JObject hashMap,
    bool z,
    jni.JList<imagestretches_.ImageStretches> list,
    jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImages3(
            reference.pointer,
            _id_addImages3 as jni.JMethodIDPtr,
            hashMap.reference.pointer,
            z ? 1 : 0,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImagesAsync = _class.instanceMethodId(
    r'addImagesAsync',
    r'(Ljava/util/HashMap;)V',
  );

  static final _addImagesAsync = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addImagesAsync(java.util.HashMap hashMap)`
  void addImagesAsync(
    jni.JObject hashMap,
  ) {
    _addImagesAsync(reference.pointer, _id_addImagesAsync as jni.JMethodIDPtr,
            hashMap.reference.pointer)
        .check();
  }

  static final _id_addImagesAsync1 = _class.instanceMethodId(
    r'addImagesAsync',
    r'(Ljava/util/HashMap;Ljava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImagesAsync1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addImagesAsync(java.util.HashMap hashMap, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImagesAsync1(
    jni.JObject hashMap,
    jni.JList<imagestretches_.ImageStretches> list,
    jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImagesAsync1(
            reference.pointer,
            _id_addImagesAsync1 as jni.JMethodIDPtr,
            hashMap.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImagesAsync2 = _class.instanceMethodId(
    r'addImagesAsync',
    r'(Ljava/util/HashMap;Z)V',
  );

  static final _addImagesAsync2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `public void addImagesAsync(java.util.HashMap hashMap, boolean z)`
  void addImagesAsync2(
    jni.JObject hashMap,
    bool z,
  ) {
    _addImagesAsync2(reference.pointer, _id_addImagesAsync2 as jni.JMethodIDPtr,
            hashMap.reference.pointer, z ? 1 : 0)
        .check();
  }

  static final _id_addImagesAsync3 = _class.instanceMethodId(
    r'addImagesAsync',
    r'(Ljava/util/HashMap;ZLjava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImagesAsync3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addImagesAsync(java.util.HashMap hashMap, boolean z, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImagesAsync3(
    jni.JObject hashMap,
    bool z,
    jni.JList<imagestretches_.ImageStretches> list,
    jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImagesAsync3(
            reference.pointer,
            _id_addImagesAsync3 as jni.JMethodIDPtr,
            hashMap.reference.pointer,
            z ? 1 : 0,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_removeImage = _class.instanceMethodId(
    r'removeImage',
    r'(Ljava/lang/String;)V',
  );

  static final _removeImage = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeImage(java.lang.String string)`
  void removeImage(
    jni.JString string,
  ) {
    _removeImage(reference.pointer, _id_removeImage as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getImage = _class.instanceMethodId(
    r'getImage',
    r'(Ljava/lang/String;)Landroid/graphics/Bitmap;',
  );

  static final _getImage = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public android.graphics.Bitmap getImage(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getImage(
    jni.JString string,
  ) {
    return _getImage(reference.pointer, _id_getImage as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setTransition = _class.instanceMethodId(
    r'setTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setTransition(reference.pointer, _id_setTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getTransition = _class.instanceMethodId(
    r'getTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getTransition() {
    return _getTransition(
            reference.pointer, _id_getTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_getLight = _class.instanceMethodId(
    r'getLight',
    r'()Lorg/maplibre/android/style/light/Light;',
  );

  static final _getLight = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.light.Light getLight()`
  /// The returned object must be released after use, by calling the [release] method.
  light_.Light getLight() {
    return _getLight(reference.pointer, _id_getLight as jni.JMethodIDPtr)
        .object(const light_.$LightType());
  }

  static final _id_isFullyLoaded = _class.instanceMethodId(
    r'isFullyLoaded',
    r'()Z',
  );

  static final _isFullyLoaded = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isFullyLoaded()`
  bool isFullyLoaded() {
    return _isFullyLoaded(
            reference.pointer, _id_isFullyLoaded as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_toImage = _class.staticMethodId(
    r'toImage',
    r'(Lorg/maplibre/android/maps/Style$Builder$ImageWrapper;)Lorg/maplibre/android/maps/Image;',
  );

  static final _toImage = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.maps.Image toImage(org.maplibre.android.maps.Style$Builder$ImageWrapper imageWrapper)`
  /// The returned object must be released after use, by calling the [release] method.
  static image_.Image toImage(
    Style_Builder_ImageWrapper imageWrapper,
  ) {
    return _toImage(_class.reference.pointer, _id_toImage as jni.JMethodIDPtr,
            imageWrapper.reference.pointer)
        .object(const image_.$ImageType());
  }

  static final _id_getPredefinedStyles = _class.staticMethodId(
    r'getPredefinedStyles',
    r'()[Lorg/maplibre/android/util/DefaultStyle;',
  );

  static final _getPredefinedStyles = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.util.DefaultStyle[] getPredefinedStyles()`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<defaultstyle_.DefaultStyle> getPredefinedStyles() {
    return _getPredefinedStyles(_class.reference.pointer,
            _id_getPredefinedStyles as jni.JMethodIDPtr)
        .object(const jni.JArrayType(defaultstyle_.$DefaultStyleType()));
  }

  static final _id_getPredefinedStyle = _class.staticMethodId(
    r'getPredefinedStyle',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getPredefinedStyle = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public java.lang.String getPredefinedStyle(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString getPredefinedStyle(
    jni.JString string,
  ) {
    return _getPredefinedStyle(
            _class.reference.pointer,
            _id_getPredefinedStyle as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JStringType());
  }
}

final class $StyleType extends jni.JObjType<Style> {
  const $StyleType();

  @override
  String get signature => r'Lorg/maplibre/android/maps/Style;';

  @override
  Style fromReference(jni.JReference reference) =>
      Style.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($StyleType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($StyleType) && other is $StyleType;
  }
}
