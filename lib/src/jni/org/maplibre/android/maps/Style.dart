// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../style/layers/Layer.dart' as layer_;

import '../style/layers/TransitionOptions.dart' as transitionoptions_;

import '../style/light/Light.dart' as light_;

import '../style/sources/Source.dart' as source_;

import '../util/DefaultStyle.dart' as defaultstyle_;

import 'Image.dart' as image_;

import 'ImageContent.dart' as imagecontent_;

import 'ImageStretches.dart' as imagestretches_;

/// from: `org.maplibre.android.maps.Style$Builder$ImageWrapper`
class Style_Builder_ImageWrapper extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Style_Builder_ImageWrapper> $type;

  @_$jni.internal
  Style_Builder_ImageWrapper.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/Style$Builder$ImageWrapper');

  /// The type which includes information such as the signature of this class.
  static const type = $Style_Builder_ImageWrapper$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;Z)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `public void <init>(java.lang.String string, android.graphics.Bitmap bitmap, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Style_Builder_ImageWrapper(
    _$jni.JString string,
    _$jni.JObject bitmap,
    bool z,
  ) {
    return Style_Builder_ImageWrapper.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            z ? 1 : 0)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;ZLjava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(java.lang.String string, android.graphics.Bitmap bitmap, boolean z, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Style_Builder_ImageWrapper.new$1(
    _$jni.JString string,
    _$jni.JObject bitmap,
    bool z,
    _$jni.JList<imagestretches_.ImageStretches> list,
    _$jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    return Style_Builder_ImageWrapper.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            z ? 1 : 0,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .reference);
  }

  static final _id_getBitmap = _class.instanceMethodId(
    r'getBitmap',
    r'()Landroid/graphics/Bitmap;',
  );

  static final _getBitmap = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.Bitmap getBitmap()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getBitmap() {
    return _getBitmap(reference.pointer, _id_getBitmap as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getId = _class.instanceMethodId(
    r'getId',
    r'()Ljava/lang/String;',
  );

  static final _getId = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getId()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getId() {
    return _getId(reference.pointer, _id_getId as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_isSdf = _class.instanceMethodId(
    r'isSdf',
    r'()Z',
  );

  static final _isSdf = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isSdf()`
  bool isSdf() {
    return _isSdf(reference.pointer, _id_isSdf as _$jni.JMethodIDPtr).boolean;
  }

  static final _id_getStretchX = _class.instanceMethodId(
    r'getStretchX',
    r'()Ljava/util/List;',
  );

  static final _getStretchX = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getStretchX()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<imagestretches_.ImageStretches> getStretchX() {
    return _getStretchX(
            reference.pointer, _id_getStretchX as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(imagestretches_.$ImageStretches$Type()));
  }

  static final _id_getStretchY = _class.instanceMethodId(
    r'getStretchY',
    r'()Ljava/util/List;',
  );

  static final _getStretchY = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getStretchY()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<imagestretches_.ImageStretches> getStretchY() {
    return _getStretchY(
            reference.pointer, _id_getStretchY as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(imagestretches_.$ImageStretches$Type()));
  }

  static final _id_getContent = _class.instanceMethodId(
    r'getContent',
    r'()Lorg/maplibre/android/maps/ImageContent;',
  );

  static final _getContent = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.maps.ImageContent getContent()`
  /// The returned object must be released after use, by calling the [release] method.
  imagecontent_.ImageContent getContent() {
    return _getContent(reference.pointer, _id_getContent as _$jni.JMethodIDPtr)
        .object(const imagecontent_.$ImageContent$Type());
  }

  static final _id_convertToImageArray = _class.staticMethodId(
    r'convertToImageArray',
    r'(Ljava/util/HashMap;Z)[Lorg/maplibre/android/maps/Style$Builder$ImageWrapper;',
  );

  static final _convertToImageArray = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `static public java.lang.Object[] convertToImageArray(java.util.HashMap hashMap, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<Style_Builder_ImageWrapper> convertToImageArray(
    _$jni.JObject hashMap,
    bool z,
  ) {
    return _convertToImageArray(
            _class.reference.pointer,
            _id_convertToImageArray as _$jni.JMethodIDPtr,
            hashMap.reference.pointer,
            z ? 1 : 0)
        .object(const _$jni.JArrayType($Style_Builder_ImageWrapper$Type()));
  }

  static final _id_convertToImageArray$1 = _class.staticMethodId(
    r'convertToImageArray',
    r'(Ljava/util/HashMap;ZLjava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)[Lorg/maplibre/android/maps/Style$Builder$ImageWrapper;',
  );

  static final _convertToImageArray$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.lang.Object[] convertToImageArray(java.util.HashMap hashMap, boolean z, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<Style_Builder_ImageWrapper> convertToImageArray$1(
    _$jni.JObject hashMap,
    bool z,
    _$jni.JList<imagestretches_.ImageStretches> list,
    _$jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    return _convertToImageArray$1(
            _class.reference.pointer,
            _id_convertToImageArray$1 as _$jni.JMethodIDPtr,
            hashMap.reference.pointer,
            z ? 1 : 0,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .object(const _$jni.JArrayType($Style_Builder_ImageWrapper$Type()));
  }
}

final class $Style_Builder_ImageWrapper$Type
    extends _$jni.JObjType<Style_Builder_ImageWrapper> {
  @_$jni.internal
  const $Style_Builder_ImageWrapper$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/Style$Builder$ImageWrapper;';

  @_$jni.internal
  @_$core.override
  Style_Builder_ImageWrapper fromReference(_$jni.JReference reference) =>
      Style_Builder_ImageWrapper.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($Style_Builder_ImageWrapper$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Style_Builder_ImageWrapper$Type) &&
        other is $Style_Builder_ImageWrapper$Type;
  }
}

/// from: `org.maplibre.android.maps.Style$Builder$LayerAboveWrapper`
class Style_Builder_LayerAboveWrapper extends Style_Builder_LayerWrapper {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Style_Builder_LayerAboveWrapper> $type;

  @_$jni.internal
  Style_Builder_LayerAboveWrapper.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/Style$Builder$LayerAboveWrapper');

  /// The type which includes information such as the signature of this class.
  static const type = $Style_Builder_LayerAboveWrapper$Type();
  static final _id_getAboveLayer = _class.instanceMethodId(
    r'getAboveLayer',
    r'()Ljava/lang/String;',
  );

  static final _getAboveLayer = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getAboveLayer()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getAboveLayer() {
    return _getAboveLayer(
            reference.pointer, _id_getAboveLayer as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }
}

final class $Style_Builder_LayerAboveWrapper$Type
    extends _$jni.JObjType<Style_Builder_LayerAboveWrapper> {
  @_$jni.internal
  const $Style_Builder_LayerAboveWrapper$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/Style$Builder$LayerAboveWrapper;';

  @_$jni.internal
  @_$core.override
  Style_Builder_LayerAboveWrapper fromReference(_$jni.JReference reference) =>
      Style_Builder_LayerAboveWrapper.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const $Style_Builder_LayerWrapper$Type();

  @_$jni.internal
  @_$core.override
  final superCount = 2;

  @_$core.override
  int get hashCode => ($Style_Builder_LayerAboveWrapper$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Style_Builder_LayerAboveWrapper$Type) &&
        other is $Style_Builder_LayerAboveWrapper$Type;
  }
}

/// from: `org.maplibre.android.maps.Style$Builder$LayerAtWrapper`
class Style_Builder_LayerAtWrapper extends Style_Builder_LayerWrapper {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Style_Builder_LayerAtWrapper> $type;

  @_$jni.internal
  Style_Builder_LayerAtWrapper.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/Style$Builder$LayerAtWrapper');

  /// The type which includes information such as the signature of this class.
  static const type = $Style_Builder_LayerAtWrapper$Type();
  static final _id_getIndex = _class.instanceMethodId(
    r'getIndex',
    r'()I',
  );

  static final _getIndex = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getIndex()`
  int getIndex() {
    return _getIndex(reference.pointer, _id_getIndex as _$jni.JMethodIDPtr)
        .integer;
  }
}

final class $Style_Builder_LayerAtWrapper$Type
    extends _$jni.JObjType<Style_Builder_LayerAtWrapper> {
  @_$jni.internal
  const $Style_Builder_LayerAtWrapper$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/Style$Builder$LayerAtWrapper;';

  @_$jni.internal
  @_$core.override
  Style_Builder_LayerAtWrapper fromReference(_$jni.JReference reference) =>
      Style_Builder_LayerAtWrapper.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const $Style_Builder_LayerWrapper$Type();

  @_$jni.internal
  @_$core.override
  final superCount = 2;

  @_$core.override
  int get hashCode => ($Style_Builder_LayerAtWrapper$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Style_Builder_LayerAtWrapper$Type) &&
        other is $Style_Builder_LayerAtWrapper$Type;
  }
}

/// from: `org.maplibre.android.maps.Style$Builder$LayerBelowWrapper`
class Style_Builder_LayerBelowWrapper extends Style_Builder_LayerWrapper {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Style_Builder_LayerBelowWrapper> $type;

  @_$jni.internal
  Style_Builder_LayerBelowWrapper.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/Style$Builder$LayerBelowWrapper');

  /// The type which includes information such as the signature of this class.
  static const type = $Style_Builder_LayerBelowWrapper$Type();
  static final _id_getBelowLayer = _class.instanceMethodId(
    r'getBelowLayer',
    r'()Ljava/lang/String;',
  );

  static final _getBelowLayer = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getBelowLayer()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getBelowLayer() {
    return _getBelowLayer(
            reference.pointer, _id_getBelowLayer as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }
}

final class $Style_Builder_LayerBelowWrapper$Type
    extends _$jni.JObjType<Style_Builder_LayerBelowWrapper> {
  @_$jni.internal
  const $Style_Builder_LayerBelowWrapper$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/Style$Builder$LayerBelowWrapper;';

  @_$jni.internal
  @_$core.override
  Style_Builder_LayerBelowWrapper fromReference(_$jni.JReference reference) =>
      Style_Builder_LayerBelowWrapper.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const $Style_Builder_LayerWrapper$Type();

  @_$jni.internal
  @_$core.override
  final superCount = 2;

  @_$core.override
  int get hashCode => ($Style_Builder_LayerBelowWrapper$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Style_Builder_LayerBelowWrapper$Type) &&
        other is $Style_Builder_LayerBelowWrapper$Type;
  }
}

/// from: `org.maplibre.android.maps.Style$Builder$LayerWrapper`
class Style_Builder_LayerWrapper extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Style_Builder_LayerWrapper> $type;

  @_$jni.internal
  Style_Builder_LayerWrapper.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/Style$Builder$LayerWrapper');

  /// The type which includes information such as the signature of this class.
  static const type = $Style_Builder_LayerWrapper$Type();
  static final _id_getLayer = _class.instanceMethodId(
    r'getLayer',
    r'()Lorg/maplibre/android/style/layers/Layer;',
  );

  static final _getLayer = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.Layer getLayer()`
  /// The returned object must be released after use, by calling the [release] method.
  layer_.Layer getLayer() {
    return _getLayer(reference.pointer, _id_getLayer as _$jni.JMethodIDPtr)
        .object(const layer_.$Layer$Type());
  }
}

final class $Style_Builder_LayerWrapper$Type
    extends _$jni.JObjType<Style_Builder_LayerWrapper> {
  @_$jni.internal
  const $Style_Builder_LayerWrapper$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/Style$Builder$LayerWrapper;';

  @_$jni.internal
  @_$core.override
  Style_Builder_LayerWrapper fromReference(_$jni.JReference reference) =>
      Style_Builder_LayerWrapper.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($Style_Builder_LayerWrapper$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Style_Builder_LayerWrapper$Type) &&
        other is $Style_Builder_LayerWrapper$Type;
  }
}

/// from: `org.maplibre.android.maps.Style$Builder`
class Style_Builder extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Style_Builder> $type;

  @_$jni.internal
  Style_Builder.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/maps/Style$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $Style_Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Style_Builder() {
    return Style_Builder.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_fromUrl = _class.instanceMethodId(
    r'fromUrl',
    r'(Ljava/lang/String;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _fromUrl = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder fromUrl(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder fromUrl(
    _$jni.JString string,
  ) {
    return _fromUrl(reference.pointer, _id_fromUrl as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_fromUri = _class.instanceMethodId(
    r'fromUri',
    r'(Ljava/lang/String;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _fromUri = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder fromUri(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder fromUri(
    _$jni.JString string,
  ) {
    return _fromUri(reference.pointer, _id_fromUri as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_fromJson = _class.instanceMethodId(
    r'fromJson',
    r'(Ljava/lang/String;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _fromJson = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder fromJson(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder fromJson(
    _$jni.JString string,
  ) {
    return _fromJson(reference.pointer, _id_fromJson as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withSource = _class.instanceMethodId(
    r'withSource',
    r'(Lorg/maplibre/android/style/sources/Source;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withSource = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withSource(org.maplibre.android.style.sources.Source source)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withSource(
    source_.Source source,
  ) {
    return _withSource(reference.pointer, _id_withSource as _$jni.JMethodIDPtr,
            source.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withSources = _class.instanceMethodId(
    r'withSources',
    r'([Lorg/maplibre/android/style/sources/Source;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withSources = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withSources(org.maplibre.android.style.sources.Source[] sources)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withSources(
    _$jni.JArray<source_.Source> sources,
  ) {
    return _withSources(reference.pointer,
            _id_withSources as _$jni.JMethodIDPtr, sources.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withLayer = _class.instanceMethodId(
    r'withLayer',
    r'(Lorg/maplibre/android/style/layers/Layer;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withLayer = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withLayer(org.maplibre.android.style.layers.Layer layer)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withLayer(
    layer_.Layer layer,
  ) {
    return _withLayer(reference.pointer, _id_withLayer as _$jni.JMethodIDPtr,
            layer.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withLayers = _class.instanceMethodId(
    r'withLayers',
    r'([Lorg/maplibre/android/style/layers/Layer;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withLayers = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withLayers(org.maplibre.android.style.layers.Layer[] layers)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withLayers(
    _$jni.JArray<layer_.Layer> layers,
  ) {
    return _withLayers(reference.pointer, _id_withLayers as _$jni.JMethodIDPtr,
            layers.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withLayerAt = _class.instanceMethodId(
    r'withLayerAt',
    r'(Lorg/maplibre/android/style/layers/Layer;I)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withLayerAt = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withLayerAt(org.maplibre.android.style.layers.Layer layer, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withLayerAt(
    layer_.Layer layer,
    int i,
  ) {
    return _withLayerAt(reference.pointer,
            _id_withLayerAt as _$jni.JMethodIDPtr, layer.reference.pointer, i)
        .object(const $Style_Builder$Type());
  }

  static final _id_withLayerAbove = _class.instanceMethodId(
    r'withLayerAbove',
    r'(Lorg/maplibre/android/style/layers/Layer;Ljava/lang/String;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withLayerAbove = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withLayerAbove(org.maplibre.android.style.layers.Layer layer, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withLayerAbove(
    layer_.Layer layer,
    _$jni.JString string,
  ) {
    return _withLayerAbove(
            reference.pointer,
            _id_withLayerAbove as _$jni.JMethodIDPtr,
            layer.reference.pointer,
            string.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withLayerBelow = _class.instanceMethodId(
    r'withLayerBelow',
    r'(Lorg/maplibre/android/style/layers/Layer;Ljava/lang/String;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withLayerBelow = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withLayerBelow(org.maplibre.android.style.layers.Layer layer, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withLayerBelow(
    layer_.Layer layer,
    _$jni.JString string,
  ) {
    return _withLayerBelow(
            reference.pointer,
            _id_withLayerBelow as _$jni.JMethodIDPtr,
            layer.reference.pointer,
            string.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withTransition = _class.instanceMethodId(
    r'withTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withTransition = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    return _withTransition(
            reference.pointer,
            _id_withTransition as _$jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withImage = _class.instanceMethodId(
    r'withImage',
    r'(Ljava/lang/String;Landroid/graphics/drawable/Drawable;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withImage = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withImage(java.lang.String string, android.graphics.drawable.Drawable drawable)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withImage(
    _$jni.JString string,
    _$jni.JObject drawable,
  ) {
    return _withImage(reference.pointer, _id_withImage as _$jni.JMethodIDPtr,
            string.reference.pointer, drawable.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withImage$1 = _class.instanceMethodId(
    r'withImage',
    r'(Ljava/lang/String;Landroid/graphics/drawable/Drawable;Ljava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withImage$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withImage(java.lang.String string, android.graphics.drawable.Drawable drawable, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withImage$1(
    _$jni.JString string,
    _$jni.JObject drawable,
    _$jni.JList<imagestretches_.ImageStretches> list,
    _$jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    return _withImage$1(
            reference.pointer,
            _id_withImage$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            drawable.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withDrawableImages = _class.instanceMethodId(
    r'withDrawableImages',
    r'([Landroid/util/Pair;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withDrawableImages = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withDrawableImages(java.lang.Object[] pairs)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withDrawableImages(
    _$jni.JArray<_$jni.JObject> pairs,
  ) {
    return _withDrawableImages(
            reference.pointer,
            _id_withDrawableImages as _$jni.JMethodIDPtr,
            pairs.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withImage$2 = _class.instanceMethodId(
    r'withImage',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withImage$2 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withImage(java.lang.String string, android.graphics.Bitmap bitmap)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withImage$2(
    _$jni.JString string,
    _$jni.JObject bitmap,
  ) {
    return _withImage$2(
            reference.pointer,
            _id_withImage$2 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withImage$3 = _class.instanceMethodId(
    r'withImage',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;Ljava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withImage$3 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withImage(java.lang.String string, android.graphics.Bitmap bitmap, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withImage$3(
    _$jni.JString string,
    _$jni.JObject bitmap,
    _$jni.JList<imagestretches_.ImageStretches> list,
    _$jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    return _withImage$3(
            reference.pointer,
            _id_withImage$3 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withBitmapImages = _class.instanceMethodId(
    r'withBitmapImages',
    r'([Landroid/util/Pair;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withBitmapImages = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withBitmapImages(java.lang.Object[] pairs)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withBitmapImages(
    _$jni.JArray<_$jni.JObject> pairs,
  ) {
    return _withBitmapImages(reference.pointer,
            _id_withBitmapImages as _$jni.JMethodIDPtr, pairs.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withImage$4 = _class.instanceMethodId(
    r'withImage',
    r'(Ljava/lang/String;Landroid/graphics/drawable/Drawable;Z)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withImage$4 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withImage(java.lang.String string, android.graphics.drawable.Drawable drawable, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withImage$4(
    _$jni.JString string,
    _$jni.JObject drawable,
    bool z,
  ) {
    return _withImage$4(
            reference.pointer,
            _id_withImage$4 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            drawable.reference.pointer,
            z ? 1 : 0)
        .object(const $Style_Builder$Type());
  }

  static final _id_withImage$5 = _class.instanceMethodId(
    r'withImage',
    r'(Ljava/lang/String;Landroid/graphics/drawable/Drawable;ZLjava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withImage$5 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withImage(java.lang.String string, android.graphics.drawable.Drawable drawable, boolean z, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withImage$5(
    _$jni.JString string,
    _$jni.JObject drawable,
    bool z,
    _$jni.JList<imagestretches_.ImageStretches> list,
    _$jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    return _withImage$5(
            reference.pointer,
            _id_withImage$5 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            drawable.reference.pointer,
            z ? 1 : 0,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withDrawableImages$1 = _class.instanceMethodId(
    r'withDrawableImages',
    r'(Z[Landroid/util/Pair;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withDrawableImages$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withDrawableImages(boolean z, java.lang.Object[] pairs)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withDrawableImages$1(
    bool z,
    _$jni.JArray<_$jni.JObject> pairs,
  ) {
    return _withDrawableImages$1(
            reference.pointer,
            _id_withDrawableImages$1 as _$jni.JMethodIDPtr,
            z ? 1 : 0,
            pairs.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withImage$6 = _class.instanceMethodId(
    r'withImage',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;Z)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withImage$6 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withImage(java.lang.String string, android.graphics.Bitmap bitmap, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withImage$6(
    _$jni.JString string,
    _$jni.JObject bitmap,
    bool z,
  ) {
    return _withImage$6(
            reference.pointer,
            _id_withImage$6 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            z ? 1 : 0)
        .object(const $Style_Builder$Type());
  }

  static final _id_withImage$7 = _class.instanceMethodId(
    r'withImage',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;ZLjava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withImage$7 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withImage(java.lang.String string, android.graphics.Bitmap bitmap, boolean z, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withImage$7(
    _$jni.JString string,
    _$jni.JObject bitmap,
    bool z,
    _$jni.JList<imagestretches_.ImageStretches> list,
    _$jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    return _withImage$7(
            reference.pointer,
            _id_withImage$7 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            z ? 1 : 0,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_withBitmapImages$1 = _class.instanceMethodId(
    r'withBitmapImages',
    r'(Z[Landroid/util/Pair;)Lorg/maplibre/android/maps/Style$Builder;',
  );

  static final _withBitmapImages$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.maps.Style$Builder withBitmapImages(boolean z, java.lang.Object[] pairs)`
  /// The returned object must be released after use, by calling the [release] method.
  Style_Builder withBitmapImages$1(
    bool z,
    _$jni.JArray<_$jni.JObject> pairs,
  ) {
    return _withBitmapImages$1(
            reference.pointer,
            _id_withBitmapImages$1 as _$jni.JMethodIDPtr,
            z ? 1 : 0,
            pairs.reference.pointer)
        .object(const $Style_Builder$Type());
  }

  static final _id_getUri = _class.instanceMethodId(
    r'getUri',
    r'()Ljava/lang/String;',
  );

  static final _getUri = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getUri()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getUri() {
    return _getUri(reference.pointer, _id_getUri as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getJson = _class.instanceMethodId(
    r'getJson',
    r'()Ljava/lang/String;',
  );

  static final _getJson = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getJson()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getJson() {
    return _getJson(reference.pointer, _id_getJson as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getSources = _class.instanceMethodId(
    r'getSources',
    r'()Ljava/util/List;',
  );

  static final _getSources = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getSources()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<source_.Source> getSources() {
    return _getSources(reference.pointer, _id_getSources as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(source_.$Source$Type()));
  }

  static final _id_getLayers = _class.instanceMethodId(
    r'getLayers',
    r'()Ljava/util/List;',
  );

  static final _getLayers = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getLayers()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<Style_Builder_LayerWrapper> getLayers() {
    return _getLayers(reference.pointer, _id_getLayers as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType($Style_Builder_LayerWrapper$Type()));
  }

  static final _id_getImages = _class.instanceMethodId(
    r'getImages',
    r'()Ljava/util/List;',
  );

  static final _getImages = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getImages()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<Style_Builder_ImageWrapper> getImages() {
    return _getImages(reference.pointer, _id_getImages as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType($Style_Builder_ImageWrapper$Type()));
  }
}

final class $Style_Builder$Type extends _$jni.JObjType<Style_Builder> {
  @_$jni.internal
  const $Style_Builder$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/maps/Style$Builder;';

  @_$jni.internal
  @_$core.override
  Style_Builder fromReference(_$jni.JReference reference) =>
      Style_Builder.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($Style_Builder$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Style_Builder$Type) &&
        other is $Style_Builder$Type;
  }
}

/// from: `org.maplibre.android.maps.Style$OnStyleLoaded`
class Style_OnStyleLoaded extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Style_OnStyleLoaded> $type;

  @_$jni.internal
  Style_OnStyleLoaded.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/maps/Style$OnStyleLoaded');

  /// The type which includes information such as the signature of this class.
  static const type = $Style_OnStyleLoaded$Type();
  static final _id_onStyleLoaded = _class.instanceMethodId(
    r'onStyleLoaded',
    r'(Lorg/maplibre/android/maps/Style;)V',
  );

  static final _onStyleLoaded = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onStyleLoaded(org.maplibre.android.maps.Style style)`
  void onStyleLoaded(
    Style style,
  ) {
    _onStyleLoaded(reference.pointer, _id_onStyleLoaded as _$jni.JMethodIDPtr,
            style.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $Style_OnStyleLoaded> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onStyleLoaded(Lorg/maplibre/android/maps/Style;)V') {
        _$impls[$p]!.onStyleLoaded(
          $a[0].as(const $Style$Type(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $Style_OnStyleLoaded $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.Style$OnStyleLoaded',
      $p,
      _$invokePointer,
      [
        if ($impl.onStyleLoaded$async)
          r'onStyleLoaded(Lorg/maplibre/android/maps/Style;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory Style_OnStyleLoaded.implement(
    $Style_OnStyleLoaded $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return Style_OnStyleLoaded.fromReference(
      $i.implementReference(),
    );
  }
}

abstract mixin class $Style_OnStyleLoaded {
  factory $Style_OnStyleLoaded({
    required void Function(Style style) onStyleLoaded,
    bool onStyleLoaded$async,
  }) = _$Style_OnStyleLoaded;

  void onStyleLoaded(Style style);
  bool get onStyleLoaded$async => false;
}

class _$Style_OnStyleLoaded implements $Style_OnStyleLoaded {
  _$Style_OnStyleLoaded({
    required void Function(Style style) onStyleLoaded,
    this.onStyleLoaded$async = false,
  }) : _onStyleLoaded = onStyleLoaded;

  final void Function(Style style) _onStyleLoaded;
  final bool onStyleLoaded$async;

  void onStyleLoaded(Style style) {
    return _onStyleLoaded(style);
  }
}

final class $Style_OnStyleLoaded$Type
    extends _$jni.JObjType<Style_OnStyleLoaded> {
  @_$jni.internal
  const $Style_OnStyleLoaded$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/maps/Style$OnStyleLoaded;';

  @_$jni.internal
  @_$core.override
  Style_OnStyleLoaded fromReference(_$jni.JReference reference) =>
      Style_OnStyleLoaded.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($Style_OnStyleLoaded$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Style_OnStyleLoaded$Type) &&
        other is $Style_OnStyleLoaded$Type;
  }
}

/// from: `org.maplibre.android.maps.Style`
class Style extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Style> $type;

  @_$jni.internal
  Style.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/maps/Style');

  /// The type which includes information such as the signature of this class.
  static const type = $Style$Type();
  static final _id_getUrl = _class.instanceMethodId(
    r'getUrl',
    r'()Ljava/lang/String;',
  );

  static final _getUrl = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getUrl()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getUrl() {
    return _getUrl(reference.pointer, _id_getUrl as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getUri = _class.instanceMethodId(
    r'getUri',
    r'()Ljava/lang/String;',
  );

  static final _getUri = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getUri()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getUri() {
    return _getUri(reference.pointer, _id_getUri as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getJson = _class.instanceMethodId(
    r'getJson',
    r'()Ljava/lang/String;',
  );

  static final _getJson = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getJson()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getJson() {
    return _getJson(reference.pointer, _id_getJson as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getSources = _class.instanceMethodId(
    r'getSources',
    r'()Ljava/util/List;',
  );

  static final _getSources = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getSources()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<source_.Source> getSources() {
    return _getSources(reference.pointer, _id_getSources as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(source_.$Source$Type()));
  }

  static final _id_addSource = _class.instanceMethodId(
    r'addSource',
    r'(Lorg/maplibre/android/style/sources/Source;)V',
  );

  static final _addSource = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addSource(org.maplibre.android.style.sources.Source source)`
  void addSource(
    source_.Source source,
  ) {
    _addSource(reference.pointer, _id_addSource as _$jni.JMethodIDPtr,
            source.reference.pointer)
        .check();
  }

  static final _id_getSource = _class.instanceMethodId(
    r'getSource',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/sources/Source;',
  );

  static final _getSource = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.style.sources.Source getSource(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  source_.Source getSource(
    _$jni.JString string,
  ) {
    return _getSource(reference.pointer, _id_getSource as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const source_.$Source$Type());
  }

  static final _id_getSourceAs = _class.instanceMethodId(
    r'getSourceAs',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/sources/Source;',
  );

  static final _getSourceAs = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public T getSourceAs(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  $T getSourceAs<$T extends _$jni.JObject>(
    _$jni.JString string, {
    required _$jni.JObjType<$T> T,
  }) {
    return _getSourceAs(reference.pointer,
            _id_getSourceAs as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(T);
  }

  static final _id_removeSource = _class.instanceMethodId(
    r'removeSource',
    r'(Ljava/lang/String;)Z',
  );

  static final _removeSource = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean removeSource(java.lang.String string)`
  bool removeSource(
    _$jni.JString string,
  ) {
    return _removeSource(reference.pointer,
            _id_removeSource as _$jni.JMethodIDPtr, string.reference.pointer)
        .boolean;
  }

  static final _id_removeSource$1 = _class.instanceMethodId(
    r'removeSource',
    r'(Lorg/maplibre/android/style/sources/Source;)Z',
  );

  static final _removeSource$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean removeSource(org.maplibre.android.style.sources.Source source)`
  bool removeSource$1(
    source_.Source source,
  ) {
    return _removeSource$1(reference.pointer,
            _id_removeSource$1 as _$jni.JMethodIDPtr, source.reference.pointer)
        .boolean;
  }

  static final _id_addLayer = _class.instanceMethodId(
    r'addLayer',
    r'(Lorg/maplibre/android/style/layers/Layer;)V',
  );

  static final _addLayer = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addLayer(org.maplibre.android.style.layers.Layer layer)`
  void addLayer(
    layer_.Layer layer,
  ) {
    _addLayer(reference.pointer, _id_addLayer as _$jni.JMethodIDPtr,
            layer.reference.pointer)
        .check();
  }

  static final _id_addLayerBelow = _class.instanceMethodId(
    r'addLayerBelow',
    r'(Lorg/maplibre/android/style/layers/Layer;Ljava/lang/String;)V',
  );

  static final _addLayerBelow = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addLayerBelow(org.maplibre.android.style.layers.Layer layer, java.lang.String string)`
  void addLayerBelow(
    layer_.Layer layer,
    _$jni.JString string,
  ) {
    _addLayerBelow(reference.pointer, _id_addLayerBelow as _$jni.JMethodIDPtr,
            layer.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _id_addLayerAbove = _class.instanceMethodId(
    r'addLayerAbove',
    r'(Lorg/maplibre/android/style/layers/Layer;Ljava/lang/String;)V',
  );

  static final _addLayerAbove = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addLayerAbove(org.maplibre.android.style.layers.Layer layer, java.lang.String string)`
  void addLayerAbove(
    layer_.Layer layer,
    _$jni.JString string,
  ) {
    _addLayerAbove(reference.pointer, _id_addLayerAbove as _$jni.JMethodIDPtr,
            layer.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _id_addLayerAt = _class.instanceMethodId(
    r'addLayerAt',
    r'(Lorg/maplibre/android/style/layers/Layer;I)V',
  );

  static final _addLayerAt = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void addLayerAt(org.maplibre.android.style.layers.Layer layer, int i)`
  void addLayerAt(
    layer_.Layer layer,
    int i,
  ) {
    _addLayerAt(reference.pointer, _id_addLayerAt as _$jni.JMethodIDPtr,
            layer.reference.pointer, i)
        .check();
  }

  static final _id_getLayer = _class.instanceMethodId(
    r'getLayer',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/Layer;',
  );

  static final _getLayer = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.style.layers.Layer getLayer(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  layer_.Layer getLayer(
    _$jni.JString string,
  ) {
    return _getLayer(reference.pointer, _id_getLayer as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const layer_.$Layer$Type());
  }

  static final _id_getLayerAs = _class.instanceMethodId(
    r'getLayerAs',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/Layer;',
  );

  static final _getLayerAs = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public T getLayerAs(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  $T getLayerAs<$T extends _$jni.JObject>(
    _$jni.JString string, {
    required _$jni.JObjType<$T> T,
  }) {
    return _getLayerAs(reference.pointer, _id_getLayerAs as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(T);
  }

  static final _id_getLayers = _class.instanceMethodId(
    r'getLayers',
    r'()Ljava/util/List;',
  );

  static final _getLayers = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getLayers()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<layer_.Layer> getLayers() {
    return _getLayers(reference.pointer, _id_getLayers as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(layer_.$Layer$Type()));
  }

  static final _id_removeLayer = _class.instanceMethodId(
    r'removeLayer',
    r'(Ljava/lang/String;)Z',
  );

  static final _removeLayer = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean removeLayer(java.lang.String string)`
  bool removeLayer(
    _$jni.JString string,
  ) {
    return _removeLayer(reference.pointer,
            _id_removeLayer as _$jni.JMethodIDPtr, string.reference.pointer)
        .boolean;
  }

  static final _id_removeLayer$1 = _class.instanceMethodId(
    r'removeLayer',
    r'(Lorg/maplibre/android/style/layers/Layer;)Z',
  );

  static final _removeLayer$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean removeLayer(org.maplibre.android.style.layers.Layer layer)`
  bool removeLayer$1(
    layer_.Layer layer,
  ) {
    return _removeLayer$1(reference.pointer,
            _id_removeLayer$1 as _$jni.JMethodIDPtr, layer.reference.pointer)
        .boolean;
  }

  static final _id_removeLayerAt = _class.instanceMethodId(
    r'removeLayerAt',
    r'(I)Z',
  );

  static final _removeLayerAt = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public boolean removeLayerAt(int i)`
  bool removeLayerAt(
    int i,
  ) {
    return _removeLayerAt(
            reference.pointer, _id_removeLayerAt as _$jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_addImage = _class.instanceMethodId(
    r'addImage',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;)V',
  );

  static final _addImage = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addImage(java.lang.String string, android.graphics.Bitmap bitmap)`
  void addImage(
    _$jni.JString string,
    _$jni.JObject bitmap,
  ) {
    _addImage(reference.pointer, _id_addImage as _$jni.JMethodIDPtr,
            string.reference.pointer, bitmap.reference.pointer)
        .check();
  }

  static final _id_addImage$1 = _class.instanceMethodId(
    r'addImage',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;Ljava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImage$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addImage(java.lang.String string, android.graphics.Bitmap bitmap, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImage$1(
    _$jni.JString string,
    _$jni.JObject bitmap,
    _$jni.JList<imagestretches_.ImageStretches> list,
    _$jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImage$1(
            reference.pointer,
            _id_addImage$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImage$2 = _class.instanceMethodId(
    r'addImage',
    r'(Ljava/lang/String;Landroid/graphics/drawable/Drawable;)V',
  );

  static final _addImage$2 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addImage(java.lang.String string, android.graphics.drawable.Drawable drawable)`
  void addImage$2(
    _$jni.JString string,
    _$jni.JObject drawable,
  ) {
    _addImage$2(reference.pointer, _id_addImage$2 as _$jni.JMethodIDPtr,
            string.reference.pointer, drawable.reference.pointer)
        .check();
  }

  static final _id_addImage$3 = _class.instanceMethodId(
    r'addImage',
    r'(Ljava/lang/String;Landroid/graphics/drawable/Drawable;Ljava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImage$3 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addImage(java.lang.String string, android.graphics.drawable.Drawable drawable, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImage$3(
    _$jni.JString string,
    _$jni.JObject drawable,
    _$jni.JList<imagestretches_.ImageStretches> list,
    _$jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImage$3(
            reference.pointer,
            _id_addImage$3 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            drawable.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImage$4 = _class.instanceMethodId(
    r'addImage',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;Z)V',
  );

  static final _addImage$4 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `public void addImage(java.lang.String string, android.graphics.Bitmap bitmap, boolean z)`
  void addImage$4(
    _$jni.JString string,
    _$jni.JObject bitmap,
    bool z,
  ) {
    _addImage$4(reference.pointer, _id_addImage$4 as _$jni.JMethodIDPtr,
            string.reference.pointer, bitmap.reference.pointer, z ? 1 : 0)
        .check();
  }

  static final _id_addImage$5 = _class.instanceMethodId(
    r'addImage',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;ZLjava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImage$5 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addImage(java.lang.String string, android.graphics.Bitmap bitmap, boolean z, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImage$5(
    _$jni.JString string,
    _$jni.JObject bitmap,
    bool z,
    _$jni.JList<imagestretches_.ImageStretches> list,
    _$jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImage$5(
            reference.pointer,
            _id_addImage$5 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            z ? 1 : 0,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImageAsync = _class.instanceMethodId(
    r'addImageAsync',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;)V',
  );

  static final _addImageAsync = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addImageAsync(java.lang.String string, android.graphics.Bitmap bitmap)`
  void addImageAsync(
    _$jni.JString string,
    _$jni.JObject bitmap,
  ) {
    _addImageAsync(reference.pointer, _id_addImageAsync as _$jni.JMethodIDPtr,
            string.reference.pointer, bitmap.reference.pointer)
        .check();
  }

  static final _id_addImageAsync$1 = _class.instanceMethodId(
    r'addImageAsync',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;Ljava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImageAsync$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addImageAsync(java.lang.String string, android.graphics.Bitmap bitmap, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImageAsync$1(
    _$jni.JString string,
    _$jni.JObject bitmap,
    _$jni.JList<imagestretches_.ImageStretches> list,
    _$jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImageAsync$1(
            reference.pointer,
            _id_addImageAsync$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImageAsync$2 = _class.instanceMethodId(
    r'addImageAsync',
    r'(Ljava/lang/String;Landroid/graphics/drawable/Drawable;)V',
  );

  static final _addImageAsync$2 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addImageAsync(java.lang.String string, android.graphics.drawable.Drawable drawable)`
  void addImageAsync$2(
    _$jni.JString string,
    _$jni.JObject drawable,
  ) {
    _addImageAsync$2(
            reference.pointer,
            _id_addImageAsync$2 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            drawable.reference.pointer)
        .check();
  }

  static final _id_addImageAsync$3 = _class.instanceMethodId(
    r'addImageAsync',
    r'(Ljava/lang/String;Landroid/graphics/drawable/Drawable;Ljava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImageAsync$3 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addImageAsync(java.lang.String string, android.graphics.drawable.Drawable drawable, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImageAsync$3(
    _$jni.JString string,
    _$jni.JObject drawable,
    _$jni.JList<imagestretches_.ImageStretches> list,
    _$jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImageAsync$3(
            reference.pointer,
            _id_addImageAsync$3 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            drawable.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImageAsync$4 = _class.instanceMethodId(
    r'addImageAsync',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;Z)V',
  );

  static final _addImageAsync$4 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `public void addImageAsync(java.lang.String string, android.graphics.Bitmap bitmap, boolean z)`
  void addImageAsync$4(
    _$jni.JString string,
    _$jni.JObject bitmap,
    bool z,
  ) {
    _addImageAsync$4(
            reference.pointer,
            _id_addImageAsync$4 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            z ? 1 : 0)
        .check();
  }

  static final _id_addImageAsync$5 = _class.instanceMethodId(
    r'addImageAsync',
    r'(Ljava/lang/String;Landroid/graphics/Bitmap;ZLjava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImageAsync$5 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addImageAsync(java.lang.String string, android.graphics.Bitmap bitmap, boolean z, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImageAsync$5(
    _$jni.JString string,
    _$jni.JObject bitmap,
    bool z,
    _$jni.JList<imagestretches_.ImageStretches> list,
    _$jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImageAsync$5(
            reference.pointer,
            _id_addImageAsync$5 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            bitmap.reference.pointer,
            z ? 1 : 0,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImages = _class.instanceMethodId(
    r'addImages',
    r'(Ljava/util/HashMap;)V',
  );

  static final _addImages = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addImages(java.util.HashMap hashMap)`
  void addImages(
    _$jni.JObject hashMap,
  ) {
    _addImages(reference.pointer, _id_addImages as _$jni.JMethodIDPtr,
            hashMap.reference.pointer)
        .check();
  }

  static final _id_addImages$1 = _class.instanceMethodId(
    r'addImages',
    r'(Ljava/util/HashMap;Ljava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImages$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addImages(java.util.HashMap hashMap, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImages$1(
    _$jni.JObject hashMap,
    _$jni.JList<imagestretches_.ImageStretches> list,
    _$jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImages$1(
            reference.pointer,
            _id_addImages$1 as _$jni.JMethodIDPtr,
            hashMap.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImages$2 = _class.instanceMethodId(
    r'addImages',
    r'(Ljava/util/HashMap;Z)V',
  );

  static final _addImages$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void addImages(java.util.HashMap hashMap, boolean z)`
  void addImages$2(
    _$jni.JObject hashMap,
    bool z,
  ) {
    _addImages$2(reference.pointer, _id_addImages$2 as _$jni.JMethodIDPtr,
            hashMap.reference.pointer, z ? 1 : 0)
        .check();
  }

  static final _id_addImages$3 = _class.instanceMethodId(
    r'addImages',
    r'(Ljava/util/HashMap;ZLjava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImages$3 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addImages(java.util.HashMap hashMap, boolean z, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImages$3(
    _$jni.JObject hashMap,
    bool z,
    _$jni.JList<imagestretches_.ImageStretches> list,
    _$jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImages$3(
            reference.pointer,
            _id_addImages$3 as _$jni.JMethodIDPtr,
            hashMap.reference.pointer,
            z ? 1 : 0,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImagesAsync = _class.instanceMethodId(
    r'addImagesAsync',
    r'(Ljava/util/HashMap;)V',
  );

  static final _addImagesAsync = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addImagesAsync(java.util.HashMap hashMap)`
  void addImagesAsync(
    _$jni.JObject hashMap,
  ) {
    _addImagesAsync(reference.pointer, _id_addImagesAsync as _$jni.JMethodIDPtr,
            hashMap.reference.pointer)
        .check();
  }

  static final _id_addImagesAsync$1 = _class.instanceMethodId(
    r'addImagesAsync',
    r'(Ljava/util/HashMap;Ljava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImagesAsync$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addImagesAsync(java.util.HashMap hashMap, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImagesAsync$1(
    _$jni.JObject hashMap,
    _$jni.JList<imagestretches_.ImageStretches> list,
    _$jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImagesAsync$1(
            reference.pointer,
            _id_addImagesAsync$1 as _$jni.JMethodIDPtr,
            hashMap.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_addImagesAsync$2 = _class.instanceMethodId(
    r'addImagesAsync',
    r'(Ljava/util/HashMap;Z)V',
  );

  static final _addImagesAsync$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void addImagesAsync(java.util.HashMap hashMap, boolean z)`
  void addImagesAsync$2(
    _$jni.JObject hashMap,
    bool z,
  ) {
    _addImagesAsync$2(
            reference.pointer,
            _id_addImagesAsync$2 as _$jni.JMethodIDPtr,
            hashMap.reference.pointer,
            z ? 1 : 0)
        .check();
  }

  static final _id_addImagesAsync$3 = _class.instanceMethodId(
    r'addImagesAsync',
    r'(Ljava/util/HashMap;ZLjava/util/List;Ljava/util/List;Lorg/maplibre/android/maps/ImageContent;)V',
  );

  static final _addImagesAsync$3 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addImagesAsync(java.util.HashMap hashMap, boolean z, java.util.List list, java.util.List list1, org.maplibre.android.maps.ImageContent imageContent)`
  void addImagesAsync$3(
    _$jni.JObject hashMap,
    bool z,
    _$jni.JList<imagestretches_.ImageStretches> list,
    _$jni.JList<imagestretches_.ImageStretches> list1,
    imagecontent_.ImageContent imageContent,
  ) {
    _addImagesAsync$3(
            reference.pointer,
            _id_addImagesAsync$3 as _$jni.JMethodIDPtr,
            hashMap.reference.pointer,
            z ? 1 : 0,
            list.reference.pointer,
            list1.reference.pointer,
            imageContent.reference.pointer)
        .check();
  }

  static final _id_removeImage = _class.instanceMethodId(
    r'removeImage',
    r'(Ljava/lang/String;)V',
  );

  static final _removeImage = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeImage(java.lang.String string)`
  void removeImage(
    _$jni.JString string,
  ) {
    _removeImage(reference.pointer, _id_removeImage as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getImage = _class.instanceMethodId(
    r'getImage',
    r'(Ljava/lang/String;)Landroid/graphics/Bitmap;',
  );

  static final _getImage = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.graphics.Bitmap getImage(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getImage(
    _$jni.JString string,
  ) {
    return _getImage(reference.pointer, _id_getImage as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_setTransition = _class.instanceMethodId(
    r'setTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setTransition = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setTransition(reference.pointer, _id_setTransition as _$jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getTransition = _class.instanceMethodId(
    r'getTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getTransition = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getTransition() {
    return _getTransition(
            reference.pointer, _id_getTransition as _$jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptions$Type());
  }

  static final _id_getLight = _class.instanceMethodId(
    r'getLight',
    r'()Lorg/maplibre/android/style/light/Light;',
  );

  static final _getLight = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.light.Light getLight()`
  /// The returned object must be released after use, by calling the [release] method.
  light_.Light getLight() {
    return _getLight(reference.pointer, _id_getLight as _$jni.JMethodIDPtr)
        .object(const light_.$Light$Type());
  }

  static final _id_isFullyLoaded = _class.instanceMethodId(
    r'isFullyLoaded',
    r'()Z',
  );

  static final _isFullyLoaded = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isFullyLoaded()`
  bool isFullyLoaded() {
    return _isFullyLoaded(
            reference.pointer, _id_isFullyLoaded as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_toImage = _class.staticMethodId(
    r'toImage',
    r'(Lorg/maplibre/android/maps/Style$Builder$ImageWrapper;)Lorg/maplibre/android/maps/Image;',
  );

  static final _toImage = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.maps.Image toImage(org.maplibre.android.maps.Style$Builder$ImageWrapper imageWrapper)`
  /// The returned object must be released after use, by calling the [release] method.
  static image_.Image toImage(
    Style_Builder_ImageWrapper imageWrapper,
  ) {
    return _toImage(_class.reference.pointer, _id_toImage as _$jni.JMethodIDPtr,
            imageWrapper.reference.pointer)
        .object(const image_.$Image$Type());
  }

  static final _id_getPredefinedStyles = _class.staticMethodId(
    r'getPredefinedStyles',
    r'()[Lorg/maplibre/android/util/DefaultStyle;',
  );

  static final _getPredefinedStyles = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.util.DefaultStyle[] getPredefinedStyles()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<defaultstyle_.DefaultStyle> getPredefinedStyles() {
    return _getPredefinedStyles(_class.reference.pointer,
            _id_getPredefinedStyles as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType(defaultstyle_.$DefaultStyle$Type()));
  }

  static final _id_getPredefinedStyle = _class.staticMethodId(
    r'getPredefinedStyle',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getPredefinedStyle = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.lang.String getPredefinedStyle(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString getPredefinedStyle(
    _$jni.JString string,
  ) {
    return _getPredefinedStyle(
            _class.reference.pointer,
            _id_getPredefinedStyle as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JStringType());
  }
}

final class $Style$Type extends _$jni.JObjType<Style> {
  @_$jni.internal
  const $Style$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/maps/Style;';

  @_$jni.internal
  @_$core.override
  Style fromReference(_$jni.JReference reference) =>
      Style.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($Style$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Style$Type) && other is $Style$Type;
  }
}
