// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../MapRenderer.dart' as maprenderer_;

import 'MapLibreSurfaceView.dart' as maplibresurfaceview_;

/// from: `org.maplibre.android.maps.renderer.surfaceview.SurfaceViewMapRenderer`
class SurfaceViewMapRenderer extends maprenderer_.MapRenderer {
  @override
  late final jni.JObjType<SurfaceViewMapRenderer> $type = type;

  SurfaceViewMapRenderer.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/renderer/surfaceview/SurfaceViewMapRenderer');

  /// The type which includes information such as the signature of this class.
  static const type = $SurfaceViewMapRendererType();
  static final _id_surfaceView = _class.instanceFieldId(
    r'surfaceView',
    r'Lorg/maplibre/android/maps/renderer/surfaceview/MapLibreSurfaceView;',
  );

  /// from: `protected final org.maplibre.android.maps.renderer.surfaceview.MapLibreSurfaceView surfaceView`
  /// The returned object must be released after use, by calling the [release] method.
  maplibresurfaceview_.MapLibreSurfaceView get surfaceView => _id_surfaceView
      .get(this, const maplibresurfaceview_.$MapLibreSurfaceViewType());

  static final _id_new1 = _class.constructorId(
    r'(Landroid/content/Context;Lorg/maplibre/android/maps/renderer/surfaceview/MapLibreSurfaceView;Ljava/lang/String;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(android.content.Context context, org.maplibre.android.maps.renderer.surfaceview.MapLibreSurfaceView mapLibreSurfaceView, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory SurfaceViewMapRenderer.new1(
    jni.JObject context,
    maplibresurfaceview_.MapLibreSurfaceView mapLibreSurfaceView,
    jni.JString string,
  ) {
    return SurfaceViewMapRenderer.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            context.reference.pointer,
            mapLibreSurfaceView.reference.pointer,
            string.reference.pointer)
        .reference);
  }

  static final _id_getView = _class.instanceMethodId(
    r'getView',
    r'()Landroid/view/View;',
  );

  static final _getView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public android.view.View getView()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getView() {
    return _getView(reference.pointer, _id_getView as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_onStop = _class.instanceMethodId(
    r'onStop',
    r'()V',
  );

  static final _onStop = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onStop()`
  void onStop() {
    _onStop(reference.pointer, _id_onStop as jni.JMethodIDPtr).check();
  }

  static final _id_onPause = _class.instanceMethodId(
    r'onPause',
    r'()V',
  );

  static final _onPause = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onPause()`
  void onPause() {
    _onPause(reference.pointer, _id_onPause as jni.JMethodIDPtr).check();
  }

  static final _id_onDestroy = _class.instanceMethodId(
    r'onDestroy',
    r'()V',
  );

  static final _onDestroy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onDestroy()`
  void onDestroy() {
    _onDestroy(reference.pointer, _id_onDestroy as jni.JMethodIDPtr).check();
  }

  static final _id_onStart = _class.instanceMethodId(
    r'onStart',
    r'()V',
  );

  static final _onStart = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onStart()`
  void onStart() {
    _onStart(reference.pointer, _id_onStart as jni.JMethodIDPtr).check();
  }

  static final _id_onResume = _class.instanceMethodId(
    r'onResume',
    r'()V',
  );

  static final _onResume = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onResume()`
  void onResume() {
    _onResume(reference.pointer, _id_onResume as jni.JMethodIDPtr).check();
  }

  static final _id_onSurfaceCreated = _class.instanceMethodId(
    r'onSurfaceCreated',
    r'(Landroid/view/Surface;)V',
  );

  static final _onSurfaceCreated = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void onSurfaceCreated(android.view.Surface surface)`
  void onSurfaceCreated(
    jni.JObject surface,
  ) {
    _onSurfaceCreated(reference.pointer,
            _id_onSurfaceCreated as jni.JMethodIDPtr, surface.reference.pointer)
        .check();
  }

  static final _id_onSurfaceDestroyed = _class.instanceMethodId(
    r'onSurfaceDestroyed',
    r'()V',
  );

  static final _onSurfaceDestroyed = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onSurfaceDestroyed()`
  void onSurfaceDestroyed() {
    _onSurfaceDestroyed(
            reference.pointer, _id_onSurfaceDestroyed as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onSurfaceChanged = _class.instanceMethodId(
    r'onSurfaceChanged',
    r'(II)V',
  );

  static final _onSurfaceChanged = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32, $Int32)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: `public void onSurfaceChanged(int i, int i1)`
  void onSurfaceChanged(
    int i,
    int i1,
  ) {
    _onSurfaceChanged(
            reference.pointer, _id_onSurfaceChanged as jni.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_onDrawFrame = _class.instanceMethodId(
    r'onDrawFrame',
    r'()V',
  );

  static final _onDrawFrame = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onDrawFrame()`
  void onDrawFrame() {
    _onDrawFrame(reference.pointer, _id_onDrawFrame as jni.JMethodIDPtr)
        .check();
  }

  static final _id_requestRender = _class.instanceMethodId(
    r'requestRender',
    r'()V',
  );

  static final _requestRender = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void requestRender()`
  void requestRender() {
    _requestRender(reference.pointer, _id_requestRender as jni.JMethodIDPtr)
        .check();
  }

  static final _id_queueEvent = _class.instanceMethodId(
    r'queueEvent',
    r'(Ljava/lang/Runnable;)V',
  );

  static final _queueEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void queueEvent(java.lang.Runnable runnable)`
  void queueEvent(
    jni.JObject runnable,
  ) {
    _queueEvent(reference.pointer, _id_queueEvent as jni.JMethodIDPtr,
            runnable.reference.pointer)
        .check();
  }

  static final _id_waitForEmpty = _class.instanceMethodId(
    r'waitForEmpty',
    r'()V',
  );

  static final _waitForEmpty = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void waitForEmpty()`
  void waitForEmpty() {
    _waitForEmpty(reference.pointer, _id_waitForEmpty as jni.JMethodIDPtr)
        .check();
  }

  static final _id_setRenderingRefreshMode = _class.instanceMethodId(
    r'setRenderingRefreshMode',
    r'(Lorg/maplibre/android/maps/renderer/MapRenderer$RenderingRefreshMode;)V',
  );

  static final _setRenderingRefreshMode = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setRenderingRefreshMode(org.maplibre.android.maps.renderer.MapRenderer$RenderingRefreshMode renderingRefreshMode)`
  void setRenderingRefreshMode(
    maprenderer_.MapRenderer_RenderingRefreshMode renderingRefreshMode,
  ) {
    _setRenderingRefreshMode(
            reference.pointer,
            _id_setRenderingRefreshMode as jni.JMethodIDPtr,
            renderingRefreshMode.reference.pointer)
        .check();
  }

  static final _id_getRenderingRefreshMode = _class.instanceMethodId(
    r'getRenderingRefreshMode',
    r'()Lorg/maplibre/android/maps/renderer/MapRenderer$RenderingRefreshMode;',
  );

  static final _getRenderingRefreshMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.maps.renderer.MapRenderer$RenderingRefreshMode getRenderingRefreshMode()`
  /// The returned object must be released after use, by calling the [release] method.
  maprenderer_.MapRenderer_RenderingRefreshMode getRenderingRefreshMode() {
    return _getRenderingRefreshMode(
            reference.pointer, _id_getRenderingRefreshMode as jni.JMethodIDPtr)
        .object(const maprenderer_.$MapRenderer_RenderingRefreshModeType());
  }
}

final class $SurfaceViewMapRendererType
    extends jni.JObjType<SurfaceViewMapRenderer> {
  const $SurfaceViewMapRendererType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/renderer/surfaceview/SurfaceViewMapRenderer;';

  @override
  SurfaceViewMapRenderer fromReference(jni.JReference reference) =>
      SurfaceViewMapRenderer.fromReference(reference);

  @override
  jni.JObjType get superType => const maprenderer_.$MapRendererType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($SurfaceViewMapRendererType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($SurfaceViewMapRendererType) &&
        other is $SurfaceViewMapRendererType;
  }
}
