// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.maps.renderer.egl.EGLLogWrapper`
class EGLLogWrapper extends jni.JObject {
  @override
  late final jni.JObjType<EGLLogWrapper> $type = type;

  EGLLogWrapper.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/renderer/egl/EGLLogWrapper');

  /// The type which includes information such as the signature of this class.
  static const type = $EGLLogWrapperType();
  static final _id_new0 = _class.constructorId(
    r'(Ljavax/microedition/khronos/egl/EGL;ILjava/io/Writer;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(javax.microedition.khronos.egl.EGL eGL, int i, java.io.Writer writer)`
  /// The returned object must be released after use, by calling the [release] method.
  factory EGLLogWrapper(
    jni.JObject eGL,
    int i,
    jni.JObject writer,
  ) {
    return EGLLogWrapper.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            eGL.reference.pointer,
            i,
            writer.reference.pointer)
        .reference);
  }

  static final _id_eglChooseConfig = _class.instanceMethodId(
    r'eglChooseConfig',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;[I[Ljavax/microedition/khronos/egl/EGLConfig;I[I)Z',
  );

  static final _eglChooseConfig = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, int[] is, javax.microedition.khronos.egl.EGLConfig[] eGLConfigs, int i, int[] is1)`
  bool eglChooseConfig(
    jni.JObject eGLDisplay,
    jni.JArray<jni.jint> is0,
    jni.JArray<jni.JObject> eGLConfigs,
    int i,
    jni.JArray<jni.jint> is1,
  ) {
    return _eglChooseConfig(
            reference.pointer,
            _id_eglChooseConfig as jni.JMethodIDPtr,
            eGLDisplay.reference.pointer,
            is0.reference.pointer,
            eGLConfigs.reference.pointer,
            i,
            is1.reference.pointer)
        .boolean;
  }

  static final _id_eglCopyBuffers = _class.instanceMethodId(
    r'eglCopyBuffers',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;Ljava/lang/Object;)Z',
  );

  static final _eglCopyBuffers = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLSurface eGLSurface, java.lang.Object object)`
  bool eglCopyBuffers(
    jni.JObject eGLDisplay,
    jni.JObject eGLSurface,
    jni.JObject object,
  ) {
    return _eglCopyBuffers(
            reference.pointer,
            _id_eglCopyBuffers as jni.JMethodIDPtr,
            eGLDisplay.reference.pointer,
            eGLSurface.reference.pointer,
            object.reference.pointer)
        .boolean;
  }

  static final _id_eglCreateContext = _class.instanceMethodId(
    r'eglCreateContext',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;Ljavax/microedition/khronos/egl/EGLContext;[I)Ljavax/microedition/khronos/egl/EGLContext;',
  );

  static final _eglCreateContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLConfig eGLConfig, javax.microedition.khronos.egl.EGLContext eGLContext, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject eglCreateContext(
    jni.JObject eGLDisplay,
    jni.JObject eGLConfig,
    jni.JObject eGLContext,
    jni.JArray<jni.jint> is0,
  ) {
    return _eglCreateContext(
            reference.pointer,
            _id_eglCreateContext as jni.JMethodIDPtr,
            eGLDisplay.reference.pointer,
            eGLConfig.reference.pointer,
            eGLContext.reference.pointer,
            is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_eglCreatePbufferSurface = _class.instanceMethodId(
    r'eglCreatePbufferSurface',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;[I)Ljavax/microedition/khronos/egl/EGLSurface;',
  );

  static final _eglCreatePbufferSurface = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLConfig eGLConfig, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject eglCreatePbufferSurface(
    jni.JObject eGLDisplay,
    jni.JObject eGLConfig,
    jni.JArray<jni.jint> is0,
  ) {
    return _eglCreatePbufferSurface(
            reference.pointer,
            _id_eglCreatePbufferSurface as jni.JMethodIDPtr,
            eGLDisplay.reference.pointer,
            eGLConfig.reference.pointer,
            is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_eglCreatePixmapSurface = _class.instanceMethodId(
    r'eglCreatePixmapSurface',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;Ljava/lang/Object;[I)Ljavax/microedition/khronos/egl/EGLSurface;',
  );

  static final _eglCreatePixmapSurface = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public javax.microedition.khronos.egl.EGLSurface eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLConfig eGLConfig, java.lang.Object object, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject eglCreatePixmapSurface(
    jni.JObject eGLDisplay,
    jni.JObject eGLConfig,
    jni.JObject object,
    jni.JArray<jni.jint> is0,
  ) {
    return _eglCreatePixmapSurface(
            reference.pointer,
            _id_eglCreatePixmapSurface as jni.JMethodIDPtr,
            eGLDisplay.reference.pointer,
            eGLConfig.reference.pointer,
            object.reference.pointer,
            is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_eglCreateWindowSurface = _class.instanceMethodId(
    r'eglCreateWindowSurface',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;Ljava/lang/Object;[I)Ljavax/microedition/khronos/egl/EGLSurface;',
  );

  static final _eglCreateWindowSurface = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLConfig eGLConfig, java.lang.Object object, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject eglCreateWindowSurface(
    jni.JObject eGLDisplay,
    jni.JObject eGLConfig,
    jni.JObject object,
    jni.JArray<jni.jint> is0,
  ) {
    return _eglCreateWindowSurface(
            reference.pointer,
            _id_eglCreateWindowSurface as jni.JMethodIDPtr,
            eGLDisplay.reference.pointer,
            eGLConfig.reference.pointer,
            object.reference.pointer,
            is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_eglDestroyContext = _class.instanceMethodId(
    r'eglDestroyContext',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLContext;)Z',
  );

  static final _eglDestroyContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLContext eGLContext)`
  bool eglDestroyContext(
    jni.JObject eGLDisplay,
    jni.JObject eGLContext,
  ) {
    return _eglDestroyContext(
            reference.pointer,
            _id_eglDestroyContext as jni.JMethodIDPtr,
            eGLDisplay.reference.pointer,
            eGLContext.reference.pointer)
        .boolean;
  }

  static final _id_eglDestroySurface = _class.instanceMethodId(
    r'eglDestroySurface',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;)Z',
  );

  static final _eglDestroySurface = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLSurface eGLSurface)`
  bool eglDestroySurface(
    jni.JObject eGLDisplay,
    jni.JObject eGLSurface,
  ) {
    return _eglDestroySurface(
            reference.pointer,
            _id_eglDestroySurface as jni.JMethodIDPtr,
            eGLDisplay.reference.pointer,
            eGLSurface.reference.pointer)
        .boolean;
  }

  static final _id_eglGetConfigAttrib = _class.instanceMethodId(
    r'eglGetConfigAttrib',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLConfig;I[I)Z',
  );

  static final _eglGetConfigAttrib = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLConfig eGLConfig, int i, int[] is)`
  bool eglGetConfigAttrib(
    jni.JObject eGLDisplay,
    jni.JObject eGLConfig,
    int i,
    jni.JArray<jni.jint> is0,
  ) {
    return _eglGetConfigAttrib(
            reference.pointer,
            _id_eglGetConfigAttrib as jni.JMethodIDPtr,
            eGLDisplay.reference.pointer,
            eGLConfig.reference.pointer,
            i,
            is0.reference.pointer)
        .boolean;
  }

  static final _id_eglGetConfigs = _class.instanceMethodId(
    r'eglGetConfigs',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;[Ljavax/microedition/khronos/egl/EGLConfig;I[I)Z',
  );

  static final _eglGetConfigs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLConfig[] eGLConfigs, int i, int[] is)`
  bool eglGetConfigs(
    jni.JObject eGLDisplay,
    jni.JArray<jni.JObject> eGLConfigs,
    int i,
    jni.JArray<jni.jint> is0,
  ) {
    return _eglGetConfigs(
            reference.pointer,
            _id_eglGetConfigs as jni.JMethodIDPtr,
            eGLDisplay.reference.pointer,
            eGLConfigs.reference.pointer,
            i,
            is0.reference.pointer)
        .boolean;
  }

  static final _id_eglGetCurrentContext = _class.instanceMethodId(
    r'eglGetCurrentContext',
    r'()Ljavax/microedition/khronos/egl/EGLContext;',
  );

  static final _eglGetCurrentContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public javax.microedition.khronos.egl.EGLContext eglGetCurrentContext()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject eglGetCurrentContext() {
    return _eglGetCurrentContext(
            reference.pointer, _id_eglGetCurrentContext as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_eglGetCurrentDisplay = _class.instanceMethodId(
    r'eglGetCurrentDisplay',
    r'()Ljavax/microedition/khronos/egl/EGLDisplay;',
  );

  static final _eglGetCurrentDisplay = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public javax.microedition.khronos.egl.EGLDisplay eglGetCurrentDisplay()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject eglGetCurrentDisplay() {
    return _eglGetCurrentDisplay(
            reference.pointer, _id_eglGetCurrentDisplay as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_eglGetCurrentSurface = _class.instanceMethodId(
    r'eglGetCurrentSurface',
    r'(I)Ljavax/microedition/khronos/egl/EGLSurface;',
  );

  static final _eglGetCurrentSurface = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public javax.microedition.khronos.egl.EGLSurface eglGetCurrentSurface(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject eglGetCurrentSurface(
    int i,
  ) {
    return _eglGetCurrentSurface(
            reference.pointer, _id_eglGetCurrentSurface as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_eglGetDisplay = _class.instanceMethodId(
    r'eglGetDisplay',
    r'(Ljava/lang/Object;)Ljavax/microedition/khronos/egl/EGLDisplay;',
  );

  static final _eglGetDisplay = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject eglGetDisplay(
    jni.JObject object,
  ) {
    return _eglGetDisplay(reference.pointer,
            _id_eglGetDisplay as jni.JMethodIDPtr, object.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_eglGetError = _class.instanceMethodId(
    r'eglGetError',
    r'()I',
  );

  static final _eglGetError = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int eglGetError()`
  int eglGetError() {
    return _eglGetError(reference.pointer, _id_eglGetError as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_eglInitialize = _class.instanceMethodId(
    r'eglInitialize',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;[I)Z',
  );

  static final _eglInitialize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, int[] is)`
  bool eglInitialize(
    jni.JObject eGLDisplay,
    jni.JArray<jni.jint> is0,
  ) {
    return _eglInitialize(
            reference.pointer,
            _id_eglInitialize as jni.JMethodIDPtr,
            eGLDisplay.reference.pointer,
            is0.reference.pointer)
        .boolean;
  }

  static final _id_eglMakeCurrent = _class.instanceMethodId(
    r'eglMakeCurrent',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;Ljavax/microedition/khronos/egl/EGLSurface;Ljavax/microedition/khronos/egl/EGLContext;)Z',
  );

  static final _eglMakeCurrent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLSurface eGLSurface, javax.microedition.khronos.egl.EGLSurface eGLSurface1, javax.microedition.khronos.egl.EGLContext eGLContext)`
  bool eglMakeCurrent(
    jni.JObject eGLDisplay,
    jni.JObject eGLSurface,
    jni.JObject eGLSurface1,
    jni.JObject eGLContext,
  ) {
    return _eglMakeCurrent(
            reference.pointer,
            _id_eglMakeCurrent as jni.JMethodIDPtr,
            eGLDisplay.reference.pointer,
            eGLSurface.reference.pointer,
            eGLSurface1.reference.pointer,
            eGLContext.reference.pointer)
        .boolean;
  }

  static final _id_eglQueryContext = _class.instanceMethodId(
    r'eglQueryContext',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLContext;I[I)Z',
  );

  static final _eglQueryContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean eglQueryContext(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLContext eGLContext, int i, int[] is)`
  bool eglQueryContext(
    jni.JObject eGLDisplay,
    jni.JObject eGLContext,
    int i,
    jni.JArray<jni.jint> is0,
  ) {
    return _eglQueryContext(
            reference.pointer,
            _id_eglQueryContext as jni.JMethodIDPtr,
            eGLDisplay.reference.pointer,
            eGLContext.reference.pointer,
            i,
            is0.reference.pointer)
        .boolean;
  }

  static final _id_eglQueryString = _class.instanceMethodId(
    r'eglQueryString',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;I)Ljava/lang/String;',
  );

  static final _eglQueryString = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `public java.lang.String eglQueryString(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString eglQueryString(
    jni.JObject eGLDisplay,
    int i,
  ) {
    return _eglQueryString(
            reference.pointer,
            _id_eglQueryString as jni.JMethodIDPtr,
            eGLDisplay.reference.pointer,
            i)
        .object(const jni.JStringType());
  }

  static final _id_eglQuerySurface = _class.instanceMethodId(
    r'eglQuerySurface',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;I[I)Z',
  );

  static final _eglQuerySurface = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLSurface eGLSurface, int i, int[] is)`
  bool eglQuerySurface(
    jni.JObject eGLDisplay,
    jni.JObject eGLSurface,
    int i,
    jni.JArray<jni.jint> is0,
  ) {
    return _eglQuerySurface(
            reference.pointer,
            _id_eglQuerySurface as jni.JMethodIDPtr,
            eGLDisplay.reference.pointer,
            eGLSurface.reference.pointer,
            i,
            is0.reference.pointer)
        .boolean;
  }

  static final _id_eglSwapBuffers = _class.instanceMethodId(
    r'eglSwapBuffers',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;Ljavax/microedition/khronos/egl/EGLSurface;)Z',
  );

  static final _eglSwapBuffers = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay eGLDisplay, javax.microedition.khronos.egl.EGLSurface eGLSurface)`
  bool eglSwapBuffers(
    jni.JObject eGLDisplay,
    jni.JObject eGLSurface,
  ) {
    return _eglSwapBuffers(
            reference.pointer,
            _id_eglSwapBuffers as jni.JMethodIDPtr,
            eGLDisplay.reference.pointer,
            eGLSurface.reference.pointer)
        .boolean;
  }

  static final _id_eglTerminate = _class.instanceMethodId(
    r'eglTerminate',
    r'(Ljavax/microedition/khronos/egl/EGLDisplay;)Z',
  );

  static final _eglTerminate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean eglTerminate(javax.microedition.khronos.egl.EGLDisplay eGLDisplay)`
  bool eglTerminate(
    jni.JObject eGLDisplay,
  ) {
    return _eglTerminate(reference.pointer,
            _id_eglTerminate as jni.JMethodIDPtr, eGLDisplay.reference.pointer)
        .boolean;
  }

  static final _id_eglWaitGL = _class.instanceMethodId(
    r'eglWaitGL',
    r'()Z',
  );

  static final _eglWaitGL = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean eglWaitGL()`
  bool eglWaitGL() {
    return _eglWaitGL(reference.pointer, _id_eglWaitGL as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_eglWaitNative = _class.instanceMethodId(
    r'eglWaitNative',
    r'(ILjava/lang/Object;)Z',
  );

  static final _eglWaitNative = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean eglWaitNative(int i, java.lang.Object object)`
  bool eglWaitNative(
    int i,
    jni.JObject object,
  ) {
    return _eglWaitNative(reference.pointer,
            _id_eglWaitNative as jni.JMethodIDPtr, i, object.reference.pointer)
        .boolean;
  }

  static final _id_getErrorString = _class.staticMethodId(
    r'getErrorString',
    r'(I)Ljava/lang/String;',
  );

  static final _getErrorString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public java.lang.String getErrorString(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString getErrorString(
    int i,
  ) {
    return _getErrorString(
            _class.reference.pointer, _id_getErrorString as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }
}

final class $EGLLogWrapperType extends jni.JObjType<EGLLogWrapper> {
  const $EGLLogWrapperType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/renderer/egl/EGLLogWrapper;';

  @override
  EGLLogWrapper fromReference(jni.JReference reference) =>
      EGLLogWrapper.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($EGLLogWrapperType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($EGLLogWrapperType) &&
        other is $EGLLogWrapperType;
  }
}
