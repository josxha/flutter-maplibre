// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'TextureViewMapRenderer.dart' as textureviewmaprenderer_;

/// from: `org.maplibre.android.maps.renderer.textureview.GLTextureViewRenderThread`
class GLTextureViewRenderThread extends jni.JObject {
  @override
  late final jni.JObjType<GLTextureViewRenderThread> $type = type;

  GLTextureViewRenderThread.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/maps/renderer/textureview/GLTextureViewRenderThread');

  /// The type which includes information such as the signature of this class.
  static const type = $GLTextureViewRenderThreadType();
  static final _id_new0 = _class.constructorId(
    r'(Landroid/view/TextureView;Lorg/maplibre/android/maps/renderer/textureview/TextureViewMapRenderer;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(android.view.TextureView textureView, org.maplibre.android.maps.renderer.textureview.TextureViewMapRenderer textureViewMapRenderer)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GLTextureViewRenderThread(
    jni.JObject textureView,
    textureviewmaprenderer_.TextureViewMapRenderer textureViewMapRenderer,
  ) {
    return GLTextureViewRenderThread.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            textureView.reference.pointer,
            textureViewMapRenderer.reference.pointer)
        .reference);
  }

  static final _id_run = _class.instanceMethodId(
    r'run',
    r'()V',
  );

  static final _run = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void run()`
  void run() {
    _run(reference.pointer, _id_run as jni.JMethodIDPtr).check();
  }

  static final _id_onSurfaceTextureUpdated = _class.instanceMethodId(
    r'onSurfaceTextureUpdated',
    r'(Landroid/graphics/SurfaceTexture;)V',
  );

  static final _onSurfaceTextureUpdated = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void onSurfaceTextureUpdated(android.graphics.SurfaceTexture surfaceTexture)`
  void onSurfaceTextureUpdated(
    jni.JObject surfaceTexture,
  ) {
    _onSurfaceTextureUpdated(
            reference.pointer,
            _id_onSurfaceTextureUpdated as jni.JMethodIDPtr,
            surfaceTexture.reference.pointer)
        .check();
  }

  static final _id_onSurfaceTextureDestroyed = _class.instanceMethodId(
    r'onSurfaceTextureDestroyed',
    r'(Landroid/graphics/SurfaceTexture;)Z',
  );

  static final _onSurfaceTextureDestroyed = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture surfaceTexture)`
  bool onSurfaceTextureDestroyed(
    jni.JObject surfaceTexture,
  ) {
    return _onSurfaceTextureDestroyed(
            reference.pointer,
            _id_onSurfaceTextureDestroyed as jni.JMethodIDPtr,
            surfaceTexture.reference.pointer)
        .boolean;
  }

  static final _id_onSurfaceTextureSizeChanged = _class.instanceMethodId(
    r'onSurfaceTextureSizeChanged',
    r'(Landroid/graphics/SurfaceTexture;II)V',
  );

  static final _onSurfaceTextureSizeChanged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: `public void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture surfaceTexture, int i, int i1)`
  void onSurfaceTextureSizeChanged(
    jni.JObject surfaceTexture,
    int i,
    int i1,
  ) {
    _onSurfaceTextureSizeChanged(
            reference.pointer,
            _id_onSurfaceTextureSizeChanged as jni.JMethodIDPtr,
            surfaceTexture.reference.pointer,
            i,
            i1)
        .check();
  }

  static final _id_onSurfaceTextureAvailable = _class.instanceMethodId(
    r'onSurfaceTextureAvailable',
    r'(Landroid/graphics/SurfaceTexture;II)V',
  );

  static final _onSurfaceTextureAvailable = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: `public void onSurfaceTextureAvailable(android.graphics.SurfaceTexture surfaceTexture, int i, int i1)`
  void onSurfaceTextureAvailable(
    jni.JObject surfaceTexture,
    int i,
    int i1,
  ) {
    _onSurfaceTextureAvailable(
            reference.pointer,
            _id_onSurfaceTextureAvailable as jni.JMethodIDPtr,
            surfaceTexture.reference.pointer,
            i,
            i1)
        .check();
  }
}

final class $GLTextureViewRenderThreadType
    extends jni.JObjType<GLTextureViewRenderThread> {
  const $GLTextureViewRenderThreadType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/maps/renderer/textureview/GLTextureViewRenderThread;';

  @override
  GLTextureViewRenderThread fromReference(jni.JReference reference) =>
      GLTextureViewRenderThread.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($GLTextureViewRenderThreadType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GLTextureViewRenderThreadType) &&
        other is $GLTextureViewRenderThreadType;
  }
}
