// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../MapRenderer.dart' as maprenderer_;

import 'SurfaceViewMapRenderer.dart' as surfaceviewmaprenderer_;

/// from: `org.maplibre.android.maps.renderer.surfaceview.MapLibreSurfaceView$OnSurfaceViewDetachedListener`
class MapLibreSurfaceView_OnSurfaceViewDetachedListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapLibreSurfaceView_OnSurfaceViewDetachedListener> $type;

  @_$jni.internal
  MapLibreSurfaceView_OnSurfaceViewDetachedListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/renderer/surfaceview/MapLibreSurfaceView$OnSurfaceViewDetachedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapLibreSurfaceView_OnSurfaceViewDetachedListener$Type();
  static final _id_onSurfaceViewDetached = _class.instanceMethodId(
    r'onSurfaceViewDetached',
    r'()V',
  );

  static final _onSurfaceViewDetached = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onSurfaceViewDetached()`
  void onSurfaceViewDetached() {
    _onSurfaceViewDetached(
            reference.pointer, _id_onSurfaceViewDetached as _$jni.JMethodIDPtr)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core
      .Map<int, $MapLibreSurfaceView_OnSurfaceViewDetachedListener>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onSurfaceViewDetached()V') {
        _$impls[$p]!.onSurfaceViewDetached();
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapLibreSurfaceView_OnSurfaceViewDetachedListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.renderer.surfaceview.MapLibreSurfaceView$OnSurfaceViewDetachedListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onSurfaceViewDetached$async) r'onSurfaceViewDetached()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapLibreSurfaceView_OnSurfaceViewDetachedListener.implement(
    $MapLibreSurfaceView_OnSurfaceViewDetachedListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapLibreSurfaceView_OnSurfaceViewDetachedListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract mixin class $MapLibreSurfaceView_OnSurfaceViewDetachedListener {
  factory $MapLibreSurfaceView_OnSurfaceViewDetachedListener({
    required void Function() onSurfaceViewDetached,
    bool onSurfaceViewDetached$async,
  }) = _$MapLibreSurfaceView_OnSurfaceViewDetachedListener;

  void onSurfaceViewDetached();
  bool get onSurfaceViewDetached$async => false;
}

class _$MapLibreSurfaceView_OnSurfaceViewDetachedListener
    implements $MapLibreSurfaceView_OnSurfaceViewDetachedListener {
  _$MapLibreSurfaceView_OnSurfaceViewDetachedListener({
    required void Function() onSurfaceViewDetached,
    this.onSurfaceViewDetached$async = false,
  }) : _onSurfaceViewDetached = onSurfaceViewDetached;

  final void Function() _onSurfaceViewDetached;
  final bool onSurfaceViewDetached$async;

  void onSurfaceViewDetached() {
    return _onSurfaceViewDetached();
  }
}

final class $MapLibreSurfaceView_OnSurfaceViewDetachedListener$Type
    extends _$jni.JObjType<MapLibreSurfaceView_OnSurfaceViewDetachedListener> {
  @_$jni.internal
  const $MapLibreSurfaceView_OnSurfaceViewDetachedListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/renderer/surfaceview/MapLibreSurfaceView$OnSurfaceViewDetachedListener;';

  @_$jni.internal
  @_$core.override
  MapLibreSurfaceView_OnSurfaceViewDetachedListener fromReference(
          _$jni.JReference reference) =>
      MapLibreSurfaceView_OnSurfaceViewDetachedListener.fromReference(
          reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($MapLibreSurfaceView_OnSurfaceViewDetachedListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MapLibreSurfaceView_OnSurfaceViewDetachedListener$Type) &&
        other is $MapLibreSurfaceView_OnSurfaceViewDetachedListener$Type;
  }
}

/// from: `org.maplibre.android.maps.renderer.surfaceview.MapLibreSurfaceView`
class MapLibreSurfaceView extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapLibreSurfaceView> $type;

  @_$jni.internal
  MapLibreSurfaceView.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/renderer/surfaceview/MapLibreSurfaceView');

  /// The type which includes information such as the signature of this class.
  static const type = $MapLibreSurfaceView$Type();
  static final _id_setDetachedListener = _class.instanceMethodId(
    r'setDetachedListener',
    r'(Lorg/maplibre/android/maps/renderer/surfaceview/MapLibreSurfaceView$OnSurfaceViewDetachedListener;)V',
  );

  static final _setDetachedListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setDetachedListener(org.maplibre.android.maps.renderer.surfaceview.MapLibreSurfaceView$OnSurfaceViewDetachedListener onSurfaceViewDetachedListener)`
  void setDetachedListener(
    MapLibreSurfaceView_OnSurfaceViewDetachedListener
        onSurfaceViewDetachedListener,
  ) {
    _setDetachedListener(
            reference.pointer,
            _id_setDetachedListener as _$jni.JMethodIDPtr,
            onSurfaceViewDetachedListener.reference.pointer)
        .check();
  }

  static final _id_setRenderer = _class.instanceMethodId(
    r'setRenderer',
    r'(Lorg/maplibre/android/maps/renderer/surfaceview/SurfaceViewMapRenderer;)V',
  );

  static final _setRenderer = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setRenderer(org.maplibre.android.maps.renderer.surfaceview.SurfaceViewMapRenderer surfaceViewMapRenderer)`
  void setRenderer(
    surfaceviewmaprenderer_.SurfaceViewMapRenderer surfaceViewMapRenderer,
  ) {
    _setRenderer(reference.pointer, _id_setRenderer as _$jni.JMethodIDPtr,
            surfaceViewMapRenderer.reference.pointer)
        .check();
  }

  static final _id_setRenderingRefreshMode = _class.instanceMethodId(
    r'setRenderingRefreshMode',
    r'(Lorg/maplibre/android/maps/renderer/MapRenderer$RenderingRefreshMode;)V',
  );

  static final _setRenderingRefreshMode = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setRenderingRefreshMode(org.maplibre.android.maps.renderer.MapRenderer$RenderingRefreshMode renderingRefreshMode)`
  void setRenderingRefreshMode(
    maprenderer_.MapRenderer_RenderingRefreshMode renderingRefreshMode,
  ) {
    _setRenderingRefreshMode(
            reference.pointer,
            _id_setRenderingRefreshMode as _$jni.JMethodIDPtr,
            renderingRefreshMode.reference.pointer)
        .check();
  }

  static final _id_getRenderingRefreshMode = _class.instanceMethodId(
    r'getRenderingRefreshMode',
    r'()Lorg/maplibre/android/maps/renderer/MapRenderer$RenderingRefreshMode;',
  );

  static final _getRenderingRefreshMode = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.maps.renderer.MapRenderer$RenderingRefreshMode getRenderingRefreshMode()`
  /// The returned object must be released after use, by calling the [release] method.
  maprenderer_.MapRenderer_RenderingRefreshMode getRenderingRefreshMode() {
    return _getRenderingRefreshMode(reference.pointer,
            _id_getRenderingRefreshMode as _$jni.JMethodIDPtr)
        .object(const maprenderer_.$MapRenderer_RenderingRefreshMode$Type());
  }

  static final _id_requestRender = _class.instanceMethodId(
    r'requestRender',
    r'()V',
  );

  static final _requestRender = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void requestRender()`
  void requestRender() {
    _requestRender(reference.pointer, _id_requestRender as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_surfaceCreated = _class.instanceMethodId(
    r'surfaceCreated',
    r'(Landroid/view/SurfaceHolder;)V',
  );

  static final _surfaceCreated = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void surfaceCreated(android.view.SurfaceHolder surfaceHolder)`
  void surfaceCreated(
    _$jni.JObject surfaceHolder,
  ) {
    _surfaceCreated(reference.pointer, _id_surfaceCreated as _$jni.JMethodIDPtr,
            surfaceHolder.reference.pointer)
        .check();
  }

  static final _id_surfaceDestroyed = _class.instanceMethodId(
    r'surfaceDestroyed',
    r'(Landroid/view/SurfaceHolder;)V',
  );

  static final _surfaceDestroyed = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void surfaceDestroyed(android.view.SurfaceHolder surfaceHolder)`
  void surfaceDestroyed(
    _$jni.JObject surfaceHolder,
  ) {
    _surfaceDestroyed(
            reference.pointer,
            _id_surfaceDestroyed as _$jni.JMethodIDPtr,
            surfaceHolder.reference.pointer)
        .check();
  }

  static final _id_surfaceChanged = _class.instanceMethodId(
    r'surfaceChanged',
    r'(Landroid/view/SurfaceHolder;III)V',
  );

  static final _surfaceChanged = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int, int, int)>();

  /// from: `public void surfaceChanged(android.view.SurfaceHolder surfaceHolder, int i, int i1, int i2)`
  void surfaceChanged(
    _$jni.JObject surfaceHolder,
    int i,
    int i1,
    int i2,
  ) {
    _surfaceChanged(reference.pointer, _id_surfaceChanged as _$jni.JMethodIDPtr,
            surfaceHolder.reference.pointer, i, i1, i2)
        .check();
  }

  static final _id_surfaceRedrawNeededAsync = _class.instanceMethodId(
    r'surfaceRedrawNeededAsync',
    r'(Landroid/view/SurfaceHolder;Ljava/lang/Runnable;)V',
  );

  static final _surfaceRedrawNeededAsync = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void surfaceRedrawNeededAsync(android.view.SurfaceHolder surfaceHolder, java.lang.Runnable runnable)`
  void surfaceRedrawNeededAsync(
    _$jni.JObject surfaceHolder,
    _$jni.JObject runnable,
  ) {
    _surfaceRedrawNeededAsync(
            reference.pointer,
            _id_surfaceRedrawNeededAsync as _$jni.JMethodIDPtr,
            surfaceHolder.reference.pointer,
            runnable.reference.pointer)
        .check();
  }

  static final _id_surfaceRedrawNeeded = _class.instanceMethodId(
    r'surfaceRedrawNeeded',
    r'(Landroid/view/SurfaceHolder;)V',
  );

  static final _surfaceRedrawNeeded = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void surfaceRedrawNeeded(android.view.SurfaceHolder surfaceHolder)`
  void surfaceRedrawNeeded(
    _$jni.JObject surfaceHolder,
  ) {
    _surfaceRedrawNeeded(
            reference.pointer,
            _id_surfaceRedrawNeeded as _$jni.JMethodIDPtr,
            surfaceHolder.reference.pointer)
        .check();
  }

  static final _id_onPause = _class.instanceMethodId(
    r'onPause',
    r'()V',
  );

  static final _onPause = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onPause()`
  void onPause() {
    _onPause(reference.pointer, _id_onPause as _$jni.JMethodIDPtr).check();
  }

  static final _id_onResume = _class.instanceMethodId(
    r'onResume',
    r'()V',
  );

  static final _onResume = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onResume()`
  void onResume() {
    _onResume(reference.pointer, _id_onResume as _$jni.JMethodIDPtr).check();
  }

  static final _id_queueEvent = _class.instanceMethodId(
    r'queueEvent',
    r'(Ljava/lang/Runnable;)V',
  );

  static final _queueEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void queueEvent(java.lang.Runnable runnable)`
  void queueEvent(
    _$jni.JObject runnable,
  ) {
    _queueEvent(reference.pointer, _id_queueEvent as _$jni.JMethodIDPtr,
            runnable.reference.pointer)
        .check();
  }

  static final _id_waitForEmpty = _class.instanceMethodId(
    r'waitForEmpty',
    r'()V',
  );

  static final _waitForEmpty = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void waitForEmpty()`
  void waitForEmpty() {
    _waitForEmpty(reference.pointer, _id_waitForEmpty as _$jni.JMethodIDPtr)
        .check();
  }
}

final class $MapLibreSurfaceView$Type
    extends _$jni.JObjType<MapLibreSurfaceView> {
  @_$jni.internal
  const $MapLibreSurfaceView$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/renderer/surfaceview/MapLibreSurfaceView;';

  @_$jni.internal
  @_$core.override
  MapLibreSurfaceView fromReference(_$jni.JReference reference) =>
      MapLibreSurfaceView.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapLibreSurfaceView$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapLibreSurfaceView$Type) &&
        other is $MapLibreSurfaceView$Type;
  }
}
