// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../../../../android/graphics/PointF.dart' as pointf_;

import '../geometry/LatLng.dart' as latlng_;

import '../geometry/ProjectedMeters.dart' as projectedmeters_;

import '../geometry/VisibleRegion.dart' as visibleregion_;

/// from: `org.maplibre.android.maps.Projection`
class Projection extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Projection> $type;

  @_$jni.internal
  Projection.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/maps/Projection');

  /// The type which includes information such as the signature of this class.
  static const type = $Projection$Type();
  static final _id_invalidateContentPadding = _class.instanceMethodId(
    r'invalidateContentPadding',
    r'()V',
  );

  static final _invalidateContentPadding = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void invalidateContentPadding()`
  void invalidateContentPadding() {
    _invalidateContentPadding(reference.pointer,
            _id_invalidateContentPadding as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_getProjectedMetersForLatLng = _class.instanceMethodId(
    r'getProjectedMetersForLatLng',
    r'(Lorg/maplibre/android/geometry/LatLng;)Lorg/maplibre/android/geometry/ProjectedMeters;',
  );

  static final _getProjectedMetersForLatLng =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.geometry.ProjectedMeters getProjectedMetersForLatLng(org.maplibre.android.geometry.LatLng latLng)`
  /// The returned object must be released after use, by calling the [release] method.
  projectedmeters_.ProjectedMeters getProjectedMetersForLatLng(
    latlng_.LatLng latLng,
  ) {
    return _getProjectedMetersForLatLng(
            reference.pointer,
            _id_getProjectedMetersForLatLng as _$jni.JMethodIDPtr,
            latLng.reference.pointer)
        .object(const projectedmeters_.$ProjectedMeters$Type());
  }

  static final _id_getLatLngForProjectedMeters = _class.instanceMethodId(
    r'getLatLngForProjectedMeters',
    r'(Lorg/maplibre/android/geometry/ProjectedMeters;)Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _getLatLngForProjectedMeters =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.geometry.LatLng getLatLngForProjectedMeters(org.maplibre.android.geometry.ProjectedMeters projectedMeters)`
  /// The returned object must be released after use, by calling the [release] method.
  latlng_.LatLng getLatLngForProjectedMeters(
    projectedmeters_.ProjectedMeters projectedMeters,
  ) {
    return _getLatLngForProjectedMeters(
            reference.pointer,
            _id_getLatLngForProjectedMeters as _$jni.JMethodIDPtr,
            projectedMeters.reference.pointer)
        .object(const latlng_.$LatLng$Type());
  }

  static final _id_getMetersPerPixelAtLatitude = _class.instanceMethodId(
    r'getMetersPerPixelAtLatitude',
    r'(D)D',
  );

  static final _getMetersPerPixelAtLatitude =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Double,)>)>>(
              'globalEnv_CallDoubleMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();

  /// from: `public double getMetersPerPixelAtLatitude(double d)`
  double getMetersPerPixelAtLatitude(
    double d,
  ) {
    return _getMetersPerPixelAtLatitude(reference.pointer,
            _id_getMetersPerPixelAtLatitude as _$jni.JMethodIDPtr, d)
        .doubleFloat;
  }

  static final _id_fromScreenLocation = _class.instanceMethodId(
    r'fromScreenLocation',
    r'(Landroid/graphics/PointF;)Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _fromScreenLocation = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.geometry.LatLng fromScreenLocation(android.graphics.PointF pointF)`
  /// The returned object must be released after use, by calling the [release] method.
  latlng_.LatLng fromScreenLocation(
    pointf_.PointF pointF,
  ) {
    return _fromScreenLocation(
            reference.pointer,
            _id_fromScreenLocation as _$jni.JMethodIDPtr,
            pointF.reference.pointer)
        .object(const latlng_.$LatLng$Type());
  }

  static final _id_fromScreenLocations = _class.instanceMethodId(
    r'fromScreenLocations',
    r'([D[D)V',
  );

  static final _fromScreenLocations = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void fromScreenLocations(double[] ds, double[] ds1)`
  void fromScreenLocations(
    _$jni.JArray<_$jni.jdouble> ds,
    _$jni.JArray<_$jni.jdouble> ds1,
  ) {
    _fromScreenLocations(
            reference.pointer,
            _id_fromScreenLocations as _$jni.JMethodIDPtr,
            ds.reference.pointer,
            ds1.reference.pointer)
        .check();
  }

  static final _id_getVisibleRegion = _class.instanceMethodId(
    r'getVisibleRegion',
    r'()Lorg/maplibre/android/geometry/VisibleRegion;',
  );

  static final _getVisibleRegion = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.geometry.VisibleRegion getVisibleRegion()`
  /// The returned object must be released after use, by calling the [release] method.
  visibleregion_.VisibleRegion getVisibleRegion() {
    return _getVisibleRegion(
            reference.pointer, _id_getVisibleRegion as _$jni.JMethodIDPtr)
        .object(const visibleregion_.$VisibleRegion$Type());
  }

  static final _id_getVisibleRegion$1 = _class.instanceMethodId(
    r'getVisibleRegion',
    r'(Z)Lorg/maplibre/android/geometry/VisibleRegion;',
  );

  static final _getVisibleRegion$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.geometry.VisibleRegion getVisibleRegion(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  visibleregion_.VisibleRegion getVisibleRegion$1(
    bool z,
  ) {
    return _getVisibleRegion$1(reference.pointer,
            _id_getVisibleRegion$1 as _$jni.JMethodIDPtr, z ? 1 : 0)
        .object(const visibleregion_.$VisibleRegion$Type());
  }

  static final _id_getVisibleCoordinateBounds = _class.instanceMethodId(
    r'getVisibleCoordinateBounds',
    r'([D)V',
  );

  static final _getVisibleCoordinateBounds =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void getVisibleCoordinateBounds(double[] ds)`
  void getVisibleCoordinateBounds(
    _$jni.JArray<_$jni.jdouble> ds,
  ) {
    _getVisibleCoordinateBounds(
            reference.pointer,
            _id_getVisibleCoordinateBounds as _$jni.JMethodIDPtr,
            ds.reference.pointer)
        .check();
  }

  static final _id_toScreenLocation = _class.instanceMethodId(
    r'toScreenLocation',
    r'(Lorg/maplibre/android/geometry/LatLng;)Landroid/graphics/PointF;',
  );

  static final _toScreenLocation = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.graphics.PointF toScreenLocation(org.maplibre.android.geometry.LatLng latLng)`
  /// The returned object must be released after use, by calling the [release] method.
  pointf_.PointF toScreenLocation(
    latlng_.LatLng latLng,
  ) {
    return _toScreenLocation(
            reference.pointer,
            _id_toScreenLocation as _$jni.JMethodIDPtr,
            latLng.reference.pointer)
        .object(const pointf_.$PointF$Type());
  }

  static final _id_toScreenLocations = _class.instanceMethodId(
    r'toScreenLocations',
    r'([D[D)V',
  );

  static final _toScreenLocations = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void toScreenLocations(double[] ds, double[] ds1)`
  void toScreenLocations(
    _$jni.JArray<_$jni.jdouble> ds,
    _$jni.JArray<_$jni.jdouble> ds1,
  ) {
    _toScreenLocations(
            reference.pointer,
            _id_toScreenLocations as _$jni.JMethodIDPtr,
            ds.reference.pointer,
            ds1.reference.pointer)
        .check();
  }

  static final _id_calculateZoom = _class.instanceMethodId(
    r'calculateZoom',
    r'(F)D',
  );

  static final _calculateZoom = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Double,)>)>>('globalEnv_CallDoubleMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();

  /// from: `public double calculateZoom(float f)`
  double calculateZoom(
    double f,
  ) {
    return _calculateZoom(
            reference.pointer, _id_calculateZoom as _$jni.JMethodIDPtr, f)
        .doubleFloat;
  }
}

final class $Projection$Type extends _$jni.JObjType<Projection> {
  @_$jni.internal
  const $Projection$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/maps/Projection;';

  @_$jni.internal
  @_$core.override
  Projection fromReference(_$jni.JReference reference) =>
      Projection.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($Projection$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Projection$Type) && other is $Projection$Type;
  }
}
