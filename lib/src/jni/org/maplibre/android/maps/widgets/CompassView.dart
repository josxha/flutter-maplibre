// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../MapLibreMap.dart' as maplibremap_;

/// from: `org.maplibre.android.maps.widgets.CompassView`
class CompassView extends jni.JObject {
  @override
  late final jni.JObjType<CompassView> $type = type;

  CompassView.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/maps/widgets/CompassView');

  /// The type which includes information such as the signature of this class.
  static const type = $CompassViewType();

  /// from: `static public final long TIME_WAIT_IDLE`
  static const TIME_WAIT_IDLE = 500;

  /// from: `static public final long TIME_MAP_NORTH_ANIMATION`
  static const TIME_MAP_NORTH_ANIMATION = 150;
  static final _id_new0 = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CompassView(
    jni.JObject context,
  ) {
    return CompassView.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, context.reference.pointer)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CompassView.new1(
    jni.JObject context,
    jni.JObject attributeSet,
  ) {
    return CompassView.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer)
        .reference);
  }

  static final _id_new2 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;I)V',
  );

  static final _new2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CompassView.new2(
    jni.JObject context,
    jni.JObject attributeSet,
    int i,
  ) {
    return CompassView.fromReference(_new2(
            _class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer,
            i)
        .reference);
  }

  static final _id_injectCompassAnimationListener = _class.instanceMethodId(
    r'injectCompassAnimationListener',
    r'(Lorg/maplibre/android/maps/MapLibreMap$OnCompassAnimationListener;)V',
  );

  static final _injectCompassAnimationListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void injectCompassAnimationListener(org.maplibre.android.maps.MapLibreMap$OnCompassAnimationListener onCompassAnimationListener)`
  void injectCompassAnimationListener(
    maplibremap_.MapLibreMap_OnCompassAnimationListener
        onCompassAnimationListener,
  ) {
    _injectCompassAnimationListener(
            reference.pointer,
            _id_injectCompassAnimationListener as jni.JMethodIDPtr,
            onCompassAnimationListener.reference.pointer)
        .check();
  }

  static final _id_isAnimating = _class.instanceMethodId(
    r'isAnimating',
    r'(Z)V',
  );

  static final _isAnimating = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void isAnimating(boolean z)`
  void isAnimating(
    bool z,
  ) {
    _isAnimating(
            reference.pointer, _id_isAnimating as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_resetAnimation = _class.instanceMethodId(
    r'resetAnimation',
    r'()V',
  );

  static final _resetAnimation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void resetAnimation()`
  void resetAnimation() {
    _resetAnimation(reference.pointer, _id_resetAnimation as jni.JMethodIDPtr)
        .check();
  }

  static final _id_isHidden = _class.instanceMethodId(
    r'isHidden',
    r'()Z',
  );

  static final _isHidden = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isHidden()`
  bool isHidden() {
    return _isHidden(reference.pointer, _id_isHidden as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isFacingNorth = _class.instanceMethodId(
    r'isFacingNorth',
    r'()Z',
  );

  static final _isFacingNorth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isFacingNorth()`
  bool isFacingNorth() {
    return _isFacingNorth(
            reference.pointer, _id_isFacingNorth as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setEnabled = _class.instanceMethodId(
    r'setEnabled',
    r'(Z)V',
  );

  static final _setEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setEnabled(boolean z)`
  void setEnabled(
    bool z,
  ) {
    _setEnabled(
            reference.pointer, _id_setEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_update = _class.instanceMethodId(
    r'update',
    r'(D)V',
  );

  static final _update = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public void update(double d)`
  void update(
    double d,
  ) {
    _update(reference.pointer, _id_update as jni.JMethodIDPtr, d).check();
  }

  static final _id_fadeCompassViewFacingNorth = _class.instanceMethodId(
    r'fadeCompassViewFacingNorth',
    r'(Z)V',
  );

  static final _fadeCompassViewFacingNorth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void fadeCompassViewFacingNorth(boolean z)`
  void fadeCompassViewFacingNorth(
    bool z,
  ) {
    _fadeCompassViewFacingNorth(reference.pointer,
            _id_fadeCompassViewFacingNorth as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isFadeCompassViewFacingNorth = _class.instanceMethodId(
    r'isFadeCompassViewFacingNorth',
    r'()Z',
  );

  static final _isFadeCompassViewFacingNorth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isFadeCompassViewFacingNorth()`
  bool isFadeCompassViewFacingNorth() {
    return _isFadeCompassViewFacingNorth(reference.pointer,
            _id_isFadeCompassViewFacingNorth as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setCompassImage = _class.instanceMethodId(
    r'setCompassImage',
    r'(Landroid/graphics/drawable/Drawable;)V',
  );

  static final _setCompassImage = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setCompassImage(android.graphics.drawable.Drawable drawable)`
  void setCompassImage(
    jni.JObject drawable,
  ) {
    _setCompassImage(reference.pointer, _id_setCompassImage as jni.JMethodIDPtr,
            drawable.reference.pointer)
        .check();
  }

  static final _id_getCompassImage = _class.instanceMethodId(
    r'getCompassImage',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _getCompassImage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.drawable.Drawable getCompassImage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCompassImage() {
    return _getCompassImage(
            reference.pointer, _id_getCompassImage as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_run = _class.instanceMethodId(
    r'run',
    r'()V',
  );

  static final _run = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void run()`
  void run() {
    _run(reference.pointer, _id_run as jni.JMethodIDPtr).check();
  }
}

final class $CompassViewType extends jni.JObjType<CompassView> {
  const $CompassViewType();

  @override
  String get signature => r'Lorg/maplibre/android/maps/widgets/CompassView;';

  @override
  CompassView fromReference(jni.JReference reference) =>
      CompassView.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CompassViewType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CompassViewType) && other is $CompassViewType;
  }
}
