// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../MapLibreMap.dart' as maplibremap_;

/// from: `org.maplibre.android.maps.widgets.CompassView`
class CompassView extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CompassView> $type;

  @_$jni.internal
  CompassView.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/maps/widgets/CompassView');

  /// The type which includes information such as the signature of this class.
  static const type = $CompassView$Type();

  /// from: `static public final long TIME_WAIT_IDLE`
  static const TIME_WAIT_IDLE = 500;

  /// from: `static public final long TIME_MAP_NORTH_ANIMATION`
  static const TIME_MAP_NORTH_ANIMATION = 150;
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CompassView(
    _$jni.JObject context,
  ) {
    return CompassView.fromReference(_new$(_class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr, context.reference.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CompassView.new$1(
    _$jni.JObject context,
    _$jni.JObject attributeSet,
  ) {
    return CompassView.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer)
        .reference);
  }

  static final _id_new$2 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;I)V',
  );

  static final _new$2 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CompassView.new$2(
    _$jni.JObject context,
    _$jni.JObject attributeSet,
    int i,
  ) {
    return CompassView.fromReference(_new$2(
            _class.reference.pointer,
            _id_new$2 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer,
            i)
        .reference);
  }

  static final _id_injectCompassAnimationListener = _class.instanceMethodId(
    r'injectCompassAnimationListener',
    r'(Lorg/maplibre/android/maps/MapLibreMap$OnCompassAnimationListener;)V',
  );

  static final _injectCompassAnimationListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void injectCompassAnimationListener(org.maplibre.android.maps.MapLibreMap$OnCompassAnimationListener onCompassAnimationListener)`
  void injectCompassAnimationListener(
    maplibremap_.MapLibreMap_OnCompassAnimationListener
        onCompassAnimationListener,
  ) {
    _injectCompassAnimationListener(
            reference.pointer,
            _id_injectCompassAnimationListener as _$jni.JMethodIDPtr,
            onCompassAnimationListener.reference.pointer)
        .check();
  }

  static final _id_isAnimating = _class.instanceMethodId(
    r'isAnimating',
    r'(Z)V',
  );

  static final _isAnimating = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void isAnimating(boolean z)`
  void isAnimating(
    bool z,
  ) {
    _isAnimating(
            reference.pointer, _id_isAnimating as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_resetAnimation = _class.instanceMethodId(
    r'resetAnimation',
    r'()V',
  );

  static final _resetAnimation = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void resetAnimation()`
  void resetAnimation() {
    _resetAnimation(reference.pointer, _id_resetAnimation as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_isHidden = _class.instanceMethodId(
    r'isHidden',
    r'()Z',
  );

  static final _isHidden = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isHidden()`
  bool isHidden() {
    return _isHidden(reference.pointer, _id_isHidden as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isFacingNorth = _class.instanceMethodId(
    r'isFacingNorth',
    r'()Z',
  );

  static final _isFacingNorth = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isFacingNorth()`
  bool isFacingNorth() {
    return _isFacingNorth(
            reference.pointer, _id_isFacingNorth as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setEnabled = _class.instanceMethodId(
    r'setEnabled',
    r'(Z)V',
  );

  static final _setEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setEnabled(boolean z)`
  void setEnabled(
    bool z,
  ) {
    _setEnabled(
            reference.pointer, _id_setEnabled as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_update = _class.instanceMethodId(
    r'update',
    r'(D)V',
  );

  static final _update = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Double,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();

  /// from: `public void update(double d)`
  void update(
    double d,
  ) {
    _update(reference.pointer, _id_update as _$jni.JMethodIDPtr, d).check();
  }

  static final _id_fadeCompassViewFacingNorth = _class.instanceMethodId(
    r'fadeCompassViewFacingNorth',
    r'(Z)V',
  );

  static final _fadeCompassViewFacingNorth =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void fadeCompassViewFacingNorth(boolean z)`
  void fadeCompassViewFacingNorth(
    bool z,
  ) {
    _fadeCompassViewFacingNorth(reference.pointer,
            _id_fadeCompassViewFacingNorth as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isFadeCompassViewFacingNorth = _class.instanceMethodId(
    r'isFadeCompassViewFacingNorth',
    r'()Z',
  );

  static final _isFadeCompassViewFacingNorth =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isFadeCompassViewFacingNorth()`
  bool isFadeCompassViewFacingNorth() {
    return _isFadeCompassViewFacingNorth(reference.pointer,
            _id_isFadeCompassViewFacingNorth as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setCompassImage = _class.instanceMethodId(
    r'setCompassImage',
    r'(Landroid/graphics/drawable/Drawable;)V',
  );

  static final _setCompassImage = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setCompassImage(android.graphics.drawable.Drawable drawable)`
  void setCompassImage(
    _$jni.JObject drawable,
  ) {
    _setCompassImage(
            reference.pointer,
            _id_setCompassImage as _$jni.JMethodIDPtr,
            drawable.reference.pointer)
        .check();
  }

  static final _id_getCompassImage = _class.instanceMethodId(
    r'getCompassImage',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _getCompassImage = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.drawable.Drawable getCompassImage()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getCompassImage() {
    return _getCompassImage(
            reference.pointer, _id_getCompassImage as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_run = _class.instanceMethodId(
    r'run',
    r'()V',
  );

  static final _run = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void run()`
  void run() {
    _run(reference.pointer, _id_run as _$jni.JMethodIDPtr).check();
  }
}

final class $CompassView$Type extends _$jni.JObjType<CompassView> {
  @_$jni.internal
  const $CompassView$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/maps/widgets/CompassView;';

  @_$jni.internal
  @_$core.override
  CompassView fromReference(_$jni.JReference reference) =>
      CompassView.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CompassView$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CompassView$Type) &&
        other is $CompassView$Type;
  }
}
