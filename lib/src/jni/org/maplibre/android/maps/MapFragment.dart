// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import 'MapLibreMap.dart' as maplibremap_;

import 'MapLibreMapOptions.dart' as maplibremapoptions_;

import 'MapView.dart' as mapview_;

import 'OnMapReadyCallback.dart' as onmapreadycallback_;

/// from: `org.maplibre.android.maps.MapFragment$OnMapViewReadyCallback`
class MapFragment_OnMapViewReadyCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapFragment_OnMapViewReadyCallback> $type;

  @_$jni.internal
  MapFragment_OnMapViewReadyCallback.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapFragment$OnMapViewReadyCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $MapFragment_OnMapViewReadyCallback$Type();
  static final _id_onMapViewReady = _class.instanceMethodId(
    r'onMapViewReady',
    r'(Lorg/maplibre/android/maps/MapView;)V',
  );

  static final _onMapViewReady = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onMapViewReady(org.maplibre.android.maps.MapView mapView)`
  void onMapViewReady(
    mapview_.MapView mapView,
  ) {
    _onMapViewReady(reference.pointer, _id_onMapViewReady as _$jni.JMethodIDPtr,
            mapView.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapFragment_OnMapViewReadyCallback> _$impls =
      {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onMapViewReady(Lorg/maplibre/android/maps/MapView;)V') {
        _$impls[$p]!.onMapViewReady(
          $a[0].as(const mapview_.$MapView$Type(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapFragment_OnMapViewReadyCallback $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapFragment$OnMapViewReadyCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onMapViewReady$async)
          r'onMapViewReady(Lorg/maplibre/android/maps/MapView;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapFragment_OnMapViewReadyCallback.implement(
    $MapFragment_OnMapViewReadyCallback $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapFragment_OnMapViewReadyCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract mixin class $MapFragment_OnMapViewReadyCallback {
  factory $MapFragment_OnMapViewReadyCallback({
    required void Function(mapview_.MapView mapView) onMapViewReady,
    bool onMapViewReady$async,
  }) = _$MapFragment_OnMapViewReadyCallback;

  void onMapViewReady(mapview_.MapView mapView);
  bool get onMapViewReady$async => false;
}

class _$MapFragment_OnMapViewReadyCallback
    implements $MapFragment_OnMapViewReadyCallback {
  _$MapFragment_OnMapViewReadyCallback({
    required void Function(mapview_.MapView mapView) onMapViewReady,
    this.onMapViewReady$async = false,
  }) : _onMapViewReady = onMapViewReady;

  final void Function(mapview_.MapView mapView) _onMapViewReady;
  final bool onMapViewReady$async;

  void onMapViewReady(mapview_.MapView mapView) {
    return _onMapViewReady(mapView);
  }
}

final class $MapFragment_OnMapViewReadyCallback$Type
    extends _$jni.JObjType<MapFragment_OnMapViewReadyCallback> {
  @_$jni.internal
  const $MapFragment_OnMapViewReadyCallback$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapFragment$OnMapViewReadyCallback;';

  @_$jni.internal
  @_$core.override
  MapFragment_OnMapViewReadyCallback fromReference(
          _$jni.JReference reference) =>
      MapFragment_OnMapViewReadyCallback.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapFragment_OnMapViewReadyCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapFragment_OnMapViewReadyCallback$Type) &&
        other is $MapFragment_OnMapViewReadyCallback$Type;
  }
}

/// from: `org.maplibre.android.maps.MapFragment`
class MapFragment extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapFragment> $type;

  @_$jni.internal
  MapFragment.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/maps/MapFragment');

  /// The type which includes information such as the signature of this class.
  static const type = $MapFragment$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapFragment() {
    return MapFragment.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_newInstance = _class.staticMethodId(
    r'newInstance',
    r'()Lorg/maplibre/android/maps/MapFragment;',
  );

  static final _newInstance = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.maps.MapFragment newInstance()`
  /// The returned object must be released after use, by calling the [release] method.
  static MapFragment newInstance() {
    return _newInstance(
            _class.reference.pointer, _id_newInstance as _$jni.JMethodIDPtr)
        .object(const $MapFragment$Type());
  }

  static final _id_newInstance$1 = _class.staticMethodId(
    r'newInstance',
    r'(Lorg/maplibre/android/maps/MapLibreMapOptions;)Lorg/maplibre/android/maps/MapFragment;',
  );

  static final _newInstance$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.maps.MapFragment newInstance(org.maplibre.android.maps.MapLibreMapOptions mapLibreMapOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  static MapFragment newInstance$1(
    maplibremapoptions_.MapLibreMapOptions mapLibreMapOptions,
  ) {
    return _newInstance$1(
            _class.reference.pointer,
            _id_newInstance$1 as _$jni.JMethodIDPtr,
            mapLibreMapOptions.reference.pointer)
        .object(const $MapFragment$Type());
  }

  static final _id_onInflate = _class.instanceMethodId(
    r'onInflate',
    r'(Landroid/content/Context;Landroid/util/AttributeSet;Landroid/os/Bundle;)V',
  );

  static final _onInflate = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onInflate(android.content.Context context, android.util.AttributeSet attributeSet, android.os.Bundle bundle)`
  void onInflate(
    _$jni.JObject context,
    _$jni.JObject attributeSet,
    _$jni.JObject bundle,
  ) {
    _onInflate(
            reference.pointer,
            _id_onInflate as _$jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onAttach = _class.instanceMethodId(
    r'onAttach',
    r'(Landroid/content/Context;)V',
  );

  static final _onAttach = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onAttach(android.content.Context context)`
  void onAttach(
    _$jni.JObject context,
  ) {
    _onAttach(reference.pointer, _id_onAttach as _$jni.JMethodIDPtr,
            context.reference.pointer)
        .check();
  }

  static final _id_onCreateView = _class.instanceMethodId(
    r'onCreateView',
    r'(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;',
  );

  static final _onCreateView = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.view.View onCreateView(android.view.LayoutInflater layoutInflater, android.view.ViewGroup viewGroup, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject onCreateView(
    _$jni.JObject layoutInflater,
    _$jni.JObject viewGroup,
    _$jni.JObject bundle,
  ) {
    return _onCreateView(
            reference.pointer,
            _id_onCreateView as _$jni.JMethodIDPtr,
            layoutInflater.reference.pointer,
            viewGroup.reference.pointer,
            bundle.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_onViewCreated = _class.instanceMethodId(
    r'onViewCreated',
    r'(Landroid/view/View;Landroid/os/Bundle;)V',
  );

  static final _onViewCreated = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onViewCreated(android.view.View view, android.os.Bundle bundle)`
  void onViewCreated(
    _$jni.JObject view,
    _$jni.JObject bundle,
  ) {
    _onViewCreated(reference.pointer, _id_onViewCreated as _$jni.JMethodIDPtr,
            view.reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _id_onMapReady = _class.instanceMethodId(
    r'onMapReady',
    r'(Lorg/maplibre/android/maps/MapLibreMap;)V',
  );

  static final _onMapReady = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onMapReady(org.maplibre.android.maps.MapLibreMap mapLibreMap)`
  void onMapReady(
    maplibremap_.MapLibreMap mapLibreMap,
  ) {
    _onMapReady(reference.pointer, _id_onMapReady as _$jni.JMethodIDPtr,
            mapLibreMap.reference.pointer)
        .check();
  }

  static final _id_onStart = _class.instanceMethodId(
    r'onStart',
    r'()V',
  );

  static final _onStart = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onStart()`
  void onStart() {
    _onStart(reference.pointer, _id_onStart as _$jni.JMethodIDPtr).check();
  }

  static final _id_onResume = _class.instanceMethodId(
    r'onResume',
    r'()V',
  );

  static final _onResume = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onResume()`
  void onResume() {
    _onResume(reference.pointer, _id_onResume as _$jni.JMethodIDPtr).check();
  }

  static final _id_onPause = _class.instanceMethodId(
    r'onPause',
    r'()V',
  );

  static final _onPause = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onPause()`
  void onPause() {
    _onPause(reference.pointer, _id_onPause as _$jni.JMethodIDPtr).check();
  }

  static final _id_onSaveInstanceState = _class.instanceMethodId(
    r'onSaveInstanceState',
    r'(Landroid/os/Bundle;)V',
  );

  static final _onSaveInstanceState = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onSaveInstanceState(android.os.Bundle bundle)`
  void onSaveInstanceState(
    _$jni.JObject bundle,
  ) {
    _onSaveInstanceState(
            reference.pointer,
            _id_onSaveInstanceState as _$jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onStop = _class.instanceMethodId(
    r'onStop',
    r'()V',
  );

  static final _onStop = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onStop()`
  void onStop() {
    _onStop(reference.pointer, _id_onStop as _$jni.JMethodIDPtr).check();
  }

  static final _id_onLowMemory = _class.instanceMethodId(
    r'onLowMemory',
    r'()V',
  );

  static final _onLowMemory = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onLowMemory()`
  void onLowMemory() {
    _onLowMemory(reference.pointer, _id_onLowMemory as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_onDestroyView = _class.instanceMethodId(
    r'onDestroyView',
    r'()V',
  );

  static final _onDestroyView = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onDestroyView()`
  void onDestroyView() {
    _onDestroyView(reference.pointer, _id_onDestroyView as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_onDestroy = _class.instanceMethodId(
    r'onDestroy',
    r'()V',
  );

  static final _onDestroy = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onDestroy()`
  void onDestroy() {
    _onDestroy(reference.pointer, _id_onDestroy as _$jni.JMethodIDPtr).check();
  }

  static final _id_getMapAsync = _class.instanceMethodId(
    r'getMapAsync',
    r'(Lorg/maplibre/android/maps/OnMapReadyCallback;)V',
  );

  static final _getMapAsync = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void getMapAsync(org.maplibre.android.maps.OnMapReadyCallback onMapReadyCallback)`
  void getMapAsync(
    onmapreadycallback_.OnMapReadyCallback onMapReadyCallback,
  ) {
    _getMapAsync(reference.pointer, _id_getMapAsync as _$jni.JMethodIDPtr,
            onMapReadyCallback.reference.pointer)
        .check();
  }
}

final class $MapFragment$Type extends _$jni.JObjType<MapFragment> {
  @_$jni.internal
  const $MapFragment$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/maps/MapFragment;';

  @_$jni.internal
  @_$core.override
  MapFragment fromReference(_$jni.JReference reference) =>
      MapFragment.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapFragment$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapFragment$Type) &&
        other is $MapFragment$Type;
  }
}
