// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.offline.OfflineRegionError$Companion`
class OfflineRegionError_Companion extends jni.JObject {
  @override
  late final jni.JObjType<OfflineRegionError_Companion> $type = type;

  OfflineRegionError_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/offline/OfflineRegionError$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineRegionError_CompanionType();
  static final _id_new0 = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory OfflineRegionError_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return OfflineRegionError_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $OfflineRegionError_CompanionType
    extends jni.JObjType<OfflineRegionError_Companion> {
  const $OfflineRegionError_CompanionType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineRegionError$Companion;';

  @override
  OfflineRegionError_Companion fromReference(jni.JReference reference) =>
      OfflineRegionError_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($OfflineRegionError_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineRegionError_CompanionType) &&
        other is $OfflineRegionError_CompanionType;
  }
}

/// from: `org.maplibre.android.offline.OfflineRegionError$ErrorReason`
class OfflineRegionError_ErrorReason extends jni.JObject {
  @override
  late final jni.JObjType<OfflineRegionError_ErrorReason> $type = type;

  OfflineRegionError_ErrorReason.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/offline/OfflineRegionError$ErrorReason');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineRegionError_ErrorReasonType();
}

final class $OfflineRegionError_ErrorReasonType
    extends jni.JObjType<OfflineRegionError_ErrorReason> {
  const $OfflineRegionError_ErrorReasonType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineRegionError$ErrorReason;';

  @override
  OfflineRegionError_ErrorReason fromReference(jni.JReference reference) =>
      OfflineRegionError_ErrorReason.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($OfflineRegionError_ErrorReasonType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineRegionError_ErrorReasonType) &&
        other is $OfflineRegionError_ErrorReasonType;
  }
}

/// from: `org.maplibre.android.offline.OfflineRegionError`
class OfflineRegionError extends jni.JObject {
  @override
  late final jni.JObjType<OfflineRegionError> $type = type;

  OfflineRegionError.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/offline/OfflineRegionError');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineRegionErrorType();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lorg/maplibre/android/offline/OfflineRegionError$Companion;',
  );

  /// from: `static public final org.maplibre.android.offline.OfflineRegionError$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static OfflineRegionError_Companion get Companion =>
      _id_Companion.get(_class, const $OfflineRegionError_CompanionType());

  static final _id_REASON_SUCCESS = _class.staticFieldId(
    r'REASON_SUCCESS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REASON_SUCCESS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get REASON_SUCCESS =>
      _id_REASON_SUCCESS.get(_class, const jni.JStringType());

  static final _id_REASON_NOT_FOUND = _class.staticFieldId(
    r'REASON_NOT_FOUND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REASON_NOT_FOUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get REASON_NOT_FOUND =>
      _id_REASON_NOT_FOUND.get(_class, const jni.JStringType());

  static final _id_REASON_SERVER = _class.staticFieldId(
    r'REASON_SERVER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REASON_SERVER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get REASON_SERVER =>
      _id_REASON_SERVER.get(_class, const jni.JStringType());

  static final _id_REASON_CONNECTION = _class.staticFieldId(
    r'REASON_CONNECTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REASON_CONNECTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get REASON_CONNECTION =>
      _id_REASON_CONNECTION.get(_class, const jni.JStringType());

  static final _id_REASON_OTHER = _class.staticFieldId(
    r'REASON_OTHER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REASON_OTHER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get REASON_OTHER =>
      _id_REASON_OTHER.get(_class, const jni.JStringType());

  static final _id_getReason = _class.instanceMethodId(
    r'getReason',
    r'()Ljava/lang/String;',
  );

  static final _getReason = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getReason()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getReason() {
    return _getReason(reference.pointer, _id_getReason as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getMessage = _class.instanceMethodId(
    r'getMessage',
    r'()Ljava/lang/String;',
  );

  static final _getMessage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getMessage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getMessage() {
    return _getMessage(reference.pointer, _id_getMessage as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $OfflineRegionErrorType extends jni.JObjType<OfflineRegionError> {
  const $OfflineRegionErrorType();

  @override
  String get signature => r'Lorg/maplibre/android/offline/OfflineRegionError;';

  @override
  OfflineRegionError fromReference(jni.JReference reference) =>
      OfflineRegionError.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($OfflineRegionErrorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineRegionErrorType) &&
        other is $OfflineRegionErrorType;
  }
}
