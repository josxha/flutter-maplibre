// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `org.maplibre.android.offline.OfflineRegionError$Companion`
class OfflineRegionError_Companion extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<OfflineRegionError_Companion> $type;

  @_$jni.internal
  OfflineRegionError_Companion.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/offline/OfflineRegionError$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineRegionError_Companion$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory OfflineRegionError_Companion(
    _$jni.JObject defaultConstructorMarker,
  ) {
    return OfflineRegionError_Companion.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $OfflineRegionError_Companion$Type
    extends _$jni.JObjType<OfflineRegionError_Companion> {
  @_$jni.internal
  const $OfflineRegionError_Companion$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineRegionError$Companion;';

  @_$jni.internal
  @_$core.override
  OfflineRegionError_Companion fromReference(_$jni.JReference reference) =>
      OfflineRegionError_Companion.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($OfflineRegionError_Companion$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineRegionError_Companion$Type) &&
        other is $OfflineRegionError_Companion$Type;
  }
}

/// from: `org.maplibre.android.offline.OfflineRegionError$ErrorReason`
class OfflineRegionError_ErrorReason extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<OfflineRegionError_ErrorReason> $type;

  @_$jni.internal
  OfflineRegionError_ErrorReason.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/offline/OfflineRegionError$ErrorReason');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineRegionError_ErrorReason$Type();

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $OfflineRegionError_ErrorReason> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $OfflineRegionError_ErrorReason $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.offline.OfflineRegionError$ErrorReason',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory OfflineRegionError_ErrorReason.implement(
    $OfflineRegionError_ErrorReason $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return OfflineRegionError_ErrorReason.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $OfflineRegionError_ErrorReason {
  factory $OfflineRegionError_ErrorReason() = _$OfflineRegionError_ErrorReason;
}

final class _$OfflineRegionError_ErrorReason
    with $OfflineRegionError_ErrorReason {
  _$OfflineRegionError_ErrorReason();
}

final class $OfflineRegionError_ErrorReason$Type
    extends _$jni.JObjType<OfflineRegionError_ErrorReason> {
  @_$jni.internal
  const $OfflineRegionError_ErrorReason$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineRegionError$ErrorReason;';

  @_$jni.internal
  @_$core.override
  OfflineRegionError_ErrorReason fromReference(_$jni.JReference reference) =>
      OfflineRegionError_ErrorReason.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($OfflineRegionError_ErrorReason$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineRegionError_ErrorReason$Type) &&
        other is $OfflineRegionError_ErrorReason$Type;
  }
}

/// from: `org.maplibre.android.offline.OfflineRegionError`
class OfflineRegionError extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<OfflineRegionError> $type;

  @_$jni.internal
  OfflineRegionError.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/offline/OfflineRegionError');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineRegionError$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lorg/maplibre/android/offline/OfflineRegionError$Companion;',
  );

  /// from: `static public final org.maplibre.android.offline.OfflineRegionError$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static OfflineRegionError_Companion get Companion =>
      _id_Companion.get(_class, const $OfflineRegionError_Companion$Type());

  static final _id_REASON_SUCCESS = _class.staticFieldId(
    r'REASON_SUCCESS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REASON_SUCCESS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get REASON_SUCCESS =>
      _id_REASON_SUCCESS.get(_class, const _$jni.JStringType());

  static final _id_REASON_NOT_FOUND = _class.staticFieldId(
    r'REASON_NOT_FOUND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REASON_NOT_FOUND`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get REASON_NOT_FOUND =>
      _id_REASON_NOT_FOUND.get(_class, const _$jni.JStringType());

  static final _id_REASON_SERVER = _class.staticFieldId(
    r'REASON_SERVER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REASON_SERVER`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get REASON_SERVER =>
      _id_REASON_SERVER.get(_class, const _$jni.JStringType());

  static final _id_REASON_CONNECTION = _class.staticFieldId(
    r'REASON_CONNECTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REASON_CONNECTION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get REASON_CONNECTION =>
      _id_REASON_CONNECTION.get(_class, const _$jni.JStringType());

  static final _id_REASON_OTHER = _class.staticFieldId(
    r'REASON_OTHER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REASON_OTHER`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get REASON_OTHER =>
      _id_REASON_OTHER.get(_class, const _$jni.JStringType());

  static final _id_getReason = _class.instanceMethodId(
    r'getReason',
    r'()Ljava/lang/String;',
  );

  static final _getReason = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getReason()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getReason() {
    return _getReason(reference.pointer, _id_getReason as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getMessage = _class.instanceMethodId(
    r'getMessage',
    r'()Ljava/lang/String;',
  );

  static final _getMessage = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getMessage()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getMessage() {
    return _getMessage(reference.pointer, _id_getMessage as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    _$jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as _$jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }
}

final class $OfflineRegionError$Type
    extends _$jni.JObjType<OfflineRegionError> {
  @_$jni.internal
  const $OfflineRegionError$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/offline/OfflineRegionError;';

  @_$jni.internal
  @_$core.override
  OfflineRegionError fromReference(_$jni.JReference reference) =>
      OfflineRegionError.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($OfflineRegionError$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineRegionError$Type) &&
        other is $OfflineRegionError$Type;
  }
}
