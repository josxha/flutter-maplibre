// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.offline.OfflineRegionStatus`
class OfflineRegionStatus extends jni.JObject {
  @override
  late final jni.JObjType<OfflineRegionStatus> $type = type;

  OfflineRegionStatus.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/offline/OfflineRegionStatus');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineRegionStatusType();
  static final _id_getDownloadState = _class.instanceMethodId(
    r'getDownloadState',
    r'()I',
  );

  static final _getDownloadState = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final int getDownloadState()`
  int getDownloadState() {
    return _getDownloadState(
            reference.pointer, _id_getDownloadState as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getCompletedResourceCount = _class.instanceMethodId(
    r'getCompletedResourceCount',
    r'()J',
  );

  static final _getCompletedResourceCount = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final long getCompletedResourceCount()`
  int getCompletedResourceCount() {
    return _getCompletedResourceCount(reference.pointer,
            _id_getCompletedResourceCount as jni.JMethodIDPtr)
        .long;
  }

  static final _id_getCompletedResourceSize = _class.instanceMethodId(
    r'getCompletedResourceSize',
    r'()J',
  );

  static final _getCompletedResourceSize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final long getCompletedResourceSize()`
  int getCompletedResourceSize() {
    return _getCompletedResourceSize(
            reference.pointer, _id_getCompletedResourceSize as jni.JMethodIDPtr)
        .long;
  }

  static final _id_getCompletedTileCount = _class.instanceMethodId(
    r'getCompletedTileCount',
    r'()J',
  );

  static final _getCompletedTileCount = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final long getCompletedTileCount()`
  int getCompletedTileCount() {
    return _getCompletedTileCount(
            reference.pointer, _id_getCompletedTileCount as jni.JMethodIDPtr)
        .long;
  }

  static final _id_getCompletedTileSize = _class.instanceMethodId(
    r'getCompletedTileSize',
    r'()J',
  );

  static final _getCompletedTileSize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final long getCompletedTileSize()`
  int getCompletedTileSize() {
    return _getCompletedTileSize(
            reference.pointer, _id_getCompletedTileSize as jni.JMethodIDPtr)
        .long;
  }

  static final _id_getRequiredResourceCount = _class.instanceMethodId(
    r'getRequiredResourceCount',
    r'()J',
  );

  static final _getRequiredResourceCount = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final long getRequiredResourceCount()`
  int getRequiredResourceCount() {
    return _getRequiredResourceCount(
            reference.pointer, _id_getRequiredResourceCount as jni.JMethodIDPtr)
        .long;
  }

  static final _id_isRequiredResourceCountPrecise = _class.instanceMethodId(
    r'isRequiredResourceCountPrecise',
    r'()Z',
  );

  static final _isRequiredResourceCountPrecise = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final boolean isRequiredResourceCountPrecise()`
  bool isRequiredResourceCountPrecise() {
    return _isRequiredResourceCountPrecise(reference.pointer,
            _id_isRequiredResourceCountPrecise as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isComplete = _class.instanceMethodId(
    r'isComplete',
    r'()Z',
  );

  static final _isComplete = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final boolean isComplete()`
  bool isComplete() {
    return _isComplete(reference.pointer, _id_isComplete as jni.JMethodIDPtr)
        .boolean;
  }
}

final class $OfflineRegionStatusType extends jni.JObjType<OfflineRegionStatus> {
  const $OfflineRegionStatusType();

  @override
  String get signature => r'Lorg/maplibre/android/offline/OfflineRegionStatus;';

  @override
  OfflineRegionStatus fromReference(jni.JReference reference) =>
      OfflineRegionStatus.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($OfflineRegionStatusType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineRegionStatusType) &&
        other is $OfflineRegionStatusType;
  }
}
