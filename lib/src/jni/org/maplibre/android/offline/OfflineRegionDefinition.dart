// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../geometry/LatLngBounds.dart' as latlngbounds_;

/// from: `org.maplibre.android.offline.OfflineRegionDefinition`
class OfflineRegionDefinition extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<OfflineRegionDefinition> $type;

  @_$jni.internal
  OfflineRegionDefinition.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/offline/OfflineRegionDefinition');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineRegionDefinition$Type();
  static final _id_getBounds = _class.instanceMethodId(
    r'getBounds',
    r'()Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _getBounds = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract org.maplibre.android.geometry.LatLngBounds getBounds()`
  /// The returned object must be released after use, by calling the [release] method.
  latlngbounds_.LatLngBounds getBounds() {
    return _getBounds(reference.pointer, _id_getBounds as _$jni.JMethodIDPtr)
        .object(const latlngbounds_.$LatLngBounds$Type());
  }

  static final _id_getStyleURL = _class.instanceMethodId(
    r'getStyleURL',
    r'()Ljava/lang/String;',
  );

  static final _getStyleURL = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getStyleURL()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getStyleURL() {
    return _getStyleURL(
            reference.pointer, _id_getStyleURL as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getMinZoom = _class.instanceMethodId(
    r'getMinZoom',
    r'()D',
  );

  static final _getMinZoom = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract double getMinZoom()`
  double getMinZoom() {
    return _getMinZoom(reference.pointer, _id_getMinZoom as _$jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getMaxZoom = _class.instanceMethodId(
    r'getMaxZoom',
    r'()D',
  );

  static final _getMaxZoom = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract double getMaxZoom()`
  double getMaxZoom() {
    return _getMaxZoom(reference.pointer, _id_getMaxZoom as _$jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getPixelRatio = _class.instanceMethodId(
    r'getPixelRatio',
    r'()F',
  );

  static final _getPixelRatio = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract float getPixelRatio()`
  double getPixelRatio() {
    return _getPixelRatio(
            reference.pointer, _id_getPixelRatio as _$jni.JMethodIDPtr)
        .float;
  }

  static final _id_getIncludeIdeographs = _class.instanceMethodId(
    r'getIncludeIdeographs',
    r'()Z',
  );

  static final _getIncludeIdeographs = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getIncludeIdeographs()`
  bool getIncludeIdeographs() {
    return _getIncludeIdeographs(
            reference.pointer, _id_getIncludeIdeographs as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getType = _class.instanceMethodId(
    r'getType',
    r'()Ljava/lang/String;',
  );

  static final _getType = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getType()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getType() {
    return _getType(reference.pointer, _id_getType as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $OfflineRegionDefinition> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'getBounds()Lorg/maplibre/android/geometry/LatLngBounds;') {
        final $r = _$impls[$p]!.getBounds();
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'getStyleURL()Ljava/lang/String;') {
        final $r = _$impls[$p]!.getStyleURL();
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'getMinZoom()D') {
        final $r = _$impls[$p]!.getMinZoom();
        return _$jni.JDouble($r).reference.toPointer();
      }
      if ($d == r'getMaxZoom()D') {
        final $r = _$impls[$p]!.getMaxZoom();
        return _$jni.JDouble($r).reference.toPointer();
      }
      if ($d == r'getPixelRatio()F') {
        final $r = _$impls[$p]!.getPixelRatio();
        return _$jni.JFloat($r).reference.toPointer();
      }
      if ($d == r'getIncludeIdeographs()Z') {
        final $r = _$impls[$p]!.getIncludeIdeographs();
        return _$jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'getType()Ljava/lang/String;') {
        final $r = _$impls[$p]!.getType();
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $OfflineRegionDefinition $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.offline.OfflineRegionDefinition',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory OfflineRegionDefinition.implement(
    $OfflineRegionDefinition $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return OfflineRegionDefinition.fromReference(
      $i.implementReference(),
    );
  }
}

abstract mixin class $OfflineRegionDefinition {
  factory $OfflineRegionDefinition({
    required latlngbounds_.LatLngBounds Function() getBounds,
    required _$jni.JString Function() getStyleURL,
    required double Function() getMinZoom,
    required double Function() getMaxZoom,
    required double Function() getPixelRatio,
    required bool Function() getIncludeIdeographs,
    required _$jni.JString Function() getType,
  }) = _$OfflineRegionDefinition;

  latlngbounds_.LatLngBounds getBounds();
  _$jni.JString getStyleURL();
  double getMinZoom();
  double getMaxZoom();
  double getPixelRatio();
  bool getIncludeIdeographs();
  _$jni.JString getType();
}

class _$OfflineRegionDefinition implements $OfflineRegionDefinition {
  _$OfflineRegionDefinition({
    required latlngbounds_.LatLngBounds Function() getBounds,
    required _$jni.JString Function() getStyleURL,
    required double Function() getMinZoom,
    required double Function() getMaxZoom,
    required double Function() getPixelRatio,
    required bool Function() getIncludeIdeographs,
    required _$jni.JString Function() getType,
  })  : _getBounds = getBounds,
        _getStyleURL = getStyleURL,
        _getMinZoom = getMinZoom,
        _getMaxZoom = getMaxZoom,
        _getPixelRatio = getPixelRatio,
        _getIncludeIdeographs = getIncludeIdeographs,
        _getType = getType;

  final latlngbounds_.LatLngBounds Function() _getBounds;
  final _$jni.JString Function() _getStyleURL;
  final double Function() _getMinZoom;
  final double Function() _getMaxZoom;
  final double Function() _getPixelRatio;
  final bool Function() _getIncludeIdeographs;
  final _$jni.JString Function() _getType;

  latlngbounds_.LatLngBounds getBounds() {
    return _getBounds();
  }

  _$jni.JString getStyleURL() {
    return _getStyleURL();
  }

  double getMinZoom() {
    return _getMinZoom();
  }

  double getMaxZoom() {
    return _getMaxZoom();
  }

  double getPixelRatio() {
    return _getPixelRatio();
  }

  bool getIncludeIdeographs() {
    return _getIncludeIdeographs();
  }

  _$jni.JString getType() {
    return _getType();
  }
}

final class $OfflineRegionDefinition$Type
    extends _$jni.JObjType<OfflineRegionDefinition> {
  @_$jni.internal
  const $OfflineRegionDefinition$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineRegionDefinition;';

  @_$jni.internal
  @_$core.override
  OfflineRegionDefinition fromReference(_$jni.JReference reference) =>
      OfflineRegionDefinition.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($OfflineRegionDefinition$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineRegionDefinition$Type) &&
        other is $OfflineRegionDefinition$Type;
  }
}
