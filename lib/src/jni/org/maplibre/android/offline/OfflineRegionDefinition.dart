// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../geometry/LatLngBounds.dart' as latlngbounds_;

/// from: `org.maplibre.android.offline.OfflineRegionDefinition`
class OfflineRegionDefinition extends jni.JObject {
  @override
  late final jni.JObjType<OfflineRegionDefinition> $type = type;

  OfflineRegionDefinition.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/offline/OfflineRegionDefinition');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineRegionDefinitionType();
  static final _id_getBounds = _class.instanceMethodId(
    r'getBounds',
    r'()Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _getBounds = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract org.maplibre.android.geometry.LatLngBounds getBounds()`
  /// The returned object must be released after use, by calling the [release] method.
  latlngbounds_.LatLngBounds getBounds() {
    return _getBounds(reference.pointer, _id_getBounds as jni.JMethodIDPtr)
        .object(const latlngbounds_.$LatLngBoundsType());
  }

  static final _id_getStyleURL = _class.instanceMethodId(
    r'getStyleURL',
    r'()Ljava/lang/String;',
  );

  static final _getStyleURL = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getStyleURL()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getStyleURL() {
    return _getStyleURL(reference.pointer, _id_getStyleURL as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getMinZoom = _class.instanceMethodId(
    r'getMinZoom',
    r'()D',
  );

  static final _getMinZoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract double getMinZoom()`
  double getMinZoom() {
    return _getMinZoom(reference.pointer, _id_getMinZoom as jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getMaxZoom = _class.instanceMethodId(
    r'getMaxZoom',
    r'()D',
  );

  static final _getMaxZoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract double getMaxZoom()`
  double getMaxZoom() {
    return _getMaxZoom(reference.pointer, _id_getMaxZoom as jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getPixelRatio = _class.instanceMethodId(
    r'getPixelRatio',
    r'()F',
  );

  static final _getPixelRatio = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract float getPixelRatio()`
  double getPixelRatio() {
    return _getPixelRatio(
            reference.pointer, _id_getPixelRatio as jni.JMethodIDPtr)
        .float;
  }

  static final _id_getIncludeIdeographs = _class.instanceMethodId(
    r'getIncludeIdeographs',
    r'()Z',
  );

  static final _getIncludeIdeographs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getIncludeIdeographs()`
  bool getIncludeIdeographs() {
    return _getIncludeIdeographs(
            reference.pointer, _id_getIncludeIdeographs as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getType = _class.instanceMethodId(
    r'getType',
    r'()Ljava/lang/String;',
  );

  static final _getType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getType()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return _getType(reference.pointer, _id_getType as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $OfflineRegionDefinitionImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'getBounds()Lorg/maplibre/android/geometry/LatLngBounds;') {
        final $r = _$impls[$p]!.getBounds();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'getStyleURL()Ljava/lang/String;') {
        final $r = _$impls[$p]!.getStyleURL();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'getMinZoom()D') {
        final $r = _$impls[$p]!.getMinZoom();
        return jni.JDouble($r).reference.toPointer();
      }
      if ($d == r'getMaxZoom()D') {
        final $r = _$impls[$p]!.getMaxZoom();
        return jni.JDouble($r).reference.toPointer();
      }
      if ($d == r'getPixelRatio()F') {
        final $r = _$impls[$p]!.getPixelRatio();
        return jni.JFloat($r).reference.toPointer();
      }
      if ($d == r'getIncludeIdeographs()Z') {
        final $r = _$impls[$p]!.getIncludeIdeographs();
        return jni.JBoolean($r).reference.toPointer();
      }
      if ($d == r'getType()Ljava/lang/String;') {
        final $r = _$impls[$p]!.getType();
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory OfflineRegionDefinition.implement(
    $OfflineRegionDefinitionImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = OfflineRegionDefinition.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'org.maplibre.android.offline.OfflineRegionDefinition',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $OfflineRegionDefinitionImpl {
  factory $OfflineRegionDefinitionImpl({
    required latlngbounds_.LatLngBounds Function() getBounds,
    required jni.JString Function() getStyleURL,
    required double Function() getMinZoom,
    required double Function() getMaxZoom,
    required double Function() getPixelRatio,
    required bool Function() getIncludeIdeographs,
    required jni.JString Function() getType,
  }) = _$OfflineRegionDefinitionImpl;

  latlngbounds_.LatLngBounds getBounds();
  jni.JString getStyleURL();
  double getMinZoom();
  double getMaxZoom();
  double getPixelRatio();
  bool getIncludeIdeographs();
  jni.JString getType();
}

class _$OfflineRegionDefinitionImpl implements $OfflineRegionDefinitionImpl {
  _$OfflineRegionDefinitionImpl({
    required latlngbounds_.LatLngBounds Function() getBounds,
    required jni.JString Function() getStyleURL,
    required double Function() getMinZoom,
    required double Function() getMaxZoom,
    required double Function() getPixelRatio,
    required bool Function() getIncludeIdeographs,
    required jni.JString Function() getType,
  })  : _getBounds = getBounds,
        _getStyleURL = getStyleURL,
        _getMinZoom = getMinZoom,
        _getMaxZoom = getMaxZoom,
        _getPixelRatio = getPixelRatio,
        _getIncludeIdeographs = getIncludeIdeographs,
        _getType = getType;

  final latlngbounds_.LatLngBounds Function() _getBounds;
  final jni.JString Function() _getStyleURL;
  final double Function() _getMinZoom;
  final double Function() _getMaxZoom;
  final double Function() _getPixelRatio;
  final bool Function() _getIncludeIdeographs;
  final jni.JString Function() _getType;

  latlngbounds_.LatLngBounds getBounds() {
    return _getBounds();
  }

  jni.JString getStyleURL() {
    return _getStyleURL();
  }

  double getMinZoom() {
    return _getMinZoom();
  }

  double getMaxZoom() {
    return _getMaxZoom();
  }

  double getPixelRatio() {
    return _getPixelRatio();
  }

  bool getIncludeIdeographs() {
    return _getIncludeIdeographs();
  }

  jni.JString getType() {
    return _getType();
  }
}

final class $OfflineRegionDefinitionType
    extends jni.JObjType<OfflineRegionDefinition> {
  const $OfflineRegionDefinitionType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineRegionDefinition;';

  @override
  OfflineRegionDefinition fromReference(jni.JReference reference) =>
      OfflineRegionDefinition.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($OfflineRegionDefinitionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineRegionDefinitionType) &&
        other is $OfflineRegionDefinitionType;
  }
}
