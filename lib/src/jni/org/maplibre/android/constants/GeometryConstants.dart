// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `org.maplibre.android.constants.GeometryConstants`
class GeometryConstants extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<GeometryConstants> $type;

  @_$jni.internal
  GeometryConstants.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/constants/GeometryConstants');

  /// The type which includes information such as the signature of this class.
  static const type = $GeometryConstants$Type();

  /// from: `static public final int RADIUS_EARTH_METERS`
  static const RADIUS_EARTH_METERS = 6378137;

  /// from: `static public final double MIN_WRAP_LONGITUDE`
  static const MIN_WRAP_LONGITUDE = -180.0;

  /// from: `static public final double MAX_WRAP_LONGITUDE`
  static const MAX_WRAP_LONGITUDE = 180.0;

  /// from: `static public final double MIN_LONGITUDE`
  static const MIN_LONGITUDE = -1.7976931348623157e+308;

  /// from: `static public final double MAX_LONGITUDE`
  static const MAX_LONGITUDE = 1.7976931348623157e+308;

  /// from: `static public final double MIN_LATITUDE`
  static const MIN_LATITUDE = -90.0;

  /// from: `static public final double LATITUDE_SPAN`
  static const LATITUDE_SPAN = 180.0;

  /// from: `static public final double LONGITUDE_SPAN`
  static const LONGITUDE_SPAN = 360.0;

  /// from: `static public final double MAX_LATITUDE`
  static const MAX_LATITUDE = 90.0;

  /// from: `static public final double MAX_MERCATOR_LATITUDE`
  static const MAX_MERCATOR_LATITUDE = 85.05112877980659;

  /// from: `static public final double MIN_MERCATOR_LATITUDE`
  static const MIN_MERCATOR_LATITUDE = -85.05112877980659;
}

final class $GeometryConstants$Type extends _$jni.JObjType<GeometryConstants> {
  @_$jni.internal
  const $GeometryConstants$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/constants/GeometryConstants;';

  @_$jni.internal
  @_$core.override
  GeometryConstants fromReference(_$jni.JReference reference) =>
      GeometryConstants.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($GeometryConstants$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($GeometryConstants$Type) &&
        other is $GeometryConstants$Type;
  }
}
