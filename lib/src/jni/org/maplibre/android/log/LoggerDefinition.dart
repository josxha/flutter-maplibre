// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.log.LoggerDefinition`
class LoggerDefinition extends jni.JObject {
  @override
  late final jni.JObjType<LoggerDefinition> $type = type;

  LoggerDefinition.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/log/LoggerDefinition');

  /// The type which includes information such as the signature of this class.
  static const type = $LoggerDefinitionType();
  static final _id_v = _class.instanceMethodId(
    r'v',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _v = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void v(java.lang.String string, java.lang.String string1)`
  void v(
    jni.JString string,
    jni.JString string1,
  ) {
    _v(reference.pointer, _id_v as jni.JMethodIDPtr, string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_v1 = _class.instanceMethodId(
    r'v',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
  );

  static final _v1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void v(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  void v1(
    jni.JString string,
    jni.JString string1,
    jni.JObject throwable,
  ) {
    _v1(reference.pointer, _id_v1 as jni.JMethodIDPtr, string.reference.pointer,
            string1.reference.pointer, throwable.reference.pointer)
        .check();
  }

  static final _id_d = _class.instanceMethodId(
    r'd',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _d = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void d(java.lang.String string, java.lang.String string1)`
  void d(
    jni.JString string,
    jni.JString string1,
  ) {
    _d(reference.pointer, _id_d as jni.JMethodIDPtr, string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_d1 = _class.instanceMethodId(
    r'd',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
  );

  static final _d1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void d(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  void d1(
    jni.JString string,
    jni.JString string1,
    jni.JObject throwable,
  ) {
    _d1(reference.pointer, _id_d1 as jni.JMethodIDPtr, string.reference.pointer,
            string1.reference.pointer, throwable.reference.pointer)
        .check();
  }

  static final _id_i = _class.instanceMethodId(
    r'i',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _i = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void i(java.lang.String string, java.lang.String string1)`
  void i(
    jni.JString string,
    jni.JString string1,
  ) {
    _i(reference.pointer, _id_i as jni.JMethodIDPtr, string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_i1 = _class.instanceMethodId(
    r'i',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
  );

  static final _i1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void i(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  void i1(
    jni.JString string,
    jni.JString string1,
    jni.JObject throwable,
  ) {
    _i1(reference.pointer, _id_i1 as jni.JMethodIDPtr, string.reference.pointer,
            string1.reference.pointer, throwable.reference.pointer)
        .check();
  }

  static final _id_w = _class.instanceMethodId(
    r'w',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _w = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void w(java.lang.String string, java.lang.String string1)`
  void w(
    jni.JString string,
    jni.JString string1,
  ) {
    _w(reference.pointer, _id_w as jni.JMethodIDPtr, string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_w1 = _class.instanceMethodId(
    r'w',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
  );

  static final _w1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void w(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  void w1(
    jni.JString string,
    jni.JString string1,
    jni.JObject throwable,
  ) {
    _w1(reference.pointer, _id_w1 as jni.JMethodIDPtr, string.reference.pointer,
            string1.reference.pointer, throwable.reference.pointer)
        .check();
  }

  static final _id_e = _class.instanceMethodId(
    r'e',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _e = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void e(java.lang.String string, java.lang.String string1)`
  void e(
    jni.JString string,
    jni.JString string1,
  ) {
    _e(reference.pointer, _id_e as jni.JMethodIDPtr, string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_e1 = _class.instanceMethodId(
    r'e',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
  );

  static final _e1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void e(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  void e1(
    jni.JString string,
    jni.JString string1,
    jni.JObject throwable,
  ) {
    _e1(reference.pointer, _id_e1 as jni.JMethodIDPtr, string.reference.pointer,
            string1.reference.pointer, throwable.reference.pointer)
        .check();
  }
}

final class $LoggerDefinitionType extends jni.JObjType<LoggerDefinition> {
  const $LoggerDefinitionType();

  @override
  String get signature => r'Lorg/maplibre/android/log/LoggerDefinition;';

  @override
  LoggerDefinition fromReference(jni.JReference reference) =>
      LoggerDefinition.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LoggerDefinitionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LoggerDefinitionType) &&
        other is $LoggerDefinitionType;
  }
}
