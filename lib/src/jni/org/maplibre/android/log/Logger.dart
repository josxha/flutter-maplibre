// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'LoggerDefinition.dart' as loggerdefinition_;

/// from: `org.maplibre.android.log.Logger$LogLevel`
class Logger_LogLevel extends jni.JObject {
  @override
  late final jni.JObjType<Logger_LogLevel> $type = type;

  Logger_LogLevel.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/log/Logger$LogLevel');

  /// The type which includes information such as the signature of this class.
  static const type = $Logger_LogLevelType();
}

final class $Logger_LogLevelType extends jni.JObjType<Logger_LogLevel> {
  const $Logger_LogLevelType();

  @override
  String get signature => r'Lorg/maplibre/android/log/Logger$LogLevel;';

  @override
  Logger_LogLevel fromReference(jni.JReference reference) =>
      Logger_LogLevel.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Logger_LogLevelType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Logger_LogLevelType) &&
        other is $Logger_LogLevelType;
  }
}

/// from: `org.maplibre.android.log.Logger`
class Logger extends jni.JObject {
  @override
  late final jni.JObjType<Logger> $type = type;

  Logger.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'org/maplibre/android/log/Logger');

  /// The type which includes information such as the signature of this class.
  static const type = $LoggerType();

  /// from: `static public final int VERBOSE`
  static const VERBOSE = 2;

  /// from: `static public final int DEBUG`
  static const DEBUG = 3;

  /// from: `static public final int INFO`
  static const INFO = 4;

  /// from: `static public final int WARN`
  static const WARN = 5;

  /// from: `static public final int ERROR`
  static const ERROR = 6;

  /// from: `static public final int NONE`
  static const NONE = 99;
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Logger() {
    return Logger.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_setVerbosity = _class.staticMethodId(
    r'setVerbosity',
    r'(I)V',
  );

  static final _setVerbosity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public void setVerbosity(int i)`
  static void setVerbosity(
    int i,
  ) {
    _setVerbosity(
            _class.reference.pointer, _id_setVerbosity as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setLoggerDefinition = _class.staticMethodId(
    r'setLoggerDefinition',
    r'(Lorg/maplibre/android/log/LoggerDefinition;)V',
  );

  static final _setLoggerDefinition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public void setLoggerDefinition(org.maplibre.android.log.LoggerDefinition loggerDefinition)`
  static void setLoggerDefinition(
    loggerdefinition_.LoggerDefinition loggerDefinition,
  ) {
    _setLoggerDefinition(
            _class.reference.pointer,
            _id_setLoggerDefinition as jni.JMethodIDPtr,
            loggerDefinition.reference.pointer)
        .check();
  }

  static final _id_v = _class.staticMethodId(
    r'v',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _v = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public void v(java.lang.String string, java.lang.String string1)`
  static void v(
    jni.JString string,
    jni.JString string1,
  ) {
    _v(_class.reference.pointer, _id_v as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_v1 = _class.staticMethodId(
    r'v',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
  );

  static final _v1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public void v(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  static void v1(
    jni.JString string,
    jni.JString string1,
    jni.JObject throwable,
  ) {
    _v1(
            _class.reference.pointer,
            _id_v1 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            throwable.reference.pointer)
        .check();
  }

  static final _id_d = _class.staticMethodId(
    r'd',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _d = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public void d(java.lang.String string, java.lang.String string1)`
  static void d(
    jni.JString string,
    jni.JString string1,
  ) {
    _d(_class.reference.pointer, _id_d as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_d1 = _class.staticMethodId(
    r'd',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
  );

  static final _d1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public void d(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  static void d1(
    jni.JString string,
    jni.JString string1,
    jni.JObject throwable,
  ) {
    _d1(
            _class.reference.pointer,
            _id_d1 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            throwable.reference.pointer)
        .check();
  }

  static final _id_i = _class.staticMethodId(
    r'i',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _i = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public void i(java.lang.String string, java.lang.String string1)`
  static void i(
    jni.JString string,
    jni.JString string1,
  ) {
    _i(_class.reference.pointer, _id_i as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_i1 = _class.staticMethodId(
    r'i',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
  );

  static final _i1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public void i(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  static void i1(
    jni.JString string,
    jni.JString string1,
    jni.JObject throwable,
  ) {
    _i1(
            _class.reference.pointer,
            _id_i1 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            throwable.reference.pointer)
        .check();
  }

  static final _id_w = _class.staticMethodId(
    r'w',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _w = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public void w(java.lang.String string, java.lang.String string1)`
  static void w(
    jni.JString string,
    jni.JString string1,
  ) {
    _w(_class.reference.pointer, _id_w as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_w1 = _class.staticMethodId(
    r'w',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
  );

  static final _w1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public void w(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  static void w1(
    jni.JString string,
    jni.JString string1,
    jni.JObject throwable,
  ) {
    _w1(
            _class.reference.pointer,
            _id_w1 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            throwable.reference.pointer)
        .check();
  }

  static final _id_e = _class.staticMethodId(
    r'e',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _e = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public void e(java.lang.String string, java.lang.String string1)`
  static void e(
    jni.JString string,
    jni.JString string1,
  ) {
    _e(_class.reference.pointer, _id_e as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_e1 = _class.staticMethodId(
    r'e',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V',
  );

  static final _e1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public void e(java.lang.String string, java.lang.String string1, java.lang.Throwable throwable)`
  static void e1(
    jni.JString string,
    jni.JString string1,
    jni.JObject throwable,
  ) {
    _e1(
            _class.reference.pointer,
            _id_e1 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            throwable.reference.pointer)
        .check();
  }

  static final _id_log = _class.staticMethodId(
    r'log',
    r'(ILjava/lang/String;Ljava/lang/String;)V',
  );

  static final _log = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public void log(int i, java.lang.String string, java.lang.String string1)`
  static void log(
    int i,
    jni.JString string,
    jni.JString string1,
  ) {
    _log(_class.reference.pointer, _id_log as jni.JMethodIDPtr, i,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }
}

final class $LoggerType extends jni.JObjType<Logger> {
  const $LoggerType();

  @override
  String get signature => r'Lorg/maplibre/android/log/Logger;';

  @override
  Logger fromReference(jni.JReference reference) =>
      Logger.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LoggerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LoggerType) && other is $LoggerType;
  }
}
