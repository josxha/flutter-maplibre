// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'Attribution.dart' as attribution_;

/// from: `org.maplibre.android.attribution.AttributionParser$Options`
class AttributionParser_Options extends jni.JObject {
  @override
  late final jni.JObjType<AttributionParser_Options> $type = type;

  AttributionParser_Options.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/attribution/AttributionParser$Options');

  /// The type which includes information such as the signature of this class.
  static const type = $AttributionParser_OptionsType();
  static final _id_new0 = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AttributionParser_Options(
    jni.JObject context,
  ) {
    return AttributionParser_Options.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            context.reference.pointer)
        .reference);
  }

  static final _id_withAttributionData = _class.instanceMethodId(
    r'withAttributionData',
    r'([Ljava/lang/String;)Lorg/maplibre/android/attribution/AttributionParser$Options;',
  );

  static final _withAttributionData = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.attribution.AttributionParser$Options withAttributionData(java.lang.String[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  AttributionParser_Options withAttributionData(
    jni.JArray<jni.JString> strings,
  ) {
    return _withAttributionData(
            reference.pointer,
            _id_withAttributionData as jni.JMethodIDPtr,
            strings.reference.pointer)
        .object(const $AttributionParser_OptionsType());
  }

  static final _id_withImproveMap = _class.instanceMethodId(
    r'withImproveMap',
    r'(Z)Lorg/maplibre/android/attribution/AttributionParser$Options;',
  );

  static final _withImproveMap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.attribution.AttributionParser$Options withImproveMap(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  AttributionParser_Options withImproveMap(
    bool z,
  ) {
    return _withImproveMap(reference.pointer,
            _id_withImproveMap as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $AttributionParser_OptionsType());
  }

  static final _id_withCopyrightSign = _class.instanceMethodId(
    r'withCopyrightSign',
    r'(Z)Lorg/maplibre/android/attribution/AttributionParser$Options;',
  );

  static final _withCopyrightSign = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.attribution.AttributionParser$Options withCopyrightSign(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  AttributionParser_Options withCopyrightSign(
    bool z,
  ) {
    return _withCopyrightSign(reference.pointer,
            _id_withCopyrightSign as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $AttributionParser_OptionsType());
  }

  static final _id_withMapboxAttribution = _class.instanceMethodId(
    r'withMapboxAttribution',
    r'(Z)Lorg/maplibre/android/attribution/AttributionParser$Options;',
  );

  static final _withMapboxAttribution = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.attribution.AttributionParser$Options withMapboxAttribution(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  AttributionParser_Options withMapboxAttribution(
    bool z,
  ) {
    return _withMapboxAttribution(reference.pointer,
            _id_withMapboxAttribution as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $AttributionParser_OptionsType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Lorg/maplibre/android/attribution/AttributionParser;',
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.attribution.AttributionParser build()`
  /// The returned object must be released after use, by calling the [release] method.
  AttributionParser build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $AttributionParserType());
  }
}

final class $AttributionParser_OptionsType
    extends jni.JObjType<AttributionParser_Options> {
  const $AttributionParser_OptionsType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/attribution/AttributionParser$Options;';

  @override
  AttributionParser_Options fromReference(jni.JReference reference) =>
      AttributionParser_Options.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AttributionParser_OptionsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AttributionParser_OptionsType) &&
        other is $AttributionParser_OptionsType;
  }
}

/// from: `org.maplibre.android.attribution.AttributionParser`
class AttributionParser extends jni.JObject {
  @override
  late final jni.JObjType<AttributionParser> $type = type;

  AttributionParser.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/attribution/AttributionParser');

  /// The type which includes information such as the signature of this class.
  static const type = $AttributionParserType();
  static final _id_getAttributions = _class.instanceMethodId(
    r'getAttributions',
    r'()Ljava/util/Set;',
  );

  static final _getAttributions = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.Set getAttributions()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<attribution_.Attribution> getAttributions() {
    return _getAttributions(
            reference.pointer, _id_getAttributions as jni.JMethodIDPtr)
        .object(const jni.JSetType(attribution_.$AttributionType()));
  }

  static final _id_createAttributionString = _class.instanceMethodId(
    r'createAttributionString',
    r'()Ljava/lang/String;',
  );

  static final _createAttributionString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String createAttributionString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString createAttributionString() {
    return _createAttributionString(
            reference.pointer, _id_createAttributionString as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_createAttributionString1 = _class.instanceMethodId(
    r'createAttributionString',
    r'(Z)Ljava/lang/String;',
  );

  static final _createAttributionString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public java.lang.String createAttributionString(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString createAttributionString1(
    bool z,
  ) {
    return _createAttributionString1(reference.pointer,
            _id_createAttributionString1 as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const jni.JStringType());
  }

  static final _id_parse = _class.instanceMethodId(
    r'parse',
    r'()V',
  );

  static final _parse = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected void parse()`
  void parse() {
    _parse(reference.pointer, _id_parse as jni.JMethodIDPtr).check();
  }
}

final class $AttributionParserType extends jni.JObjType<AttributionParser> {
  const $AttributionParserType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/attribution/AttributionParser;';

  @override
  AttributionParser fromReference(jni.JReference reference) =>
      AttributionParser.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AttributionParserType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AttributionParserType) &&
        other is $AttributionParserType;
  }
}
