// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import 'AttributionLayout.dart' as attributionlayout_;

/// from: `org.maplibre.android.attribution.AttributionMeasure$Builder`
class AttributionMeasure_Builder extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<AttributionMeasure_Builder> $type;

  @_$jni.internal
  AttributionMeasure_Builder.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/attribution/AttributionMeasure$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $AttributionMeasure_Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory AttributionMeasure_Builder() {
    return AttributionMeasure_Builder.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_setSnapshot = _class.instanceMethodId(
    r'setSnapshot',
    r'(Landroid/graphics/Bitmap;)Lorg/maplibre/android/attribution/AttributionMeasure$Builder;',
  );

  static final _setSnapshot = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.attribution.AttributionMeasure$Builder setSnapshot(android.graphics.Bitmap bitmap)`
  /// The returned object must be released after use, by calling the [release] method.
  AttributionMeasure_Builder setSnapshot(
    _$jni.JObject bitmap,
  ) {
    return _setSnapshot(reference.pointer,
            _id_setSnapshot as _$jni.JMethodIDPtr, bitmap.reference.pointer)
        .object(const $AttributionMeasure_Builder$Type());
  }

  static final _id_setLogo = _class.instanceMethodId(
    r'setLogo',
    r'(Landroid/graphics/Bitmap;)Lorg/maplibre/android/attribution/AttributionMeasure$Builder;',
  );

  static final _setLogo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.attribution.AttributionMeasure$Builder setLogo(android.graphics.Bitmap bitmap)`
  /// The returned object must be released after use, by calling the [release] method.
  AttributionMeasure_Builder setLogo(
    _$jni.JObject bitmap,
  ) {
    return _setLogo(reference.pointer, _id_setLogo as _$jni.JMethodIDPtr,
            bitmap.reference.pointer)
        .object(const $AttributionMeasure_Builder$Type());
  }

  static final _id_setLogoSmall = _class.instanceMethodId(
    r'setLogoSmall',
    r'(Landroid/graphics/Bitmap;)Lorg/maplibre/android/attribution/AttributionMeasure$Builder;',
  );

  static final _setLogoSmall = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.attribution.AttributionMeasure$Builder setLogoSmall(android.graphics.Bitmap bitmap)`
  /// The returned object must be released after use, by calling the [release] method.
  AttributionMeasure_Builder setLogoSmall(
    _$jni.JObject bitmap,
  ) {
    return _setLogoSmall(reference.pointer,
            _id_setLogoSmall as _$jni.JMethodIDPtr, bitmap.reference.pointer)
        .object(const $AttributionMeasure_Builder$Type());
  }

  static final _id_setTextView = _class.instanceMethodId(
    r'setTextView',
    r'(Landroid/widget/TextView;)Lorg/maplibre/android/attribution/AttributionMeasure$Builder;',
  );

  static final _setTextView = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.attribution.AttributionMeasure$Builder setTextView(android.widget.TextView textView)`
  /// The returned object must be released after use, by calling the [release] method.
  AttributionMeasure_Builder setTextView(
    _$jni.JObject textView,
  ) {
    return _setTextView(reference.pointer,
            _id_setTextView as _$jni.JMethodIDPtr, textView.reference.pointer)
        .object(const $AttributionMeasure_Builder$Type());
  }

  static final _id_setTextViewShort = _class.instanceMethodId(
    r'setTextViewShort',
    r'(Landroid/widget/TextView;)Lorg/maplibre/android/attribution/AttributionMeasure$Builder;',
  );

  static final _setTextViewShort = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.attribution.AttributionMeasure$Builder setTextViewShort(android.widget.TextView textView)`
  /// The returned object must be released after use, by calling the [release] method.
  AttributionMeasure_Builder setTextViewShort(
    _$jni.JObject textView,
  ) {
    return _setTextViewShort(
            reference.pointer,
            _id_setTextViewShort as _$jni.JMethodIDPtr,
            textView.reference.pointer)
        .object(const $AttributionMeasure_Builder$Type());
  }

  static final _id_setMarginPadding = _class.instanceMethodId(
    r'setMarginPadding',
    r'(F)Lorg/maplibre/android/attribution/AttributionMeasure$Builder;',
  );

  static final _setMarginPadding = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();

  /// from: `public org.maplibre.android.attribution.AttributionMeasure$Builder setMarginPadding(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  AttributionMeasure_Builder setMarginPadding(
    double f,
  ) {
    return _setMarginPadding(
            reference.pointer, _id_setMarginPadding as _$jni.JMethodIDPtr, f)
        .object(const $AttributionMeasure_Builder$Type());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Lorg/maplibre/android/attribution/AttributionMeasure;',
  );

  static final _build = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.attribution.AttributionMeasure build()`
  /// The returned object must be released after use, by calling the [release] method.
  AttributionMeasure build() {
    return _build(reference.pointer, _id_build as _$jni.JMethodIDPtr)
        .object(const $AttributionMeasure$Type());
  }
}

final class $AttributionMeasure_Builder$Type
    extends _$jni.JObjType<AttributionMeasure_Builder> {
  @_$jni.internal
  const $AttributionMeasure_Builder$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/attribution/AttributionMeasure$Builder;';

  @_$jni.internal
  @_$core.override
  AttributionMeasure_Builder fromReference(_$jni.JReference reference) =>
      AttributionMeasure_Builder.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($AttributionMeasure_Builder$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AttributionMeasure_Builder$Type) &&
        other is $AttributionMeasure_Builder$Type;
  }
}

/// from: `org.maplibre.android.attribution.AttributionMeasure$Command`
class AttributionMeasure_Command extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<AttributionMeasure_Command> $type;

  @_$jni.internal
  AttributionMeasure_Command.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/attribution/AttributionMeasure$Command');

  /// The type which includes information such as the signature of this class.
  static const type = $AttributionMeasure_Command$Type();
  static final _id_execute = _class.instanceMethodId(
    r'execute',
    r'(Lorg/maplibre/android/attribution/AttributionMeasure;)Lorg/maplibre/android/attribution/AttributionLayout;',
  );

  static final _execute = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract org.maplibre.android.attribution.AttributionLayout execute(org.maplibre.android.attribution.AttributionMeasure attributionMeasure)`
  /// The returned object must be released after use, by calling the [release] method.
  attributionlayout_.AttributionLayout execute(
    AttributionMeasure attributionMeasure,
  ) {
    return _execute(reference.pointer, _id_execute as _$jni.JMethodIDPtr,
            attributionMeasure.reference.pointer)
        .object(const attributionlayout_.$AttributionLayout$Type());
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $AttributionMeasure_Command> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'execute(Lorg/maplibre/android/attribution/AttributionMeasure;)Lorg/maplibre/android/attribution/AttributionLayout;') {
        final $r = _$impls[$p]!.execute(
          $a[0].as(const $AttributionMeasure$Type(), releaseOriginal: true),
        );
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $AttributionMeasure_Command $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.attribution.AttributionMeasure$Command',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory AttributionMeasure_Command.implement(
    $AttributionMeasure_Command $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return AttributionMeasure_Command.fromReference(
      $i.implementReference(),
    );
  }
}

abstract mixin class $AttributionMeasure_Command {
  factory $AttributionMeasure_Command({
    required attributionlayout_.AttributionLayout Function(
            AttributionMeasure attributionMeasure)
        execute,
  }) = _$AttributionMeasure_Command;

  attributionlayout_.AttributionLayout execute(
      AttributionMeasure attributionMeasure);
}

class _$AttributionMeasure_Command implements $AttributionMeasure_Command {
  _$AttributionMeasure_Command({
    required attributionlayout_.AttributionLayout Function(
            AttributionMeasure attributionMeasure)
        execute,
  }) : _execute = execute;

  final attributionlayout_.AttributionLayout Function(
      AttributionMeasure attributionMeasure) _execute;

  attributionlayout_.AttributionLayout execute(
      AttributionMeasure attributionMeasure) {
    return _execute(attributionMeasure);
  }
}

final class $AttributionMeasure_Command$Type
    extends _$jni.JObjType<AttributionMeasure_Command> {
  @_$jni.internal
  const $AttributionMeasure_Command$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/attribution/AttributionMeasure$Command;';

  @_$jni.internal
  @_$core.override
  AttributionMeasure_Command fromReference(_$jni.JReference reference) =>
      AttributionMeasure_Command.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($AttributionMeasure_Command$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AttributionMeasure_Command$Type) &&
        other is $AttributionMeasure_Command$Type;
  }
}

/// from: `org.maplibre.android.attribution.AttributionMeasure`
class AttributionMeasure extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<AttributionMeasure> $type;

  @_$jni.internal
  AttributionMeasure.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/attribution/AttributionMeasure');

  /// The type which includes information such as the signature of this class.
  static const type = $AttributionMeasure$Type();
  static final _id_measure = _class.instanceMethodId(
    r'measure',
    r'()Lorg/maplibre/android/attribution/AttributionLayout;',
  );

  static final _measure = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.attribution.AttributionLayout measure()`
  /// The returned object must be released after use, by calling the [release] method.
  attributionlayout_.AttributionLayout measure() {
    return _measure(reference.pointer, _id_measure as _$jni.JMethodIDPtr)
        .object(const attributionlayout_.$AttributionLayout$Type());
  }

  static final _id_getTextView = _class.instanceMethodId(
    r'getTextView',
    r'()Landroid/widget/TextView;',
  );

  static final _getTextView = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.widget.TextView getTextView()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getTextView() {
    return _getTextView(
            reference.pointer, _id_getTextView as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }
}

final class $AttributionMeasure$Type
    extends _$jni.JObjType<AttributionMeasure> {
  @_$jni.internal
  const $AttributionMeasure$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/attribution/AttributionMeasure;';

  @_$jni.internal
  @_$core.override
  AttributionMeasure fromReference(_$jni.JReference reference) =>
      AttributionMeasure.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($AttributionMeasure$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AttributionMeasure$Type) &&
        other is $AttributionMeasure$Type;
  }
}
