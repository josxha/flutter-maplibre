// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.http.LocalRequestTask$OnLocalRequestResponse`
class LocalRequestTask_OnLocalRequestResponse extends jni.JObject {
  @override
  late final jni.JObjType<LocalRequestTask_OnLocalRequestResponse> $type = type;

  LocalRequestTask_OnLocalRequestResponse.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/http/LocalRequestTask$OnLocalRequestResponse');

  /// The type which includes information such as the signature of this class.
  static const type = $LocalRequestTask_OnLocalRequestResponseType();
  static final _id_onResponse = _class.instanceMethodId(
    r'onResponse',
    r'([B)V',
  );

  static final _onResponse = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onResponse(byte[] bs)`
  void onResponse(
    jni.JArray<jni.jbyte> bs,
  ) {
    _onResponse(reference.pointer, _id_onResponse as jni.JMethodIDPtr,
            bs.reference.pointer)
        .check();
  }
}

final class $LocalRequestTask_OnLocalRequestResponseType
    extends jni.JObjType<LocalRequestTask_OnLocalRequestResponse> {
  const $LocalRequestTask_OnLocalRequestResponseType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/http/LocalRequestTask$OnLocalRequestResponse;';

  @override
  LocalRequestTask_OnLocalRequestResponse fromReference(
          jni.JReference reference) =>
      LocalRequestTask_OnLocalRequestResponse.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LocalRequestTask_OnLocalRequestResponseType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($LocalRequestTask_OnLocalRequestResponseType) &&
        other is $LocalRequestTask_OnLocalRequestResponseType;
  }
}
