// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.http.HttpLogger`
class HttpLogger extends jni.JObject {
  @override
  late final jni.JObjType<HttpLogger> $type = type;

  HttpLogger.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/http/HttpLogger');

  /// The type which includes information such as the signature of this class.
  static const type = $HttpLoggerType();
  static final _id_logRequestUrl = _class.staticFieldId(
    r'logRequestUrl',
    r'Z',
  );

  /// from: `static public boolean logRequestUrl`
  static bool get logRequestUrl =>
      _id_logRequestUrl.get(_class, const jni.jbooleanType());

  /// from: `static public boolean logRequestUrl`
  static set logRequestUrl(bool value) =>
      _id_logRequestUrl.set(_class, const jni.jbooleanType(), value);

  static final _id_logEnabled = _class.staticFieldId(
    r'logEnabled',
    r'Z',
  );

  /// from: `static public boolean logEnabled`
  static bool get logEnabled =>
      _id_logEnabled.get(_class, const jni.jbooleanType());

  /// from: `static public boolean logEnabled`
  static set logEnabled(bool value) =>
      _id_logEnabled.set(_class, const jni.jbooleanType(), value);

  static final _id_logFailure = _class.staticMethodId(
    r'logFailure',
    r'(ILjava/lang/String;Ljava/lang/String;)V',
  );

  static final _logFailure = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public void logFailure(int i, java.lang.String string, java.lang.String string1)`
  static void logFailure(
    int i,
    jni.JString string,
    jni.JString string1,
  ) {
    _logFailure(_class.reference.pointer, _id_logFailure as jni.JMethodIDPtr, i,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_log = _class.staticMethodId(
    r'log',
    r'(ILjava/lang/String;)V',
  );

  static final _log = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: `static public void log(int i, java.lang.String string)`
  static void log(
    int i,
    jni.JString string,
  ) {
    _log(_class.reference.pointer, _id_log as jni.JMethodIDPtr, i,
            string.reference.pointer)
        .check();
  }
}

final class $HttpLoggerType extends jni.JObjType<HttpLogger> {
  const $HttpLoggerType();

  @override
  String get signature => r'Lorg/maplibre/android/http/HttpLogger;';

  @override
  HttpLogger fromReference(jni.JReference reference) =>
      HttpLogger.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($HttpLoggerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($HttpLoggerType) && other is $HttpLoggerType;
  }
}
