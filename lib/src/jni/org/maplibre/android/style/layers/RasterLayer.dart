// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'Layer.dart' as layer_;

import 'PropertyValue.dart' as propertyvalue_;

import 'TransitionOptions.dart' as transitionoptions_;

/// from: `org.maplibre.android.style.layers.RasterLayer`
class RasterLayer extends layer_.Layer {
  @override
  late final jni.JObjType<RasterLayer> $type = type;

  RasterLayer.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/style/layers/RasterLayer');

  /// The type which includes information such as the signature of this class.
  static const type = $RasterLayerType();
  static final _id_new2 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory RasterLayer.new2(
    jni.JString string,
    jni.JString string1,
  ) {
    return RasterLayer.fromReference(_new2(
            _class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .reference);
  }

  static final _id_initialize = _class.instanceMethodId(
    r'initialize',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _initialize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `protected native void initialize(java.lang.String string, java.lang.String string1)`
  void initialize(
    jni.JString string,
    jni.JString string1,
  ) {
    _initialize(reference.pointer, _id_initialize as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_setSourceLayer = _class.instanceMethodId(
    r'setSourceLayer',
    r'(Ljava/lang/String;)V',
  );

  static final _setSourceLayer = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setSourceLayer(java.lang.String string)`
  void setSourceLayer(
    jni.JString string,
  ) {
    _setSourceLayer(reference.pointer, _id_setSourceLayer as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_withSourceLayer = _class.instanceMethodId(
    r'withSourceLayer',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/RasterLayer;',
  );

  static final _withSourceLayer = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.style.layers.RasterLayer withSourceLayer(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  RasterLayer withSourceLayer(
    jni.JString string,
  ) {
    return _withSourceLayer(reference.pointer,
            _id_withSourceLayer as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $RasterLayerType());
  }

  static final _id_getSourceId = _class.instanceMethodId(
    r'getSourceId',
    r'()Ljava/lang/String;',
  );

  static final _getSourceId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getSourceId()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSourceId() {
    return _getSourceId(reference.pointer, _id_getSourceId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_withProperties = _class.instanceMethodId(
    r'withProperties',
    r'([Lorg/maplibre/android/style/layers/PropertyValue;)Lorg/maplibre/android/style/layers/RasterLayer;',
  );

  static final _withProperties = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.style.layers.RasterLayer withProperties(java.lang.Object[] propertyValues)`
  /// The returned object must be released after use, by calling the [release] method.
  RasterLayer withProperties(
    jni.JArray<propertyvalue_.PropertyValue<jni.JObject>> propertyValues,
  ) {
    return _withProperties(
            reference.pointer,
            _id_withProperties as jni.JMethodIDPtr,
            propertyValues.reference.pointer)
        .object(const $RasterLayerType());
  }

  static final _id_getRasterOpacity = _class.instanceMethodId(
    r'getRasterOpacity',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getRasterOpacity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getRasterOpacity()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getRasterOpacity() {
    return _getRasterOpacity(
            reference.pointer, _id_getRasterOpacity as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getRasterOpacityTransition = _class.instanceMethodId(
    r'getRasterOpacityTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getRasterOpacityTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getRasterOpacityTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getRasterOpacityTransition() {
    return _getRasterOpacityTransition(reference.pointer,
            _id_getRasterOpacityTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setRasterOpacityTransition = _class.instanceMethodId(
    r'setRasterOpacityTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setRasterOpacityTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setRasterOpacityTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setRasterOpacityTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setRasterOpacityTransition(
            reference.pointer,
            _id_setRasterOpacityTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getRasterHueRotate = _class.instanceMethodId(
    r'getRasterHueRotate',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getRasterHueRotate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getRasterHueRotate()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getRasterHueRotate() {
    return _getRasterHueRotate(
            reference.pointer, _id_getRasterHueRotate as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getRasterHueRotateTransition = _class.instanceMethodId(
    r'getRasterHueRotateTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getRasterHueRotateTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getRasterHueRotateTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getRasterHueRotateTransition() {
    return _getRasterHueRotateTransition(reference.pointer,
            _id_getRasterHueRotateTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setRasterHueRotateTransition = _class.instanceMethodId(
    r'setRasterHueRotateTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setRasterHueRotateTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setRasterHueRotateTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setRasterHueRotateTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setRasterHueRotateTransition(
            reference.pointer,
            _id_setRasterHueRotateTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getRasterBrightnessMin = _class.instanceMethodId(
    r'getRasterBrightnessMin',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getRasterBrightnessMin = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getRasterBrightnessMin()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getRasterBrightnessMin() {
    return _getRasterBrightnessMin(
            reference.pointer, _id_getRasterBrightnessMin as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getRasterBrightnessMinTransition = _class.instanceMethodId(
    r'getRasterBrightnessMinTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getRasterBrightnessMinTransition =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getRasterBrightnessMinTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getRasterBrightnessMinTransition() {
    return _getRasterBrightnessMinTransition(reference.pointer,
            _id_getRasterBrightnessMinTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setRasterBrightnessMinTransition = _class.instanceMethodId(
    r'setRasterBrightnessMinTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setRasterBrightnessMinTransition =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void setRasterBrightnessMinTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setRasterBrightnessMinTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setRasterBrightnessMinTransition(
            reference.pointer,
            _id_setRasterBrightnessMinTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getRasterBrightnessMax = _class.instanceMethodId(
    r'getRasterBrightnessMax',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getRasterBrightnessMax = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getRasterBrightnessMax()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getRasterBrightnessMax() {
    return _getRasterBrightnessMax(
            reference.pointer, _id_getRasterBrightnessMax as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getRasterBrightnessMaxTransition = _class.instanceMethodId(
    r'getRasterBrightnessMaxTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getRasterBrightnessMaxTransition =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getRasterBrightnessMaxTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getRasterBrightnessMaxTransition() {
    return _getRasterBrightnessMaxTransition(reference.pointer,
            _id_getRasterBrightnessMaxTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setRasterBrightnessMaxTransition = _class.instanceMethodId(
    r'setRasterBrightnessMaxTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setRasterBrightnessMaxTransition =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void setRasterBrightnessMaxTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setRasterBrightnessMaxTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setRasterBrightnessMaxTransition(
            reference.pointer,
            _id_setRasterBrightnessMaxTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getRasterSaturation = _class.instanceMethodId(
    r'getRasterSaturation',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getRasterSaturation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getRasterSaturation()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getRasterSaturation() {
    return _getRasterSaturation(
            reference.pointer, _id_getRasterSaturation as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getRasterSaturationTransition = _class.instanceMethodId(
    r'getRasterSaturationTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getRasterSaturationTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getRasterSaturationTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getRasterSaturationTransition() {
    return _getRasterSaturationTransition(reference.pointer,
            _id_getRasterSaturationTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setRasterSaturationTransition = _class.instanceMethodId(
    r'setRasterSaturationTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setRasterSaturationTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setRasterSaturationTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setRasterSaturationTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setRasterSaturationTransition(
            reference.pointer,
            _id_setRasterSaturationTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getRasterContrast = _class.instanceMethodId(
    r'getRasterContrast',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getRasterContrast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getRasterContrast()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getRasterContrast() {
    return _getRasterContrast(
            reference.pointer, _id_getRasterContrast as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getRasterContrastTransition = _class.instanceMethodId(
    r'getRasterContrastTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getRasterContrastTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getRasterContrastTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getRasterContrastTransition() {
    return _getRasterContrastTransition(reference.pointer,
            _id_getRasterContrastTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setRasterContrastTransition = _class.instanceMethodId(
    r'setRasterContrastTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setRasterContrastTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setRasterContrastTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setRasterContrastTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setRasterContrastTransition(
            reference.pointer,
            _id_setRasterContrastTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getRasterResampling = _class.instanceMethodId(
    r'getRasterResampling',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getRasterResampling = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getRasterResampling()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getRasterResampling() {
    return _getRasterResampling(
            reference.pointer, _id_getRasterResampling as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getRasterFadeDuration = _class.instanceMethodId(
    r'getRasterFadeDuration',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getRasterFadeDuration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getRasterFadeDuration()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getRasterFadeDuration() {
    return _getRasterFadeDuration(
            reference.pointer, _id_getRasterFadeDuration as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_finalize = _class.instanceMethodId(
    r'finalize',
    r'()V',
  );

  static final _finalize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected native void finalize()`
  void finalize() {
    _finalize(reference.pointer, _id_finalize as jni.JMethodIDPtr).check();
  }
}

final class $RasterLayerType extends jni.JObjType<RasterLayer> {
  const $RasterLayerType();

  @override
  String get signature => r'Lorg/maplibre/android/style/layers/RasterLayer;';

  @override
  RasterLayer fromReference(jni.JReference reference) =>
      RasterLayer.fromReference(reference);

  @override
  jni.JObjType get superType => const layer_.$LayerType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($RasterLayerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($RasterLayerType) && other is $RasterLayerType;
  }
}
