// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../types/Formatted.dart' as formatted_;

import 'Layer.dart' as layer_;

import 'PropertyValue.dart' as propertyvalue_;

import 'TransitionOptions.dart' as transitionoptions_;

/// from: `org.maplibre.android.style.layers.SymbolLayer`
class SymbolLayer extends layer_.Layer {
  @override
  late final jni.JObjType<SymbolLayer> $type = type;

  SymbolLayer.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/style/layers/SymbolLayer');

  /// The type which includes information such as the signature of this class.
  static const type = $SymbolLayerType();
  static final _id_new2 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory SymbolLayer.new2(
    jni.JString string,
    jni.JString string1,
  ) {
    return SymbolLayer.fromReference(_new2(
            _class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .reference);
  }

  static final _id_initialize = _class.instanceMethodId(
    r'initialize',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _initialize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `protected native void initialize(java.lang.String string, java.lang.String string1)`
  void initialize(
    jni.JString string,
    jni.JString string1,
  ) {
    _initialize(reference.pointer, _id_initialize as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_setSourceLayer = _class.instanceMethodId(
    r'setSourceLayer',
    r'(Ljava/lang/String;)V',
  );

  static final _setSourceLayer = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setSourceLayer(java.lang.String string)`
  void setSourceLayer(
    jni.JString string,
  ) {
    _setSourceLayer(reference.pointer, _id_setSourceLayer as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_withSourceLayer = _class.instanceMethodId(
    r'withSourceLayer',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/SymbolLayer;',
  );

  static final _withSourceLayer = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.style.layers.SymbolLayer withSourceLayer(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  SymbolLayer withSourceLayer(
    jni.JString string,
  ) {
    return _withSourceLayer(reference.pointer,
            _id_withSourceLayer as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $SymbolLayerType());
  }

  static final _id_getSourceId = _class.instanceMethodId(
    r'getSourceId',
    r'()Ljava/lang/String;',
  );

  static final _getSourceId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getSourceId()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSourceId() {
    return _getSourceId(reference.pointer, _id_getSourceId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSourceLayer = _class.instanceMethodId(
    r'getSourceLayer',
    r'()Ljava/lang/String;',
  );

  static final _getSourceLayer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getSourceLayer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSourceLayer() {
    return _getSourceLayer(
            reference.pointer, _id_getSourceLayer as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setFilter = _class.instanceMethodId(
    r'setFilter',
    r'(Lorg/maplibre/android/style/expressions/Expression;)V',
  );

  static final _setFilter = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setFilter(org.maplibre.android.style.expressions.Expression expression)`
  void setFilter(
    jni.JObject expression,
  ) {
    _setFilter(reference.pointer, _id_setFilter as jni.JMethodIDPtr,
            expression.reference.pointer)
        .check();
  }

  static final _id_withFilter = _class.instanceMethodId(
    r'withFilter',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/SymbolLayer;',
  );

  static final _withFilter = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.style.layers.SymbolLayer withFilter(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  SymbolLayer withFilter(
    jni.JObject expression,
  ) {
    return _withFilter(reference.pointer, _id_withFilter as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $SymbolLayerType());
  }

  static final _id_getFilter = _class.instanceMethodId(
    r'getFilter',
    r'()Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _getFilter = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.expressions.Expression getFilter()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFilter() {
    return _getFilter(reference.pointer, _id_getFilter as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_withProperties = _class.instanceMethodId(
    r'withProperties',
    r'([Lorg/maplibre/android/style/layers/PropertyValue;)Lorg/maplibre/android/style/layers/SymbolLayer;',
  );

  static final _withProperties = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.style.layers.SymbolLayer withProperties(java.lang.Object[] propertyValues)`
  /// The returned object must be released after use, by calling the [release] method.
  SymbolLayer withProperties(
    jni.JArray<propertyvalue_.PropertyValue<jni.JObject>> propertyValues,
  ) {
    return _withProperties(
            reference.pointer,
            _id_withProperties as jni.JMethodIDPtr,
            propertyValues.reference.pointer)
        .object(const $SymbolLayerType());
  }

  static final _id_getSymbolPlacement = _class.instanceMethodId(
    r'getSymbolPlacement',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getSymbolPlacement = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getSymbolPlacement()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getSymbolPlacement() {
    return _getSymbolPlacement(
            reference.pointer, _id_getSymbolPlacement as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getSymbolSpacing = _class.instanceMethodId(
    r'getSymbolSpacing',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getSymbolSpacing = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getSymbolSpacing()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getSymbolSpacing() {
    return _getSymbolSpacing(
            reference.pointer, _id_getSymbolSpacing as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getSymbolAvoidEdges = _class.instanceMethodId(
    r'getSymbolAvoidEdges',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getSymbolAvoidEdges = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getSymbolAvoidEdges()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JBoolean> getSymbolAvoidEdges() {
    return _getSymbolAvoidEdges(
            reference.pointer, _id_getSymbolAvoidEdges as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_getSymbolSortKey = _class.instanceMethodId(
    r'getSymbolSortKey',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getSymbolSortKey = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getSymbolSortKey()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getSymbolSortKey() {
    return _getSymbolSortKey(
            reference.pointer, _id_getSymbolSortKey as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getSymbolZOrder = _class.instanceMethodId(
    r'getSymbolZOrder',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getSymbolZOrder = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getSymbolZOrder()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getSymbolZOrder() {
    return _getSymbolZOrder(
            reference.pointer, _id_getSymbolZOrder as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getIconAllowOverlap = _class.instanceMethodId(
    r'getIconAllowOverlap',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconAllowOverlap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconAllowOverlap()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JBoolean> getIconAllowOverlap() {
    return _getIconAllowOverlap(
            reference.pointer, _id_getIconAllowOverlap as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_getIconIgnorePlacement = _class.instanceMethodId(
    r'getIconIgnorePlacement',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconIgnorePlacement = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconIgnorePlacement()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JBoolean> getIconIgnorePlacement() {
    return _getIconIgnorePlacement(
            reference.pointer, _id_getIconIgnorePlacement as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_getIconOptional = _class.instanceMethodId(
    r'getIconOptional',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconOptional = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconOptional()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JBoolean> getIconOptional() {
    return _getIconOptional(
            reference.pointer, _id_getIconOptional as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_getIconRotationAlignment = _class.instanceMethodId(
    r'getIconRotationAlignment',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconRotationAlignment = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconRotationAlignment()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getIconRotationAlignment() {
    return _getIconRotationAlignment(
            reference.pointer, _id_getIconRotationAlignment as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getIconSize = _class.instanceMethodId(
    r'getIconSize',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconSize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconSize()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getIconSize() {
    return _getIconSize(reference.pointer, _id_getIconSize as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getIconTextFit = _class.instanceMethodId(
    r'getIconTextFit',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconTextFit = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconTextFit()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getIconTextFit() {
    return _getIconTextFit(
            reference.pointer, _id_getIconTextFit as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getIconTextFitPadding = _class.instanceMethodId(
    r'getIconTextFitPadding',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconTextFitPadding = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconTextFitPadding()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>> getIconTextFitPadding() {
    return _getIconTextFitPadding(
            reference.pointer, _id_getIconTextFitPadding as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_getIconImage = _class.instanceMethodId(
    r'getIconImage',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconImage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconImage()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getIconImage() {
    return _getIconImage(
            reference.pointer, _id_getIconImage as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getIconRotate = _class.instanceMethodId(
    r'getIconRotate',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconRotate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconRotate()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getIconRotate() {
    return _getIconRotate(
            reference.pointer, _id_getIconRotate as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getIconPadding = _class.instanceMethodId(
    r'getIconPadding',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconPadding = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconPadding()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>> getIconPadding() {
    return _getIconPadding(
            reference.pointer, _id_getIconPadding as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_getIconKeepUpright = _class.instanceMethodId(
    r'getIconKeepUpright',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconKeepUpright = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconKeepUpright()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JBoolean> getIconKeepUpright() {
    return _getIconKeepUpright(
            reference.pointer, _id_getIconKeepUpright as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_getIconOffset = _class.instanceMethodId(
    r'getIconOffset',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconOffset = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconOffset()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>> getIconOffset() {
    return _getIconOffset(
            reference.pointer, _id_getIconOffset as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_getIconAnchor = _class.instanceMethodId(
    r'getIconAnchor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconAnchor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconAnchor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getIconAnchor() {
    return _getIconAnchor(
            reference.pointer, _id_getIconAnchor as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getIconPitchAlignment = _class.instanceMethodId(
    r'getIconPitchAlignment',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconPitchAlignment = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconPitchAlignment()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getIconPitchAlignment() {
    return _getIconPitchAlignment(
            reference.pointer, _id_getIconPitchAlignment as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getTextPitchAlignment = _class.instanceMethodId(
    r'getTextPitchAlignment',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextPitchAlignment = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextPitchAlignment()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getTextPitchAlignment() {
    return _getTextPitchAlignment(
            reference.pointer, _id_getTextPitchAlignment as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getTextRotationAlignment = _class.instanceMethodId(
    r'getTextRotationAlignment',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextRotationAlignment = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextRotationAlignment()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getTextRotationAlignment() {
    return _getTextRotationAlignment(
            reference.pointer, _id_getTextRotationAlignment as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getTextField = _class.instanceMethodId(
    r'getTextField',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextField = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextField()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<formatted_.Formatted> getTextField() {
    return _getTextField(
            reference.pointer, _id_getTextField as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(
            formatted_.$FormattedType()));
  }

  static final _id_getTextFont = _class.instanceMethodId(
    r'getTextFont',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextFont = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextFont()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JArray<jni.JString>> getTextFont() {
    return _getTextFont(reference.pointer, _id_getTextFont as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JStringType())));
  }

  static final _id_getTextSize = _class.instanceMethodId(
    r'getTextSize',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextSize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextSize()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getTextSize() {
    return _getTextSize(reference.pointer, _id_getTextSize as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getTextMaxWidth = _class.instanceMethodId(
    r'getTextMaxWidth',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextMaxWidth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextMaxWidth()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getTextMaxWidth() {
    return _getTextMaxWidth(
            reference.pointer, _id_getTextMaxWidth as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getTextLineHeight = _class.instanceMethodId(
    r'getTextLineHeight',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextLineHeight = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextLineHeight()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getTextLineHeight() {
    return _getTextLineHeight(
            reference.pointer, _id_getTextLineHeight as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getTextLetterSpacing = _class.instanceMethodId(
    r'getTextLetterSpacing',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextLetterSpacing = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextLetterSpacing()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getTextLetterSpacing() {
    return _getTextLetterSpacing(
            reference.pointer, _id_getTextLetterSpacing as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getTextJustify = _class.instanceMethodId(
    r'getTextJustify',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextJustify = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextJustify()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getTextJustify() {
    return _getTextJustify(
            reference.pointer, _id_getTextJustify as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getTextRadialOffset = _class.instanceMethodId(
    r'getTextRadialOffset',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextRadialOffset = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextRadialOffset()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getTextRadialOffset() {
    return _getTextRadialOffset(
            reference.pointer, _id_getTextRadialOffset as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getTextVariableAnchor = _class.instanceMethodId(
    r'getTextVariableAnchor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextVariableAnchor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextVariableAnchor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JArray<jni.JString>>
      getTextVariableAnchor() {
    return _getTextVariableAnchor(
            reference.pointer, _id_getTextVariableAnchor as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JStringType())));
  }

  static final _id_getTextAnchor = _class.instanceMethodId(
    r'getTextAnchor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextAnchor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextAnchor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getTextAnchor() {
    return _getTextAnchor(
            reference.pointer, _id_getTextAnchor as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getTextMaxAngle = _class.instanceMethodId(
    r'getTextMaxAngle',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextMaxAngle = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextMaxAngle()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getTextMaxAngle() {
    return _getTextMaxAngle(
            reference.pointer, _id_getTextMaxAngle as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getTextWritingMode = _class.instanceMethodId(
    r'getTextWritingMode',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextWritingMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextWritingMode()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JArray<jni.JString>> getTextWritingMode() {
    return _getTextWritingMode(
            reference.pointer, _id_getTextWritingMode as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JStringType())));
  }

  static final _id_getTextRotate = _class.instanceMethodId(
    r'getTextRotate',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextRotate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextRotate()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getTextRotate() {
    return _getTextRotate(
            reference.pointer, _id_getTextRotate as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getTextPadding = _class.instanceMethodId(
    r'getTextPadding',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextPadding = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextPadding()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getTextPadding() {
    return _getTextPadding(
            reference.pointer, _id_getTextPadding as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getTextKeepUpright = _class.instanceMethodId(
    r'getTextKeepUpright',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextKeepUpright = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextKeepUpright()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JBoolean> getTextKeepUpright() {
    return _getTextKeepUpright(
            reference.pointer, _id_getTextKeepUpright as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_getTextTransform = _class.instanceMethodId(
    r'getTextTransform',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextTransform = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextTransform()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getTextTransform() {
    return _getTextTransform(
            reference.pointer, _id_getTextTransform as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getTextOffset = _class.instanceMethodId(
    r'getTextOffset',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextOffset = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextOffset()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>> getTextOffset() {
    return _getTextOffset(
            reference.pointer, _id_getTextOffset as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_getTextAllowOverlap = _class.instanceMethodId(
    r'getTextAllowOverlap',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextAllowOverlap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextAllowOverlap()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JBoolean> getTextAllowOverlap() {
    return _getTextAllowOverlap(
            reference.pointer, _id_getTextAllowOverlap as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_getTextIgnorePlacement = _class.instanceMethodId(
    r'getTextIgnorePlacement',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextIgnorePlacement = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextIgnorePlacement()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JBoolean> getTextIgnorePlacement() {
    return _getTextIgnorePlacement(
            reference.pointer, _id_getTextIgnorePlacement as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_getTextOptional = _class.instanceMethodId(
    r'getTextOptional',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextOptional = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextOptional()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JBoolean> getTextOptional() {
    return _getTextOptional(
            reference.pointer, _id_getTextOptional as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_getIconOpacity = _class.instanceMethodId(
    r'getIconOpacity',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconOpacity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconOpacity()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getIconOpacity() {
    return _getIconOpacity(
            reference.pointer, _id_getIconOpacity as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getIconOpacityTransition = _class.instanceMethodId(
    r'getIconOpacityTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getIconOpacityTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getIconOpacityTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getIconOpacityTransition() {
    return _getIconOpacityTransition(
            reference.pointer, _id_getIconOpacityTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setIconOpacityTransition = _class.instanceMethodId(
    r'setIconOpacityTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setIconOpacityTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setIconOpacityTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setIconOpacityTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setIconOpacityTransition(
            reference.pointer,
            _id_setIconOpacityTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getIconColor = _class.instanceMethodId(
    r'getIconColor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconColor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getIconColor() {
    return _getIconColor(
            reference.pointer, _id_getIconColor as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getIconColorAsInt = _class.instanceMethodId(
    r'getIconColorAsInt',
    r'()I',
  );

  static final _getIconColorAsInt = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getIconColorAsInt()`
  int getIconColorAsInt() {
    return _getIconColorAsInt(
            reference.pointer, _id_getIconColorAsInt as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getIconColorTransition = _class.instanceMethodId(
    r'getIconColorTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getIconColorTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getIconColorTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getIconColorTransition() {
    return _getIconColorTransition(
            reference.pointer, _id_getIconColorTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setIconColorTransition = _class.instanceMethodId(
    r'setIconColorTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setIconColorTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setIconColorTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setIconColorTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setIconColorTransition(
            reference.pointer,
            _id_setIconColorTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getIconHaloColor = _class.instanceMethodId(
    r'getIconHaloColor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconHaloColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconHaloColor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getIconHaloColor() {
    return _getIconHaloColor(
            reference.pointer, _id_getIconHaloColor as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getIconHaloColorAsInt = _class.instanceMethodId(
    r'getIconHaloColorAsInt',
    r'()I',
  );

  static final _getIconHaloColorAsInt = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getIconHaloColorAsInt()`
  int getIconHaloColorAsInt() {
    return _getIconHaloColorAsInt(
            reference.pointer, _id_getIconHaloColorAsInt as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getIconHaloColorTransition = _class.instanceMethodId(
    r'getIconHaloColorTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getIconHaloColorTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getIconHaloColorTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getIconHaloColorTransition() {
    return _getIconHaloColorTransition(reference.pointer,
            _id_getIconHaloColorTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setIconHaloColorTransition = _class.instanceMethodId(
    r'setIconHaloColorTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setIconHaloColorTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setIconHaloColorTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setIconHaloColorTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setIconHaloColorTransition(
            reference.pointer,
            _id_setIconHaloColorTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getIconHaloWidth = _class.instanceMethodId(
    r'getIconHaloWidth',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconHaloWidth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconHaloWidth()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getIconHaloWidth() {
    return _getIconHaloWidth(
            reference.pointer, _id_getIconHaloWidth as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getIconHaloWidthTransition = _class.instanceMethodId(
    r'getIconHaloWidthTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getIconHaloWidthTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getIconHaloWidthTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getIconHaloWidthTransition() {
    return _getIconHaloWidthTransition(reference.pointer,
            _id_getIconHaloWidthTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setIconHaloWidthTransition = _class.instanceMethodId(
    r'setIconHaloWidthTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setIconHaloWidthTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setIconHaloWidthTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setIconHaloWidthTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setIconHaloWidthTransition(
            reference.pointer,
            _id_setIconHaloWidthTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getIconHaloBlur = _class.instanceMethodId(
    r'getIconHaloBlur',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconHaloBlur = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconHaloBlur()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getIconHaloBlur() {
    return _getIconHaloBlur(
            reference.pointer, _id_getIconHaloBlur as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getIconHaloBlurTransition = _class.instanceMethodId(
    r'getIconHaloBlurTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getIconHaloBlurTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getIconHaloBlurTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getIconHaloBlurTransition() {
    return _getIconHaloBlurTransition(reference.pointer,
            _id_getIconHaloBlurTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setIconHaloBlurTransition = _class.instanceMethodId(
    r'setIconHaloBlurTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setIconHaloBlurTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setIconHaloBlurTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setIconHaloBlurTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setIconHaloBlurTransition(
            reference.pointer,
            _id_setIconHaloBlurTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getIconTranslate = _class.instanceMethodId(
    r'getIconTranslate',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconTranslate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconTranslate()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>> getIconTranslate() {
    return _getIconTranslate(
            reference.pointer, _id_getIconTranslate as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_getIconTranslateTransition = _class.instanceMethodId(
    r'getIconTranslateTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getIconTranslateTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getIconTranslateTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getIconTranslateTransition() {
    return _getIconTranslateTransition(reference.pointer,
            _id_getIconTranslateTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setIconTranslateTransition = _class.instanceMethodId(
    r'setIconTranslateTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setIconTranslateTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setIconTranslateTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setIconTranslateTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setIconTranslateTransition(
            reference.pointer,
            _id_setIconTranslateTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getIconTranslateAnchor = _class.instanceMethodId(
    r'getIconTranslateAnchor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getIconTranslateAnchor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getIconTranslateAnchor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getIconTranslateAnchor() {
    return _getIconTranslateAnchor(
            reference.pointer, _id_getIconTranslateAnchor as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getTextOpacity = _class.instanceMethodId(
    r'getTextOpacity',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextOpacity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextOpacity()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getTextOpacity() {
    return _getTextOpacity(
            reference.pointer, _id_getTextOpacity as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getTextOpacityTransition = _class.instanceMethodId(
    r'getTextOpacityTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getTextOpacityTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getTextOpacityTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getTextOpacityTransition() {
    return _getTextOpacityTransition(
            reference.pointer, _id_getTextOpacityTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setTextOpacityTransition = _class.instanceMethodId(
    r'setTextOpacityTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setTextOpacityTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setTextOpacityTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setTextOpacityTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setTextOpacityTransition(
            reference.pointer,
            _id_setTextOpacityTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getTextColor = _class.instanceMethodId(
    r'getTextColor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextColor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getTextColor() {
    return _getTextColor(
            reference.pointer, _id_getTextColor as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getTextColorAsInt = _class.instanceMethodId(
    r'getTextColorAsInt',
    r'()I',
  );

  static final _getTextColorAsInt = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getTextColorAsInt()`
  int getTextColorAsInt() {
    return _getTextColorAsInt(
            reference.pointer, _id_getTextColorAsInt as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getTextColorTransition = _class.instanceMethodId(
    r'getTextColorTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getTextColorTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getTextColorTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getTextColorTransition() {
    return _getTextColorTransition(
            reference.pointer, _id_getTextColorTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setTextColorTransition = _class.instanceMethodId(
    r'setTextColorTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setTextColorTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setTextColorTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setTextColorTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setTextColorTransition(
            reference.pointer,
            _id_setTextColorTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getTextHaloColor = _class.instanceMethodId(
    r'getTextHaloColor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextHaloColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextHaloColor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getTextHaloColor() {
    return _getTextHaloColor(
            reference.pointer, _id_getTextHaloColor as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getTextHaloColorAsInt = _class.instanceMethodId(
    r'getTextHaloColorAsInt',
    r'()I',
  );

  static final _getTextHaloColorAsInt = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getTextHaloColorAsInt()`
  int getTextHaloColorAsInt() {
    return _getTextHaloColorAsInt(
            reference.pointer, _id_getTextHaloColorAsInt as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getTextHaloColorTransition = _class.instanceMethodId(
    r'getTextHaloColorTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getTextHaloColorTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getTextHaloColorTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getTextHaloColorTransition() {
    return _getTextHaloColorTransition(reference.pointer,
            _id_getTextHaloColorTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setTextHaloColorTransition = _class.instanceMethodId(
    r'setTextHaloColorTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setTextHaloColorTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setTextHaloColorTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setTextHaloColorTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setTextHaloColorTransition(
            reference.pointer,
            _id_setTextHaloColorTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getTextHaloWidth = _class.instanceMethodId(
    r'getTextHaloWidth',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextHaloWidth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextHaloWidth()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getTextHaloWidth() {
    return _getTextHaloWidth(
            reference.pointer, _id_getTextHaloWidth as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getTextHaloWidthTransition = _class.instanceMethodId(
    r'getTextHaloWidthTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getTextHaloWidthTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getTextHaloWidthTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getTextHaloWidthTransition() {
    return _getTextHaloWidthTransition(reference.pointer,
            _id_getTextHaloWidthTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setTextHaloWidthTransition = _class.instanceMethodId(
    r'setTextHaloWidthTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setTextHaloWidthTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setTextHaloWidthTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setTextHaloWidthTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setTextHaloWidthTransition(
            reference.pointer,
            _id_setTextHaloWidthTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getTextHaloBlur = _class.instanceMethodId(
    r'getTextHaloBlur',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextHaloBlur = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextHaloBlur()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getTextHaloBlur() {
    return _getTextHaloBlur(
            reference.pointer, _id_getTextHaloBlur as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getTextHaloBlurTransition = _class.instanceMethodId(
    r'getTextHaloBlurTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getTextHaloBlurTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getTextHaloBlurTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getTextHaloBlurTransition() {
    return _getTextHaloBlurTransition(reference.pointer,
            _id_getTextHaloBlurTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setTextHaloBlurTransition = _class.instanceMethodId(
    r'setTextHaloBlurTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setTextHaloBlurTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setTextHaloBlurTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setTextHaloBlurTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setTextHaloBlurTransition(
            reference.pointer,
            _id_setTextHaloBlurTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getTextTranslate = _class.instanceMethodId(
    r'getTextTranslate',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextTranslate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextTranslate()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>> getTextTranslate() {
    return _getTextTranslate(
            reference.pointer, _id_getTextTranslate as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_getTextTranslateTransition = _class.instanceMethodId(
    r'getTextTranslateTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getTextTranslateTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getTextTranslateTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getTextTranslateTransition() {
    return _getTextTranslateTransition(reference.pointer,
            _id_getTextTranslateTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setTextTranslateTransition = _class.instanceMethodId(
    r'setTextTranslateTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setTextTranslateTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setTextTranslateTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setTextTranslateTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setTextTranslateTransition(
            reference.pointer,
            _id_setTextTranslateTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getTextTranslateAnchor = _class.instanceMethodId(
    r'getTextTranslateAnchor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getTextTranslateAnchor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getTextTranslateAnchor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getTextTranslateAnchor() {
    return _getTextTranslateAnchor(
            reference.pointer, _id_getTextTranslateAnchor as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_finalize = _class.instanceMethodId(
    r'finalize',
    r'()V',
  );

  static final _finalize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected native void finalize()`
  void finalize() {
    _finalize(reference.pointer, _id_finalize as jni.JMethodIDPtr).check();
  }
}

final class $SymbolLayerType extends jni.JObjType<SymbolLayer> {
  const $SymbolLayerType();

  @override
  String get signature => r'Lorg/maplibre/android/style/layers/SymbolLayer;';

  @override
  SymbolLayer fromReference(jni.JReference reference) =>
      SymbolLayer.fromReference(reference);

  @override
  jni.JObjType get superType => const layer_.$LayerType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($SymbolLayerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($SymbolLayerType) && other is $SymbolLayerType;
  }
}
