// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'Layer.dart' as layer_;

import 'PropertyValue.dart' as propertyvalue_;

import 'TransitionOptions.dart' as transitionoptions_;

/// from: `org.maplibre.android.style.layers.CircleLayer`
class CircleLayer extends layer_.Layer {
  @override
  late final jni.JObjType<CircleLayer> $type = type;

  CircleLayer.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/style/layers/CircleLayer');

  /// The type which includes information such as the signature of this class.
  static const type = $CircleLayerType();
  static final _id_new2 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CircleLayer.new2(
    jni.JString string,
    jni.JString string1,
  ) {
    return CircleLayer.fromReference(_new2(
            _class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .reference);
  }

  static final _id_initialize = _class.instanceMethodId(
    r'initialize',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _initialize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `protected native void initialize(java.lang.String string, java.lang.String string1)`
  void initialize(
    jni.JString string,
    jni.JString string1,
  ) {
    _initialize(reference.pointer, _id_initialize as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_setSourceLayer = _class.instanceMethodId(
    r'setSourceLayer',
    r'(Ljava/lang/String;)V',
  );

  static final _setSourceLayer = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setSourceLayer(java.lang.String string)`
  void setSourceLayer(
    jni.JString string,
  ) {
    _setSourceLayer(reference.pointer, _id_setSourceLayer as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_withSourceLayer = _class.instanceMethodId(
    r'withSourceLayer',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/CircleLayer;',
  );

  static final _withSourceLayer = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.style.layers.CircleLayer withSourceLayer(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  CircleLayer withSourceLayer(
    jni.JString string,
  ) {
    return _withSourceLayer(reference.pointer,
            _id_withSourceLayer as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $CircleLayerType());
  }

  static final _id_getSourceId = _class.instanceMethodId(
    r'getSourceId',
    r'()Ljava/lang/String;',
  );

  static final _getSourceId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getSourceId()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSourceId() {
    return _getSourceId(reference.pointer, _id_getSourceId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSourceLayer = _class.instanceMethodId(
    r'getSourceLayer',
    r'()Ljava/lang/String;',
  );

  static final _getSourceLayer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getSourceLayer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSourceLayer() {
    return _getSourceLayer(
            reference.pointer, _id_getSourceLayer as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setFilter = _class.instanceMethodId(
    r'setFilter',
    r'(Lorg/maplibre/android/style/expressions/Expression;)V',
  );

  static final _setFilter = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setFilter(org.maplibre.android.style.expressions.Expression expression)`
  void setFilter(
    jni.JObject expression,
  ) {
    _setFilter(reference.pointer, _id_setFilter as jni.JMethodIDPtr,
            expression.reference.pointer)
        .check();
  }

  static final _id_withFilter = _class.instanceMethodId(
    r'withFilter',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/CircleLayer;',
  );

  static final _withFilter = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.style.layers.CircleLayer withFilter(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  CircleLayer withFilter(
    jni.JObject expression,
  ) {
    return _withFilter(reference.pointer, _id_withFilter as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $CircleLayerType());
  }

  static final _id_getFilter = _class.instanceMethodId(
    r'getFilter',
    r'()Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _getFilter = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.expressions.Expression getFilter()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFilter() {
    return _getFilter(reference.pointer, _id_getFilter as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_withProperties = _class.instanceMethodId(
    r'withProperties',
    r'([Lorg/maplibre/android/style/layers/PropertyValue;)Lorg/maplibre/android/style/layers/CircleLayer;',
  );

  static final _withProperties = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.style.layers.CircleLayer withProperties(java.lang.Object[] propertyValues)`
  /// The returned object must be released after use, by calling the [release] method.
  CircleLayer withProperties(
    jni.JArray<propertyvalue_.PropertyValue<jni.JObject>> propertyValues,
  ) {
    return _withProperties(
            reference.pointer,
            _id_withProperties as jni.JMethodIDPtr,
            propertyValues.reference.pointer)
        .object(const $CircleLayerType());
  }

  static final _id_getCircleSortKey = _class.instanceMethodId(
    r'getCircleSortKey',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleSortKey = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleSortKey()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getCircleSortKey() {
    return _getCircleSortKey(
            reference.pointer, _id_getCircleSortKey as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getCircleRadius = _class.instanceMethodId(
    r'getCircleRadius',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleRadius = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleRadius()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getCircleRadius() {
    return _getCircleRadius(
            reference.pointer, _id_getCircleRadius as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getCircleRadiusTransition = _class.instanceMethodId(
    r'getCircleRadiusTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getCircleRadiusTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getCircleRadiusTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getCircleRadiusTransition() {
    return _getCircleRadiusTransition(reference.pointer,
            _id_getCircleRadiusTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setCircleRadiusTransition = _class.instanceMethodId(
    r'setCircleRadiusTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setCircleRadiusTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setCircleRadiusTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setCircleRadiusTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setCircleRadiusTransition(
            reference.pointer,
            _id_setCircleRadiusTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getCircleColor = _class.instanceMethodId(
    r'getCircleColor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleColor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getCircleColor() {
    return _getCircleColor(
            reference.pointer, _id_getCircleColor as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getCircleColorAsInt = _class.instanceMethodId(
    r'getCircleColorAsInt',
    r'()I',
  );

  static final _getCircleColorAsInt = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getCircleColorAsInt()`
  int getCircleColorAsInt() {
    return _getCircleColorAsInt(
            reference.pointer, _id_getCircleColorAsInt as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getCircleColorTransition = _class.instanceMethodId(
    r'getCircleColorTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getCircleColorTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getCircleColorTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getCircleColorTransition() {
    return _getCircleColorTransition(
            reference.pointer, _id_getCircleColorTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setCircleColorTransition = _class.instanceMethodId(
    r'setCircleColorTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setCircleColorTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setCircleColorTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setCircleColorTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setCircleColorTransition(
            reference.pointer,
            _id_setCircleColorTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getCircleBlur = _class.instanceMethodId(
    r'getCircleBlur',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleBlur = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleBlur()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getCircleBlur() {
    return _getCircleBlur(
            reference.pointer, _id_getCircleBlur as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getCircleBlurTransition = _class.instanceMethodId(
    r'getCircleBlurTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getCircleBlurTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getCircleBlurTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getCircleBlurTransition() {
    return _getCircleBlurTransition(
            reference.pointer, _id_getCircleBlurTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setCircleBlurTransition = _class.instanceMethodId(
    r'setCircleBlurTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setCircleBlurTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setCircleBlurTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setCircleBlurTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setCircleBlurTransition(
            reference.pointer,
            _id_setCircleBlurTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getCircleOpacity = _class.instanceMethodId(
    r'getCircleOpacity',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleOpacity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleOpacity()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getCircleOpacity() {
    return _getCircleOpacity(
            reference.pointer, _id_getCircleOpacity as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getCircleOpacityTransition = _class.instanceMethodId(
    r'getCircleOpacityTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getCircleOpacityTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getCircleOpacityTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getCircleOpacityTransition() {
    return _getCircleOpacityTransition(reference.pointer,
            _id_getCircleOpacityTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setCircleOpacityTransition = _class.instanceMethodId(
    r'setCircleOpacityTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setCircleOpacityTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setCircleOpacityTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setCircleOpacityTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setCircleOpacityTransition(
            reference.pointer,
            _id_setCircleOpacityTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getCircleTranslate = _class.instanceMethodId(
    r'getCircleTranslate',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleTranslate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleTranslate()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>> getCircleTranslate() {
    return _getCircleTranslate(
            reference.pointer, _id_getCircleTranslate as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_getCircleTranslateTransition = _class.instanceMethodId(
    r'getCircleTranslateTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getCircleTranslateTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getCircleTranslateTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getCircleTranslateTransition() {
    return _getCircleTranslateTransition(reference.pointer,
            _id_getCircleTranslateTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setCircleTranslateTransition = _class.instanceMethodId(
    r'setCircleTranslateTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setCircleTranslateTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setCircleTranslateTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setCircleTranslateTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setCircleTranslateTransition(
            reference.pointer,
            _id_setCircleTranslateTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getCircleTranslateAnchor = _class.instanceMethodId(
    r'getCircleTranslateAnchor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleTranslateAnchor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleTranslateAnchor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getCircleTranslateAnchor() {
    return _getCircleTranslateAnchor(
            reference.pointer, _id_getCircleTranslateAnchor as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getCirclePitchScale = _class.instanceMethodId(
    r'getCirclePitchScale',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCirclePitchScale = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCirclePitchScale()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getCirclePitchScale() {
    return _getCirclePitchScale(
            reference.pointer, _id_getCirclePitchScale as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getCirclePitchAlignment = _class.instanceMethodId(
    r'getCirclePitchAlignment',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCirclePitchAlignment = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCirclePitchAlignment()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getCirclePitchAlignment() {
    return _getCirclePitchAlignment(
            reference.pointer, _id_getCirclePitchAlignment as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getCircleStrokeWidth = _class.instanceMethodId(
    r'getCircleStrokeWidth',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleStrokeWidth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleStrokeWidth()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getCircleStrokeWidth() {
    return _getCircleStrokeWidth(
            reference.pointer, _id_getCircleStrokeWidth as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getCircleStrokeWidthTransition = _class.instanceMethodId(
    r'getCircleStrokeWidthTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getCircleStrokeWidthTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getCircleStrokeWidthTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getCircleStrokeWidthTransition() {
    return _getCircleStrokeWidthTransition(reference.pointer,
            _id_getCircleStrokeWidthTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setCircleStrokeWidthTransition = _class.instanceMethodId(
    r'setCircleStrokeWidthTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setCircleStrokeWidthTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setCircleStrokeWidthTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setCircleStrokeWidthTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setCircleStrokeWidthTransition(
            reference.pointer,
            _id_setCircleStrokeWidthTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getCircleStrokeColor = _class.instanceMethodId(
    r'getCircleStrokeColor',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleStrokeColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleStrokeColor()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getCircleStrokeColor() {
    return _getCircleStrokeColor(
            reference.pointer, _id_getCircleStrokeColor as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getCircleStrokeColorAsInt = _class.instanceMethodId(
    r'getCircleStrokeColorAsInt',
    r'()I',
  );

  static final _getCircleStrokeColorAsInt = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getCircleStrokeColorAsInt()`
  int getCircleStrokeColorAsInt() {
    return _getCircleStrokeColorAsInt(reference.pointer,
            _id_getCircleStrokeColorAsInt as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getCircleStrokeColorTransition = _class.instanceMethodId(
    r'getCircleStrokeColorTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getCircleStrokeColorTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getCircleStrokeColorTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getCircleStrokeColorTransition() {
    return _getCircleStrokeColorTransition(reference.pointer,
            _id_getCircleStrokeColorTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setCircleStrokeColorTransition = _class.instanceMethodId(
    r'setCircleStrokeColorTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setCircleStrokeColorTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setCircleStrokeColorTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setCircleStrokeColorTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setCircleStrokeColorTransition(
            reference.pointer,
            _id_setCircleStrokeColorTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_getCircleStrokeOpacity = _class.instanceMethodId(
    r'getCircleStrokeOpacity',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getCircleStrokeOpacity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getCircleStrokeOpacity()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JFloat> getCircleStrokeOpacity() {
    return _getCircleStrokeOpacity(
            reference.pointer, _id_getCircleStrokeOpacity as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_getCircleStrokeOpacityTransition = _class.instanceMethodId(
    r'getCircleStrokeOpacityTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getCircleStrokeOpacityTransition =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getCircleStrokeOpacityTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getCircleStrokeOpacityTransition() {
    return _getCircleStrokeOpacityTransition(reference.pointer,
            _id_getCircleStrokeOpacityTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setCircleStrokeOpacityTransition = _class.instanceMethodId(
    r'setCircleStrokeOpacityTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setCircleStrokeOpacityTransition =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void setCircleStrokeOpacityTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setCircleStrokeOpacityTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setCircleStrokeOpacityTransition(
            reference.pointer,
            _id_setCircleStrokeOpacityTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_finalize = _class.instanceMethodId(
    r'finalize',
    r'()V',
  );

  static final _finalize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected native void finalize()`
  void finalize() {
    _finalize(reference.pointer, _id_finalize as jni.JMethodIDPtr).check();
  }
}

final class $CircleLayerType extends jni.JObjType<CircleLayer> {
  const $CircleLayerType();

  @override
  String get signature => r'Lorg/maplibre/android/style/layers/CircleLayer;';

  @override
  CircleLayer fromReference(jni.JReference reference) =>
      CircleLayer.fromReference(reference);

  @override
  jni.JObjType get superType => const layer_.$LayerType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($CircleLayerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CircleLayerType) && other is $CircleLayerType;
  }
}
