// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../types/Formatted.dart' as formatted_;

import 'PropertyValue.dart' as propertyvalue_;

/// from: `org.maplibre.android.style.layers.PropertyFactory`
class PropertyFactory extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PropertyFactory> $type;

  @_$jni.internal
  PropertyFactory.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/style/layers/PropertyFactory');

  /// The type which includes information such as the signature of this class.
  static const type = $PropertyFactory$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory PropertyFactory() {
    return PropertyFactory.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_visibility = _class.staticMethodId(
    r'visibility',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _visibility = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue visibility(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> visibility(
    _$jni.JString string,
  ) {
    return _visibility(_class.reference.pointer,
            _id_visibility as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_fillAntialias = _class.staticMethodId(
    r'fillAntialias',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillAntialias = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillAntialias(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JBoolean> fillAntialias(
    _$jni.JBoolean boolean,
  ) {
    return _fillAntialias(_class.reference.pointer,
            _id_fillAntialias as _$jni.JMethodIDPtr, boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JBooleanType()));
  }

  static final _id_fillAntialias$1 = _class.staticMethodId(
    r'fillAntialias',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillAntialias$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillAntialias(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> fillAntialias$1(
    _$jni.JObject expression,
  ) {
    return _fillAntialias$1(
            _class.reference.pointer,
            _id_fillAntialias$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_fillOpacity = _class.staticMethodId(
    r'fillOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillOpacity = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> fillOpacity(
    _$jni.JFloat float,
  ) {
    return _fillOpacity(_class.reference.pointer,
            _id_fillOpacity as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_fillOpacity$1 = _class.staticMethodId(
    r'fillOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillOpacity$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> fillOpacity$1(
    _$jni.JObject expression,
  ) {
    return _fillOpacity$1(
            _class.reference.pointer,
            _id_fillOpacity$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_fillColor = _class.staticMethodId(
    r'fillColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillColor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> fillColor(
    int i,
  ) {
    return _fillColor(
            _class.reference.pointer, _id_fillColor as _$jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_fillColor$1 = _class.staticMethodId(
    r'fillColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillColor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> fillColor$1(
    _$jni.JString string,
  ) {
    return _fillColor$1(_class.reference.pointer,
            _id_fillColor$1 as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_fillColor$2 = _class.staticMethodId(
    r'fillColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillColor$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> fillColor$2(
    _$jni.JObject expression,
  ) {
    return _fillColor$2(_class.reference.pointer,
            _id_fillColor$2 as _$jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_fillOutlineColor = _class.staticMethodId(
    r'fillOutlineColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillOutlineColor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillOutlineColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> fillOutlineColor(
    int i,
  ) {
    return _fillOutlineColor(_class.reference.pointer,
            _id_fillOutlineColor as _$jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_fillOutlineColor$1 = _class.staticMethodId(
    r'fillOutlineColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillOutlineColor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillOutlineColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> fillOutlineColor$1(
    _$jni.JString string,
  ) {
    return _fillOutlineColor$1(
            _class.reference.pointer,
            _id_fillOutlineColor$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_fillOutlineColor$2 = _class.staticMethodId(
    r'fillOutlineColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillOutlineColor$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillOutlineColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> fillOutlineColor$2(
    _$jni.JObject expression,
  ) {
    return _fillOutlineColor$2(
            _class.reference.pointer,
            _id_fillOutlineColor$2 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_fillTranslate = _class.staticMethodId(
    r'fillTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillTranslate = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JArray<_$jni.JFloat>> fillTranslate(
    _$jni.JArray<_$jni.JFloat> floats,
  ) {
    return _fillTranslate(_class.reference.pointer,
            _id_fillTranslate as _$jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(
            _$jni.JArrayType(_$jni.JFloatType())));
  }

  static final _id_fillTranslate$1 = _class.staticMethodId(
    r'fillTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillTranslate$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> fillTranslate$1(
    _$jni.JObject expression,
  ) {
    return _fillTranslate$1(
            _class.reference.pointer,
            _id_fillTranslate$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_fillTranslateAnchor = _class.staticMethodId(
    r'fillTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillTranslateAnchor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> fillTranslateAnchor(
    _$jni.JString string,
  ) {
    return _fillTranslateAnchor(
            _class.reference.pointer,
            _id_fillTranslateAnchor as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_fillTranslateAnchor$1 = _class.staticMethodId(
    r'fillTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillTranslateAnchor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> fillTranslateAnchor$1(
    _$jni.JObject expression,
  ) {
    return _fillTranslateAnchor$1(
            _class.reference.pointer,
            _id_fillTranslateAnchor$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_fillPattern = _class.staticMethodId(
    r'fillPattern',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillPattern = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillPattern(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> fillPattern(
    _$jni.JString string,
  ) {
    return _fillPattern(_class.reference.pointer,
            _id_fillPattern as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_fillPattern$1 = _class.staticMethodId(
    r'fillPattern',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillPattern$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillPattern(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> fillPattern$1(
    _$jni.JObject expression,
  ) {
    return _fillPattern$1(
            _class.reference.pointer,
            _id_fillPattern$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_lineOpacity = _class.staticMethodId(
    r'lineOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineOpacity = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> lineOpacity(
    _$jni.JFloat float,
  ) {
    return _lineOpacity(_class.reference.pointer,
            _id_lineOpacity as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_lineOpacity$1 = _class.staticMethodId(
    r'lineOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineOpacity$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> lineOpacity$1(
    _$jni.JObject expression,
  ) {
    return _lineOpacity$1(
            _class.reference.pointer,
            _id_lineOpacity$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_lineColor = _class.staticMethodId(
    r'lineColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineColor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> lineColor(
    int i,
  ) {
    return _lineColor(
            _class.reference.pointer, _id_lineColor as _$jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_lineColor$1 = _class.staticMethodId(
    r'lineColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineColor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> lineColor$1(
    _$jni.JString string,
  ) {
    return _lineColor$1(_class.reference.pointer,
            _id_lineColor$1 as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_lineColor$2 = _class.staticMethodId(
    r'lineColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineColor$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> lineColor$2(
    _$jni.JObject expression,
  ) {
    return _lineColor$2(_class.reference.pointer,
            _id_lineColor$2 as _$jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_lineTranslate = _class.staticMethodId(
    r'lineTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineTranslate = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JArray<_$jni.JFloat>> lineTranslate(
    _$jni.JArray<_$jni.JFloat> floats,
  ) {
    return _lineTranslate(_class.reference.pointer,
            _id_lineTranslate as _$jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(
            _$jni.JArrayType(_$jni.JFloatType())));
  }

  static final _id_lineTranslate$1 = _class.staticMethodId(
    r'lineTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineTranslate$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> lineTranslate$1(
    _$jni.JObject expression,
  ) {
    return _lineTranslate$1(
            _class.reference.pointer,
            _id_lineTranslate$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_lineTranslateAnchor = _class.staticMethodId(
    r'lineTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineTranslateAnchor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> lineTranslateAnchor(
    _$jni.JString string,
  ) {
    return _lineTranslateAnchor(
            _class.reference.pointer,
            _id_lineTranslateAnchor as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_lineTranslateAnchor$1 = _class.staticMethodId(
    r'lineTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineTranslateAnchor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> lineTranslateAnchor$1(
    _$jni.JObject expression,
  ) {
    return _lineTranslateAnchor$1(
            _class.reference.pointer,
            _id_lineTranslateAnchor$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_lineWidth = _class.staticMethodId(
    r'lineWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineWidth = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> lineWidth(
    _$jni.JFloat float,
  ) {
    return _lineWidth(_class.reference.pointer,
            _id_lineWidth as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_lineWidth$1 = _class.staticMethodId(
    r'lineWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineWidth$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> lineWidth$1(
    _$jni.JObject expression,
  ) {
    return _lineWidth$1(_class.reference.pointer,
            _id_lineWidth$1 as _$jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_lineGapWidth = _class.staticMethodId(
    r'lineGapWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineGapWidth = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineGapWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> lineGapWidth(
    _$jni.JFloat float,
  ) {
    return _lineGapWidth(_class.reference.pointer,
            _id_lineGapWidth as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_lineGapWidth$1 = _class.staticMethodId(
    r'lineGapWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineGapWidth$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineGapWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> lineGapWidth$1(
    _$jni.JObject expression,
  ) {
    return _lineGapWidth$1(
            _class.reference.pointer,
            _id_lineGapWidth$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_lineOffset = _class.staticMethodId(
    r'lineOffset',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineOffset = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineOffset(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> lineOffset(
    _$jni.JFloat float,
  ) {
    return _lineOffset(_class.reference.pointer,
            _id_lineOffset as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_lineOffset$1 = _class.staticMethodId(
    r'lineOffset',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineOffset$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineOffset(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> lineOffset$1(
    _$jni.JObject expression,
  ) {
    return _lineOffset$1(
            _class.reference.pointer,
            _id_lineOffset$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_lineBlur = _class.staticMethodId(
    r'lineBlur',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineBlur = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineBlur(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> lineBlur(
    _$jni.JFloat float,
  ) {
    return _lineBlur(_class.reference.pointer,
            _id_lineBlur as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_lineBlur$1 = _class.staticMethodId(
    r'lineBlur',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineBlur$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineBlur(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> lineBlur$1(
    _$jni.JObject expression,
  ) {
    return _lineBlur$1(_class.reference.pointer,
            _id_lineBlur$1 as _$jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_lineDasharray = _class.staticMethodId(
    r'lineDasharray',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineDasharray = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineDasharray(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JArray<_$jni.JFloat>> lineDasharray(
    _$jni.JArray<_$jni.JFloat> floats,
  ) {
    return _lineDasharray(_class.reference.pointer,
            _id_lineDasharray as _$jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(
            _$jni.JArrayType(_$jni.JFloatType())));
  }

  static final _id_lineDasharray$1 = _class.staticMethodId(
    r'lineDasharray',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineDasharray$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineDasharray(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> lineDasharray$1(
    _$jni.JObject expression,
  ) {
    return _lineDasharray$1(
            _class.reference.pointer,
            _id_lineDasharray$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_linePattern = _class.staticMethodId(
    r'linePattern',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _linePattern = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue linePattern(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> linePattern(
    _$jni.JString string,
  ) {
    return _linePattern(_class.reference.pointer,
            _id_linePattern as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_linePattern$1 = _class.staticMethodId(
    r'linePattern',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _linePattern$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue linePattern(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> linePattern$1(
    _$jni.JObject expression,
  ) {
    return _linePattern$1(
            _class.reference.pointer,
            _id_linePattern$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_lineGradient = _class.staticMethodId(
    r'lineGradient',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineGradient = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineGradient(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> lineGradient(
    int i,
  ) {
    return _lineGradient(
            _class.reference.pointer, _id_lineGradient as _$jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_lineGradient$1 = _class.staticMethodId(
    r'lineGradient',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineGradient$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineGradient(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> lineGradient$1(
    _$jni.JString string,
  ) {
    return _lineGradient$1(_class.reference.pointer,
            _id_lineGradient$1 as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_lineGradient$2 = _class.staticMethodId(
    r'lineGradient',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineGradient$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineGradient(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> lineGradient$2(
    _$jni.JObject expression,
  ) {
    return _lineGradient$2(
            _class.reference.pointer,
            _id_lineGradient$2 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconOpacity = _class.staticMethodId(
    r'iconOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOpacity = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> iconOpacity(
    _$jni.JFloat float,
  ) {
    return _iconOpacity(_class.reference.pointer,
            _id_iconOpacity as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_iconOpacity$1 = _class.staticMethodId(
    r'iconOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOpacity$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconOpacity$1(
    _$jni.JObject expression,
  ) {
    return _iconOpacity$1(
            _class.reference.pointer,
            _id_iconOpacity$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconColor = _class.staticMethodId(
    r'iconColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconColor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> iconColor(
    int i,
  ) {
    return _iconColor(
            _class.reference.pointer, _id_iconColor as _$jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_iconColor$1 = _class.staticMethodId(
    r'iconColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconColor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> iconColor$1(
    _$jni.JString string,
  ) {
    return _iconColor$1(_class.reference.pointer,
            _id_iconColor$1 as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_iconColor$2 = _class.staticMethodId(
    r'iconColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconColor$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconColor$2(
    _$jni.JObject expression,
  ) {
    return _iconColor$2(_class.reference.pointer,
            _id_iconColor$2 as _$jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconHaloColor = _class.staticMethodId(
    r'iconHaloColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloColor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> iconHaloColor(
    int i,
  ) {
    return _iconHaloColor(_class.reference.pointer,
            _id_iconHaloColor as _$jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_iconHaloColor$1 = _class.staticMethodId(
    r'iconHaloColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloColor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> iconHaloColor$1(
    _$jni.JString string,
  ) {
    return _iconHaloColor$1(_class.reference.pointer,
            _id_iconHaloColor$1 as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_iconHaloColor$2 = _class.staticMethodId(
    r'iconHaloColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloColor$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconHaloColor$2(
    _$jni.JObject expression,
  ) {
    return _iconHaloColor$2(
            _class.reference.pointer,
            _id_iconHaloColor$2 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconHaloWidth = _class.staticMethodId(
    r'iconHaloWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloWidth = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> iconHaloWidth(
    _$jni.JFloat float,
  ) {
    return _iconHaloWidth(_class.reference.pointer,
            _id_iconHaloWidth as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_iconHaloWidth$1 = _class.staticMethodId(
    r'iconHaloWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloWidth$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconHaloWidth$1(
    _$jni.JObject expression,
  ) {
    return _iconHaloWidth$1(
            _class.reference.pointer,
            _id_iconHaloWidth$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconHaloBlur = _class.staticMethodId(
    r'iconHaloBlur',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloBlur = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloBlur(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> iconHaloBlur(
    _$jni.JFloat float,
  ) {
    return _iconHaloBlur(_class.reference.pointer,
            _id_iconHaloBlur as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_iconHaloBlur$1 = _class.staticMethodId(
    r'iconHaloBlur',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloBlur$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloBlur(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconHaloBlur$1(
    _$jni.JObject expression,
  ) {
    return _iconHaloBlur$1(
            _class.reference.pointer,
            _id_iconHaloBlur$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconTranslate = _class.staticMethodId(
    r'iconTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTranslate = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JArray<_$jni.JFloat>> iconTranslate(
    _$jni.JArray<_$jni.JFloat> floats,
  ) {
    return _iconTranslate(_class.reference.pointer,
            _id_iconTranslate as _$jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(
            _$jni.JArrayType(_$jni.JFloatType())));
  }

  static final _id_iconTranslate$1 = _class.staticMethodId(
    r'iconTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTranslate$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconTranslate$1(
    _$jni.JObject expression,
  ) {
    return _iconTranslate$1(
            _class.reference.pointer,
            _id_iconTranslate$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconTranslateAnchor = _class.staticMethodId(
    r'iconTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTranslateAnchor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> iconTranslateAnchor(
    _$jni.JString string,
  ) {
    return _iconTranslateAnchor(
            _class.reference.pointer,
            _id_iconTranslateAnchor as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_iconTranslateAnchor$1 = _class.staticMethodId(
    r'iconTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTranslateAnchor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconTranslateAnchor$1(
    _$jni.JObject expression,
  ) {
    return _iconTranslateAnchor$1(
            _class.reference.pointer,
            _id_iconTranslateAnchor$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textOpacity = _class.staticMethodId(
    r'textOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOpacity = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> textOpacity(
    _$jni.JFloat float,
  ) {
    return _textOpacity(_class.reference.pointer,
            _id_textOpacity as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_textOpacity$1 = _class.staticMethodId(
    r'textOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOpacity$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textOpacity$1(
    _$jni.JObject expression,
  ) {
    return _textOpacity$1(
            _class.reference.pointer,
            _id_textOpacity$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textColor = _class.staticMethodId(
    r'textColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textColor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> textColor(
    int i,
  ) {
    return _textColor(
            _class.reference.pointer, _id_textColor as _$jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_textColor$1 = _class.staticMethodId(
    r'textColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textColor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> textColor$1(
    _$jni.JString string,
  ) {
    return _textColor$1(_class.reference.pointer,
            _id_textColor$1 as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_textColor$2 = _class.staticMethodId(
    r'textColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textColor$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textColor$2(
    _$jni.JObject expression,
  ) {
    return _textColor$2(_class.reference.pointer,
            _id_textColor$2 as _$jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textHaloColor = _class.staticMethodId(
    r'textHaloColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloColor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> textHaloColor(
    int i,
  ) {
    return _textHaloColor(_class.reference.pointer,
            _id_textHaloColor as _$jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_textHaloColor$1 = _class.staticMethodId(
    r'textHaloColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloColor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> textHaloColor$1(
    _$jni.JString string,
  ) {
    return _textHaloColor$1(_class.reference.pointer,
            _id_textHaloColor$1 as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_textHaloColor$2 = _class.staticMethodId(
    r'textHaloColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloColor$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textHaloColor$2(
    _$jni.JObject expression,
  ) {
    return _textHaloColor$2(
            _class.reference.pointer,
            _id_textHaloColor$2 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textHaloWidth = _class.staticMethodId(
    r'textHaloWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloWidth = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> textHaloWidth(
    _$jni.JFloat float,
  ) {
    return _textHaloWidth(_class.reference.pointer,
            _id_textHaloWidth as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_textHaloWidth$1 = _class.staticMethodId(
    r'textHaloWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloWidth$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textHaloWidth$1(
    _$jni.JObject expression,
  ) {
    return _textHaloWidth$1(
            _class.reference.pointer,
            _id_textHaloWidth$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textHaloBlur = _class.staticMethodId(
    r'textHaloBlur',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloBlur = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloBlur(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> textHaloBlur(
    _$jni.JFloat float,
  ) {
    return _textHaloBlur(_class.reference.pointer,
            _id_textHaloBlur as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_textHaloBlur$1 = _class.staticMethodId(
    r'textHaloBlur',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloBlur$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloBlur(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textHaloBlur$1(
    _$jni.JObject expression,
  ) {
    return _textHaloBlur$1(
            _class.reference.pointer,
            _id_textHaloBlur$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textTranslate = _class.staticMethodId(
    r'textTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTranslate = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JArray<_$jni.JFloat>> textTranslate(
    _$jni.JArray<_$jni.JFloat> floats,
  ) {
    return _textTranslate(_class.reference.pointer,
            _id_textTranslate as _$jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(
            _$jni.JArrayType(_$jni.JFloatType())));
  }

  static final _id_textTranslate$1 = _class.staticMethodId(
    r'textTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTranslate$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textTranslate$1(
    _$jni.JObject expression,
  ) {
    return _textTranslate$1(
            _class.reference.pointer,
            _id_textTranslate$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textTranslateAnchor = _class.staticMethodId(
    r'textTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTranslateAnchor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> textTranslateAnchor(
    _$jni.JString string,
  ) {
    return _textTranslateAnchor(
            _class.reference.pointer,
            _id_textTranslateAnchor as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_textTranslateAnchor$1 = _class.staticMethodId(
    r'textTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTranslateAnchor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textTranslateAnchor$1(
    _$jni.JObject expression,
  ) {
    return _textTranslateAnchor$1(
            _class.reference.pointer,
            _id_textTranslateAnchor$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_circleRadius = _class.staticMethodId(
    r'circleRadius',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleRadius = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleRadius(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> circleRadius(
    _$jni.JFloat float,
  ) {
    return _circleRadius(_class.reference.pointer,
            _id_circleRadius as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_circleRadius$1 = _class.staticMethodId(
    r'circleRadius',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleRadius$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleRadius(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> circleRadius$1(
    _$jni.JObject expression,
  ) {
    return _circleRadius$1(
            _class.reference.pointer,
            _id_circleRadius$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_circleColor = _class.staticMethodId(
    r'circleColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleColor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> circleColor(
    int i,
  ) {
    return _circleColor(
            _class.reference.pointer, _id_circleColor as _$jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_circleColor$1 = _class.staticMethodId(
    r'circleColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleColor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> circleColor$1(
    _$jni.JString string,
  ) {
    return _circleColor$1(_class.reference.pointer,
            _id_circleColor$1 as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_circleColor$2 = _class.staticMethodId(
    r'circleColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleColor$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> circleColor$2(
    _$jni.JObject expression,
  ) {
    return _circleColor$2(
            _class.reference.pointer,
            _id_circleColor$2 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_circleBlur = _class.staticMethodId(
    r'circleBlur',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleBlur = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleBlur(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> circleBlur(
    _$jni.JFloat float,
  ) {
    return _circleBlur(_class.reference.pointer,
            _id_circleBlur as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_circleBlur$1 = _class.staticMethodId(
    r'circleBlur',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleBlur$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleBlur(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> circleBlur$1(
    _$jni.JObject expression,
  ) {
    return _circleBlur$1(
            _class.reference.pointer,
            _id_circleBlur$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_circleOpacity = _class.staticMethodId(
    r'circleOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleOpacity = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> circleOpacity(
    _$jni.JFloat float,
  ) {
    return _circleOpacity(_class.reference.pointer,
            _id_circleOpacity as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_circleOpacity$1 = _class.staticMethodId(
    r'circleOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleOpacity$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> circleOpacity$1(
    _$jni.JObject expression,
  ) {
    return _circleOpacity$1(
            _class.reference.pointer,
            _id_circleOpacity$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_circleTranslate = _class.staticMethodId(
    r'circleTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleTranslate = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JArray<_$jni.JFloat>>
      circleTranslate(
    _$jni.JArray<_$jni.JFloat> floats,
  ) {
    return _circleTranslate(_class.reference.pointer,
            _id_circleTranslate as _$jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(
            _$jni.JArrayType(_$jni.JFloatType())));
  }

  static final _id_circleTranslate$1 = _class.staticMethodId(
    r'circleTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleTranslate$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> circleTranslate$1(
    _$jni.JObject expression,
  ) {
    return _circleTranslate$1(
            _class.reference.pointer,
            _id_circleTranslate$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_circleTranslateAnchor = _class.staticMethodId(
    r'circleTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleTranslateAnchor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> circleTranslateAnchor(
    _$jni.JString string,
  ) {
    return _circleTranslateAnchor(
            _class.reference.pointer,
            _id_circleTranslateAnchor as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_circleTranslateAnchor$1 = _class.staticMethodId(
    r'circleTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleTranslateAnchor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> circleTranslateAnchor$1(
    _$jni.JObject expression,
  ) {
    return _circleTranslateAnchor$1(
            _class.reference.pointer,
            _id_circleTranslateAnchor$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_circlePitchScale = _class.staticMethodId(
    r'circlePitchScale',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circlePitchScale = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circlePitchScale(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> circlePitchScale(
    _$jni.JString string,
  ) {
    return _circlePitchScale(
            _class.reference.pointer,
            _id_circlePitchScale as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_circlePitchScale$1 = _class.staticMethodId(
    r'circlePitchScale',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circlePitchScale$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circlePitchScale(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> circlePitchScale$1(
    _$jni.JObject expression,
  ) {
    return _circlePitchScale$1(
            _class.reference.pointer,
            _id_circlePitchScale$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_circlePitchAlignment = _class.staticMethodId(
    r'circlePitchAlignment',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circlePitchAlignment = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circlePitchAlignment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> circlePitchAlignment(
    _$jni.JString string,
  ) {
    return _circlePitchAlignment(
            _class.reference.pointer,
            _id_circlePitchAlignment as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_circlePitchAlignment$1 = _class.staticMethodId(
    r'circlePitchAlignment',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circlePitchAlignment$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circlePitchAlignment(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> circlePitchAlignment$1(
    _$jni.JObject expression,
  ) {
    return _circlePitchAlignment$1(
            _class.reference.pointer,
            _id_circlePitchAlignment$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_circleStrokeWidth = _class.staticMethodId(
    r'circleStrokeWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeWidth = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> circleStrokeWidth(
    _$jni.JFloat float,
  ) {
    return _circleStrokeWidth(
            _class.reference.pointer,
            _id_circleStrokeWidth as _$jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_circleStrokeWidth$1 = _class.staticMethodId(
    r'circleStrokeWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeWidth$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> circleStrokeWidth$1(
    _$jni.JObject expression,
  ) {
    return _circleStrokeWidth$1(
            _class.reference.pointer,
            _id_circleStrokeWidth$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_circleStrokeColor = _class.staticMethodId(
    r'circleStrokeColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeColor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> circleStrokeColor(
    int i,
  ) {
    return _circleStrokeColor(_class.reference.pointer,
            _id_circleStrokeColor as _$jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_circleStrokeColor$1 = _class.staticMethodId(
    r'circleStrokeColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeColor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> circleStrokeColor$1(
    _$jni.JString string,
  ) {
    return _circleStrokeColor$1(
            _class.reference.pointer,
            _id_circleStrokeColor$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_circleStrokeColor$2 = _class.staticMethodId(
    r'circleStrokeColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeColor$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> circleStrokeColor$2(
    _$jni.JObject expression,
  ) {
    return _circleStrokeColor$2(
            _class.reference.pointer,
            _id_circleStrokeColor$2 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_circleStrokeOpacity = _class.staticMethodId(
    r'circleStrokeOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeOpacity = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> circleStrokeOpacity(
    _$jni.JFloat float,
  ) {
    return _circleStrokeOpacity(
            _class.reference.pointer,
            _id_circleStrokeOpacity as _$jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_circleStrokeOpacity$1 = _class.staticMethodId(
    r'circleStrokeOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeOpacity$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> circleStrokeOpacity$1(
    _$jni.JObject expression,
  ) {
    return _circleStrokeOpacity$1(
            _class.reference.pointer,
            _id_circleStrokeOpacity$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_heatmapRadius = _class.staticMethodId(
    r'heatmapRadius',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapRadius = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapRadius(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> heatmapRadius(
    _$jni.JFloat float,
  ) {
    return _heatmapRadius(_class.reference.pointer,
            _id_heatmapRadius as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_heatmapRadius$1 = _class.staticMethodId(
    r'heatmapRadius',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapRadius$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapRadius(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> heatmapRadius$1(
    _$jni.JObject expression,
  ) {
    return _heatmapRadius$1(
            _class.reference.pointer,
            _id_heatmapRadius$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_heatmapWeight = _class.staticMethodId(
    r'heatmapWeight',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapWeight = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapWeight(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> heatmapWeight(
    _$jni.JFloat float,
  ) {
    return _heatmapWeight(_class.reference.pointer,
            _id_heatmapWeight as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_heatmapWeight$1 = _class.staticMethodId(
    r'heatmapWeight',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapWeight$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapWeight(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> heatmapWeight$1(
    _$jni.JObject expression,
  ) {
    return _heatmapWeight$1(
            _class.reference.pointer,
            _id_heatmapWeight$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_heatmapIntensity = _class.staticMethodId(
    r'heatmapIntensity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapIntensity = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapIntensity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> heatmapIntensity(
    _$jni.JFloat float,
  ) {
    return _heatmapIntensity(_class.reference.pointer,
            _id_heatmapIntensity as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_heatmapIntensity$1 = _class.staticMethodId(
    r'heatmapIntensity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapIntensity$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapIntensity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> heatmapIntensity$1(
    _$jni.JObject expression,
  ) {
    return _heatmapIntensity$1(
            _class.reference.pointer,
            _id_heatmapIntensity$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_heatmapColor = _class.staticMethodId(
    r'heatmapColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapColor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> heatmapColor(
    int i,
  ) {
    return _heatmapColor(
            _class.reference.pointer, _id_heatmapColor as _$jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_heatmapColor$1 = _class.staticMethodId(
    r'heatmapColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapColor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> heatmapColor$1(
    _$jni.JString string,
  ) {
    return _heatmapColor$1(_class.reference.pointer,
            _id_heatmapColor$1 as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_heatmapColor$2 = _class.staticMethodId(
    r'heatmapColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapColor$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> heatmapColor$2(
    _$jni.JObject expression,
  ) {
    return _heatmapColor$2(
            _class.reference.pointer,
            _id_heatmapColor$2 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_heatmapOpacity = _class.staticMethodId(
    r'heatmapOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapOpacity = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> heatmapOpacity(
    _$jni.JFloat float,
  ) {
    return _heatmapOpacity(_class.reference.pointer,
            _id_heatmapOpacity as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_heatmapOpacity$1 = _class.staticMethodId(
    r'heatmapOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapOpacity$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> heatmapOpacity$1(
    _$jni.JObject expression,
  ) {
    return _heatmapOpacity$1(
            _class.reference.pointer,
            _id_heatmapOpacity$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_fillExtrusionOpacity = _class.staticMethodId(
    r'fillExtrusionOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionOpacity = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> fillExtrusionOpacity(
    _$jni.JFloat float,
  ) {
    return _fillExtrusionOpacity(
            _class.reference.pointer,
            _id_fillExtrusionOpacity as _$jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_fillExtrusionOpacity$1 = _class.staticMethodId(
    r'fillExtrusionOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionOpacity$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> fillExtrusionOpacity$1(
    _$jni.JObject expression,
  ) {
    return _fillExtrusionOpacity$1(
            _class.reference.pointer,
            _id_fillExtrusionOpacity$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_fillExtrusionColor = _class.staticMethodId(
    r'fillExtrusionColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionColor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> fillExtrusionColor(
    int i,
  ) {
    return _fillExtrusionColor(_class.reference.pointer,
            _id_fillExtrusionColor as _$jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_fillExtrusionColor$1 = _class.staticMethodId(
    r'fillExtrusionColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionColor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> fillExtrusionColor$1(
    _$jni.JString string,
  ) {
    return _fillExtrusionColor$1(
            _class.reference.pointer,
            _id_fillExtrusionColor$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_fillExtrusionColor$2 = _class.staticMethodId(
    r'fillExtrusionColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionColor$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> fillExtrusionColor$2(
    _$jni.JObject expression,
  ) {
    return _fillExtrusionColor$2(
            _class.reference.pointer,
            _id_fillExtrusionColor$2 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_fillExtrusionTranslate = _class.staticMethodId(
    r'fillExtrusionTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionTranslate = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JArray<_$jni.JFloat>>
      fillExtrusionTranslate(
    _$jni.JArray<_$jni.JFloat> floats,
  ) {
    return _fillExtrusionTranslate(
            _class.reference.pointer,
            _id_fillExtrusionTranslate as _$jni.JMethodIDPtr,
            floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(
            _$jni.JArrayType(_$jni.JFloatType())));
  }

  static final _id_fillExtrusionTranslate$1 = _class.staticMethodId(
    r'fillExtrusionTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionTranslate$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> fillExtrusionTranslate$1(
    _$jni.JObject expression,
  ) {
    return _fillExtrusionTranslate$1(
            _class.reference.pointer,
            _id_fillExtrusionTranslate$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_fillExtrusionTranslateAnchor = _class.staticMethodId(
    r'fillExtrusionTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionTranslateAnchor =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString>
      fillExtrusionTranslateAnchor(
    _$jni.JString string,
  ) {
    return _fillExtrusionTranslateAnchor(
            _class.reference.pointer,
            _id_fillExtrusionTranslateAnchor as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_fillExtrusionTranslateAnchor$1 = _class.staticMethodId(
    r'fillExtrusionTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionTranslateAnchor$1 =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject>
      fillExtrusionTranslateAnchor$1(
    _$jni.JObject expression,
  ) {
    return _fillExtrusionTranslateAnchor$1(
            _class.reference.pointer,
            _id_fillExtrusionTranslateAnchor$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_fillExtrusionPattern = _class.staticMethodId(
    r'fillExtrusionPattern',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionPattern = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionPattern(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> fillExtrusionPattern(
    _$jni.JString string,
  ) {
    return _fillExtrusionPattern(
            _class.reference.pointer,
            _id_fillExtrusionPattern as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_fillExtrusionPattern$1 = _class.staticMethodId(
    r'fillExtrusionPattern',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionPattern$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionPattern(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> fillExtrusionPattern$1(
    _$jni.JObject expression,
  ) {
    return _fillExtrusionPattern$1(
            _class.reference.pointer,
            _id_fillExtrusionPattern$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_fillExtrusionHeight = _class.staticMethodId(
    r'fillExtrusionHeight',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionHeight = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionHeight(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> fillExtrusionHeight(
    _$jni.JFloat float,
  ) {
    return _fillExtrusionHeight(
            _class.reference.pointer,
            _id_fillExtrusionHeight as _$jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_fillExtrusionHeight$1 = _class.staticMethodId(
    r'fillExtrusionHeight',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionHeight$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionHeight(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> fillExtrusionHeight$1(
    _$jni.JObject expression,
  ) {
    return _fillExtrusionHeight$1(
            _class.reference.pointer,
            _id_fillExtrusionHeight$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_fillExtrusionBase = _class.staticMethodId(
    r'fillExtrusionBase',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionBase = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionBase(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> fillExtrusionBase(
    _$jni.JFloat float,
  ) {
    return _fillExtrusionBase(
            _class.reference.pointer,
            _id_fillExtrusionBase as _$jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_fillExtrusionBase$1 = _class.staticMethodId(
    r'fillExtrusionBase',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionBase$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionBase(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> fillExtrusionBase$1(
    _$jni.JObject expression,
  ) {
    return _fillExtrusionBase$1(
            _class.reference.pointer,
            _id_fillExtrusionBase$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_fillExtrusionVerticalGradient = _class.staticMethodId(
    r'fillExtrusionVerticalGradient',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionVerticalGradient =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionVerticalGradient(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JBoolean>
      fillExtrusionVerticalGradient(
    _$jni.JBoolean boolean,
  ) {
    return _fillExtrusionVerticalGradient(
            _class.reference.pointer,
            _id_fillExtrusionVerticalGradient as _$jni.JMethodIDPtr,
            boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JBooleanType()));
  }

  static final _id_fillExtrusionVerticalGradient$1 = _class.staticMethodId(
    r'fillExtrusionVerticalGradient',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionVerticalGradient$1 =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionVerticalGradient(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject>
      fillExtrusionVerticalGradient$1(
    _$jni.JObject expression,
  ) {
    return _fillExtrusionVerticalGradient$1(
            _class.reference.pointer,
            _id_fillExtrusionVerticalGradient$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_rasterOpacity = _class.staticMethodId(
    r'rasterOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterOpacity = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> rasterOpacity(
    _$jni.JFloat float,
  ) {
    return _rasterOpacity(_class.reference.pointer,
            _id_rasterOpacity as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_rasterOpacity$1 = _class.staticMethodId(
    r'rasterOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterOpacity$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> rasterOpacity$1(
    _$jni.JObject expression,
  ) {
    return _rasterOpacity$1(
            _class.reference.pointer,
            _id_rasterOpacity$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_rasterHueRotate = _class.staticMethodId(
    r'rasterHueRotate',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterHueRotate = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterHueRotate(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> rasterHueRotate(
    _$jni.JFloat float,
  ) {
    return _rasterHueRotate(_class.reference.pointer,
            _id_rasterHueRotate as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_rasterHueRotate$1 = _class.staticMethodId(
    r'rasterHueRotate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterHueRotate$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterHueRotate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> rasterHueRotate$1(
    _$jni.JObject expression,
  ) {
    return _rasterHueRotate$1(
            _class.reference.pointer,
            _id_rasterHueRotate$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_rasterBrightnessMin = _class.staticMethodId(
    r'rasterBrightnessMin',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterBrightnessMin = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterBrightnessMin(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> rasterBrightnessMin(
    _$jni.JFloat float,
  ) {
    return _rasterBrightnessMin(
            _class.reference.pointer,
            _id_rasterBrightnessMin as _$jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_rasterBrightnessMin$1 = _class.staticMethodId(
    r'rasterBrightnessMin',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterBrightnessMin$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterBrightnessMin(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> rasterBrightnessMin$1(
    _$jni.JObject expression,
  ) {
    return _rasterBrightnessMin$1(
            _class.reference.pointer,
            _id_rasterBrightnessMin$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_rasterBrightnessMax = _class.staticMethodId(
    r'rasterBrightnessMax',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterBrightnessMax = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterBrightnessMax(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> rasterBrightnessMax(
    _$jni.JFloat float,
  ) {
    return _rasterBrightnessMax(
            _class.reference.pointer,
            _id_rasterBrightnessMax as _$jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_rasterBrightnessMax$1 = _class.staticMethodId(
    r'rasterBrightnessMax',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterBrightnessMax$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterBrightnessMax(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> rasterBrightnessMax$1(
    _$jni.JObject expression,
  ) {
    return _rasterBrightnessMax$1(
            _class.reference.pointer,
            _id_rasterBrightnessMax$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_rasterSaturation = _class.staticMethodId(
    r'rasterSaturation',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterSaturation = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterSaturation(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> rasterSaturation(
    _$jni.JFloat float,
  ) {
    return _rasterSaturation(_class.reference.pointer,
            _id_rasterSaturation as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_rasterSaturation$1 = _class.staticMethodId(
    r'rasterSaturation',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterSaturation$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterSaturation(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> rasterSaturation$1(
    _$jni.JObject expression,
  ) {
    return _rasterSaturation$1(
            _class.reference.pointer,
            _id_rasterSaturation$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_rasterContrast = _class.staticMethodId(
    r'rasterContrast',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterContrast = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterContrast(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> rasterContrast(
    _$jni.JFloat float,
  ) {
    return _rasterContrast(_class.reference.pointer,
            _id_rasterContrast as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_rasterContrast$1 = _class.staticMethodId(
    r'rasterContrast',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterContrast$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterContrast(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> rasterContrast$1(
    _$jni.JObject expression,
  ) {
    return _rasterContrast$1(
            _class.reference.pointer,
            _id_rasterContrast$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_rasterResampling = _class.staticMethodId(
    r'rasterResampling',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterResampling = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterResampling(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> rasterResampling(
    _$jni.JString string,
  ) {
    return _rasterResampling(
            _class.reference.pointer,
            _id_rasterResampling as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_rasterResampling$1 = _class.staticMethodId(
    r'rasterResampling',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterResampling$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterResampling(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> rasterResampling$1(
    _$jni.JObject expression,
  ) {
    return _rasterResampling$1(
            _class.reference.pointer,
            _id_rasterResampling$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_rasterFadeDuration = _class.staticMethodId(
    r'rasterFadeDuration',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterFadeDuration = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterFadeDuration(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> rasterFadeDuration(
    _$jni.JFloat float,
  ) {
    return _rasterFadeDuration(
            _class.reference.pointer,
            _id_rasterFadeDuration as _$jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_rasterFadeDuration$1 = _class.staticMethodId(
    r'rasterFadeDuration',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterFadeDuration$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterFadeDuration(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> rasterFadeDuration$1(
    _$jni.JObject expression,
  ) {
    return _rasterFadeDuration$1(
            _class.reference.pointer,
            _id_rasterFadeDuration$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_hillshadeIlluminationDirection = _class.staticMethodId(
    r'hillshadeIlluminationDirection',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeIlluminationDirection =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeIlluminationDirection(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat>
      hillshadeIlluminationDirection(
    _$jni.JFloat float,
  ) {
    return _hillshadeIlluminationDirection(
            _class.reference.pointer,
            _id_hillshadeIlluminationDirection as _$jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_hillshadeIlluminationDirection$1 = _class.staticMethodId(
    r'hillshadeIlluminationDirection',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeIlluminationDirection$1 =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeIlluminationDirection(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject>
      hillshadeIlluminationDirection$1(
    _$jni.JObject expression,
  ) {
    return _hillshadeIlluminationDirection$1(
            _class.reference.pointer,
            _id_hillshadeIlluminationDirection$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_hillshadeIlluminationAnchor = _class.staticMethodId(
    r'hillshadeIlluminationAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeIlluminationAnchor =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeIlluminationAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString>
      hillshadeIlluminationAnchor(
    _$jni.JString string,
  ) {
    return _hillshadeIlluminationAnchor(
            _class.reference.pointer,
            _id_hillshadeIlluminationAnchor as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_hillshadeIlluminationAnchor$1 = _class.staticMethodId(
    r'hillshadeIlluminationAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeIlluminationAnchor$1 =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeIlluminationAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject>
      hillshadeIlluminationAnchor$1(
    _$jni.JObject expression,
  ) {
    return _hillshadeIlluminationAnchor$1(
            _class.reference.pointer,
            _id_hillshadeIlluminationAnchor$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_hillshadeExaggeration = _class.staticMethodId(
    r'hillshadeExaggeration',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeExaggeration = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeExaggeration(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> hillshadeExaggeration(
    _$jni.JFloat float,
  ) {
    return _hillshadeExaggeration(
            _class.reference.pointer,
            _id_hillshadeExaggeration as _$jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_hillshadeExaggeration$1 = _class.staticMethodId(
    r'hillshadeExaggeration',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeExaggeration$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeExaggeration(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> hillshadeExaggeration$1(
    _$jni.JObject expression,
  ) {
    return _hillshadeExaggeration$1(
            _class.reference.pointer,
            _id_hillshadeExaggeration$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_hillshadeShadowColor = _class.staticMethodId(
    r'hillshadeShadowColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeShadowColor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeShadowColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> hillshadeShadowColor(
    int i,
  ) {
    return _hillshadeShadowColor(_class.reference.pointer,
            _id_hillshadeShadowColor as _$jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_hillshadeShadowColor$1 = _class.staticMethodId(
    r'hillshadeShadowColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeShadowColor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeShadowColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> hillshadeShadowColor$1(
    _$jni.JString string,
  ) {
    return _hillshadeShadowColor$1(
            _class.reference.pointer,
            _id_hillshadeShadowColor$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_hillshadeShadowColor$2 = _class.staticMethodId(
    r'hillshadeShadowColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeShadowColor$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeShadowColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> hillshadeShadowColor$2(
    _$jni.JObject expression,
  ) {
    return _hillshadeShadowColor$2(
            _class.reference.pointer,
            _id_hillshadeShadowColor$2 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_hillshadeHighlightColor = _class.staticMethodId(
    r'hillshadeHighlightColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeHighlightColor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeHighlightColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> hillshadeHighlightColor(
    int i,
  ) {
    return _hillshadeHighlightColor(_class.reference.pointer,
            _id_hillshadeHighlightColor as _$jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_hillshadeHighlightColor$1 = _class.staticMethodId(
    r'hillshadeHighlightColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeHighlightColor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeHighlightColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> hillshadeHighlightColor$1(
    _$jni.JString string,
  ) {
    return _hillshadeHighlightColor$1(
            _class.reference.pointer,
            _id_hillshadeHighlightColor$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_hillshadeHighlightColor$2 = _class.staticMethodId(
    r'hillshadeHighlightColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeHighlightColor$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeHighlightColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> hillshadeHighlightColor$2(
    _$jni.JObject expression,
  ) {
    return _hillshadeHighlightColor$2(
            _class.reference.pointer,
            _id_hillshadeHighlightColor$2 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_hillshadeAccentColor = _class.staticMethodId(
    r'hillshadeAccentColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeAccentColor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeAccentColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> hillshadeAccentColor(
    int i,
  ) {
    return _hillshadeAccentColor(_class.reference.pointer,
            _id_hillshadeAccentColor as _$jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_hillshadeAccentColor$1 = _class.staticMethodId(
    r'hillshadeAccentColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeAccentColor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeAccentColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> hillshadeAccentColor$1(
    _$jni.JString string,
  ) {
    return _hillshadeAccentColor$1(
            _class.reference.pointer,
            _id_hillshadeAccentColor$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_hillshadeAccentColor$2 = _class.staticMethodId(
    r'hillshadeAccentColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeAccentColor$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeAccentColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> hillshadeAccentColor$2(
    _$jni.JObject expression,
  ) {
    return _hillshadeAccentColor$2(
            _class.reference.pointer,
            _id_hillshadeAccentColor$2 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_backgroundColor = _class.staticMethodId(
    r'backgroundColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundColor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> backgroundColor(
    int i,
  ) {
    return _backgroundColor(_class.reference.pointer,
            _id_backgroundColor as _$jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_backgroundColor$1 = _class.staticMethodId(
    r'backgroundColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundColor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> backgroundColor$1(
    _$jni.JString string,
  ) {
    return _backgroundColor$1(
            _class.reference.pointer,
            _id_backgroundColor$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_backgroundColor$2 = _class.staticMethodId(
    r'backgroundColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundColor$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> backgroundColor$2(
    _$jni.JObject expression,
  ) {
    return _backgroundColor$2(
            _class.reference.pointer,
            _id_backgroundColor$2 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_backgroundPattern = _class.staticMethodId(
    r'backgroundPattern',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundPattern = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundPattern(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> backgroundPattern(
    _$jni.JString string,
  ) {
    return _backgroundPattern(
            _class.reference.pointer,
            _id_backgroundPattern as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_backgroundPattern$1 = _class.staticMethodId(
    r'backgroundPattern',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundPattern$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundPattern(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> backgroundPattern$1(
    _$jni.JObject expression,
  ) {
    return _backgroundPattern$1(
            _class.reference.pointer,
            _id_backgroundPattern$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_backgroundOpacity = _class.staticMethodId(
    r'backgroundOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundOpacity = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> backgroundOpacity(
    _$jni.JFloat float,
  ) {
    return _backgroundOpacity(
            _class.reference.pointer,
            _id_backgroundOpacity as _$jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_backgroundOpacity$1 = _class.staticMethodId(
    r'backgroundOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundOpacity$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> backgroundOpacity$1(
    _$jni.JObject expression,
  ) {
    return _backgroundOpacity$1(
            _class.reference.pointer,
            _id_backgroundOpacity$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_fillSortKey = _class.staticMethodId(
    r'fillSortKey',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillSortKey = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillSortKey(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> fillSortKey(
    _$jni.JFloat float,
  ) {
    return _fillSortKey(_class.reference.pointer,
            _id_fillSortKey as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_fillSortKey$1 = _class.staticMethodId(
    r'fillSortKey',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillSortKey$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillSortKey(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> fillSortKey$1(
    _$jni.JObject expression,
  ) {
    return _fillSortKey$1(
            _class.reference.pointer,
            _id_fillSortKey$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_lineCap = _class.staticMethodId(
    r'lineCap',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineCap = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineCap(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> lineCap(
    _$jni.JString string,
  ) {
    return _lineCap(_class.reference.pointer, _id_lineCap as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_lineCap$1 = _class.staticMethodId(
    r'lineCap',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineCap$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineCap(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> lineCap$1(
    _$jni.JObject expression,
  ) {
    return _lineCap$1(_class.reference.pointer,
            _id_lineCap$1 as _$jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_lineJoin = _class.staticMethodId(
    r'lineJoin',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineJoin = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineJoin(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> lineJoin(
    _$jni.JString string,
  ) {
    return _lineJoin(_class.reference.pointer,
            _id_lineJoin as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_lineJoin$1 = _class.staticMethodId(
    r'lineJoin',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineJoin$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineJoin(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> lineJoin$1(
    _$jni.JObject expression,
  ) {
    return _lineJoin$1(_class.reference.pointer,
            _id_lineJoin$1 as _$jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_lineMiterLimit = _class.staticMethodId(
    r'lineMiterLimit',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineMiterLimit = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineMiterLimit(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> lineMiterLimit(
    _$jni.JFloat float,
  ) {
    return _lineMiterLimit(_class.reference.pointer,
            _id_lineMiterLimit as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_lineMiterLimit$1 = _class.staticMethodId(
    r'lineMiterLimit',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineMiterLimit$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineMiterLimit(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> lineMiterLimit$1(
    _$jni.JObject expression,
  ) {
    return _lineMiterLimit$1(
            _class.reference.pointer,
            _id_lineMiterLimit$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_lineRoundLimit = _class.staticMethodId(
    r'lineRoundLimit',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineRoundLimit = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineRoundLimit(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> lineRoundLimit(
    _$jni.JFloat float,
  ) {
    return _lineRoundLimit(_class.reference.pointer,
            _id_lineRoundLimit as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_lineRoundLimit$1 = _class.staticMethodId(
    r'lineRoundLimit',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineRoundLimit$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineRoundLimit(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> lineRoundLimit$1(
    _$jni.JObject expression,
  ) {
    return _lineRoundLimit$1(
            _class.reference.pointer,
            _id_lineRoundLimit$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_lineSortKey = _class.staticMethodId(
    r'lineSortKey',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineSortKey = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineSortKey(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> lineSortKey(
    _$jni.JFloat float,
  ) {
    return _lineSortKey(_class.reference.pointer,
            _id_lineSortKey as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_lineSortKey$1 = _class.staticMethodId(
    r'lineSortKey',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineSortKey$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineSortKey(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> lineSortKey$1(
    _$jni.JObject expression,
  ) {
    return _lineSortKey$1(
            _class.reference.pointer,
            _id_lineSortKey$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_symbolPlacement = _class.staticMethodId(
    r'symbolPlacement',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolPlacement = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolPlacement(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> symbolPlacement(
    _$jni.JString string,
  ) {
    return _symbolPlacement(_class.reference.pointer,
            _id_symbolPlacement as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_symbolPlacement$1 = _class.staticMethodId(
    r'symbolPlacement',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolPlacement$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolPlacement(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> symbolPlacement$1(
    _$jni.JObject expression,
  ) {
    return _symbolPlacement$1(
            _class.reference.pointer,
            _id_symbolPlacement$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_symbolSpacing = _class.staticMethodId(
    r'symbolSpacing',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolSpacing = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolSpacing(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> symbolSpacing(
    _$jni.JFloat float,
  ) {
    return _symbolSpacing(_class.reference.pointer,
            _id_symbolSpacing as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_symbolSpacing$1 = _class.staticMethodId(
    r'symbolSpacing',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolSpacing$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolSpacing(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> symbolSpacing$1(
    _$jni.JObject expression,
  ) {
    return _symbolSpacing$1(
            _class.reference.pointer,
            _id_symbolSpacing$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_symbolAvoidEdges = _class.staticMethodId(
    r'symbolAvoidEdges',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolAvoidEdges = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolAvoidEdges(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JBoolean> symbolAvoidEdges(
    _$jni.JBoolean boolean,
  ) {
    return _symbolAvoidEdges(
            _class.reference.pointer,
            _id_symbolAvoidEdges as _$jni.JMethodIDPtr,
            boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JBooleanType()));
  }

  static final _id_symbolAvoidEdges$1 = _class.staticMethodId(
    r'symbolAvoidEdges',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolAvoidEdges$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolAvoidEdges(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> symbolAvoidEdges$1(
    _$jni.JObject expression,
  ) {
    return _symbolAvoidEdges$1(
            _class.reference.pointer,
            _id_symbolAvoidEdges$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_symbolSortKey = _class.staticMethodId(
    r'symbolSortKey',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolSortKey = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolSortKey(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> symbolSortKey(
    _$jni.JFloat float,
  ) {
    return _symbolSortKey(_class.reference.pointer,
            _id_symbolSortKey as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_symbolSortKey$1 = _class.staticMethodId(
    r'symbolSortKey',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolSortKey$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolSortKey(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> symbolSortKey$1(
    _$jni.JObject expression,
  ) {
    return _symbolSortKey$1(
            _class.reference.pointer,
            _id_symbolSortKey$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_symbolZOrder = _class.staticMethodId(
    r'symbolZOrder',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolZOrder = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolZOrder(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> symbolZOrder(
    _$jni.JString string,
  ) {
    return _symbolZOrder(_class.reference.pointer,
            _id_symbolZOrder as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_symbolZOrder$1 = _class.staticMethodId(
    r'symbolZOrder',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolZOrder$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolZOrder(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> symbolZOrder$1(
    _$jni.JObject expression,
  ) {
    return _symbolZOrder$1(
            _class.reference.pointer,
            _id_symbolZOrder$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconAllowOverlap = _class.staticMethodId(
    r'iconAllowOverlap',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconAllowOverlap = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconAllowOverlap(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JBoolean> iconAllowOverlap(
    _$jni.JBoolean boolean,
  ) {
    return _iconAllowOverlap(
            _class.reference.pointer,
            _id_iconAllowOverlap as _$jni.JMethodIDPtr,
            boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JBooleanType()));
  }

  static final _id_iconAllowOverlap$1 = _class.staticMethodId(
    r'iconAllowOverlap',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconAllowOverlap$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconAllowOverlap(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconAllowOverlap$1(
    _$jni.JObject expression,
  ) {
    return _iconAllowOverlap$1(
            _class.reference.pointer,
            _id_iconAllowOverlap$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconIgnorePlacement = _class.staticMethodId(
    r'iconIgnorePlacement',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconIgnorePlacement = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconIgnorePlacement(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JBoolean> iconIgnorePlacement(
    _$jni.JBoolean boolean,
  ) {
    return _iconIgnorePlacement(
            _class.reference.pointer,
            _id_iconIgnorePlacement as _$jni.JMethodIDPtr,
            boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JBooleanType()));
  }

  static final _id_iconIgnorePlacement$1 = _class.staticMethodId(
    r'iconIgnorePlacement',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconIgnorePlacement$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconIgnorePlacement(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconIgnorePlacement$1(
    _$jni.JObject expression,
  ) {
    return _iconIgnorePlacement$1(
            _class.reference.pointer,
            _id_iconIgnorePlacement$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconOptional = _class.staticMethodId(
    r'iconOptional',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOptional = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOptional(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JBoolean> iconOptional(
    _$jni.JBoolean boolean,
  ) {
    return _iconOptional(_class.reference.pointer,
            _id_iconOptional as _$jni.JMethodIDPtr, boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JBooleanType()));
  }

  static final _id_iconOptional$1 = _class.staticMethodId(
    r'iconOptional',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOptional$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOptional(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconOptional$1(
    _$jni.JObject expression,
  ) {
    return _iconOptional$1(
            _class.reference.pointer,
            _id_iconOptional$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconRotationAlignment = _class.staticMethodId(
    r'iconRotationAlignment',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconRotationAlignment = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconRotationAlignment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> iconRotationAlignment(
    _$jni.JString string,
  ) {
    return _iconRotationAlignment(
            _class.reference.pointer,
            _id_iconRotationAlignment as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_iconRotationAlignment$1 = _class.staticMethodId(
    r'iconRotationAlignment',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconRotationAlignment$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconRotationAlignment(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconRotationAlignment$1(
    _$jni.JObject expression,
  ) {
    return _iconRotationAlignment$1(
            _class.reference.pointer,
            _id_iconRotationAlignment$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconSize = _class.staticMethodId(
    r'iconSize',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconSize = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconSize(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> iconSize(
    _$jni.JFloat float,
  ) {
    return _iconSize(_class.reference.pointer,
            _id_iconSize as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_iconSize$1 = _class.staticMethodId(
    r'iconSize',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconSize$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconSize(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconSize$1(
    _$jni.JObject expression,
  ) {
    return _iconSize$1(_class.reference.pointer,
            _id_iconSize$1 as _$jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconTextFit = _class.staticMethodId(
    r'iconTextFit',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTextFit = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTextFit(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> iconTextFit(
    _$jni.JString string,
  ) {
    return _iconTextFit(_class.reference.pointer,
            _id_iconTextFit as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_iconTextFit$1 = _class.staticMethodId(
    r'iconTextFit',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTextFit$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTextFit(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconTextFit$1(
    _$jni.JObject expression,
  ) {
    return _iconTextFit$1(
            _class.reference.pointer,
            _id_iconTextFit$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconTextFitPadding = _class.staticMethodId(
    r'iconTextFitPadding',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTextFitPadding = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTextFitPadding(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JArray<_$jni.JFloat>>
      iconTextFitPadding(
    _$jni.JArray<_$jni.JFloat> floats,
  ) {
    return _iconTextFitPadding(
            _class.reference.pointer,
            _id_iconTextFitPadding as _$jni.JMethodIDPtr,
            floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(
            _$jni.JArrayType(_$jni.JFloatType())));
  }

  static final _id_iconTextFitPadding$1 = _class.staticMethodId(
    r'iconTextFitPadding',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTextFitPadding$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTextFitPadding(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconTextFitPadding$1(
    _$jni.JObject expression,
  ) {
    return _iconTextFitPadding$1(
            _class.reference.pointer,
            _id_iconTextFitPadding$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconImage = _class.staticMethodId(
    r'iconImage',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconImage = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconImage(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> iconImage(
    _$jni.JString string,
  ) {
    return _iconImage(_class.reference.pointer,
            _id_iconImage as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_iconImage$1 = _class.staticMethodId(
    r'iconImage',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconImage$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconImage(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconImage$1(
    _$jni.JObject expression,
  ) {
    return _iconImage$1(_class.reference.pointer,
            _id_iconImage$1 as _$jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconRotate = _class.staticMethodId(
    r'iconRotate',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconRotate = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconRotate(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> iconRotate(
    _$jni.JFloat float,
  ) {
    return _iconRotate(_class.reference.pointer,
            _id_iconRotate as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_iconRotate$1 = _class.staticMethodId(
    r'iconRotate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconRotate$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconRotate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconRotate$1(
    _$jni.JObject expression,
  ) {
    return _iconRotate$1(
            _class.reference.pointer,
            _id_iconRotate$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconPadding = _class.staticMethodId(
    r'iconPadding',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconPadding = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconPadding(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> iconPadding(
    _$jni.JFloat float,
  ) {
    return _iconPadding(_class.reference.pointer,
            _id_iconPadding as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_iconPadding$1 = _class.staticMethodId(
    r'iconPadding',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconPadding$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconPadding(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JArray<_$jni.JFloat>> iconPadding$1(
    _$jni.JArray<_$jni.JFloat> floats,
  ) {
    return _iconPadding$1(_class.reference.pointer,
            _id_iconPadding$1 as _$jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(
            _$jni.JArrayType(_$jni.JFloatType())));
  }

  static final _id_iconPadding$2 = _class.staticMethodId(
    r'iconPadding',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconPadding$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconPadding(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconPadding$2(
    _$jni.JObject expression,
  ) {
    return _iconPadding$2(
            _class.reference.pointer,
            _id_iconPadding$2 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconKeepUpright = _class.staticMethodId(
    r'iconKeepUpright',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconKeepUpright = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconKeepUpright(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JBoolean> iconKeepUpright(
    _$jni.JBoolean boolean,
  ) {
    return _iconKeepUpright(
            _class.reference.pointer,
            _id_iconKeepUpright as _$jni.JMethodIDPtr,
            boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JBooleanType()));
  }

  static final _id_iconKeepUpright$1 = _class.staticMethodId(
    r'iconKeepUpright',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconKeepUpright$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconKeepUpright(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconKeepUpright$1(
    _$jni.JObject expression,
  ) {
    return _iconKeepUpright$1(
            _class.reference.pointer,
            _id_iconKeepUpright$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconOffset = _class.staticMethodId(
    r'iconOffset',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOffset = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOffset(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JArray<_$jni.JFloat>> iconOffset(
    _$jni.JArray<_$jni.JFloat> floats,
  ) {
    return _iconOffset(_class.reference.pointer,
            _id_iconOffset as _$jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(
            _$jni.JArrayType(_$jni.JFloatType())));
  }

  static final _id_iconOffset$1 = _class.staticMethodId(
    r'iconOffset',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOffset$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOffset(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconOffset$1(
    _$jni.JObject expression,
  ) {
    return _iconOffset$1(
            _class.reference.pointer,
            _id_iconOffset$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconAnchor = _class.staticMethodId(
    r'iconAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconAnchor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> iconAnchor(
    _$jni.JString string,
  ) {
    return _iconAnchor(_class.reference.pointer,
            _id_iconAnchor as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_iconAnchor$1 = _class.staticMethodId(
    r'iconAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconAnchor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconAnchor$1(
    _$jni.JObject expression,
  ) {
    return _iconAnchor$1(
            _class.reference.pointer,
            _id_iconAnchor$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_iconPitchAlignment = _class.staticMethodId(
    r'iconPitchAlignment',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconPitchAlignment = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconPitchAlignment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> iconPitchAlignment(
    _$jni.JString string,
  ) {
    return _iconPitchAlignment(
            _class.reference.pointer,
            _id_iconPitchAlignment as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_iconPitchAlignment$1 = _class.staticMethodId(
    r'iconPitchAlignment',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconPitchAlignment$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconPitchAlignment(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> iconPitchAlignment$1(
    _$jni.JObject expression,
  ) {
    return _iconPitchAlignment$1(
            _class.reference.pointer,
            _id_iconPitchAlignment$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textPitchAlignment = _class.staticMethodId(
    r'textPitchAlignment',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textPitchAlignment = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textPitchAlignment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> textPitchAlignment(
    _$jni.JString string,
  ) {
    return _textPitchAlignment(
            _class.reference.pointer,
            _id_textPitchAlignment as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_textPitchAlignment$1 = _class.staticMethodId(
    r'textPitchAlignment',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textPitchAlignment$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textPitchAlignment(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textPitchAlignment$1(
    _$jni.JObject expression,
  ) {
    return _textPitchAlignment$1(
            _class.reference.pointer,
            _id_textPitchAlignment$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textRotationAlignment = _class.staticMethodId(
    r'textRotationAlignment',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRotationAlignment = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRotationAlignment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> textRotationAlignment(
    _$jni.JString string,
  ) {
    return _textRotationAlignment(
            _class.reference.pointer,
            _id_textRotationAlignment as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_textRotationAlignment$1 = _class.staticMethodId(
    r'textRotationAlignment',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRotationAlignment$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRotationAlignment(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textRotationAlignment$1(
    _$jni.JObject expression,
  ) {
    return _textRotationAlignment$1(
            _class.reference.pointer,
            _id_textRotationAlignment$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textField = _class.staticMethodId(
    r'textField',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textField = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textField(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> textField(
    _$jni.JString string,
  ) {
    return _textField(_class.reference.pointer,
            _id_textField as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_textField$1 = _class.staticMethodId(
    r'textField',
    r'(Lorg/maplibre/android/style/types/Formatted;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textField$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textField(org.maplibre.android.style.types.Formatted formatted)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<formatted_.Formatted> textField$1(
    formatted_.Formatted formatted,
  ) {
    return _textField$1(_class.reference.pointer,
            _id_textField$1 as _$jni.JMethodIDPtr, formatted.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(
            formatted_.$Formatted$Type()));
  }

  static final _id_textField$2 = _class.staticMethodId(
    r'textField',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textField$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textField(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textField$2(
    _$jni.JObject expression,
  ) {
    return _textField$2(_class.reference.pointer,
            _id_textField$2 as _$jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textFont = _class.staticMethodId(
    r'textFont',
    r'([Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textFont = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textFont(java.lang.Object[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JArray<_$jni.JString>> textFont(
    _$jni.JArray<_$jni.JString> strings,
  ) {
    return _textFont(_class.reference.pointer,
            _id_textFont as _$jni.JMethodIDPtr, strings.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(
            _$jni.JArrayType(_$jni.JStringType())));
  }

  static final _id_textFont$1 = _class.staticMethodId(
    r'textFont',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textFont$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textFont(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textFont$1(
    _$jni.JObject expression,
  ) {
    return _textFont$1(_class.reference.pointer,
            _id_textFont$1 as _$jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textSize = _class.staticMethodId(
    r'textSize',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textSize = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textSize(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> textSize(
    _$jni.JFloat float,
  ) {
    return _textSize(_class.reference.pointer,
            _id_textSize as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_textSize$1 = _class.staticMethodId(
    r'textSize',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textSize$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textSize(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textSize$1(
    _$jni.JObject expression,
  ) {
    return _textSize$1(_class.reference.pointer,
            _id_textSize$1 as _$jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textMaxWidth = _class.staticMethodId(
    r'textMaxWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textMaxWidth = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textMaxWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> textMaxWidth(
    _$jni.JFloat float,
  ) {
    return _textMaxWidth(_class.reference.pointer,
            _id_textMaxWidth as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_textMaxWidth$1 = _class.staticMethodId(
    r'textMaxWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textMaxWidth$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textMaxWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textMaxWidth$1(
    _$jni.JObject expression,
  ) {
    return _textMaxWidth$1(
            _class.reference.pointer,
            _id_textMaxWidth$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textLineHeight = _class.staticMethodId(
    r'textLineHeight',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textLineHeight = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textLineHeight(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> textLineHeight(
    _$jni.JFloat float,
  ) {
    return _textLineHeight(_class.reference.pointer,
            _id_textLineHeight as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_textLineHeight$1 = _class.staticMethodId(
    r'textLineHeight',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textLineHeight$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textLineHeight(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textLineHeight$1(
    _$jni.JObject expression,
  ) {
    return _textLineHeight$1(
            _class.reference.pointer,
            _id_textLineHeight$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textLetterSpacing = _class.staticMethodId(
    r'textLetterSpacing',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textLetterSpacing = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textLetterSpacing(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> textLetterSpacing(
    _$jni.JFloat float,
  ) {
    return _textLetterSpacing(
            _class.reference.pointer,
            _id_textLetterSpacing as _$jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_textLetterSpacing$1 = _class.staticMethodId(
    r'textLetterSpacing',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textLetterSpacing$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textLetterSpacing(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textLetterSpacing$1(
    _$jni.JObject expression,
  ) {
    return _textLetterSpacing$1(
            _class.reference.pointer,
            _id_textLetterSpacing$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textJustify = _class.staticMethodId(
    r'textJustify',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textJustify = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textJustify(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> textJustify(
    _$jni.JString string,
  ) {
    return _textJustify(_class.reference.pointer,
            _id_textJustify as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_textJustify$1 = _class.staticMethodId(
    r'textJustify',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textJustify$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textJustify(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textJustify$1(
    _$jni.JObject expression,
  ) {
    return _textJustify$1(
            _class.reference.pointer,
            _id_textJustify$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textRadialOffset = _class.staticMethodId(
    r'textRadialOffset',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRadialOffset = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRadialOffset(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> textRadialOffset(
    _$jni.JFloat float,
  ) {
    return _textRadialOffset(_class.reference.pointer,
            _id_textRadialOffset as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_textRadialOffset$1 = _class.staticMethodId(
    r'textRadialOffset',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRadialOffset$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRadialOffset(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textRadialOffset$1(
    _$jni.JObject expression,
  ) {
    return _textRadialOffset$1(
            _class.reference.pointer,
            _id_textRadialOffset$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textVariableAnchor = _class.staticMethodId(
    r'textVariableAnchor',
    r'([Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textVariableAnchor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textVariableAnchor(java.lang.Object[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JArray<_$jni.JString>>
      textVariableAnchor(
    _$jni.JArray<_$jni.JString> strings,
  ) {
    return _textVariableAnchor(
            _class.reference.pointer,
            _id_textVariableAnchor as _$jni.JMethodIDPtr,
            strings.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(
            _$jni.JArrayType(_$jni.JStringType())));
  }

  static final _id_textVariableAnchor$1 = _class.staticMethodId(
    r'textVariableAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textVariableAnchor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textVariableAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textVariableAnchor$1(
    _$jni.JObject expression,
  ) {
    return _textVariableAnchor$1(
            _class.reference.pointer,
            _id_textVariableAnchor$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textAnchor = _class.staticMethodId(
    r'textAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textAnchor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> textAnchor(
    _$jni.JString string,
  ) {
    return _textAnchor(_class.reference.pointer,
            _id_textAnchor as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_textAnchor$1 = _class.staticMethodId(
    r'textAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textAnchor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textAnchor$1(
    _$jni.JObject expression,
  ) {
    return _textAnchor$1(
            _class.reference.pointer,
            _id_textAnchor$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textMaxAngle = _class.staticMethodId(
    r'textMaxAngle',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textMaxAngle = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textMaxAngle(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> textMaxAngle(
    _$jni.JFloat float,
  ) {
    return _textMaxAngle(_class.reference.pointer,
            _id_textMaxAngle as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_textMaxAngle$1 = _class.staticMethodId(
    r'textMaxAngle',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textMaxAngle$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textMaxAngle(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textMaxAngle$1(
    _$jni.JObject expression,
  ) {
    return _textMaxAngle$1(
            _class.reference.pointer,
            _id_textMaxAngle$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textWritingMode = _class.staticMethodId(
    r'textWritingMode',
    r'([Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textWritingMode = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textWritingMode(java.lang.Object[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JArray<_$jni.JString>>
      textWritingMode(
    _$jni.JArray<_$jni.JString> strings,
  ) {
    return _textWritingMode(
            _class.reference.pointer,
            _id_textWritingMode as _$jni.JMethodIDPtr,
            strings.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(
            _$jni.JArrayType(_$jni.JStringType())));
  }

  static final _id_textWritingMode$1 = _class.staticMethodId(
    r'textWritingMode',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textWritingMode$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textWritingMode(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textWritingMode$1(
    _$jni.JObject expression,
  ) {
    return _textWritingMode$1(
            _class.reference.pointer,
            _id_textWritingMode$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textRotate = _class.staticMethodId(
    r'textRotate',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRotate = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRotate(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> textRotate(
    _$jni.JFloat float,
  ) {
    return _textRotate(_class.reference.pointer,
            _id_textRotate as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_textRotate$1 = _class.staticMethodId(
    r'textRotate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRotate$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRotate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textRotate$1(
    _$jni.JObject expression,
  ) {
    return _textRotate$1(
            _class.reference.pointer,
            _id_textRotate$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textPadding = _class.staticMethodId(
    r'textPadding',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textPadding = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textPadding(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> textPadding(
    _$jni.JFloat float,
  ) {
    return _textPadding(_class.reference.pointer,
            _id_textPadding as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_textPadding$1 = _class.staticMethodId(
    r'textPadding',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textPadding$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textPadding(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textPadding$1(
    _$jni.JObject expression,
  ) {
    return _textPadding$1(
            _class.reference.pointer,
            _id_textPadding$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textKeepUpright = _class.staticMethodId(
    r'textKeepUpright',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textKeepUpright = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textKeepUpright(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JBoolean> textKeepUpright(
    _$jni.JBoolean boolean,
  ) {
    return _textKeepUpright(
            _class.reference.pointer,
            _id_textKeepUpright as _$jni.JMethodIDPtr,
            boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JBooleanType()));
  }

  static final _id_textKeepUpright$1 = _class.staticMethodId(
    r'textKeepUpright',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textKeepUpright$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textKeepUpright(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textKeepUpright$1(
    _$jni.JObject expression,
  ) {
    return _textKeepUpright$1(
            _class.reference.pointer,
            _id_textKeepUpright$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textTransform = _class.staticMethodId(
    r'textTransform',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTransform = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTransform(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JString> textTransform(
    _$jni.JString string,
  ) {
    return _textTransform(_class.reference.pointer,
            _id_textTransform as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JStringType()));
  }

  static final _id_textTransform$1 = _class.staticMethodId(
    r'textTransform',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTransform$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTransform(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textTransform$1(
    _$jni.JObject expression,
  ) {
    return _textTransform$1(
            _class.reference.pointer,
            _id_textTransform$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textOffset = _class.staticMethodId(
    r'textOffset',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOffset = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOffset(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JArray<_$jni.JFloat>> textOffset(
    _$jni.JArray<_$jni.JFloat> floats,
  ) {
    return _textOffset(_class.reference.pointer,
            _id_textOffset as _$jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(
            _$jni.JArrayType(_$jni.JFloatType())));
  }

  static final _id_textOffset$1 = _class.staticMethodId(
    r'textOffset',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOffset$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOffset(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textOffset$1(
    _$jni.JObject expression,
  ) {
    return _textOffset$1(
            _class.reference.pointer,
            _id_textOffset$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textAllowOverlap = _class.staticMethodId(
    r'textAllowOverlap',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textAllowOverlap = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textAllowOverlap(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JBoolean> textAllowOverlap(
    _$jni.JBoolean boolean,
  ) {
    return _textAllowOverlap(
            _class.reference.pointer,
            _id_textAllowOverlap as _$jni.JMethodIDPtr,
            boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JBooleanType()));
  }

  static final _id_textAllowOverlap$1 = _class.staticMethodId(
    r'textAllowOverlap',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textAllowOverlap$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textAllowOverlap(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textAllowOverlap$1(
    _$jni.JObject expression,
  ) {
    return _textAllowOverlap$1(
            _class.reference.pointer,
            _id_textAllowOverlap$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textIgnorePlacement = _class.staticMethodId(
    r'textIgnorePlacement',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textIgnorePlacement = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textIgnorePlacement(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JBoolean> textIgnorePlacement(
    _$jni.JBoolean boolean,
  ) {
    return _textIgnorePlacement(
            _class.reference.pointer,
            _id_textIgnorePlacement as _$jni.JMethodIDPtr,
            boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JBooleanType()));
  }

  static final _id_textIgnorePlacement$1 = _class.staticMethodId(
    r'textIgnorePlacement',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textIgnorePlacement$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textIgnorePlacement(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textIgnorePlacement$1(
    _$jni.JObject expression,
  ) {
    return _textIgnorePlacement$1(
            _class.reference.pointer,
            _id_textIgnorePlacement$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_textOptional = _class.staticMethodId(
    r'textOptional',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOptional = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOptional(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JBoolean> textOptional(
    _$jni.JBoolean boolean,
  ) {
    return _textOptional(_class.reference.pointer,
            _id_textOptional as _$jni.JMethodIDPtr, boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JBooleanType()));
  }

  static final _id_textOptional$1 = _class.staticMethodId(
    r'textOptional',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOptional$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOptional(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> textOptional$1(
    _$jni.JObject expression,
  ) {
    return _textOptional$1(
            _class.reference.pointer,
            _id_textOptional$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }

  static final _id_circleSortKey = _class.staticMethodId(
    r'circleSortKey',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleSortKey = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleSortKey(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JFloat> circleSortKey(
    _$jni.JFloat float,
  ) {
    return _circleSortKey(_class.reference.pointer,
            _id_circleSortKey as _$jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JFloatType()));
  }

  static final _id_circleSortKey$1 = _class.staticMethodId(
    r'circleSortKey',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleSortKey$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleSortKey(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<_$jni.JObject> circleSortKey$1(
    _$jni.JObject expression,
  ) {
    return _circleSortKey$1(
            _class.reference.pointer,
            _id_circleSortKey$1 as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValue$Type(_$jni.JObjectType()));
  }
}

final class $PropertyFactory$Type extends _$jni.JObjType<PropertyFactory> {
  @_$jni.internal
  const $PropertyFactory$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/style/layers/PropertyFactory;';

  @_$jni.internal
  @_$core.override
  PropertyFactory fromReference(_$jni.JReference reference) =>
      PropertyFactory.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PropertyFactory$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PropertyFactory$Type) &&
        other is $PropertyFactory$Type;
  }
}
