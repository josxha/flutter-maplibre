// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../types/Formatted.dart' as formatted_;

import 'PropertyValue.dart' as propertyvalue_;

/// from: `org.maplibre.android.style.layers.PropertyFactory`
class PropertyFactory extends jni.JObject {
  @override
  late final jni.JObjType<PropertyFactory> $type = type;

  PropertyFactory.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/style/layers/PropertyFactory');

  /// The type which includes information such as the signature of this class.
  static const type = $PropertyFactoryType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory PropertyFactory() {
    return PropertyFactory.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_visibility = _class.staticMethodId(
    r'visibility',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _visibility = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue visibility(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> visibility(
    jni.JString string,
  ) {
    return _visibility(_class.reference.pointer,
            _id_visibility as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_fillAntialias = _class.staticMethodId(
    r'fillAntialias',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillAntialias = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillAntialias(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JBoolean> fillAntialias(
    jni.JBoolean boolean,
  ) {
    return _fillAntialias(_class.reference.pointer,
            _id_fillAntialias as jni.JMethodIDPtr, boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_fillAntialias1 = _class.staticMethodId(
    r'fillAntialias',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillAntialias1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillAntialias(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> fillAntialias1(
    jni.JObject expression,
  ) {
    return _fillAntialias1(
            _class.reference.pointer,
            _id_fillAntialias1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_fillOpacity = _class.staticMethodId(
    r'fillOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillOpacity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> fillOpacity(
    jni.JFloat float,
  ) {
    return _fillOpacity(_class.reference.pointer,
            _id_fillOpacity as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_fillOpacity1 = _class.staticMethodId(
    r'fillOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillOpacity1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> fillOpacity1(
    jni.JObject expression,
  ) {
    return _fillOpacity1(_class.reference.pointer,
            _id_fillOpacity1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_fillColor = _class.staticMethodId(
    r'fillColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> fillColor(
    int i,
  ) {
    return _fillColor(
            _class.reference.pointer, _id_fillColor as jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_fillColor1 = _class.staticMethodId(
    r'fillColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillColor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> fillColor1(
    jni.JString string,
  ) {
    return _fillColor1(_class.reference.pointer,
            _id_fillColor1 as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_fillColor2 = _class.staticMethodId(
    r'fillColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillColor2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> fillColor2(
    jni.JObject expression,
  ) {
    return _fillColor2(_class.reference.pointer,
            _id_fillColor2 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_fillOutlineColor = _class.staticMethodId(
    r'fillOutlineColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillOutlineColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillOutlineColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> fillOutlineColor(
    int i,
  ) {
    return _fillOutlineColor(_class.reference.pointer,
            _id_fillOutlineColor as jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_fillOutlineColor1 = _class.staticMethodId(
    r'fillOutlineColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillOutlineColor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillOutlineColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> fillOutlineColor1(
    jni.JString string,
  ) {
    return _fillOutlineColor1(_class.reference.pointer,
            _id_fillOutlineColor1 as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_fillOutlineColor2 = _class.staticMethodId(
    r'fillOutlineColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillOutlineColor2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillOutlineColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> fillOutlineColor2(
    jni.JObject expression,
  ) {
    return _fillOutlineColor2(
            _class.reference.pointer,
            _id_fillOutlineColor2 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_fillTranslate = _class.staticMethodId(
    r'fillTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillTranslate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>> fillTranslate(
    jni.JArray<jni.JFloat> floats,
  ) {
    return _fillTranslate(_class.reference.pointer,
            _id_fillTranslate as jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_fillTranslate1 = _class.staticMethodId(
    r'fillTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillTranslate1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> fillTranslate1(
    jni.JObject expression,
  ) {
    return _fillTranslate1(
            _class.reference.pointer,
            _id_fillTranslate1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_fillTranslateAnchor = _class.staticMethodId(
    r'fillTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillTranslateAnchor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> fillTranslateAnchor(
    jni.JString string,
  ) {
    return _fillTranslateAnchor(
            _class.reference.pointer,
            _id_fillTranslateAnchor as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_fillTranslateAnchor1 = _class.staticMethodId(
    r'fillTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillTranslateAnchor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> fillTranslateAnchor1(
    jni.JObject expression,
  ) {
    return _fillTranslateAnchor1(
            _class.reference.pointer,
            _id_fillTranslateAnchor1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_fillPattern = _class.staticMethodId(
    r'fillPattern',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillPattern = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillPattern(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> fillPattern(
    jni.JString string,
  ) {
    return _fillPattern(_class.reference.pointer,
            _id_fillPattern as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_fillPattern1 = _class.staticMethodId(
    r'fillPattern',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillPattern1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillPattern(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> fillPattern1(
    jni.JObject expression,
  ) {
    return _fillPattern1(_class.reference.pointer,
            _id_fillPattern1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_lineOpacity = _class.staticMethodId(
    r'lineOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineOpacity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> lineOpacity(
    jni.JFloat float,
  ) {
    return _lineOpacity(_class.reference.pointer,
            _id_lineOpacity as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_lineOpacity1 = _class.staticMethodId(
    r'lineOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineOpacity1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> lineOpacity1(
    jni.JObject expression,
  ) {
    return _lineOpacity1(_class.reference.pointer,
            _id_lineOpacity1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_lineColor = _class.staticMethodId(
    r'lineColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> lineColor(
    int i,
  ) {
    return _lineColor(
            _class.reference.pointer, _id_lineColor as jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_lineColor1 = _class.staticMethodId(
    r'lineColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineColor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> lineColor1(
    jni.JString string,
  ) {
    return _lineColor1(_class.reference.pointer,
            _id_lineColor1 as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_lineColor2 = _class.staticMethodId(
    r'lineColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineColor2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> lineColor2(
    jni.JObject expression,
  ) {
    return _lineColor2(_class.reference.pointer,
            _id_lineColor2 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_lineTranslate = _class.staticMethodId(
    r'lineTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineTranslate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>> lineTranslate(
    jni.JArray<jni.JFloat> floats,
  ) {
    return _lineTranslate(_class.reference.pointer,
            _id_lineTranslate as jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_lineTranslate1 = _class.staticMethodId(
    r'lineTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineTranslate1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> lineTranslate1(
    jni.JObject expression,
  ) {
    return _lineTranslate1(
            _class.reference.pointer,
            _id_lineTranslate1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_lineTranslateAnchor = _class.staticMethodId(
    r'lineTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineTranslateAnchor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> lineTranslateAnchor(
    jni.JString string,
  ) {
    return _lineTranslateAnchor(
            _class.reference.pointer,
            _id_lineTranslateAnchor as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_lineTranslateAnchor1 = _class.staticMethodId(
    r'lineTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineTranslateAnchor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> lineTranslateAnchor1(
    jni.JObject expression,
  ) {
    return _lineTranslateAnchor1(
            _class.reference.pointer,
            _id_lineTranslateAnchor1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_lineWidth = _class.staticMethodId(
    r'lineWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineWidth = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> lineWidth(
    jni.JFloat float,
  ) {
    return _lineWidth(_class.reference.pointer,
            _id_lineWidth as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_lineWidth1 = _class.staticMethodId(
    r'lineWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineWidth1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> lineWidth1(
    jni.JObject expression,
  ) {
    return _lineWidth1(_class.reference.pointer,
            _id_lineWidth1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_lineGapWidth = _class.staticMethodId(
    r'lineGapWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineGapWidth = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineGapWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> lineGapWidth(
    jni.JFloat float,
  ) {
    return _lineGapWidth(_class.reference.pointer,
            _id_lineGapWidth as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_lineGapWidth1 = _class.staticMethodId(
    r'lineGapWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineGapWidth1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineGapWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> lineGapWidth1(
    jni.JObject expression,
  ) {
    return _lineGapWidth1(_class.reference.pointer,
            _id_lineGapWidth1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_lineOffset = _class.staticMethodId(
    r'lineOffset',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineOffset = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineOffset(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> lineOffset(
    jni.JFloat float,
  ) {
    return _lineOffset(_class.reference.pointer,
            _id_lineOffset as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_lineOffset1 = _class.staticMethodId(
    r'lineOffset',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineOffset1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineOffset(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> lineOffset1(
    jni.JObject expression,
  ) {
    return _lineOffset1(_class.reference.pointer,
            _id_lineOffset1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_lineBlur = _class.staticMethodId(
    r'lineBlur',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineBlur = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineBlur(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> lineBlur(
    jni.JFloat float,
  ) {
    return _lineBlur(_class.reference.pointer, _id_lineBlur as jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_lineBlur1 = _class.staticMethodId(
    r'lineBlur',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineBlur1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineBlur(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> lineBlur1(
    jni.JObject expression,
  ) {
    return _lineBlur1(_class.reference.pointer,
            _id_lineBlur1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_lineDasharray = _class.staticMethodId(
    r'lineDasharray',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineDasharray = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineDasharray(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>> lineDasharray(
    jni.JArray<jni.JFloat> floats,
  ) {
    return _lineDasharray(_class.reference.pointer,
            _id_lineDasharray as jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_lineDasharray1 = _class.staticMethodId(
    r'lineDasharray',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineDasharray1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineDasharray(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> lineDasharray1(
    jni.JObject expression,
  ) {
    return _lineDasharray1(
            _class.reference.pointer,
            _id_lineDasharray1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_linePattern = _class.staticMethodId(
    r'linePattern',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _linePattern = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue linePattern(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> linePattern(
    jni.JString string,
  ) {
    return _linePattern(_class.reference.pointer,
            _id_linePattern as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_linePattern1 = _class.staticMethodId(
    r'linePattern',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _linePattern1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue linePattern(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> linePattern1(
    jni.JObject expression,
  ) {
    return _linePattern1(_class.reference.pointer,
            _id_linePattern1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_lineGradient = _class.staticMethodId(
    r'lineGradient',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineGradient = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineGradient(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> lineGradient(
    int i,
  ) {
    return _lineGradient(
            _class.reference.pointer, _id_lineGradient as jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_lineGradient1 = _class.staticMethodId(
    r'lineGradient',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineGradient1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineGradient(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> lineGradient1(
    jni.JString string,
  ) {
    return _lineGradient1(_class.reference.pointer,
            _id_lineGradient1 as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_lineGradient2 = _class.staticMethodId(
    r'lineGradient',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineGradient2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineGradient(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> lineGradient2(
    jni.JObject expression,
  ) {
    return _lineGradient2(_class.reference.pointer,
            _id_lineGradient2 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconOpacity = _class.staticMethodId(
    r'iconOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOpacity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> iconOpacity(
    jni.JFloat float,
  ) {
    return _iconOpacity(_class.reference.pointer,
            _id_iconOpacity as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_iconOpacity1 = _class.staticMethodId(
    r'iconOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOpacity1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconOpacity1(
    jni.JObject expression,
  ) {
    return _iconOpacity1(_class.reference.pointer,
            _id_iconOpacity1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconColor = _class.staticMethodId(
    r'iconColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> iconColor(
    int i,
  ) {
    return _iconColor(
            _class.reference.pointer, _id_iconColor as jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_iconColor1 = _class.staticMethodId(
    r'iconColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconColor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> iconColor1(
    jni.JString string,
  ) {
    return _iconColor1(_class.reference.pointer,
            _id_iconColor1 as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_iconColor2 = _class.staticMethodId(
    r'iconColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconColor2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconColor2(
    jni.JObject expression,
  ) {
    return _iconColor2(_class.reference.pointer,
            _id_iconColor2 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconHaloColor = _class.staticMethodId(
    r'iconHaloColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> iconHaloColor(
    int i,
  ) {
    return _iconHaloColor(
            _class.reference.pointer, _id_iconHaloColor as jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_iconHaloColor1 = _class.staticMethodId(
    r'iconHaloColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloColor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> iconHaloColor1(
    jni.JString string,
  ) {
    return _iconHaloColor1(_class.reference.pointer,
            _id_iconHaloColor1 as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_iconHaloColor2 = _class.staticMethodId(
    r'iconHaloColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloColor2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconHaloColor2(
    jni.JObject expression,
  ) {
    return _iconHaloColor2(
            _class.reference.pointer,
            _id_iconHaloColor2 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconHaloWidth = _class.staticMethodId(
    r'iconHaloWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloWidth = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> iconHaloWidth(
    jni.JFloat float,
  ) {
    return _iconHaloWidth(_class.reference.pointer,
            _id_iconHaloWidth as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_iconHaloWidth1 = _class.staticMethodId(
    r'iconHaloWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloWidth1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconHaloWidth1(
    jni.JObject expression,
  ) {
    return _iconHaloWidth1(
            _class.reference.pointer,
            _id_iconHaloWidth1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconHaloBlur = _class.staticMethodId(
    r'iconHaloBlur',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloBlur = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloBlur(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> iconHaloBlur(
    jni.JFloat float,
  ) {
    return _iconHaloBlur(_class.reference.pointer,
            _id_iconHaloBlur as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_iconHaloBlur1 = _class.staticMethodId(
    r'iconHaloBlur',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconHaloBlur1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconHaloBlur(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconHaloBlur1(
    jni.JObject expression,
  ) {
    return _iconHaloBlur1(_class.reference.pointer,
            _id_iconHaloBlur1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconTranslate = _class.staticMethodId(
    r'iconTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTranslate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>> iconTranslate(
    jni.JArray<jni.JFloat> floats,
  ) {
    return _iconTranslate(_class.reference.pointer,
            _id_iconTranslate as jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_iconTranslate1 = _class.staticMethodId(
    r'iconTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTranslate1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconTranslate1(
    jni.JObject expression,
  ) {
    return _iconTranslate1(
            _class.reference.pointer,
            _id_iconTranslate1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconTranslateAnchor = _class.staticMethodId(
    r'iconTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTranslateAnchor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> iconTranslateAnchor(
    jni.JString string,
  ) {
    return _iconTranslateAnchor(
            _class.reference.pointer,
            _id_iconTranslateAnchor as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_iconTranslateAnchor1 = _class.staticMethodId(
    r'iconTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTranslateAnchor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconTranslateAnchor1(
    jni.JObject expression,
  ) {
    return _iconTranslateAnchor1(
            _class.reference.pointer,
            _id_iconTranslateAnchor1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textOpacity = _class.staticMethodId(
    r'textOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOpacity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> textOpacity(
    jni.JFloat float,
  ) {
    return _textOpacity(_class.reference.pointer,
            _id_textOpacity as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_textOpacity1 = _class.staticMethodId(
    r'textOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOpacity1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textOpacity1(
    jni.JObject expression,
  ) {
    return _textOpacity1(_class.reference.pointer,
            _id_textOpacity1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textColor = _class.staticMethodId(
    r'textColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> textColor(
    int i,
  ) {
    return _textColor(
            _class.reference.pointer, _id_textColor as jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_textColor1 = _class.staticMethodId(
    r'textColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textColor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> textColor1(
    jni.JString string,
  ) {
    return _textColor1(_class.reference.pointer,
            _id_textColor1 as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_textColor2 = _class.staticMethodId(
    r'textColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textColor2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textColor2(
    jni.JObject expression,
  ) {
    return _textColor2(_class.reference.pointer,
            _id_textColor2 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textHaloColor = _class.staticMethodId(
    r'textHaloColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> textHaloColor(
    int i,
  ) {
    return _textHaloColor(
            _class.reference.pointer, _id_textHaloColor as jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_textHaloColor1 = _class.staticMethodId(
    r'textHaloColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloColor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> textHaloColor1(
    jni.JString string,
  ) {
    return _textHaloColor1(_class.reference.pointer,
            _id_textHaloColor1 as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_textHaloColor2 = _class.staticMethodId(
    r'textHaloColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloColor2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textHaloColor2(
    jni.JObject expression,
  ) {
    return _textHaloColor2(
            _class.reference.pointer,
            _id_textHaloColor2 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textHaloWidth = _class.staticMethodId(
    r'textHaloWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloWidth = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> textHaloWidth(
    jni.JFloat float,
  ) {
    return _textHaloWidth(_class.reference.pointer,
            _id_textHaloWidth as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_textHaloWidth1 = _class.staticMethodId(
    r'textHaloWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloWidth1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textHaloWidth1(
    jni.JObject expression,
  ) {
    return _textHaloWidth1(
            _class.reference.pointer,
            _id_textHaloWidth1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textHaloBlur = _class.staticMethodId(
    r'textHaloBlur',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloBlur = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloBlur(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> textHaloBlur(
    jni.JFloat float,
  ) {
    return _textHaloBlur(_class.reference.pointer,
            _id_textHaloBlur as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_textHaloBlur1 = _class.staticMethodId(
    r'textHaloBlur',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textHaloBlur1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textHaloBlur(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textHaloBlur1(
    jni.JObject expression,
  ) {
    return _textHaloBlur1(_class.reference.pointer,
            _id_textHaloBlur1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textTranslate = _class.staticMethodId(
    r'textTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTranslate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>> textTranslate(
    jni.JArray<jni.JFloat> floats,
  ) {
    return _textTranslate(_class.reference.pointer,
            _id_textTranslate as jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_textTranslate1 = _class.staticMethodId(
    r'textTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTranslate1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textTranslate1(
    jni.JObject expression,
  ) {
    return _textTranslate1(
            _class.reference.pointer,
            _id_textTranslate1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textTranslateAnchor = _class.staticMethodId(
    r'textTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTranslateAnchor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> textTranslateAnchor(
    jni.JString string,
  ) {
    return _textTranslateAnchor(
            _class.reference.pointer,
            _id_textTranslateAnchor as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_textTranslateAnchor1 = _class.staticMethodId(
    r'textTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTranslateAnchor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textTranslateAnchor1(
    jni.JObject expression,
  ) {
    return _textTranslateAnchor1(
            _class.reference.pointer,
            _id_textTranslateAnchor1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_circleRadius = _class.staticMethodId(
    r'circleRadius',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleRadius = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleRadius(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> circleRadius(
    jni.JFloat float,
  ) {
    return _circleRadius(_class.reference.pointer,
            _id_circleRadius as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_circleRadius1 = _class.staticMethodId(
    r'circleRadius',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleRadius1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleRadius(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> circleRadius1(
    jni.JObject expression,
  ) {
    return _circleRadius1(_class.reference.pointer,
            _id_circleRadius1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_circleColor = _class.staticMethodId(
    r'circleColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> circleColor(
    int i,
  ) {
    return _circleColor(
            _class.reference.pointer, _id_circleColor as jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_circleColor1 = _class.staticMethodId(
    r'circleColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleColor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> circleColor1(
    jni.JString string,
  ) {
    return _circleColor1(_class.reference.pointer,
            _id_circleColor1 as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_circleColor2 = _class.staticMethodId(
    r'circleColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleColor2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> circleColor2(
    jni.JObject expression,
  ) {
    return _circleColor2(_class.reference.pointer,
            _id_circleColor2 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_circleBlur = _class.staticMethodId(
    r'circleBlur',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleBlur = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleBlur(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> circleBlur(
    jni.JFloat float,
  ) {
    return _circleBlur(_class.reference.pointer,
            _id_circleBlur as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_circleBlur1 = _class.staticMethodId(
    r'circleBlur',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleBlur1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleBlur(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> circleBlur1(
    jni.JObject expression,
  ) {
    return _circleBlur1(_class.reference.pointer,
            _id_circleBlur1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_circleOpacity = _class.staticMethodId(
    r'circleOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleOpacity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> circleOpacity(
    jni.JFloat float,
  ) {
    return _circleOpacity(_class.reference.pointer,
            _id_circleOpacity as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_circleOpacity1 = _class.staticMethodId(
    r'circleOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleOpacity1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> circleOpacity1(
    jni.JObject expression,
  ) {
    return _circleOpacity1(
            _class.reference.pointer,
            _id_circleOpacity1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_circleTranslate = _class.staticMethodId(
    r'circleTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleTranslate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>> circleTranslate(
    jni.JArray<jni.JFloat> floats,
  ) {
    return _circleTranslate(_class.reference.pointer,
            _id_circleTranslate as jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_circleTranslate1 = _class.staticMethodId(
    r'circleTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleTranslate1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> circleTranslate1(
    jni.JObject expression,
  ) {
    return _circleTranslate1(
            _class.reference.pointer,
            _id_circleTranslate1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_circleTranslateAnchor = _class.staticMethodId(
    r'circleTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleTranslateAnchor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> circleTranslateAnchor(
    jni.JString string,
  ) {
    return _circleTranslateAnchor(
            _class.reference.pointer,
            _id_circleTranslateAnchor as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_circleTranslateAnchor1 = _class.staticMethodId(
    r'circleTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleTranslateAnchor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> circleTranslateAnchor1(
    jni.JObject expression,
  ) {
    return _circleTranslateAnchor1(
            _class.reference.pointer,
            _id_circleTranslateAnchor1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_circlePitchScale = _class.staticMethodId(
    r'circlePitchScale',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circlePitchScale = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circlePitchScale(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> circlePitchScale(
    jni.JString string,
  ) {
    return _circlePitchScale(_class.reference.pointer,
            _id_circlePitchScale as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_circlePitchScale1 = _class.staticMethodId(
    r'circlePitchScale',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circlePitchScale1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circlePitchScale(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> circlePitchScale1(
    jni.JObject expression,
  ) {
    return _circlePitchScale1(
            _class.reference.pointer,
            _id_circlePitchScale1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_circlePitchAlignment = _class.staticMethodId(
    r'circlePitchAlignment',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circlePitchAlignment = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circlePitchAlignment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> circlePitchAlignment(
    jni.JString string,
  ) {
    return _circlePitchAlignment(
            _class.reference.pointer,
            _id_circlePitchAlignment as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_circlePitchAlignment1 = _class.staticMethodId(
    r'circlePitchAlignment',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circlePitchAlignment1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circlePitchAlignment(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> circlePitchAlignment1(
    jni.JObject expression,
  ) {
    return _circlePitchAlignment1(
            _class.reference.pointer,
            _id_circlePitchAlignment1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_circleStrokeWidth = _class.staticMethodId(
    r'circleStrokeWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeWidth = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> circleStrokeWidth(
    jni.JFloat float,
  ) {
    return _circleStrokeWidth(_class.reference.pointer,
            _id_circleStrokeWidth as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_circleStrokeWidth1 = _class.staticMethodId(
    r'circleStrokeWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeWidth1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> circleStrokeWidth1(
    jni.JObject expression,
  ) {
    return _circleStrokeWidth1(
            _class.reference.pointer,
            _id_circleStrokeWidth1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_circleStrokeColor = _class.staticMethodId(
    r'circleStrokeColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> circleStrokeColor(
    int i,
  ) {
    return _circleStrokeColor(_class.reference.pointer,
            _id_circleStrokeColor as jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_circleStrokeColor1 = _class.staticMethodId(
    r'circleStrokeColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeColor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> circleStrokeColor1(
    jni.JString string,
  ) {
    return _circleStrokeColor1(
            _class.reference.pointer,
            _id_circleStrokeColor1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_circleStrokeColor2 = _class.staticMethodId(
    r'circleStrokeColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeColor2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> circleStrokeColor2(
    jni.JObject expression,
  ) {
    return _circleStrokeColor2(
            _class.reference.pointer,
            _id_circleStrokeColor2 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_circleStrokeOpacity = _class.staticMethodId(
    r'circleStrokeOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeOpacity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> circleStrokeOpacity(
    jni.JFloat float,
  ) {
    return _circleStrokeOpacity(
            _class.reference.pointer,
            _id_circleStrokeOpacity as jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_circleStrokeOpacity1 = _class.staticMethodId(
    r'circleStrokeOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleStrokeOpacity1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleStrokeOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> circleStrokeOpacity1(
    jni.JObject expression,
  ) {
    return _circleStrokeOpacity1(
            _class.reference.pointer,
            _id_circleStrokeOpacity1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_heatmapRadius = _class.staticMethodId(
    r'heatmapRadius',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapRadius = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapRadius(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> heatmapRadius(
    jni.JFloat float,
  ) {
    return _heatmapRadius(_class.reference.pointer,
            _id_heatmapRadius as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_heatmapRadius1 = _class.staticMethodId(
    r'heatmapRadius',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapRadius1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapRadius(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> heatmapRadius1(
    jni.JObject expression,
  ) {
    return _heatmapRadius1(
            _class.reference.pointer,
            _id_heatmapRadius1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_heatmapWeight = _class.staticMethodId(
    r'heatmapWeight',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapWeight = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapWeight(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> heatmapWeight(
    jni.JFloat float,
  ) {
    return _heatmapWeight(_class.reference.pointer,
            _id_heatmapWeight as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_heatmapWeight1 = _class.staticMethodId(
    r'heatmapWeight',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapWeight1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapWeight(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> heatmapWeight1(
    jni.JObject expression,
  ) {
    return _heatmapWeight1(
            _class.reference.pointer,
            _id_heatmapWeight1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_heatmapIntensity = _class.staticMethodId(
    r'heatmapIntensity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapIntensity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapIntensity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> heatmapIntensity(
    jni.JFloat float,
  ) {
    return _heatmapIntensity(_class.reference.pointer,
            _id_heatmapIntensity as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_heatmapIntensity1 = _class.staticMethodId(
    r'heatmapIntensity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapIntensity1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapIntensity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> heatmapIntensity1(
    jni.JObject expression,
  ) {
    return _heatmapIntensity1(
            _class.reference.pointer,
            _id_heatmapIntensity1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_heatmapColor = _class.staticMethodId(
    r'heatmapColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> heatmapColor(
    int i,
  ) {
    return _heatmapColor(
            _class.reference.pointer, _id_heatmapColor as jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_heatmapColor1 = _class.staticMethodId(
    r'heatmapColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapColor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> heatmapColor1(
    jni.JString string,
  ) {
    return _heatmapColor1(_class.reference.pointer,
            _id_heatmapColor1 as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_heatmapColor2 = _class.staticMethodId(
    r'heatmapColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapColor2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> heatmapColor2(
    jni.JObject expression,
  ) {
    return _heatmapColor2(_class.reference.pointer,
            _id_heatmapColor2 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_heatmapOpacity = _class.staticMethodId(
    r'heatmapOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapOpacity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> heatmapOpacity(
    jni.JFloat float,
  ) {
    return _heatmapOpacity(_class.reference.pointer,
            _id_heatmapOpacity as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_heatmapOpacity1 = _class.staticMethodId(
    r'heatmapOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _heatmapOpacity1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue heatmapOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> heatmapOpacity1(
    jni.JObject expression,
  ) {
    return _heatmapOpacity1(
            _class.reference.pointer,
            _id_heatmapOpacity1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_fillExtrusionOpacity = _class.staticMethodId(
    r'fillExtrusionOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionOpacity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> fillExtrusionOpacity(
    jni.JFloat float,
  ) {
    return _fillExtrusionOpacity(
            _class.reference.pointer,
            _id_fillExtrusionOpacity as jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_fillExtrusionOpacity1 = _class.staticMethodId(
    r'fillExtrusionOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionOpacity1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> fillExtrusionOpacity1(
    jni.JObject expression,
  ) {
    return _fillExtrusionOpacity1(
            _class.reference.pointer,
            _id_fillExtrusionOpacity1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_fillExtrusionColor = _class.staticMethodId(
    r'fillExtrusionColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> fillExtrusionColor(
    int i,
  ) {
    return _fillExtrusionColor(_class.reference.pointer,
            _id_fillExtrusionColor as jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_fillExtrusionColor1 = _class.staticMethodId(
    r'fillExtrusionColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionColor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> fillExtrusionColor1(
    jni.JString string,
  ) {
    return _fillExtrusionColor1(
            _class.reference.pointer,
            _id_fillExtrusionColor1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_fillExtrusionColor2 = _class.staticMethodId(
    r'fillExtrusionColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionColor2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> fillExtrusionColor2(
    jni.JObject expression,
  ) {
    return _fillExtrusionColor2(
            _class.reference.pointer,
            _id_fillExtrusionColor2 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_fillExtrusionTranslate = _class.staticMethodId(
    r'fillExtrusionTranslate',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionTranslate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionTranslate(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>>
      fillExtrusionTranslate(
    jni.JArray<jni.JFloat> floats,
  ) {
    return _fillExtrusionTranslate(
            _class.reference.pointer,
            _id_fillExtrusionTranslate as jni.JMethodIDPtr,
            floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_fillExtrusionTranslate1 = _class.staticMethodId(
    r'fillExtrusionTranslate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionTranslate1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionTranslate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> fillExtrusionTranslate1(
    jni.JObject expression,
  ) {
    return _fillExtrusionTranslate1(
            _class.reference.pointer,
            _id_fillExtrusionTranslate1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_fillExtrusionTranslateAnchor = _class.staticMethodId(
    r'fillExtrusionTranslateAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionTranslateAnchor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionTranslateAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> fillExtrusionTranslateAnchor(
    jni.JString string,
  ) {
    return _fillExtrusionTranslateAnchor(
            _class.reference.pointer,
            _id_fillExtrusionTranslateAnchor as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_fillExtrusionTranslateAnchor1 = _class.staticMethodId(
    r'fillExtrusionTranslateAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionTranslateAnchor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionTranslateAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject>
      fillExtrusionTranslateAnchor1(
    jni.JObject expression,
  ) {
    return _fillExtrusionTranslateAnchor1(
            _class.reference.pointer,
            _id_fillExtrusionTranslateAnchor1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_fillExtrusionPattern = _class.staticMethodId(
    r'fillExtrusionPattern',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionPattern = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionPattern(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> fillExtrusionPattern(
    jni.JString string,
  ) {
    return _fillExtrusionPattern(
            _class.reference.pointer,
            _id_fillExtrusionPattern as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_fillExtrusionPattern1 = _class.staticMethodId(
    r'fillExtrusionPattern',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionPattern1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionPattern(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> fillExtrusionPattern1(
    jni.JObject expression,
  ) {
    return _fillExtrusionPattern1(
            _class.reference.pointer,
            _id_fillExtrusionPattern1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_fillExtrusionHeight = _class.staticMethodId(
    r'fillExtrusionHeight',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionHeight = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionHeight(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> fillExtrusionHeight(
    jni.JFloat float,
  ) {
    return _fillExtrusionHeight(
            _class.reference.pointer,
            _id_fillExtrusionHeight as jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_fillExtrusionHeight1 = _class.staticMethodId(
    r'fillExtrusionHeight',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionHeight1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionHeight(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> fillExtrusionHeight1(
    jni.JObject expression,
  ) {
    return _fillExtrusionHeight1(
            _class.reference.pointer,
            _id_fillExtrusionHeight1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_fillExtrusionBase = _class.staticMethodId(
    r'fillExtrusionBase',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionBase = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionBase(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> fillExtrusionBase(
    jni.JFloat float,
  ) {
    return _fillExtrusionBase(_class.reference.pointer,
            _id_fillExtrusionBase as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_fillExtrusionBase1 = _class.staticMethodId(
    r'fillExtrusionBase',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionBase1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionBase(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> fillExtrusionBase1(
    jni.JObject expression,
  ) {
    return _fillExtrusionBase1(
            _class.reference.pointer,
            _id_fillExtrusionBase1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_fillExtrusionVerticalGradient = _class.staticMethodId(
    r'fillExtrusionVerticalGradient',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionVerticalGradient = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionVerticalGradient(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JBoolean>
      fillExtrusionVerticalGradient(
    jni.JBoolean boolean,
  ) {
    return _fillExtrusionVerticalGradient(
            _class.reference.pointer,
            _id_fillExtrusionVerticalGradient as jni.JMethodIDPtr,
            boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_fillExtrusionVerticalGradient1 = _class.staticMethodId(
    r'fillExtrusionVerticalGradient',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillExtrusionVerticalGradient1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillExtrusionVerticalGradient(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject>
      fillExtrusionVerticalGradient1(
    jni.JObject expression,
  ) {
    return _fillExtrusionVerticalGradient1(
            _class.reference.pointer,
            _id_fillExtrusionVerticalGradient1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_rasterOpacity = _class.staticMethodId(
    r'rasterOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterOpacity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> rasterOpacity(
    jni.JFloat float,
  ) {
    return _rasterOpacity(_class.reference.pointer,
            _id_rasterOpacity as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_rasterOpacity1 = _class.staticMethodId(
    r'rasterOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterOpacity1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> rasterOpacity1(
    jni.JObject expression,
  ) {
    return _rasterOpacity1(
            _class.reference.pointer,
            _id_rasterOpacity1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_rasterHueRotate = _class.staticMethodId(
    r'rasterHueRotate',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterHueRotate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterHueRotate(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> rasterHueRotate(
    jni.JFloat float,
  ) {
    return _rasterHueRotate(_class.reference.pointer,
            _id_rasterHueRotate as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_rasterHueRotate1 = _class.staticMethodId(
    r'rasterHueRotate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterHueRotate1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterHueRotate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> rasterHueRotate1(
    jni.JObject expression,
  ) {
    return _rasterHueRotate1(
            _class.reference.pointer,
            _id_rasterHueRotate1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_rasterBrightnessMin = _class.staticMethodId(
    r'rasterBrightnessMin',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterBrightnessMin = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterBrightnessMin(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> rasterBrightnessMin(
    jni.JFloat float,
  ) {
    return _rasterBrightnessMin(
            _class.reference.pointer,
            _id_rasterBrightnessMin as jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_rasterBrightnessMin1 = _class.staticMethodId(
    r'rasterBrightnessMin',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterBrightnessMin1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterBrightnessMin(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> rasterBrightnessMin1(
    jni.JObject expression,
  ) {
    return _rasterBrightnessMin1(
            _class.reference.pointer,
            _id_rasterBrightnessMin1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_rasterBrightnessMax = _class.staticMethodId(
    r'rasterBrightnessMax',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterBrightnessMax = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterBrightnessMax(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> rasterBrightnessMax(
    jni.JFloat float,
  ) {
    return _rasterBrightnessMax(
            _class.reference.pointer,
            _id_rasterBrightnessMax as jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_rasterBrightnessMax1 = _class.staticMethodId(
    r'rasterBrightnessMax',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterBrightnessMax1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterBrightnessMax(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> rasterBrightnessMax1(
    jni.JObject expression,
  ) {
    return _rasterBrightnessMax1(
            _class.reference.pointer,
            _id_rasterBrightnessMax1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_rasterSaturation = _class.staticMethodId(
    r'rasterSaturation',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterSaturation = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterSaturation(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> rasterSaturation(
    jni.JFloat float,
  ) {
    return _rasterSaturation(_class.reference.pointer,
            _id_rasterSaturation as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_rasterSaturation1 = _class.staticMethodId(
    r'rasterSaturation',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterSaturation1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterSaturation(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> rasterSaturation1(
    jni.JObject expression,
  ) {
    return _rasterSaturation1(
            _class.reference.pointer,
            _id_rasterSaturation1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_rasterContrast = _class.staticMethodId(
    r'rasterContrast',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterContrast = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterContrast(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> rasterContrast(
    jni.JFloat float,
  ) {
    return _rasterContrast(_class.reference.pointer,
            _id_rasterContrast as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_rasterContrast1 = _class.staticMethodId(
    r'rasterContrast',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterContrast1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterContrast(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> rasterContrast1(
    jni.JObject expression,
  ) {
    return _rasterContrast1(
            _class.reference.pointer,
            _id_rasterContrast1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_rasterResampling = _class.staticMethodId(
    r'rasterResampling',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterResampling = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterResampling(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> rasterResampling(
    jni.JString string,
  ) {
    return _rasterResampling(_class.reference.pointer,
            _id_rasterResampling as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_rasterResampling1 = _class.staticMethodId(
    r'rasterResampling',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterResampling1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterResampling(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> rasterResampling1(
    jni.JObject expression,
  ) {
    return _rasterResampling1(
            _class.reference.pointer,
            _id_rasterResampling1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_rasterFadeDuration = _class.staticMethodId(
    r'rasterFadeDuration',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterFadeDuration = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterFadeDuration(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> rasterFadeDuration(
    jni.JFloat float,
  ) {
    return _rasterFadeDuration(_class.reference.pointer,
            _id_rasterFadeDuration as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_rasterFadeDuration1 = _class.staticMethodId(
    r'rasterFadeDuration',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _rasterFadeDuration1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue rasterFadeDuration(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> rasterFadeDuration1(
    jni.JObject expression,
  ) {
    return _rasterFadeDuration1(
            _class.reference.pointer,
            _id_rasterFadeDuration1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_hillshadeIlluminationDirection = _class.staticMethodId(
    r'hillshadeIlluminationDirection',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeIlluminationDirection = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeIlluminationDirection(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat>
      hillshadeIlluminationDirection(
    jni.JFloat float,
  ) {
    return _hillshadeIlluminationDirection(
            _class.reference.pointer,
            _id_hillshadeIlluminationDirection as jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_hillshadeIlluminationDirection1 = _class.staticMethodId(
    r'hillshadeIlluminationDirection',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeIlluminationDirection1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeIlluminationDirection(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject>
      hillshadeIlluminationDirection1(
    jni.JObject expression,
  ) {
    return _hillshadeIlluminationDirection1(
            _class.reference.pointer,
            _id_hillshadeIlluminationDirection1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_hillshadeIlluminationAnchor = _class.staticMethodId(
    r'hillshadeIlluminationAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeIlluminationAnchor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeIlluminationAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> hillshadeIlluminationAnchor(
    jni.JString string,
  ) {
    return _hillshadeIlluminationAnchor(
            _class.reference.pointer,
            _id_hillshadeIlluminationAnchor as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_hillshadeIlluminationAnchor1 = _class.staticMethodId(
    r'hillshadeIlluminationAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeIlluminationAnchor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeIlluminationAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> hillshadeIlluminationAnchor1(
    jni.JObject expression,
  ) {
    return _hillshadeIlluminationAnchor1(
            _class.reference.pointer,
            _id_hillshadeIlluminationAnchor1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_hillshadeExaggeration = _class.staticMethodId(
    r'hillshadeExaggeration',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeExaggeration = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeExaggeration(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> hillshadeExaggeration(
    jni.JFloat float,
  ) {
    return _hillshadeExaggeration(
            _class.reference.pointer,
            _id_hillshadeExaggeration as jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_hillshadeExaggeration1 = _class.staticMethodId(
    r'hillshadeExaggeration',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeExaggeration1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeExaggeration(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> hillshadeExaggeration1(
    jni.JObject expression,
  ) {
    return _hillshadeExaggeration1(
            _class.reference.pointer,
            _id_hillshadeExaggeration1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_hillshadeShadowColor = _class.staticMethodId(
    r'hillshadeShadowColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeShadowColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeShadowColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> hillshadeShadowColor(
    int i,
  ) {
    return _hillshadeShadowColor(_class.reference.pointer,
            _id_hillshadeShadowColor as jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_hillshadeShadowColor1 = _class.staticMethodId(
    r'hillshadeShadowColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeShadowColor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeShadowColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> hillshadeShadowColor1(
    jni.JString string,
  ) {
    return _hillshadeShadowColor1(
            _class.reference.pointer,
            _id_hillshadeShadowColor1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_hillshadeShadowColor2 = _class.staticMethodId(
    r'hillshadeShadowColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeShadowColor2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeShadowColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> hillshadeShadowColor2(
    jni.JObject expression,
  ) {
    return _hillshadeShadowColor2(
            _class.reference.pointer,
            _id_hillshadeShadowColor2 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_hillshadeHighlightColor = _class.staticMethodId(
    r'hillshadeHighlightColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeHighlightColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeHighlightColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> hillshadeHighlightColor(
    int i,
  ) {
    return _hillshadeHighlightColor(_class.reference.pointer,
            _id_hillshadeHighlightColor as jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_hillshadeHighlightColor1 = _class.staticMethodId(
    r'hillshadeHighlightColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeHighlightColor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeHighlightColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> hillshadeHighlightColor1(
    jni.JString string,
  ) {
    return _hillshadeHighlightColor1(
            _class.reference.pointer,
            _id_hillshadeHighlightColor1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_hillshadeHighlightColor2 = _class.staticMethodId(
    r'hillshadeHighlightColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeHighlightColor2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeHighlightColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> hillshadeHighlightColor2(
    jni.JObject expression,
  ) {
    return _hillshadeHighlightColor2(
            _class.reference.pointer,
            _id_hillshadeHighlightColor2 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_hillshadeAccentColor = _class.staticMethodId(
    r'hillshadeAccentColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeAccentColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeAccentColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> hillshadeAccentColor(
    int i,
  ) {
    return _hillshadeAccentColor(_class.reference.pointer,
            _id_hillshadeAccentColor as jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_hillshadeAccentColor1 = _class.staticMethodId(
    r'hillshadeAccentColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeAccentColor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeAccentColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> hillshadeAccentColor1(
    jni.JString string,
  ) {
    return _hillshadeAccentColor1(
            _class.reference.pointer,
            _id_hillshadeAccentColor1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_hillshadeAccentColor2 = _class.staticMethodId(
    r'hillshadeAccentColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _hillshadeAccentColor2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue hillshadeAccentColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> hillshadeAccentColor2(
    jni.JObject expression,
  ) {
    return _hillshadeAccentColor2(
            _class.reference.pointer,
            _id_hillshadeAccentColor2 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_backgroundColor = _class.staticMethodId(
    r'backgroundColor',
    r'(I)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> backgroundColor(
    int i,
  ) {
    return _backgroundColor(_class.reference.pointer,
            _id_backgroundColor as jni.JMethodIDPtr, i)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_backgroundColor1 = _class.staticMethodId(
    r'backgroundColor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundColor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundColor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> backgroundColor1(
    jni.JString string,
  ) {
    return _backgroundColor1(_class.reference.pointer,
            _id_backgroundColor1 as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_backgroundColor2 = _class.staticMethodId(
    r'backgroundColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundColor2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> backgroundColor2(
    jni.JObject expression,
  ) {
    return _backgroundColor2(
            _class.reference.pointer,
            _id_backgroundColor2 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_backgroundPattern = _class.staticMethodId(
    r'backgroundPattern',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundPattern = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundPattern(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> backgroundPattern(
    jni.JString string,
  ) {
    return _backgroundPattern(_class.reference.pointer,
            _id_backgroundPattern as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_backgroundPattern1 = _class.staticMethodId(
    r'backgroundPattern',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundPattern1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundPattern(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> backgroundPattern1(
    jni.JObject expression,
  ) {
    return _backgroundPattern1(
            _class.reference.pointer,
            _id_backgroundPattern1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_backgroundOpacity = _class.staticMethodId(
    r'backgroundOpacity',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundOpacity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundOpacity(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> backgroundOpacity(
    jni.JFloat float,
  ) {
    return _backgroundOpacity(_class.reference.pointer,
            _id_backgroundOpacity as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_backgroundOpacity1 = _class.staticMethodId(
    r'backgroundOpacity',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _backgroundOpacity1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue backgroundOpacity(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> backgroundOpacity1(
    jni.JObject expression,
  ) {
    return _backgroundOpacity1(
            _class.reference.pointer,
            _id_backgroundOpacity1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_fillSortKey = _class.staticMethodId(
    r'fillSortKey',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillSortKey = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillSortKey(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> fillSortKey(
    jni.JFloat float,
  ) {
    return _fillSortKey(_class.reference.pointer,
            _id_fillSortKey as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_fillSortKey1 = _class.staticMethodId(
    r'fillSortKey',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _fillSortKey1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue fillSortKey(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> fillSortKey1(
    jni.JObject expression,
  ) {
    return _fillSortKey1(_class.reference.pointer,
            _id_fillSortKey1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_lineCap = _class.staticMethodId(
    r'lineCap',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineCap = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineCap(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> lineCap(
    jni.JString string,
  ) {
    return _lineCap(_class.reference.pointer, _id_lineCap as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_lineCap1 = _class.staticMethodId(
    r'lineCap',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineCap1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineCap(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> lineCap1(
    jni.JObject expression,
  ) {
    return _lineCap1(_class.reference.pointer, _id_lineCap1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_lineJoin = _class.staticMethodId(
    r'lineJoin',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineJoin = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineJoin(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> lineJoin(
    jni.JString string,
  ) {
    return _lineJoin(_class.reference.pointer, _id_lineJoin as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_lineJoin1 = _class.staticMethodId(
    r'lineJoin',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineJoin1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineJoin(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> lineJoin1(
    jni.JObject expression,
  ) {
    return _lineJoin1(_class.reference.pointer,
            _id_lineJoin1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_lineMiterLimit = _class.staticMethodId(
    r'lineMiterLimit',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineMiterLimit = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineMiterLimit(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> lineMiterLimit(
    jni.JFloat float,
  ) {
    return _lineMiterLimit(_class.reference.pointer,
            _id_lineMiterLimit as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_lineMiterLimit1 = _class.staticMethodId(
    r'lineMiterLimit',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineMiterLimit1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineMiterLimit(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> lineMiterLimit1(
    jni.JObject expression,
  ) {
    return _lineMiterLimit1(
            _class.reference.pointer,
            _id_lineMiterLimit1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_lineRoundLimit = _class.staticMethodId(
    r'lineRoundLimit',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineRoundLimit = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineRoundLimit(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> lineRoundLimit(
    jni.JFloat float,
  ) {
    return _lineRoundLimit(_class.reference.pointer,
            _id_lineRoundLimit as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_lineRoundLimit1 = _class.staticMethodId(
    r'lineRoundLimit',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineRoundLimit1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineRoundLimit(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> lineRoundLimit1(
    jni.JObject expression,
  ) {
    return _lineRoundLimit1(
            _class.reference.pointer,
            _id_lineRoundLimit1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_lineSortKey = _class.staticMethodId(
    r'lineSortKey',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineSortKey = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineSortKey(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> lineSortKey(
    jni.JFloat float,
  ) {
    return _lineSortKey(_class.reference.pointer,
            _id_lineSortKey as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_lineSortKey1 = _class.staticMethodId(
    r'lineSortKey',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _lineSortKey1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue lineSortKey(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> lineSortKey1(
    jni.JObject expression,
  ) {
    return _lineSortKey1(_class.reference.pointer,
            _id_lineSortKey1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_symbolPlacement = _class.staticMethodId(
    r'symbolPlacement',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolPlacement = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolPlacement(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> symbolPlacement(
    jni.JString string,
  ) {
    return _symbolPlacement(_class.reference.pointer,
            _id_symbolPlacement as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_symbolPlacement1 = _class.staticMethodId(
    r'symbolPlacement',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolPlacement1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolPlacement(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> symbolPlacement1(
    jni.JObject expression,
  ) {
    return _symbolPlacement1(
            _class.reference.pointer,
            _id_symbolPlacement1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_symbolSpacing = _class.staticMethodId(
    r'symbolSpacing',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolSpacing = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolSpacing(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> symbolSpacing(
    jni.JFloat float,
  ) {
    return _symbolSpacing(_class.reference.pointer,
            _id_symbolSpacing as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_symbolSpacing1 = _class.staticMethodId(
    r'symbolSpacing',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolSpacing1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolSpacing(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> symbolSpacing1(
    jni.JObject expression,
  ) {
    return _symbolSpacing1(
            _class.reference.pointer,
            _id_symbolSpacing1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_symbolAvoidEdges = _class.staticMethodId(
    r'symbolAvoidEdges',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolAvoidEdges = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolAvoidEdges(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JBoolean> symbolAvoidEdges(
    jni.JBoolean boolean,
  ) {
    return _symbolAvoidEdges(_class.reference.pointer,
            _id_symbolAvoidEdges as jni.JMethodIDPtr, boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_symbolAvoidEdges1 = _class.staticMethodId(
    r'symbolAvoidEdges',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolAvoidEdges1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolAvoidEdges(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> symbolAvoidEdges1(
    jni.JObject expression,
  ) {
    return _symbolAvoidEdges1(
            _class.reference.pointer,
            _id_symbolAvoidEdges1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_symbolSortKey = _class.staticMethodId(
    r'symbolSortKey',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolSortKey = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolSortKey(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> symbolSortKey(
    jni.JFloat float,
  ) {
    return _symbolSortKey(_class.reference.pointer,
            _id_symbolSortKey as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_symbolSortKey1 = _class.staticMethodId(
    r'symbolSortKey',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolSortKey1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolSortKey(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> symbolSortKey1(
    jni.JObject expression,
  ) {
    return _symbolSortKey1(
            _class.reference.pointer,
            _id_symbolSortKey1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_symbolZOrder = _class.staticMethodId(
    r'symbolZOrder',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolZOrder = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolZOrder(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> symbolZOrder(
    jni.JString string,
  ) {
    return _symbolZOrder(_class.reference.pointer,
            _id_symbolZOrder as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_symbolZOrder1 = _class.staticMethodId(
    r'symbolZOrder',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _symbolZOrder1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue symbolZOrder(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> symbolZOrder1(
    jni.JObject expression,
  ) {
    return _symbolZOrder1(_class.reference.pointer,
            _id_symbolZOrder1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconAllowOverlap = _class.staticMethodId(
    r'iconAllowOverlap',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconAllowOverlap = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconAllowOverlap(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JBoolean> iconAllowOverlap(
    jni.JBoolean boolean,
  ) {
    return _iconAllowOverlap(_class.reference.pointer,
            _id_iconAllowOverlap as jni.JMethodIDPtr, boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_iconAllowOverlap1 = _class.staticMethodId(
    r'iconAllowOverlap',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconAllowOverlap1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconAllowOverlap(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconAllowOverlap1(
    jni.JObject expression,
  ) {
    return _iconAllowOverlap1(
            _class.reference.pointer,
            _id_iconAllowOverlap1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconIgnorePlacement = _class.staticMethodId(
    r'iconIgnorePlacement',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconIgnorePlacement = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconIgnorePlacement(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JBoolean> iconIgnorePlacement(
    jni.JBoolean boolean,
  ) {
    return _iconIgnorePlacement(
            _class.reference.pointer,
            _id_iconIgnorePlacement as jni.JMethodIDPtr,
            boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_iconIgnorePlacement1 = _class.staticMethodId(
    r'iconIgnorePlacement',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconIgnorePlacement1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconIgnorePlacement(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconIgnorePlacement1(
    jni.JObject expression,
  ) {
    return _iconIgnorePlacement1(
            _class.reference.pointer,
            _id_iconIgnorePlacement1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconOptional = _class.staticMethodId(
    r'iconOptional',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOptional = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOptional(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JBoolean> iconOptional(
    jni.JBoolean boolean,
  ) {
    return _iconOptional(_class.reference.pointer,
            _id_iconOptional as jni.JMethodIDPtr, boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_iconOptional1 = _class.staticMethodId(
    r'iconOptional',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOptional1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOptional(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconOptional1(
    jni.JObject expression,
  ) {
    return _iconOptional1(_class.reference.pointer,
            _id_iconOptional1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconRotationAlignment = _class.staticMethodId(
    r'iconRotationAlignment',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconRotationAlignment = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconRotationAlignment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> iconRotationAlignment(
    jni.JString string,
  ) {
    return _iconRotationAlignment(
            _class.reference.pointer,
            _id_iconRotationAlignment as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_iconRotationAlignment1 = _class.staticMethodId(
    r'iconRotationAlignment',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconRotationAlignment1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconRotationAlignment(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconRotationAlignment1(
    jni.JObject expression,
  ) {
    return _iconRotationAlignment1(
            _class.reference.pointer,
            _id_iconRotationAlignment1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconSize = _class.staticMethodId(
    r'iconSize',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconSize = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconSize(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> iconSize(
    jni.JFloat float,
  ) {
    return _iconSize(_class.reference.pointer, _id_iconSize as jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_iconSize1 = _class.staticMethodId(
    r'iconSize',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconSize1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconSize(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconSize1(
    jni.JObject expression,
  ) {
    return _iconSize1(_class.reference.pointer,
            _id_iconSize1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconTextFit = _class.staticMethodId(
    r'iconTextFit',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTextFit = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTextFit(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> iconTextFit(
    jni.JString string,
  ) {
    return _iconTextFit(_class.reference.pointer,
            _id_iconTextFit as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_iconTextFit1 = _class.staticMethodId(
    r'iconTextFit',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTextFit1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTextFit(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconTextFit1(
    jni.JObject expression,
  ) {
    return _iconTextFit1(_class.reference.pointer,
            _id_iconTextFit1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconTextFitPadding = _class.staticMethodId(
    r'iconTextFitPadding',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTextFitPadding = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTextFitPadding(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>>
      iconTextFitPadding(
    jni.JArray<jni.JFloat> floats,
  ) {
    return _iconTextFitPadding(
            _class.reference.pointer,
            _id_iconTextFitPadding as jni.JMethodIDPtr,
            floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_iconTextFitPadding1 = _class.staticMethodId(
    r'iconTextFitPadding',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconTextFitPadding1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconTextFitPadding(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconTextFitPadding1(
    jni.JObject expression,
  ) {
    return _iconTextFitPadding1(
            _class.reference.pointer,
            _id_iconTextFitPadding1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconImage = _class.staticMethodId(
    r'iconImage',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconImage = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconImage(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> iconImage(
    jni.JString string,
  ) {
    return _iconImage(_class.reference.pointer,
            _id_iconImage as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_iconImage1 = _class.staticMethodId(
    r'iconImage',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconImage1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconImage(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconImage1(
    jni.JObject expression,
  ) {
    return _iconImage1(_class.reference.pointer,
            _id_iconImage1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconRotate = _class.staticMethodId(
    r'iconRotate',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconRotate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconRotate(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> iconRotate(
    jni.JFloat float,
  ) {
    return _iconRotate(_class.reference.pointer,
            _id_iconRotate as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_iconRotate1 = _class.staticMethodId(
    r'iconRotate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconRotate1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconRotate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconRotate1(
    jni.JObject expression,
  ) {
    return _iconRotate1(_class.reference.pointer,
            _id_iconRotate1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconPadding = _class.staticMethodId(
    r'iconPadding',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconPadding = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconPadding(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>> iconPadding(
    jni.JArray<jni.JFloat> floats,
  ) {
    return _iconPadding(_class.reference.pointer,
            _id_iconPadding as jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_iconPadding1 = _class.staticMethodId(
    r'iconPadding',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconPadding1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconPadding(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconPadding1(
    jni.JObject expression,
  ) {
    return _iconPadding1(_class.reference.pointer,
            _id_iconPadding1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconKeepUpright = _class.staticMethodId(
    r'iconKeepUpright',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconKeepUpright = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconKeepUpright(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JBoolean> iconKeepUpright(
    jni.JBoolean boolean,
  ) {
    return _iconKeepUpright(_class.reference.pointer,
            _id_iconKeepUpright as jni.JMethodIDPtr, boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_iconKeepUpright1 = _class.staticMethodId(
    r'iconKeepUpright',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconKeepUpright1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconKeepUpright(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconKeepUpright1(
    jni.JObject expression,
  ) {
    return _iconKeepUpright1(
            _class.reference.pointer,
            _id_iconKeepUpright1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconOffset = _class.staticMethodId(
    r'iconOffset',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOffset = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOffset(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>> iconOffset(
    jni.JArray<jni.JFloat> floats,
  ) {
    return _iconOffset(_class.reference.pointer,
            _id_iconOffset as jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_iconOffset1 = _class.staticMethodId(
    r'iconOffset',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconOffset1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconOffset(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconOffset1(
    jni.JObject expression,
  ) {
    return _iconOffset1(_class.reference.pointer,
            _id_iconOffset1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconAnchor = _class.staticMethodId(
    r'iconAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconAnchor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> iconAnchor(
    jni.JString string,
  ) {
    return _iconAnchor(_class.reference.pointer,
            _id_iconAnchor as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_iconAnchor1 = _class.staticMethodId(
    r'iconAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconAnchor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconAnchor1(
    jni.JObject expression,
  ) {
    return _iconAnchor1(_class.reference.pointer,
            _id_iconAnchor1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_iconPitchAlignment = _class.staticMethodId(
    r'iconPitchAlignment',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconPitchAlignment = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconPitchAlignment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> iconPitchAlignment(
    jni.JString string,
  ) {
    return _iconPitchAlignment(
            _class.reference.pointer,
            _id_iconPitchAlignment as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_iconPitchAlignment1 = _class.staticMethodId(
    r'iconPitchAlignment',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _iconPitchAlignment1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue iconPitchAlignment(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> iconPitchAlignment1(
    jni.JObject expression,
  ) {
    return _iconPitchAlignment1(
            _class.reference.pointer,
            _id_iconPitchAlignment1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textPitchAlignment = _class.staticMethodId(
    r'textPitchAlignment',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textPitchAlignment = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textPitchAlignment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> textPitchAlignment(
    jni.JString string,
  ) {
    return _textPitchAlignment(
            _class.reference.pointer,
            _id_textPitchAlignment as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_textPitchAlignment1 = _class.staticMethodId(
    r'textPitchAlignment',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textPitchAlignment1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textPitchAlignment(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textPitchAlignment1(
    jni.JObject expression,
  ) {
    return _textPitchAlignment1(
            _class.reference.pointer,
            _id_textPitchAlignment1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textRotationAlignment = _class.staticMethodId(
    r'textRotationAlignment',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRotationAlignment = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRotationAlignment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> textRotationAlignment(
    jni.JString string,
  ) {
    return _textRotationAlignment(
            _class.reference.pointer,
            _id_textRotationAlignment as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_textRotationAlignment1 = _class.staticMethodId(
    r'textRotationAlignment',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRotationAlignment1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRotationAlignment(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textRotationAlignment1(
    jni.JObject expression,
  ) {
    return _textRotationAlignment1(
            _class.reference.pointer,
            _id_textRotationAlignment1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textField = _class.staticMethodId(
    r'textField',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textField = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textField(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> textField(
    jni.JString string,
  ) {
    return _textField(_class.reference.pointer,
            _id_textField as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_textField1 = _class.staticMethodId(
    r'textField',
    r'(Lorg/maplibre/android/style/types/Formatted;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textField1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textField(org.maplibre.android.style.types.Formatted formatted)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<formatted_.Formatted> textField1(
    formatted_.Formatted formatted,
  ) {
    return _textField1(_class.reference.pointer,
            _id_textField1 as jni.JMethodIDPtr, formatted.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(
            formatted_.$FormattedType()));
  }

  static final _id_textField2 = _class.staticMethodId(
    r'textField',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textField2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textField(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textField2(
    jni.JObject expression,
  ) {
    return _textField2(_class.reference.pointer,
            _id_textField2 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textFont = _class.staticMethodId(
    r'textFont',
    r'([Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textFont = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textFont(java.lang.Object[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JArray<jni.JString>> textFont(
    jni.JArray<jni.JString> strings,
  ) {
    return _textFont(_class.reference.pointer, _id_textFont as jni.JMethodIDPtr,
            strings.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JStringType())));
  }

  static final _id_textFont1 = _class.staticMethodId(
    r'textFont',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textFont1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textFont(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textFont1(
    jni.JObject expression,
  ) {
    return _textFont1(_class.reference.pointer,
            _id_textFont1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textSize = _class.staticMethodId(
    r'textSize',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textSize = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textSize(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> textSize(
    jni.JFloat float,
  ) {
    return _textSize(_class.reference.pointer, _id_textSize as jni.JMethodIDPtr,
            float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_textSize1 = _class.staticMethodId(
    r'textSize',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textSize1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textSize(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textSize1(
    jni.JObject expression,
  ) {
    return _textSize1(_class.reference.pointer,
            _id_textSize1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textMaxWidth = _class.staticMethodId(
    r'textMaxWidth',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textMaxWidth = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textMaxWidth(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> textMaxWidth(
    jni.JFloat float,
  ) {
    return _textMaxWidth(_class.reference.pointer,
            _id_textMaxWidth as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_textMaxWidth1 = _class.staticMethodId(
    r'textMaxWidth',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textMaxWidth1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textMaxWidth(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textMaxWidth1(
    jni.JObject expression,
  ) {
    return _textMaxWidth1(_class.reference.pointer,
            _id_textMaxWidth1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textLineHeight = _class.staticMethodId(
    r'textLineHeight',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textLineHeight = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textLineHeight(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> textLineHeight(
    jni.JFloat float,
  ) {
    return _textLineHeight(_class.reference.pointer,
            _id_textLineHeight as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_textLineHeight1 = _class.staticMethodId(
    r'textLineHeight',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textLineHeight1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textLineHeight(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textLineHeight1(
    jni.JObject expression,
  ) {
    return _textLineHeight1(
            _class.reference.pointer,
            _id_textLineHeight1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textLetterSpacing = _class.staticMethodId(
    r'textLetterSpacing',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textLetterSpacing = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textLetterSpacing(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> textLetterSpacing(
    jni.JFloat float,
  ) {
    return _textLetterSpacing(_class.reference.pointer,
            _id_textLetterSpacing as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_textLetterSpacing1 = _class.staticMethodId(
    r'textLetterSpacing',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textLetterSpacing1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textLetterSpacing(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textLetterSpacing1(
    jni.JObject expression,
  ) {
    return _textLetterSpacing1(
            _class.reference.pointer,
            _id_textLetterSpacing1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textJustify = _class.staticMethodId(
    r'textJustify',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textJustify = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textJustify(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> textJustify(
    jni.JString string,
  ) {
    return _textJustify(_class.reference.pointer,
            _id_textJustify as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_textJustify1 = _class.staticMethodId(
    r'textJustify',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textJustify1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textJustify(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textJustify1(
    jni.JObject expression,
  ) {
    return _textJustify1(_class.reference.pointer,
            _id_textJustify1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textRadialOffset = _class.staticMethodId(
    r'textRadialOffset',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRadialOffset = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRadialOffset(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> textRadialOffset(
    jni.JFloat float,
  ) {
    return _textRadialOffset(_class.reference.pointer,
            _id_textRadialOffset as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_textRadialOffset1 = _class.staticMethodId(
    r'textRadialOffset',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRadialOffset1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRadialOffset(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textRadialOffset1(
    jni.JObject expression,
  ) {
    return _textRadialOffset1(
            _class.reference.pointer,
            _id_textRadialOffset1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textVariableAnchor = _class.staticMethodId(
    r'textVariableAnchor',
    r'([Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textVariableAnchor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textVariableAnchor(java.lang.Object[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JArray<jni.JString>>
      textVariableAnchor(
    jni.JArray<jni.JString> strings,
  ) {
    return _textVariableAnchor(
            _class.reference.pointer,
            _id_textVariableAnchor as jni.JMethodIDPtr,
            strings.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JStringType())));
  }

  static final _id_textVariableAnchor1 = _class.staticMethodId(
    r'textVariableAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textVariableAnchor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textVariableAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textVariableAnchor1(
    jni.JObject expression,
  ) {
    return _textVariableAnchor1(
            _class.reference.pointer,
            _id_textVariableAnchor1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textAnchor = _class.staticMethodId(
    r'textAnchor',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textAnchor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textAnchor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> textAnchor(
    jni.JString string,
  ) {
    return _textAnchor(_class.reference.pointer,
            _id_textAnchor as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_textAnchor1 = _class.staticMethodId(
    r'textAnchor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textAnchor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textAnchor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textAnchor1(
    jni.JObject expression,
  ) {
    return _textAnchor1(_class.reference.pointer,
            _id_textAnchor1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textMaxAngle = _class.staticMethodId(
    r'textMaxAngle',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textMaxAngle = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textMaxAngle(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> textMaxAngle(
    jni.JFloat float,
  ) {
    return _textMaxAngle(_class.reference.pointer,
            _id_textMaxAngle as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_textMaxAngle1 = _class.staticMethodId(
    r'textMaxAngle',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textMaxAngle1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textMaxAngle(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textMaxAngle1(
    jni.JObject expression,
  ) {
    return _textMaxAngle1(_class.reference.pointer,
            _id_textMaxAngle1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textWritingMode = _class.staticMethodId(
    r'textWritingMode',
    r'([Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textWritingMode = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textWritingMode(java.lang.Object[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JArray<jni.JString>> textWritingMode(
    jni.JArray<jni.JString> strings,
  ) {
    return _textWritingMode(_class.reference.pointer,
            _id_textWritingMode as jni.JMethodIDPtr, strings.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JStringType())));
  }

  static final _id_textWritingMode1 = _class.staticMethodId(
    r'textWritingMode',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textWritingMode1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textWritingMode(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textWritingMode1(
    jni.JObject expression,
  ) {
    return _textWritingMode1(
            _class.reference.pointer,
            _id_textWritingMode1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textRotate = _class.staticMethodId(
    r'textRotate',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRotate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRotate(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> textRotate(
    jni.JFloat float,
  ) {
    return _textRotate(_class.reference.pointer,
            _id_textRotate as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_textRotate1 = _class.staticMethodId(
    r'textRotate',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textRotate1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textRotate(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textRotate1(
    jni.JObject expression,
  ) {
    return _textRotate1(_class.reference.pointer,
            _id_textRotate1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textPadding = _class.staticMethodId(
    r'textPadding',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textPadding = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textPadding(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> textPadding(
    jni.JFloat float,
  ) {
    return _textPadding(_class.reference.pointer,
            _id_textPadding as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_textPadding1 = _class.staticMethodId(
    r'textPadding',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textPadding1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textPadding(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textPadding1(
    jni.JObject expression,
  ) {
    return _textPadding1(_class.reference.pointer,
            _id_textPadding1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textKeepUpright = _class.staticMethodId(
    r'textKeepUpright',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textKeepUpright = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textKeepUpright(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JBoolean> textKeepUpright(
    jni.JBoolean boolean,
  ) {
    return _textKeepUpright(_class.reference.pointer,
            _id_textKeepUpright as jni.JMethodIDPtr, boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_textKeepUpright1 = _class.staticMethodId(
    r'textKeepUpright',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textKeepUpright1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textKeepUpright(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textKeepUpright1(
    jni.JObject expression,
  ) {
    return _textKeepUpright1(
            _class.reference.pointer,
            _id_textKeepUpright1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textTransform = _class.staticMethodId(
    r'textTransform',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTransform = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTransform(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JString> textTransform(
    jni.JString string,
  ) {
    return _textTransform(_class.reference.pointer,
            _id_textTransform as jni.JMethodIDPtr, string.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_textTransform1 = _class.staticMethodId(
    r'textTransform',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textTransform1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textTransform(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textTransform1(
    jni.JObject expression,
  ) {
    return _textTransform1(
            _class.reference.pointer,
            _id_textTransform1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textOffset = _class.staticMethodId(
    r'textOffset',
    r'([Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOffset = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOffset(java.lang.Object[] floats)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JArray<jni.JFloat>> textOffset(
    jni.JArray<jni.JFloat> floats,
  ) {
    return _textOffset(_class.reference.pointer,
            _id_textOffset as jni.JMethodIDPtr, floats.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(
            jni.JArrayType(jni.JFloatType())));
  }

  static final _id_textOffset1 = _class.staticMethodId(
    r'textOffset',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOffset1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOffset(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textOffset1(
    jni.JObject expression,
  ) {
    return _textOffset1(_class.reference.pointer,
            _id_textOffset1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textAllowOverlap = _class.staticMethodId(
    r'textAllowOverlap',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textAllowOverlap = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textAllowOverlap(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JBoolean> textAllowOverlap(
    jni.JBoolean boolean,
  ) {
    return _textAllowOverlap(_class.reference.pointer,
            _id_textAllowOverlap as jni.JMethodIDPtr, boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_textAllowOverlap1 = _class.staticMethodId(
    r'textAllowOverlap',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textAllowOverlap1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textAllowOverlap(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textAllowOverlap1(
    jni.JObject expression,
  ) {
    return _textAllowOverlap1(
            _class.reference.pointer,
            _id_textAllowOverlap1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textIgnorePlacement = _class.staticMethodId(
    r'textIgnorePlacement',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textIgnorePlacement = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textIgnorePlacement(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JBoolean> textIgnorePlacement(
    jni.JBoolean boolean,
  ) {
    return _textIgnorePlacement(
            _class.reference.pointer,
            _id_textIgnorePlacement as jni.JMethodIDPtr,
            boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_textIgnorePlacement1 = _class.staticMethodId(
    r'textIgnorePlacement',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textIgnorePlacement1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textIgnorePlacement(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textIgnorePlacement1(
    jni.JObject expression,
  ) {
    return _textIgnorePlacement1(
            _class.reference.pointer,
            _id_textIgnorePlacement1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_textOptional = _class.staticMethodId(
    r'textOptional',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOptional = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOptional(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JBoolean> textOptional(
    jni.JBoolean boolean,
  ) {
    return _textOptional(_class.reference.pointer,
            _id_textOptional as jni.JMethodIDPtr, boolean.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JBooleanType()));
  }

  static final _id_textOptional1 = _class.staticMethodId(
    r'textOptional',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _textOptional1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue textOptional(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> textOptional1(
    jni.JObject expression,
  ) {
    return _textOptional1(_class.reference.pointer,
            _id_textOptional1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }

  static final _id_circleSortKey = _class.staticMethodId(
    r'circleSortKey',
    r'(Ljava/lang/Float;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleSortKey = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleSortKey(java.lang.Float float)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JFloat> circleSortKey(
    jni.JFloat float,
  ) {
    return _circleSortKey(_class.reference.pointer,
            _id_circleSortKey as jni.JMethodIDPtr, float.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JFloatType()));
  }

  static final _id_circleSortKey1 = _class.staticMethodId(
    r'circleSortKey',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _circleSortKey1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.layers.PropertyValue circleSortKey(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static propertyvalue_.PropertyValue<jni.JObject> circleSortKey1(
    jni.JObject expression,
  ) {
    return _circleSortKey1(
            _class.reference.pointer,
            _id_circleSortKey1 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const propertyvalue_.$PropertyValueType(jni.JObjectType()));
  }
}

final class $PropertyFactoryType extends jni.JObjType<PropertyFactory> {
  const $PropertyFactoryType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/style/layers/PropertyFactory;';

  @override
  PropertyFactory fromReference(jni.JReference reference) =>
      PropertyFactory.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PropertyFactoryType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PropertyFactoryType) &&
        other is $PropertyFactoryType;
  }
}
