// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'PropertyValue.dart' as propertyvalue_;

/// from: `org.maplibre.android.style.layers.Layer`
class Layer extends jni.JObject {
  @override
  late final jni.JObjType<Layer> $type = type;

  Layer.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/style/layers/Layer');

  /// The type which includes information such as the signature of this class.
  static const type = $LayerType();
  static final _id_new0 = _class.constructorId(
    r'(J)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `protected void <init>(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Layer(
    int j,
  ) {
    return Layer.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr, j)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'()V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Layer.new1() {
    return Layer.fromReference(
        _new1(_class.reference.pointer, _id_new1 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_checkThread = _class.instanceMethodId(
    r'checkThread',
    r'()V',
  );

  static final _checkThread = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected void checkThread()`
  void checkThread() {
    _checkThread(reference.pointer, _id_checkThread as jni.JMethodIDPtr)
        .check();
  }

  static final _id_setProperties = _class.instanceMethodId(
    r'setProperties',
    r'([Lorg/maplibre/android/style/layers/PropertyValue;)V',
  );

  static final _setProperties = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setProperties(java.lang.Object[] propertyValues)`
  void setProperties(
    jni.JArray<propertyvalue_.PropertyValue<jni.JObject>> propertyValues,
  ) {
    _setProperties(reference.pointer, _id_setProperties as jni.JMethodIDPtr,
            propertyValues.reference.pointer)
        .check();
  }

  static final _id_getId = _class.instanceMethodId(
    r'getId',
    r'()Ljava/lang/String;',
  );

  static final _getId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getId()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getId() {
    return _getId(reference.pointer, _id_getId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getVisibility = _class.instanceMethodId(
    r'getVisibility',
    r'()Lorg/maplibre/android/style/layers/PropertyValue;',
  );

  static final _getVisibility = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.PropertyValue getVisibility()`
  /// The returned object must be released after use, by calling the [release] method.
  propertyvalue_.PropertyValue<jni.JString> getVisibility() {
    return _getVisibility(
            reference.pointer, _id_getVisibility as jni.JMethodIDPtr)
        .object(const propertyvalue_.$PropertyValueType(jni.JStringType()));
  }

  static final _id_getMinZoom = _class.instanceMethodId(
    r'getMinZoom',
    r'()F',
  );

  static final _getMinZoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public float getMinZoom()`
  double getMinZoom() {
    return _getMinZoom(reference.pointer, _id_getMinZoom as jni.JMethodIDPtr)
        .float;
  }

  static final _id_getMaxZoom = _class.instanceMethodId(
    r'getMaxZoom',
    r'()F',
  );

  static final _getMaxZoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public float getMaxZoom()`
  double getMaxZoom() {
    return _getMaxZoom(reference.pointer, _id_getMaxZoom as jni.JMethodIDPtr)
        .float;
  }

  static final _id_setMinZoom = _class.instanceMethodId(
    r'setMinZoom',
    r'(F)V',
  );

  static final _setMinZoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public void setMinZoom(float f)`
  void setMinZoom(
    double f,
  ) {
    _setMinZoom(reference.pointer, _id_setMinZoom as jni.JMethodIDPtr, f)
        .check();
  }

  static final _id_setMaxZoom = _class.instanceMethodId(
    r'setMaxZoom',
    r'(F)V',
  );

  static final _setMaxZoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public void setMaxZoom(float f)`
  void setMaxZoom(
    double f,
  ) {
    _setMaxZoom(reference.pointer, _id_setMaxZoom as jni.JMethodIDPtr, f)
        .check();
  }

  static final _id_finalize = _class.instanceMethodId(
    r'finalize',
    r'()V',
  );

  static final _finalize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected native void finalize()`
  void finalize() {
    _finalize(reference.pointer, _id_finalize as jni.JMethodIDPtr).check();
  }

  static final _id_nativeGetId = _class.instanceMethodId(
    r'nativeGetId',
    r'()Ljava/lang/String;',
  );

  static final _nativeGetId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected native java.lang.String nativeGetId()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString nativeGetId() {
    return _nativeGetId(reference.pointer, _id_nativeGetId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_nativeGetVisibility = _class.instanceMethodId(
    r'nativeGetVisibility',
    r'()Ljava/lang/Object;',
  );

  static final _nativeGetVisibility = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected native java.lang.Object nativeGetVisibility()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject nativeGetVisibility() {
    return _nativeGetVisibility(
            reference.pointer, _id_nativeGetVisibility as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_nativeSetLayoutProperty = _class.instanceMethodId(
    r'nativeSetLayoutProperty',
    r'(Ljava/lang/String;Ljava/lang/Object;)V',
  );

  static final _nativeSetLayoutProperty = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `protected native void nativeSetLayoutProperty(java.lang.String string, java.lang.Object object)`
  void nativeSetLayoutProperty(
    jni.JString string,
    jni.JObject object,
  ) {
    _nativeSetLayoutProperty(
            reference.pointer,
            _id_nativeSetLayoutProperty as jni.JMethodIDPtr,
            string.reference.pointer,
            object.reference.pointer)
        .check();
  }

  static final _id_nativeSetPaintProperty = _class.instanceMethodId(
    r'nativeSetPaintProperty',
    r'(Ljava/lang/String;Ljava/lang/Object;)V',
  );

  static final _nativeSetPaintProperty = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `protected native void nativeSetPaintProperty(java.lang.String string, java.lang.Object object)`
  void nativeSetPaintProperty(
    jni.JString string,
    jni.JObject object,
  ) {
    _nativeSetPaintProperty(
            reference.pointer,
            _id_nativeSetPaintProperty as jni.JMethodIDPtr,
            string.reference.pointer,
            object.reference.pointer)
        .check();
  }

  static final _id_nativeSetFilter = _class.instanceMethodId(
    r'nativeSetFilter',
    r'([Ljava/lang/Object;)V',
  );

  static final _nativeSetFilter = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `protected native void nativeSetFilter(java.lang.Object[] objects)`
  void nativeSetFilter(
    jni.JArray<jni.JObject> objects,
  ) {
    _nativeSetFilter(reference.pointer, _id_nativeSetFilter as jni.JMethodIDPtr,
            objects.reference.pointer)
        .check();
  }

  static final _id_nativeGetFilter = _class.instanceMethodId(
    r'nativeGetFilter',
    r'()Lcom/google/gson/JsonElement;',
  );

  static final _nativeGetFilter = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected native com.google.gson.JsonElement nativeGetFilter()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject nativeGetFilter() {
    return _nativeGetFilter(
            reference.pointer, _id_nativeGetFilter as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_nativeSetSourceLayer = _class.instanceMethodId(
    r'nativeSetSourceLayer',
    r'(Ljava/lang/String;)V',
  );

  static final _nativeSetSourceLayer = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `protected native void nativeSetSourceLayer(java.lang.String string)`
  void nativeSetSourceLayer(
    jni.JString string,
  ) {
    _nativeSetSourceLayer(
            reference.pointer,
            _id_nativeSetSourceLayer as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_nativeGetSourceLayer = _class.instanceMethodId(
    r'nativeGetSourceLayer',
    r'()Ljava/lang/String;',
  );

  static final _nativeGetSourceLayer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected native java.lang.String nativeGetSourceLayer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString nativeGetSourceLayer() {
    return _nativeGetSourceLayer(
            reference.pointer, _id_nativeGetSourceLayer as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_nativeGetSourceId = _class.instanceMethodId(
    r'nativeGetSourceId',
    r'()Ljava/lang/String;',
  );

  static final _nativeGetSourceId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected native java.lang.String nativeGetSourceId()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString nativeGetSourceId() {
    return _nativeGetSourceId(
            reference.pointer, _id_nativeGetSourceId as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_nativeGetMinZoom = _class.instanceMethodId(
    r'nativeGetMinZoom',
    r'()F',
  );

  static final _nativeGetMinZoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected native float nativeGetMinZoom()`
  double nativeGetMinZoom() {
    return _nativeGetMinZoom(
            reference.pointer, _id_nativeGetMinZoom as jni.JMethodIDPtr)
        .float;
  }

  static final _id_nativeGetMaxZoom = _class.instanceMethodId(
    r'nativeGetMaxZoom',
    r'()F',
  );

  static final _nativeGetMaxZoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected native float nativeGetMaxZoom()`
  double nativeGetMaxZoom() {
    return _nativeGetMaxZoom(
            reference.pointer, _id_nativeGetMaxZoom as jni.JMethodIDPtr)
        .float;
  }

  static final _id_nativeSetMinZoom = _class.instanceMethodId(
    r'nativeSetMinZoom',
    r'(F)V',
  );

  static final _nativeSetMinZoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `protected native void nativeSetMinZoom(float f)`
  void nativeSetMinZoom(
    double f,
  ) {
    _nativeSetMinZoom(
            reference.pointer, _id_nativeSetMinZoom as jni.JMethodIDPtr, f)
        .check();
  }

  static final _id_nativeSetMaxZoom = _class.instanceMethodId(
    r'nativeSetMaxZoom',
    r'(F)V',
  );

  static final _nativeSetMaxZoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `protected native void nativeSetMaxZoom(float f)`
  void nativeSetMaxZoom(
    double f,
  ) {
    _nativeSetMaxZoom(
            reference.pointer, _id_nativeSetMaxZoom as jni.JMethodIDPtr, f)
        .check();
  }

  static final _id_getNativePtr = _class.instanceMethodId(
    r'getNativePtr',
    r'()J',
  );

  static final _getNativePtr = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public long getNativePtr()`
  int getNativePtr() {
    return _getNativePtr(
            reference.pointer, _id_getNativePtr as jni.JMethodIDPtr)
        .long;
  }

  static final _id_setDetached = _class.instanceMethodId(
    r'setDetached',
    r'()V',
  );

  static final _setDetached = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void setDetached()`
  void setDetached() {
    _setDetached(reference.pointer, _id_setDetached as jni.JMethodIDPtr)
        .check();
  }

  static final _id_isDetached = _class.instanceMethodId(
    r'isDetached',
    r'()Z',
  );

  static final _isDetached = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isDetached()`
  bool isDetached() {
    return _isDetached(reference.pointer, _id_isDetached as jni.JMethodIDPtr)
        .boolean;
  }
}

final class $LayerType extends jni.JObjType<Layer> {
  const $LayerType();

  @override
  String get signature => r'Lorg/maplibre/android/style/layers/Layer;';

  @override
  Layer fromReference(jni.JReference reference) =>
      Layer.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LayerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LayerType) && other is $LayerType;
  }
}
