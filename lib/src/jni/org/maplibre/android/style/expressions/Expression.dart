// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.style.expressions.Expression$Array`
class Expression_Array extends jni.JObject {
  @override
  late final jni.JObjType<Expression_Array> $type = type;

  Expression_Array.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/style/expressions/Expression$Array');

  /// The type which includes information such as the signature of this class.
  static const type = $Expression_ArrayType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Expression_Array() {
    return Expression_Array.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }
}

final class $Expression_ArrayType extends jni.JObjType<Expression_Array> {
  const $Expression_ArrayType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/style/expressions/Expression$Array;';

  @override
  Expression_Array fromReference(jni.JReference reference) =>
      Expression_Array.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Expression_ArrayType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Expression_ArrayType) &&
        other is $Expression_ArrayType;
  }
}

/// from: `org.maplibre.android.style.expressions.Expression$Converter`
class Expression_Converter extends jni.JObject {
  @override
  late final jni.JObjType<Expression_Converter> $type = type;

  Expression_Converter.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/style/expressions/Expression$Converter');

  /// The type which includes information such as the signature of this class.
  static const type = $Expression_ConverterType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Expression_Converter() {
    return Expression_Converter.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_convert = _class.staticMethodId(
    r'convert',
    r'(Lcom/google/gson/JsonArray;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _convert = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression convert(com.google.gson.JsonArray jsonArray)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression convert(
    jni.JObject jsonArray,
  ) {
    return _convert(_class.reference.pointer, _id_convert as jni.JMethodIDPtr,
            jsonArray.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_convert1 = _class.staticMethodId(
    r'convert',
    r'(Lcom/google/gson/JsonElement;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _convert1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression convert(com.google.gson.JsonElement jsonElement)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression convert1(
    jni.JObject jsonElement,
  ) {
    return _convert1(_class.reference.pointer, _id_convert1 as jni.JMethodIDPtr,
            jsonElement.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_convert2 = _class.staticMethodId(
    r'convert',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _convert2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression convert(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression convert2(
    jni.JString string,
  ) {
    return _convert2(_class.reference.pointer, _id_convert2 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ExpressionType());
  }
}

final class $Expression_ConverterType
    extends jni.JObjType<Expression_Converter> {
  const $Expression_ConverterType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/style/expressions/Expression$Converter;';

  @override
  Expression_Converter fromReference(jni.JReference reference) =>
      Expression_Converter.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Expression_ConverterType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Expression_ConverterType) &&
        other is $Expression_ConverterType;
  }
}

/// from: `org.maplibre.android.style.expressions.Expression$ExpressionLiteral`
class Expression_ExpressionLiteral extends Expression {
  @override
  late final jni.JObjType<Expression_ExpressionLiteral> $type = type;

  Expression_ExpressionLiteral.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/style/expressions/Expression$ExpressionLiteral');

  /// The type which includes information such as the signature of this class.
  static const type = $Expression_ExpressionLiteralType();
  static final _id_literal5 = _class.instanceFieldId(
    r'literal',
    r'Ljava/lang/Object;',
  );

  /// from: `protected java.lang.Object literal`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get literal5 => _id_literal5.get(this, const jni.JObjectType());

  /// from: `protected java.lang.Object literal`
  /// The returned object must be released after use, by calling the [release] method.
  set literal5(jni.JObject value) =>
      _id_literal5.set(this, const jni.JObjectType(), value);

  static final _id_new1 = _class.constructorId(
    r'(Ljava/lang/Object;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Expression_ExpressionLiteral.new1(
    jni.JObject object,
  ) {
    return Expression_ExpressionLiteral.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            object.reference.pointer)
        .reference);
  }

  static final _id_toValue = _class.instanceMethodId(
    r'toValue',
    r'()Ljava/lang/Object;',
  );

  static final _toValue = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Object toValue()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject toValue() {
    return _toValue(reference.pointer, _id_toValue as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_toArray = _class.instanceMethodId(
    r'toArray',
    r'()[Ljava/lang/Object;',
  );

  static final _toArray = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Object[] toArray()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> toArray() {
    return _toArray(reference.pointer, _id_toArray as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_toString2 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString2() {
    return _toString2(reference.pointer, _id_toString2 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }
}

final class $Expression_ExpressionLiteralType
    extends jni.JObjType<Expression_ExpressionLiteral> {
  const $Expression_ExpressionLiteralType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/style/expressions/Expression$ExpressionLiteral;';

  @override
  Expression_ExpressionLiteral fromReference(jni.JReference reference) =>
      Expression_ExpressionLiteral.fromReference(reference);

  @override
  jni.JObjType get superType => const $ExpressionType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($Expression_ExpressionLiteralType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Expression_ExpressionLiteralType) &&
        other is $Expression_ExpressionLiteralType;
  }
}

/// from: `org.maplibre.android.style.expressions.Expression$FormatEntry`
class Expression_FormatEntry extends jni.JObject {
  @override
  late final jni.JObjType<Expression_FormatEntry> $type = type;

  Expression_FormatEntry.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/style/expressions/Expression$FormatEntry');

  /// The type which includes information such as the signature of this class.
  static const type = $Expression_FormatEntryType();
}

final class $Expression_FormatEntryType
    extends jni.JObjType<Expression_FormatEntry> {
  const $Expression_FormatEntryType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/style/expressions/Expression$FormatEntry;';

  @override
  Expression_FormatEntry fromReference(jni.JReference reference) =>
      Expression_FormatEntry.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Expression_FormatEntryType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Expression_FormatEntryType) &&
        other is $Expression_FormatEntryType;
  }
}

/// from: `org.maplibre.android.style.expressions.Expression$FormatOption`
class Expression_FormatOption extends jni.JObject {
  @override
  late final jni.JObjType<Expression_FormatOption> $type = type;

  Expression_FormatOption.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/style/expressions/Expression$FormatOption');

  /// The type which includes information such as the signature of this class.
  static const type = $Expression_FormatOptionType();
  static final _id_formatFontScale = _class.staticMethodId(
    r'formatFontScale',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression$FormatOption;',
  );

  static final _formatFontScale = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$FormatOption formatFontScale(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_FormatOption formatFontScale(
    Expression expression,
  ) {
    return _formatFontScale(
            _class.reference.pointer,
            _id_formatFontScale as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $Expression_FormatOptionType());
  }

  static final _id_formatFontScale1 = _class.staticMethodId(
    r'formatFontScale',
    r'(D)Lorg/maplibre/android/style/expressions/Expression$FormatOption;',
  );

  static final _formatFontScale1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Double,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$FormatOption formatFontScale(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_FormatOption formatFontScale1(
    double d,
  ) {
    return _formatFontScale1(_class.reference.pointer,
            _id_formatFontScale1 as jni.JMethodIDPtr, d)
        .object(const $Expression_FormatOptionType());
  }

  static final _id_formatTextFont = _class.staticMethodId(
    r'formatTextFont',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression$FormatOption;',
  );

  static final _formatTextFont = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$FormatOption formatTextFont(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_FormatOption formatTextFont(
    Expression expression,
  ) {
    return _formatTextFont(
            _class.reference.pointer,
            _id_formatTextFont as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $Expression_FormatOptionType());
  }

  static final _id_formatTextFont1 = _class.staticMethodId(
    r'formatTextFont',
    r'([Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression$FormatOption;',
  );

  static final _formatTextFont1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$FormatOption formatTextFont(java.lang.String[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_FormatOption formatTextFont1(
    jni.JArray<jni.JString> strings,
  ) {
    return _formatTextFont1(_class.reference.pointer,
            _id_formatTextFont1 as jni.JMethodIDPtr, strings.reference.pointer)
        .object(const $Expression_FormatOptionType());
  }

  static final _id_formatTextColor = _class.staticMethodId(
    r'formatTextColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression$FormatOption;',
  );

  static final _formatTextColor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$FormatOption formatTextColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_FormatOption formatTextColor(
    Expression expression,
  ) {
    return _formatTextColor(
            _class.reference.pointer,
            _id_formatTextColor as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $Expression_FormatOptionType());
  }

  static final _id_formatTextColor1 = _class.staticMethodId(
    r'formatTextColor',
    r'(I)Lorg/maplibre/android/style/expressions/Expression$FormatOption;',
  );

  static final _formatTextColor1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$FormatOption formatTextColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_FormatOption formatTextColor1(
    int i,
  ) {
    return _formatTextColor1(_class.reference.pointer,
            _id_formatTextColor1 as jni.JMethodIDPtr, i)
        .object(const $Expression_FormatOptionType());
  }
}

final class $Expression_FormatOptionType
    extends jni.JObjType<Expression_FormatOption> {
  const $Expression_FormatOptionType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/style/expressions/Expression$FormatOption;';

  @override
  Expression_FormatOption fromReference(jni.JReference reference) =>
      Expression_FormatOption.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Expression_FormatOptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Expression_FormatOptionType) &&
        other is $Expression_FormatOptionType;
  }
}

/// from: `org.maplibre.android.style.expressions.Expression$Interpolator`
class Expression_Interpolator extends Expression {
  @override
  late final jni.JObjType<Expression_Interpolator> $type = type;

  Expression_Interpolator.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/style/expressions/Expression$Interpolator');

  /// The type which includes information such as the signature of this class.
  static const type = $Expression_InterpolatorType();
}

final class $Expression_InterpolatorType
    extends jni.JObjType<Expression_Interpolator> {
  const $Expression_InterpolatorType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/style/expressions/Expression$Interpolator;';

  @override
  Expression_Interpolator fromReference(jni.JReference reference) =>
      Expression_Interpolator.fromReference(reference);

  @override
  jni.JObjType get superType => const $ExpressionType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($Expression_InterpolatorType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Expression_InterpolatorType) &&
        other is $Expression_InterpolatorType;
  }
}

/// from: `org.maplibre.android.style.expressions.Expression$NumberFormatOption`
class Expression_NumberFormatOption extends jni.JObject {
  @override
  late final jni.JObjType<Expression_NumberFormatOption> $type = type;

  Expression_NumberFormatOption.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/style/expressions/Expression$NumberFormatOption');

  /// The type which includes information such as the signature of this class.
  static const type = $Expression_NumberFormatOptionType();
  static final _id_locale = _class.staticMethodId(
    r'locale',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression$NumberFormatOption;',
  );

  static final _locale = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$NumberFormatOption locale(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_NumberFormatOption locale(
    Expression expression,
  ) {
    return _locale(_class.reference.pointer, _id_locale as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $Expression_NumberFormatOptionType());
  }

  static final _id_locale1 = _class.staticMethodId(
    r'locale',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression$NumberFormatOption;',
  );

  static final _locale1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$NumberFormatOption locale(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_NumberFormatOption locale1(
    jni.JString string,
  ) {
    return _locale1(_class.reference.pointer, _id_locale1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $Expression_NumberFormatOptionType());
  }

  static final _id_currency = _class.staticMethodId(
    r'currency',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression$NumberFormatOption;',
  );

  static final _currency = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$NumberFormatOption currency(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_NumberFormatOption currency(
    Expression expression,
  ) {
    return _currency(_class.reference.pointer, _id_currency as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $Expression_NumberFormatOptionType());
  }

  static final _id_currency1 = _class.staticMethodId(
    r'currency',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression$NumberFormatOption;',
  );

  static final _currency1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$NumberFormatOption currency(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_NumberFormatOption currency1(
    jni.JString string,
  ) {
    return _currency1(_class.reference.pointer,
            _id_currency1 as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $Expression_NumberFormatOptionType());
  }

  static final _id_minFractionDigits = _class.staticMethodId(
    r'minFractionDigits',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression$NumberFormatOption;',
  );

  static final _minFractionDigits = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$NumberFormatOption minFractionDigits(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_NumberFormatOption minFractionDigits(
    Expression expression,
  ) {
    return _minFractionDigits(
            _class.reference.pointer,
            _id_minFractionDigits as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $Expression_NumberFormatOptionType());
  }

  static final _id_minFractionDigits1 = _class.staticMethodId(
    r'minFractionDigits',
    r'(I)Lorg/maplibre/android/style/expressions/Expression$NumberFormatOption;',
  );

  static final _minFractionDigits1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$NumberFormatOption minFractionDigits(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_NumberFormatOption minFractionDigits1(
    int i,
  ) {
    return _minFractionDigits1(_class.reference.pointer,
            _id_minFractionDigits1 as jni.JMethodIDPtr, i)
        .object(const $Expression_NumberFormatOptionType());
  }

  static final _id_maxFractionDigits = _class.staticMethodId(
    r'maxFractionDigits',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression$NumberFormatOption;',
  );

  static final _maxFractionDigits = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$NumberFormatOption maxFractionDigits(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_NumberFormatOption maxFractionDigits(
    Expression expression,
  ) {
    return _maxFractionDigits(
            _class.reference.pointer,
            _id_maxFractionDigits as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $Expression_NumberFormatOptionType());
  }

  static final _id_maxFractionDigits1 = _class.staticMethodId(
    r'maxFractionDigits',
    r'(I)Lorg/maplibre/android/style/expressions/Expression$NumberFormatOption;',
  );

  static final _maxFractionDigits1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$NumberFormatOption maxFractionDigits(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_NumberFormatOption maxFractionDigits1(
    int i,
  ) {
    return _maxFractionDigits1(_class.reference.pointer,
            _id_maxFractionDigits1 as jni.JMethodIDPtr, i)
        .object(const $Expression_NumberFormatOptionType());
  }
}

final class $Expression_NumberFormatOptionType
    extends jni.JObjType<Expression_NumberFormatOption> {
  const $Expression_NumberFormatOptionType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/style/expressions/Expression$NumberFormatOption;';

  @override
  Expression_NumberFormatOption fromReference(jni.JReference reference) =>
      Expression_NumberFormatOption.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Expression_NumberFormatOptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Expression_NumberFormatOptionType) &&
        other is $Expression_NumberFormatOptionType;
  }
}

/// from: `org.maplibre.android.style.expressions.Expression$Stop`
class Expression_Stop extends jni.JObject {
  @override
  late final jni.JObjType<Expression_Stop> $type = type;

  Expression_Stop.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/style/expressions/Expression$Stop');

  /// The type which includes information such as the signature of this class.
  static const type = $Expression_StopType();
}

final class $Expression_StopType extends jni.JObjType<Expression_Stop> {
  const $Expression_StopType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/style/expressions/Expression$Stop;';

  @override
  Expression_Stop fromReference(jni.JReference reference) =>
      Expression_Stop.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Expression_StopType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Expression_StopType) &&
        other is $Expression_StopType;
  }
}

/// from: `org.maplibre.android.style.expressions.Expression`
class Expression extends jni.JObject {
  @override
  late final jni.JObjType<Expression> $type = type;

  Expression.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/style/expressions/Expression');

  /// The type which includes information such as the signature of this class.
  static const type = $ExpressionType();
  static final _id_new0 = _class.constructorId(
    r'(Ljava/lang/String;[Lorg/maplibre/android/style/expressions/Expression;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Expression(
    jni.JString string,
    jni.JArray<Expression> expressions,
  ) {
    return Expression.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            string.reference.pointer,
            expressions.reference.pointer)
        .reference);
  }

  static final _id_literal = _class.staticMethodId(
    r'literal',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _literal = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression literal(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression literal(
    jni.JNumber number,
  ) {
    return _literal(_class.reference.pointer, _id_literal as jni.JMethodIDPtr,
            number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_literal1 = _class.staticMethodId(
    r'literal',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _literal1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression literal(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression literal1(
    jni.JString string,
  ) {
    return _literal1(_class.reference.pointer, _id_literal1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_literal2 = _class.staticMethodId(
    r'literal',
    r'(Z)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _literal2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression literal(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression literal2(
    bool z,
  ) {
    return _literal2(_class.reference.pointer, _id_literal2 as jni.JMethodIDPtr,
            z ? 1 : 0)
        .object(const $ExpressionType());
  }

  static final _id_literal3 = _class.staticMethodId(
    r'literal',
    r'(Ljava/lang/Object;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _literal3 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression literal(java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression literal3(
    jni.JObject object,
  ) {
    return _literal3(_class.reference.pointer, _id_literal3 as jni.JMethodIDPtr,
            object.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_literal4 = _class.staticMethodId(
    r'literal',
    r'([Ljava/lang/Object;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _literal4 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression literal(java.lang.Object[] objects)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression literal4(
    jni.JArray<jni.JObject> objects,
  ) {
    return _literal4(_class.reference.pointer, _id_literal4 as jni.JMethodIDPtr,
            objects.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_color = _class.staticMethodId(
    r'color',
    r'(I)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _color = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression color(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression color(
    int i,
  ) {
    return _color(_class.reference.pointer, _id_color as jni.JMethodIDPtr, i)
        .object(const $ExpressionType());
  }

  static final _id_rgb = _class.staticMethodId(
    r'rgb',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _rgb = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression rgb(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1, org.maplibre.android.style.expressions.Expression expression2)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression rgb(
    Expression expression,
    Expression expression1,
    Expression expression2,
  ) {
    return _rgb(
            _class.reference.pointer,
            _id_rgb as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer,
            expression2.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_rgb1 = _class.staticMethodId(
    r'rgb',
    r'(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _rgb1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression rgb(java.lang.Number number, java.lang.Number number1, java.lang.Number number2)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression rgb1(
    jni.JNumber number,
    jni.JNumber number1,
    jni.JNumber number2,
  ) {
    return _rgb1(
            _class.reference.pointer,
            _id_rgb1 as jni.JMethodIDPtr,
            number.reference.pointer,
            number1.reference.pointer,
            number2.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_rgba = _class.staticMethodId(
    r'rgba',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _rgba = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression rgba(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1, org.maplibre.android.style.expressions.Expression expression2, org.maplibre.android.style.expressions.Expression expression3)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression rgba(
    Expression expression,
    Expression expression1,
    Expression expression2,
    Expression expression3,
  ) {
    return _rgba(
            _class.reference.pointer,
            _id_rgba as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer,
            expression2.reference.pointer,
            expression3.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_rgba1 = _class.staticMethodId(
    r'rgba',
    r'(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _rgba1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression rgba(java.lang.Number number, java.lang.Number number1, java.lang.Number number2, java.lang.Number number3)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression rgba1(
    jni.JNumber number,
    jni.JNumber number1,
    jni.JNumber number2,
    jni.JNumber number3,
  ) {
    return _rgba1(
            _class.reference.pointer,
            _id_rgba1 as jni.JMethodIDPtr,
            number.reference.pointer,
            number1.reference.pointer,
            number2.reference.pointer,
            number3.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_toRgba = _class.staticMethodId(
    r'toRgba',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _toRgba = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression toRgba(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression toRgba(
    Expression expression,
  ) {
    return _toRgba(_class.reference.pointer, _id_toRgba as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_eq = _class.staticMethodId(
    r'eq',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _eq = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression eq(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression eq(
    Expression expression,
    Expression expression1,
  ) {
    return _eq(_class.reference.pointer, _id_eq as jni.JMethodIDPtr,
            expression.reference.pointer, expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_eq1 = _class.staticMethodId(
    r'eq',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _eq1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression eq(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1, org.maplibre.android.style.expressions.Expression expression2)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression eq1(
    Expression expression,
    Expression expression1,
    Expression expression2,
  ) {
    return _eq1(
            _class.reference.pointer,
            _id_eq1 as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer,
            expression2.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_eq2 = _class.staticMethodId(
    r'eq',
    r'(Lorg/maplibre/android/style/expressions/Expression;Z)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _eq2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression eq(org.maplibre.android.style.expressions.Expression expression, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression eq2(
    Expression expression,
    bool z,
  ) {
    return _eq2(_class.reference.pointer, _id_eq2 as jni.JMethodIDPtr,
            expression.reference.pointer, z ? 1 : 0)
        .object(const $ExpressionType());
  }

  static final _id_eq3 = _class.staticMethodId(
    r'eq',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _eq3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression eq(org.maplibre.android.style.expressions.Expression expression, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression eq3(
    Expression expression,
    jni.JString string,
  ) {
    return _eq3(_class.reference.pointer, _id_eq3 as jni.JMethodIDPtr,
            expression.reference.pointer, string.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_eq4 = _class.staticMethodId(
    r'eq',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/String;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _eq4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression eq(org.maplibre.android.style.expressions.Expression expression, java.lang.String string, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression eq4(
    Expression expression,
    jni.JString string,
    Expression expression1,
  ) {
    return _eq4(
            _class.reference.pointer,
            _id_eq4 as jni.JMethodIDPtr,
            expression.reference.pointer,
            string.reference.pointer,
            expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_eq5 = _class.staticMethodId(
    r'eq',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _eq5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression eq(org.maplibre.android.style.expressions.Expression expression, java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression eq5(
    Expression expression,
    jni.JNumber number,
  ) {
    return _eq5(_class.reference.pointer, _id_eq5 as jni.JMethodIDPtr,
            expression.reference.pointer, number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_neq = _class.staticMethodId(
    r'neq',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _neq = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression neq(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression neq(
    Expression expression,
    Expression expression1,
  ) {
    return _neq(_class.reference.pointer, _id_neq as jni.JMethodIDPtr,
            expression.reference.pointer, expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_neq1 = _class.staticMethodId(
    r'neq',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _neq1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression neq(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1, org.maplibre.android.style.expressions.Expression expression2)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression neq1(
    Expression expression,
    Expression expression1,
    Expression expression2,
  ) {
    return _neq1(
            _class.reference.pointer,
            _id_neq1 as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer,
            expression2.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_neq2 = _class.staticMethodId(
    r'neq',
    r'(Lorg/maplibre/android/style/expressions/Expression;Z)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _neq2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression neq(org.maplibre.android.style.expressions.Expression expression, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression neq2(
    Expression expression,
    bool z,
  ) {
    return _neq2(_class.reference.pointer, _id_neq2 as jni.JMethodIDPtr,
            expression.reference.pointer, z ? 1 : 0)
        .object(const $ExpressionType());
  }

  static final _id_neq3 = _class.staticMethodId(
    r'neq',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _neq3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression neq(org.maplibre.android.style.expressions.Expression expression, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression neq3(
    Expression expression,
    jni.JString string,
  ) {
    return _neq3(_class.reference.pointer, _id_neq3 as jni.JMethodIDPtr,
            expression.reference.pointer, string.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_neq4 = _class.staticMethodId(
    r'neq',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/String;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _neq4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression neq(org.maplibre.android.style.expressions.Expression expression, java.lang.String string, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression neq4(
    Expression expression,
    jni.JString string,
    Expression expression1,
  ) {
    return _neq4(
            _class.reference.pointer,
            _id_neq4 as jni.JMethodIDPtr,
            expression.reference.pointer,
            string.reference.pointer,
            expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_neq5 = _class.staticMethodId(
    r'neq',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _neq5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression neq(org.maplibre.android.style.expressions.Expression expression, java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression neq5(
    Expression expression,
    jni.JNumber number,
  ) {
    return _neq5(_class.reference.pointer, _id_neq5 as jni.JMethodIDPtr,
            expression.reference.pointer, number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_gt = _class.staticMethodId(
    r'gt',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _gt = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression gt(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression gt(
    Expression expression,
    Expression expression1,
  ) {
    return _gt(_class.reference.pointer, _id_gt as jni.JMethodIDPtr,
            expression.reference.pointer, expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_gt1 = _class.staticMethodId(
    r'gt',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _gt1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression gt(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1, org.maplibre.android.style.expressions.Expression expression2)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression gt1(
    Expression expression,
    Expression expression1,
    Expression expression2,
  ) {
    return _gt1(
            _class.reference.pointer,
            _id_gt1 as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer,
            expression2.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_gt2 = _class.staticMethodId(
    r'gt',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _gt2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression gt(org.maplibre.android.style.expressions.Expression expression, java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression gt2(
    Expression expression,
    jni.JNumber number,
  ) {
    return _gt2(_class.reference.pointer, _id_gt2 as jni.JMethodIDPtr,
            expression.reference.pointer, number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_gt3 = _class.staticMethodId(
    r'gt',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _gt3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression gt(org.maplibre.android.style.expressions.Expression expression, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression gt3(
    Expression expression,
    jni.JString string,
  ) {
    return _gt3(_class.reference.pointer, _id_gt3 as jni.JMethodIDPtr,
            expression.reference.pointer, string.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_gt4 = _class.staticMethodId(
    r'gt',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/String;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _gt4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression gt(org.maplibre.android.style.expressions.Expression expression, java.lang.String string, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression gt4(
    Expression expression,
    jni.JString string,
    Expression expression1,
  ) {
    return _gt4(
            _class.reference.pointer,
            _id_gt4 as jni.JMethodIDPtr,
            expression.reference.pointer,
            string.reference.pointer,
            expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_lt = _class.staticMethodId(
    r'lt',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _lt = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression lt(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression lt(
    Expression expression,
    Expression expression1,
  ) {
    return _lt(_class.reference.pointer, _id_lt as jni.JMethodIDPtr,
            expression.reference.pointer, expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_lt1 = _class.staticMethodId(
    r'lt',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _lt1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression lt(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1, org.maplibre.android.style.expressions.Expression expression2)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression lt1(
    Expression expression,
    Expression expression1,
    Expression expression2,
  ) {
    return _lt1(
            _class.reference.pointer,
            _id_lt1 as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer,
            expression2.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_lt2 = _class.staticMethodId(
    r'lt',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _lt2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression lt(org.maplibre.android.style.expressions.Expression expression, java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression lt2(
    Expression expression,
    jni.JNumber number,
  ) {
    return _lt2(_class.reference.pointer, _id_lt2 as jni.JMethodIDPtr,
            expression.reference.pointer, number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_lt3 = _class.staticMethodId(
    r'lt',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _lt3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression lt(org.maplibre.android.style.expressions.Expression expression, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression lt3(
    Expression expression,
    jni.JString string,
  ) {
    return _lt3(_class.reference.pointer, _id_lt3 as jni.JMethodIDPtr,
            expression.reference.pointer, string.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_lt4 = _class.staticMethodId(
    r'lt',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/String;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _lt4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression lt(org.maplibre.android.style.expressions.Expression expression, java.lang.String string, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression lt4(
    Expression expression,
    jni.JString string,
    Expression expression1,
  ) {
    return _lt4(
            _class.reference.pointer,
            _id_lt4 as jni.JMethodIDPtr,
            expression.reference.pointer,
            string.reference.pointer,
            expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_gte = _class.staticMethodId(
    r'gte',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _gte = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression gte(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression gte(
    Expression expression,
    Expression expression1,
  ) {
    return _gte(_class.reference.pointer, _id_gte as jni.JMethodIDPtr,
            expression.reference.pointer, expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_gte1 = _class.staticMethodId(
    r'gte',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _gte1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression gte(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1, org.maplibre.android.style.expressions.Expression expression2)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression gte1(
    Expression expression,
    Expression expression1,
    Expression expression2,
  ) {
    return _gte1(
            _class.reference.pointer,
            _id_gte1 as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer,
            expression2.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_gte2 = _class.staticMethodId(
    r'gte',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _gte2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression gte(org.maplibre.android.style.expressions.Expression expression, java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression gte2(
    Expression expression,
    jni.JNumber number,
  ) {
    return _gte2(_class.reference.pointer, _id_gte2 as jni.JMethodIDPtr,
            expression.reference.pointer, number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_gte3 = _class.staticMethodId(
    r'gte',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _gte3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression gte(org.maplibre.android.style.expressions.Expression expression, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression gte3(
    Expression expression,
    jni.JString string,
  ) {
    return _gte3(_class.reference.pointer, _id_gte3 as jni.JMethodIDPtr,
            expression.reference.pointer, string.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_gte4 = _class.staticMethodId(
    r'gte',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/String;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _gte4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression gte(org.maplibre.android.style.expressions.Expression expression, java.lang.String string, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression gte4(
    Expression expression,
    jni.JString string,
    Expression expression1,
  ) {
    return _gte4(
            _class.reference.pointer,
            _id_gte4 as jni.JMethodIDPtr,
            expression.reference.pointer,
            string.reference.pointer,
            expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_lte = _class.staticMethodId(
    r'lte',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _lte = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression lte(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression lte(
    Expression expression,
    Expression expression1,
  ) {
    return _lte(_class.reference.pointer, _id_lte as jni.JMethodIDPtr,
            expression.reference.pointer, expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_lte1 = _class.staticMethodId(
    r'lte',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _lte1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression lte(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1, org.maplibre.android.style.expressions.Expression expression2)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression lte1(
    Expression expression,
    Expression expression1,
    Expression expression2,
  ) {
    return _lte1(
            _class.reference.pointer,
            _id_lte1 as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer,
            expression2.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_lte2 = _class.staticMethodId(
    r'lte',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _lte2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression lte(org.maplibre.android.style.expressions.Expression expression, java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression lte2(
    Expression expression,
    jni.JNumber number,
  ) {
    return _lte2(_class.reference.pointer, _id_lte2 as jni.JMethodIDPtr,
            expression.reference.pointer, number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_lte3 = _class.staticMethodId(
    r'lte',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _lte3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression lte(org.maplibre.android.style.expressions.Expression expression, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression lte3(
    Expression expression,
    jni.JString string,
  ) {
    return _lte3(_class.reference.pointer, _id_lte3 as jni.JMethodIDPtr,
            expression.reference.pointer, string.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_lte4 = _class.staticMethodId(
    r'lte',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/String;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _lte4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression lte(org.maplibre.android.style.expressions.Expression expression, java.lang.String string, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression lte4(
    Expression expression,
    jni.JString string,
    Expression expression1,
  ) {
    return _lte4(
            _class.reference.pointer,
            _id_lte4 as jni.JMethodIDPtr,
            expression.reference.pointer,
            string.reference.pointer,
            expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_all = _class.staticMethodId(
    r'all',
    r'([Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _all = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression all(org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression all(
    jni.JArray<Expression> expressions,
  ) {
    return _all(_class.reference.pointer, _id_all as jni.JMethodIDPtr,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_any = _class.staticMethodId(
    r'any',
    r'([Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _any = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression any(org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression any(
    jni.JArray<Expression> expressions,
  ) {
    return _any(_class.reference.pointer, _id_any as jni.JMethodIDPtr,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_not = _class.staticMethodId(
    r'not',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _not = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression not(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression not(
    Expression expression,
  ) {
    return _not(_class.reference.pointer, _id_not as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_not1 = _class.staticMethodId(
    r'not',
    r'(Z)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _not1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression not(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression not1(
    bool z,
  ) {
    return _not1(
            _class.reference.pointer, _id_not1 as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $ExpressionType());
  }

  static final _id_switchCase = _class.staticMethodId(
    r'switchCase',
    r'([Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _switchCase = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression switchCase(org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression switchCase(
    jni.JArray<Expression> expressions,
  ) {
    return _switchCase(_class.reference.pointer,
            _id_switchCase as jni.JMethodIDPtr, expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_match = _class.staticMethodId(
    r'match',
    r'([Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _match = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression match(org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression match(
    jni.JArray<Expression> expressions,
  ) {
    return _match(_class.reference.pointer, _id_match as jni.JMethodIDPtr,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_match1 = _class.staticMethodId(
    r'match',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;[Lorg/maplibre/android/style/expressions/Expression$Stop;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _match1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression match(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1, org.maplibre.android.style.expressions.Expression$Stop[] stops)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression match1(
    Expression expression,
    Expression expression1,
    jni.JArray<Expression_Stop> stops,
  ) {
    return _match1(
            _class.reference.pointer,
            _id_match1 as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer,
            stops.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_coalesce = _class.staticMethodId(
    r'coalesce',
    r'([Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _coalesce = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression coalesce(org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression coalesce(
    jni.JArray<Expression> expressions,
  ) {
    return _coalesce(_class.reference.pointer, _id_coalesce as jni.JMethodIDPtr,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_properties = _class.staticMethodId(
    r'properties',
    r'()Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _properties = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.style.expressions.Expression properties()`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression properties() {
    return _properties(
            _class.reference.pointer, _id_properties as jni.JMethodIDPtr)
        .object(const $ExpressionType());
  }

  static final _id_geometryType = _class.staticMethodId(
    r'geometryType',
    r'()Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _geometryType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.style.expressions.Expression geometryType()`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression geometryType() {
    return _geometryType(
            _class.reference.pointer, _id_geometryType as jni.JMethodIDPtr)
        .object(const $ExpressionType());
  }

  static final _id_id = _class.staticMethodId(
    r'id',
    r'()Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _id = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.style.expressions.Expression id()`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression id() {
    return _id(_class.reference.pointer, _id_id as jni.JMethodIDPtr)
        .object(const $ExpressionType());
  }

  static final _id_accumulated = _class.staticMethodId(
    r'accumulated',
    r'()Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _accumulated = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.style.expressions.Expression accumulated()`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression accumulated() {
    return _accumulated(
            _class.reference.pointer, _id_accumulated as jni.JMethodIDPtr)
        .object(const $ExpressionType());
  }

  static final _id_heatmapDensity = _class.staticMethodId(
    r'heatmapDensity',
    r'()Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _heatmapDensity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.style.expressions.Expression heatmapDensity()`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression heatmapDensity() {
    return _heatmapDensity(
            _class.reference.pointer, _id_heatmapDensity as jni.JMethodIDPtr)
        .object(const $ExpressionType());
  }

  static final _id_lineProgress = _class.staticMethodId(
    r'lineProgress',
    r'()Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _lineProgress = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.style.expressions.Expression lineProgress()`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression lineProgress() {
    return _lineProgress(
            _class.reference.pointer, _id_lineProgress as jni.JMethodIDPtr)
        .object(const $ExpressionType());
  }

  static final _id_at = _class.staticMethodId(
    r'at',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _at = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression at(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression at(
    Expression expression,
    Expression expression1,
  ) {
    return _at(_class.reference.pointer, _id_at as jni.JMethodIDPtr,
            expression.reference.pointer, expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_at1 = _class.staticMethodId(
    r'at',
    r'(Ljava/lang/Number;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _at1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression at(java.lang.Number number, org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression at1(
    jni.JNumber number,
    Expression expression,
  ) {
    return _at1(_class.reference.pointer, _id_at1 as jni.JMethodIDPtr,
            number.reference.pointer, expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_in0 = _class.staticMethodId(
    r'in',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _in0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression in(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression in0(
    Expression expression,
    Expression expression1,
  ) {
    return _in0(_class.reference.pointer, _id_in0 as jni.JMethodIDPtr,
            expression.reference.pointer, expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_indexOf = _class.staticMethodId(
    r'indexOf',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _indexOf = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression indexOf(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression indexOf(
    Expression expression,
    Expression expression1,
  ) {
    return _indexOf(_class.reference.pointer, _id_indexOf as jni.JMethodIDPtr,
            expression.reference.pointer, expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_indexOf1 = _class.staticMethodId(
    r'indexOf',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _indexOf1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression indexOf(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1, org.maplibre.android.style.expressions.Expression expression2)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression indexOf1(
    Expression expression,
    Expression expression1,
    Expression expression2,
  ) {
    return _indexOf1(
            _class.reference.pointer,
            _id_indexOf1 as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer,
            expression2.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_slice = _class.staticMethodId(
    r'slice',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _slice = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression slice(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression slice(
    Expression expression,
    Expression expression1,
  ) {
    return _slice(_class.reference.pointer, _id_slice as jni.JMethodIDPtr,
            expression.reference.pointer, expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_slice1 = _class.staticMethodId(
    r'slice',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _slice1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression slice(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1, org.maplibre.android.style.expressions.Expression expression2)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression slice1(
    Expression expression,
    Expression expression1,
    Expression expression2,
  ) {
    return _slice1(
            _class.reference.pointer,
            _id_slice1 as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer,
            expression2.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_in1 = _class.staticMethodId(
    r'in',
    r'(Ljava/lang/Number;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _in1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression in(java.lang.Number number, org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression in1(
    jni.JNumber number,
    Expression expression,
  ) {
    return _in1(_class.reference.pointer, _id_in1 as jni.JMethodIDPtr,
            number.reference.pointer, expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_in2 = _class.staticMethodId(
    r'in',
    r'(Ljava/lang/String;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _in2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression in(java.lang.String string, org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression in2(
    jni.JString string,
    Expression expression,
  ) {
    return _in2(_class.reference.pointer, _id_in2 as jni.JMethodIDPtr,
            string.reference.pointer, expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_distance = _class.staticMethodId(
    r'distance',
    r'(Lorg/maplibre/geojson/GeoJson;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _distance = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression distance(org.maplibre.geojson.GeoJson geoJson)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression distance(
    jni.JObject geoJson,
  ) {
    return _distance(_class.reference.pointer, _id_distance as jni.JMethodIDPtr,
            geoJson.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_within = _class.staticMethodId(
    r'within',
    r'(Lorg/maplibre/geojson/Polygon;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _within = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression within(org.maplibre.geojson.Polygon polygon)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression within(
    jni.JObject polygon,
  ) {
    return _within(_class.reference.pointer, _id_within as jni.JMethodIDPtr,
            polygon.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_get0 = _class.staticMethodId(
    r'get',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _get0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression get(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression get0(
    Expression expression,
  ) {
    return _get0(_class.reference.pointer, _id_get0 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_get1 = _class.staticMethodId(
    r'get',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _get1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression get(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression get1(
    jni.JString string,
  ) {
    return _get1(_class.reference.pointer, _id_get1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_get2 = _class.staticMethodId(
    r'get',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _get2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression get(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression get2(
    Expression expression,
    Expression expression1,
  ) {
    return _get2(_class.reference.pointer, _id_get2 as jni.JMethodIDPtr,
            expression.reference.pointer, expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_get3 = _class.staticMethodId(
    r'get',
    r'(Ljava/lang/String;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _get3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression get(java.lang.String string, org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression get3(
    jni.JString string,
    Expression expression,
  ) {
    return _get3(_class.reference.pointer, _id_get3 as jni.JMethodIDPtr,
            string.reference.pointer, expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_has = _class.staticMethodId(
    r'has',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _has = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression has(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression has(
    Expression expression,
  ) {
    return _has(_class.reference.pointer, _id_has as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_has1 = _class.staticMethodId(
    r'has',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _has1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression has(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression has1(
    jni.JString string,
  ) {
    return _has1(_class.reference.pointer, _id_has1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_has2 = _class.staticMethodId(
    r'has',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _has2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression has(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression has2(
    Expression expression,
    Expression expression1,
  ) {
    return _has2(_class.reference.pointer, _id_has2 as jni.JMethodIDPtr,
            expression.reference.pointer, expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_has3 = _class.staticMethodId(
    r'has',
    r'(Ljava/lang/String;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _has3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression has(java.lang.String string, org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression has3(
    jni.JString string,
    Expression expression,
  ) {
    return _has3(_class.reference.pointer, _id_has3 as jni.JMethodIDPtr,
            string.reference.pointer, expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_length = _class.staticMethodId(
    r'length',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _length = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression length(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression length(
    Expression expression,
  ) {
    return _length(_class.reference.pointer, _id_length as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_length1 = _class.staticMethodId(
    r'length',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _length1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression length(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression length1(
    jni.JString string,
  ) {
    return _length1(_class.reference.pointer, _id_length1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_ln2 = _class.staticMethodId(
    r'ln2',
    r'()Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _ln2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.style.expressions.Expression ln2()`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression ln2() {
    return _ln2(_class.reference.pointer, _id_ln2 as jni.JMethodIDPtr)
        .object(const $ExpressionType());
  }

  static final _id_pi = _class.staticMethodId(
    r'pi',
    r'()Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _pi = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.style.expressions.Expression pi()`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression pi() {
    return _pi(_class.reference.pointer, _id_pi as jni.JMethodIDPtr)
        .object(const $ExpressionType());
  }

  static final _id_e = _class.staticMethodId(
    r'e',
    r'()Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _e = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.style.expressions.Expression e()`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression e() {
    return _e(_class.reference.pointer, _id_e as jni.JMethodIDPtr)
        .object(const $ExpressionType());
  }

  static final _id_sum = _class.staticMethodId(
    r'sum',
    r'([Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _sum = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression sum(org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression sum(
    jni.JArray<Expression> expressions,
  ) {
    return _sum(_class.reference.pointer, _id_sum as jni.JMethodIDPtr,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_sum1 = _class.staticMethodId(
    r'sum',
    r'([Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _sum1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression sum(java.lang.Number[] numbers)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression sum1(
    jni.JArray<jni.JNumber> numbers,
  ) {
    return _sum1(_class.reference.pointer, _id_sum1 as jni.JMethodIDPtr,
            numbers.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_product = _class.staticMethodId(
    r'product',
    r'([Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _product = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression product(org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression product(
    jni.JArray<Expression> expressions,
  ) {
    return _product(_class.reference.pointer, _id_product as jni.JMethodIDPtr,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_product1 = _class.staticMethodId(
    r'product',
    r'([Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _product1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression product(java.lang.Number[] numbers)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression product1(
    jni.JArray<jni.JNumber> numbers,
  ) {
    return _product1(_class.reference.pointer, _id_product1 as jni.JMethodIDPtr,
            numbers.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_subtract = _class.staticMethodId(
    r'subtract',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _subtract = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression subtract(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression subtract(
    Expression expression,
  ) {
    return _subtract(_class.reference.pointer, _id_subtract as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_subtract1 = _class.staticMethodId(
    r'subtract',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _subtract1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression subtract(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression subtract1(
    jni.JNumber number,
  ) {
    return _subtract1(_class.reference.pointer,
            _id_subtract1 as jni.JMethodIDPtr, number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_subtract2 = _class.staticMethodId(
    r'subtract',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _subtract2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression subtract(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression subtract2(
    Expression expression,
    Expression expression1,
  ) {
    return _subtract2(
            _class.reference.pointer,
            _id_subtract2 as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_subtract3 = _class.staticMethodId(
    r'subtract',
    r'(Ljava/lang/Number;Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _subtract3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression subtract(java.lang.Number number, java.lang.Number number1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression subtract3(
    jni.JNumber number,
    jni.JNumber number1,
  ) {
    return _subtract3(
            _class.reference.pointer,
            _id_subtract3 as jni.JMethodIDPtr,
            number.reference.pointer,
            number1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_division = _class.staticMethodId(
    r'division',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _division = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression division(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression division(
    Expression expression,
    Expression expression1,
  ) {
    return _division(_class.reference.pointer, _id_division as jni.JMethodIDPtr,
            expression.reference.pointer, expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_division1 = _class.staticMethodId(
    r'division',
    r'(Ljava/lang/Number;Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _division1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression division(java.lang.Number number, java.lang.Number number1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression division1(
    jni.JNumber number,
    jni.JNumber number1,
  ) {
    return _division1(
            _class.reference.pointer,
            _id_division1 as jni.JMethodIDPtr,
            number.reference.pointer,
            number1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_mod = _class.staticMethodId(
    r'mod',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _mod = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression mod(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression mod(
    Expression expression,
    Expression expression1,
  ) {
    return _mod(_class.reference.pointer, _id_mod as jni.JMethodIDPtr,
            expression.reference.pointer, expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_mod1 = _class.staticMethodId(
    r'mod',
    r'(Ljava/lang/Number;Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _mod1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression mod(java.lang.Number number, java.lang.Number number1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression mod1(
    jni.JNumber number,
    jni.JNumber number1,
  ) {
    return _mod1(_class.reference.pointer, _id_mod1 as jni.JMethodIDPtr,
            number.reference.pointer, number1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_pow = _class.staticMethodId(
    r'pow',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _pow = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression pow(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression pow(
    Expression expression,
    Expression expression1,
  ) {
    return _pow(_class.reference.pointer, _id_pow as jni.JMethodIDPtr,
            expression.reference.pointer, expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_pow1 = _class.staticMethodId(
    r'pow',
    r'(Ljava/lang/Number;Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _pow1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression pow(java.lang.Number number, java.lang.Number number1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression pow1(
    jni.JNumber number,
    jni.JNumber number1,
  ) {
    return _pow1(_class.reference.pointer, _id_pow1 as jni.JMethodIDPtr,
            number.reference.pointer, number1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_sqrt = _class.staticMethodId(
    r'sqrt',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _sqrt = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression sqrt(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression sqrt(
    Expression expression,
  ) {
    return _sqrt(_class.reference.pointer, _id_sqrt as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_sqrt1 = _class.staticMethodId(
    r'sqrt',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _sqrt1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression sqrt(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression sqrt1(
    jni.JNumber number,
  ) {
    return _sqrt1(_class.reference.pointer, _id_sqrt1 as jni.JMethodIDPtr,
            number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_log10 = _class.staticMethodId(
    r'log10',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _log10 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression log10(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression log10(
    Expression expression,
  ) {
    return _log10(_class.reference.pointer, _id_log10 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_log101 = _class.staticMethodId(
    r'log10',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _log101 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression log10(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression log101(
    jni.JNumber number,
  ) {
    return _log101(_class.reference.pointer, _id_log101 as jni.JMethodIDPtr,
            number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_ln = _class.staticMethodId(
    r'ln',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _ln = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression ln(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression ln(
    Expression expression,
  ) {
    return _ln(_class.reference.pointer, _id_ln as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_ln1 = _class.staticMethodId(
    r'ln',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _ln1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression ln(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression ln1(
    jni.JNumber number,
  ) {
    return _ln1(_class.reference.pointer, _id_ln1 as jni.JMethodIDPtr,
            number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_log2 = _class.staticMethodId(
    r'log2',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _log2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression log2(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression log2(
    Expression expression,
  ) {
    return _log2(_class.reference.pointer, _id_log2 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_log21 = _class.staticMethodId(
    r'log2',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _log21 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression log2(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression log21(
    jni.JNumber number,
  ) {
    return _log21(_class.reference.pointer, _id_log21 as jni.JMethodIDPtr,
            number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_sin = _class.staticMethodId(
    r'sin',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _sin = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression sin(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression sin(
    Expression expression,
  ) {
    return _sin(_class.reference.pointer, _id_sin as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_sin1 = _class.staticMethodId(
    r'sin',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _sin1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression sin(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression sin1(
    jni.JNumber number,
  ) {
    return _sin1(_class.reference.pointer, _id_sin1 as jni.JMethodIDPtr,
            number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_cos = _class.staticMethodId(
    r'cos',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _cos = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression cos(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression cos(
    Expression expression,
  ) {
    return _cos(_class.reference.pointer, _id_cos as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_cos1 = _class.staticMethodId(
    r'cos',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _cos1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression cos(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression cos1(
    jni.JNumber number,
  ) {
    return _cos1(_class.reference.pointer, _id_cos1 as jni.JMethodIDPtr,
            number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_tan = _class.staticMethodId(
    r'tan',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _tan = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression tan(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression tan(
    Expression expression,
  ) {
    return _tan(_class.reference.pointer, _id_tan as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_tan1 = _class.staticMethodId(
    r'tan',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _tan1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression tan(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression tan1(
    jni.JNumber number,
  ) {
    return _tan1(_class.reference.pointer, _id_tan1 as jni.JMethodIDPtr,
            number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_asin = _class.staticMethodId(
    r'asin',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _asin = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression asin(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression asin(
    Expression expression,
  ) {
    return _asin(_class.reference.pointer, _id_asin as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_asin1 = _class.staticMethodId(
    r'asin',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _asin1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression asin(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression asin1(
    jni.JNumber number,
  ) {
    return _asin1(_class.reference.pointer, _id_asin1 as jni.JMethodIDPtr,
            number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_acos = _class.staticMethodId(
    r'acos',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _acos = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression acos(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression acos(
    Expression expression,
  ) {
    return _acos(_class.reference.pointer, _id_acos as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_acos1 = _class.staticMethodId(
    r'acos',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _acos1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression acos(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression acos1(
    jni.JNumber number,
  ) {
    return _acos1(_class.reference.pointer, _id_acos1 as jni.JMethodIDPtr,
            number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_atan = _class.staticMethodId(
    r'atan',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _atan = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression atan(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression atan(
    Expression expression,
  ) {
    return _atan(_class.reference.pointer, _id_atan as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_atan1 = _class.staticMethodId(
    r'atan',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _atan1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression atan(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression atan1(
    jni.JNumber number,
  ) {
    return _atan1(_class.reference.pointer, _id_atan1 as jni.JMethodIDPtr,
            number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_min = _class.staticMethodId(
    r'min',
    r'([Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _min = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression min(org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression min(
    jni.JArray<Expression> expressions,
  ) {
    return _min(_class.reference.pointer, _id_min as jni.JMethodIDPtr,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_min1 = _class.staticMethodId(
    r'min',
    r'([Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _min1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression min(java.lang.Number[] numbers)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression min1(
    jni.JArray<jni.JNumber> numbers,
  ) {
    return _min1(_class.reference.pointer, _id_min1 as jni.JMethodIDPtr,
            numbers.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_max = _class.staticMethodId(
    r'max',
    r'([Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _max = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression max(org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression max(
    jni.JArray<Expression> expressions,
  ) {
    return _max(_class.reference.pointer, _id_max as jni.JMethodIDPtr,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_max1 = _class.staticMethodId(
    r'max',
    r'([Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _max1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression max(java.lang.Number[] numbers)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression max1(
    jni.JArray<jni.JNumber> numbers,
  ) {
    return _max1(_class.reference.pointer, _id_max1 as jni.JMethodIDPtr,
            numbers.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_round = _class.staticMethodId(
    r'round',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _round = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression round(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression round(
    Expression expression,
  ) {
    return _round(_class.reference.pointer, _id_round as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_round1 = _class.staticMethodId(
    r'round',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _round1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression round(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression round1(
    jni.JNumber number,
  ) {
    return _round1(_class.reference.pointer, _id_round1 as jni.JMethodIDPtr,
            number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_abs = _class.staticMethodId(
    r'abs',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _abs = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression abs(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression abs(
    Expression expression,
  ) {
    return _abs(_class.reference.pointer, _id_abs as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_abs1 = _class.staticMethodId(
    r'abs',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _abs1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression abs(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression abs1(
    jni.JNumber number,
  ) {
    return _abs1(_class.reference.pointer, _id_abs1 as jni.JMethodIDPtr,
            number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_ceil = _class.staticMethodId(
    r'ceil',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _ceil = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression ceil(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression ceil(
    Expression expression,
  ) {
    return _ceil(_class.reference.pointer, _id_ceil as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_ceil1 = _class.staticMethodId(
    r'ceil',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _ceil1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression ceil(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression ceil1(
    jni.JNumber number,
  ) {
    return _ceil1(_class.reference.pointer, _id_ceil1 as jni.JMethodIDPtr,
            number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_floor = _class.staticMethodId(
    r'floor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _floor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression floor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression floor(
    Expression expression,
  ) {
    return _floor(_class.reference.pointer, _id_floor as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_floor1 = _class.staticMethodId(
    r'floor',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _floor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression floor(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression floor1(
    jni.JNumber number,
  ) {
    return _floor1(_class.reference.pointer, _id_floor1 as jni.JMethodIDPtr,
            number.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_resolvedLocale = _class.staticMethodId(
    r'resolvedLocale',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _resolvedLocale = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression resolvedLocale(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression resolvedLocale(
    Expression expression,
  ) {
    return _resolvedLocale(
            _class.reference.pointer,
            _id_resolvedLocale as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_isSupportedScript = _class.staticMethodId(
    r'isSupportedScript',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _isSupportedScript = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression isSupportedScript(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression isSupportedScript(
    Expression expression,
  ) {
    return _isSupportedScript(
            _class.reference.pointer,
            _id_isSupportedScript as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_isSupportedScript1 = _class.staticMethodId(
    r'isSupportedScript',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _isSupportedScript1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression isSupportedScript(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression isSupportedScript1(
    jni.JString string,
  ) {
    return _isSupportedScript1(
            _class.reference.pointer,
            _id_isSupportedScript1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_upcase = _class.staticMethodId(
    r'upcase',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _upcase = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression upcase(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression upcase(
    Expression expression,
  ) {
    return _upcase(_class.reference.pointer, _id_upcase as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_upcase1 = _class.staticMethodId(
    r'upcase',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _upcase1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression upcase(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression upcase1(
    jni.JString string,
  ) {
    return _upcase1(_class.reference.pointer, _id_upcase1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_downcase = _class.staticMethodId(
    r'downcase',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _downcase = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression downcase(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression downcase(
    Expression expression,
  ) {
    return _downcase(_class.reference.pointer, _id_downcase as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_downcase1 = _class.staticMethodId(
    r'downcase',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _downcase1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression downcase(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression downcase1(
    jni.JString string,
  ) {
    return _downcase1(_class.reference.pointer,
            _id_downcase1 as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_concat = _class.staticMethodId(
    r'concat',
    r'([Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _concat = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression concat(org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression concat(
    jni.JArray<Expression> expressions,
  ) {
    return _concat(_class.reference.pointer, _id_concat as jni.JMethodIDPtr,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_concat1 = _class.staticMethodId(
    r'concat',
    r'([Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _concat1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression concat(java.lang.String[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression concat1(
    jni.JArray<jni.JString> strings,
  ) {
    return _concat1(_class.reference.pointer, _id_concat1 as jni.JMethodIDPtr,
            strings.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_array = _class.staticMethodId(
    r'array',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _array = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression array(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression array(
    Expression expression,
  ) {
    return _array(_class.reference.pointer, _id_array as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_typeOf = _class.staticMethodId(
    r'typeOf',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _typeOf = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression typeOf(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression typeOf(
    Expression expression,
  ) {
    return _typeOf(_class.reference.pointer, _id_typeOf as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_string = _class.staticMethodId(
    r'string',
    r'([Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _string = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression string(org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression string(
    jni.JArray<Expression> expressions,
  ) {
    return _string(_class.reference.pointer, _id_string as jni.JMethodIDPtr,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_number = _class.staticMethodId(
    r'number',
    r'([Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _number = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression number(org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression number(
    jni.JArray<Expression> expressions,
  ) {
    return _number(_class.reference.pointer, _id_number as jni.JMethodIDPtr,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_numberFormat = _class.staticMethodId(
    r'numberFormat',
    r'(Lorg/maplibre/android/style/expressions/Expression;[Lorg/maplibre/android/style/expressions/Expression$NumberFormatOption;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _numberFormat = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression numberFormat(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression$NumberFormatOption[] numberFormatOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression numberFormat(
    Expression expression,
    jni.JArray<Expression_NumberFormatOption> numberFormatOptions,
  ) {
    return _numberFormat(
            _class.reference.pointer,
            _id_numberFormat as jni.JMethodIDPtr,
            expression.reference.pointer,
            numberFormatOptions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_numberFormat1 = _class.staticMethodId(
    r'numberFormat',
    r'(Ljava/lang/Number;[Lorg/maplibre/android/style/expressions/Expression$NumberFormatOption;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _numberFormat1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression numberFormat(java.lang.Number number, org.maplibre.android.style.expressions.Expression$NumberFormatOption[] numberFormatOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression numberFormat1(
    jni.JNumber number,
    jni.JArray<Expression_NumberFormatOption> numberFormatOptions,
  ) {
    return _numberFormat1(
            _class.reference.pointer,
            _id_numberFormat1 as jni.JMethodIDPtr,
            number.reference.pointer,
            numberFormatOptions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_bool = _class.staticMethodId(
    r'bool',
    r'([Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _bool = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression bool(org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression bool(
    jni.JArray<Expression> expressions,
  ) {
    return _bool(_class.reference.pointer, _id_bool as jni.JMethodIDPtr,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_collator = _class.staticMethodId(
    r'collator',
    r'(ZZLjava/util/Locale;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _collator = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression collator(boolean z, boolean z1, java.util.Locale locale)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression collator(
    bool z,
    bool z1,
    jni.JObject locale,
  ) {
    return _collator(_class.reference.pointer, _id_collator as jni.JMethodIDPtr,
            z ? 1 : 0, z1 ? 1 : 0, locale.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_collator1 = _class.staticMethodId(
    r'collator',
    r'(ZZ)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _collator1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<($Int32, $Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression collator(boolean z, boolean z1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression collator1(
    bool z,
    bool z1,
  ) {
    return _collator1(_class.reference.pointer,
            _id_collator1 as jni.JMethodIDPtr, z ? 1 : 0, z1 ? 1 : 0)
        .object(const $ExpressionType());
  }

  static final _id_collator2 = _class.staticMethodId(
    r'collator',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _collator2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression collator(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1, org.maplibre.android.style.expressions.Expression expression2)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression collator2(
    Expression expression,
    Expression expression1,
    Expression expression2,
  ) {
    return _collator2(
            _class.reference.pointer,
            _id_collator2 as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer,
            expression2.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_collator3 = _class.staticMethodId(
    r'collator',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _collator3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression collator(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression collator3(
    Expression expression,
    Expression expression1,
  ) {
    return _collator3(
            _class.reference.pointer,
            _id_collator3 as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_format = _class.staticMethodId(
    r'format',
    r'([Lorg/maplibre/android/style/expressions/Expression$FormatEntry;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _format = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression format(org.maplibre.android.style.expressions.Expression$FormatEntry[] formatEntrys)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression format(
    jni.JArray<Expression_FormatEntry> formatEntrys,
  ) {
    return _format(_class.reference.pointer, _id_format as jni.JMethodIDPtr,
            formatEntrys.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_formatEntry = _class.staticMethodId(
    r'formatEntry',
    r'(Lorg/maplibre/android/style/expressions/Expression;[Lorg/maplibre/android/style/expressions/Expression$FormatOption;)Lorg/maplibre/android/style/expressions/Expression$FormatEntry;',
  );

  static final _formatEntry = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$FormatEntry formatEntry(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression$FormatOption[] formatOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_FormatEntry formatEntry(
    Expression expression,
    jni.JArray<Expression_FormatOption> formatOptions,
  ) {
    return _formatEntry(
            _class.reference.pointer,
            _id_formatEntry as jni.JMethodIDPtr,
            expression.reference.pointer,
            formatOptions.reference.pointer)
        .object(const $Expression_FormatEntryType());
  }

  static final _id_formatEntry1 = _class.staticMethodId(
    r'formatEntry',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression$FormatEntry;',
  );

  static final _formatEntry1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$FormatEntry formatEntry(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_FormatEntry formatEntry1(
    Expression expression,
  ) {
    return _formatEntry1(_class.reference.pointer,
            _id_formatEntry1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const $Expression_FormatEntryType());
  }

  static final _id_formatEntry2 = _class.staticMethodId(
    r'formatEntry',
    r'(Ljava/lang/String;[Lorg/maplibre/android/style/expressions/Expression$FormatOption;)Lorg/maplibre/android/style/expressions/Expression$FormatEntry;',
  );

  static final _formatEntry2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$FormatEntry formatEntry(java.lang.String string, org.maplibre.android.style.expressions.Expression$FormatOption[] formatOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_FormatEntry formatEntry2(
    jni.JString string,
    jni.JArray<Expression_FormatOption> formatOptions,
  ) {
    return _formatEntry2(
            _class.reference.pointer,
            _id_formatEntry2 as jni.JMethodIDPtr,
            string.reference.pointer,
            formatOptions.reference.pointer)
        .object(const $Expression_FormatEntryType());
  }

  static final _id_formatEntry3 = _class.staticMethodId(
    r'formatEntry',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression$FormatEntry;',
  );

  static final _formatEntry3 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$FormatEntry formatEntry(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_FormatEntry formatEntry3(
    jni.JString string,
  ) {
    return _formatEntry3(_class.reference.pointer,
            _id_formatEntry3 as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $Expression_FormatEntryType());
  }

  static final _id_image = _class.staticMethodId(
    r'image',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _image = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression image(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression image(
    Expression expression,
  ) {
    return _image(_class.reference.pointer, _id_image as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_object = _class.staticMethodId(
    r'object',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _object = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression object(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression object(
    Expression expression,
  ) {
    return _object(_class.reference.pointer, _id_object as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_toString1 = _class.staticMethodId(
    r'toString',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression toString(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression toString1(
    Expression expression,
  ) {
    return _toString1(_class.reference.pointer,
            _id_toString1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_toNumber = _class.staticMethodId(
    r'toNumber',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _toNumber = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression toNumber(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression toNumber(
    Expression expression,
  ) {
    return _toNumber(_class.reference.pointer, _id_toNumber as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_toBool = _class.staticMethodId(
    r'toBool',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _toBool = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression toBool(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression toBool(
    Expression expression,
  ) {
    return _toBool(_class.reference.pointer, _id_toBool as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_toColor = _class.staticMethodId(
    r'toColor',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _toColor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression toColor(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression toColor(
    Expression expression,
  ) {
    return _toColor(_class.reference.pointer, _id_toColor as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_toPadding = _class.staticMethodId(
    r'toPadding',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _toPadding = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression toPadding(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression toPadding(
    Expression expression,
  ) {
    return _toPadding(_class.reference.pointer,
            _id_toPadding as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_let = _class.staticMethodId(
    r'let',
    r'([Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _let = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression let(org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression let(
    jni.JArray<Expression> expressions,
  ) {
    return _let(_class.reference.pointer, _id_let as jni.JMethodIDPtr,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_var0 = _class.staticMethodId(
    r'var',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _var0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression var(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression var0(
    Expression expression,
  ) {
    return _var0(_class.reference.pointer, _id_var0 as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_var1 = _class.staticMethodId(
    r'var',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _var1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression var(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression var1(
    jni.JString string,
  ) {
    return _var1(_class.reference.pointer, _id_var1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_zoom = _class.staticMethodId(
    r'zoom',
    r'()Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _zoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.style.expressions.Expression zoom()`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression zoom() {
    return _zoom(_class.reference.pointer, _id_zoom as jni.JMethodIDPtr)
        .object(const $ExpressionType());
  }

  static final _id_stop = _class.staticMethodId(
    r'stop',
    r'(Ljava/lang/Object;Ljava/lang/Object;)Lorg/maplibre/android/style/expressions/Expression$Stop;',
  );

  static final _stop = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$Stop stop(java.lang.Object object, java.lang.Object object1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_Stop stop(
    jni.JObject object,
    jni.JObject object1,
  ) {
    return _stop(_class.reference.pointer, _id_stop as jni.JMethodIDPtr,
            object.reference.pointer, object1.reference.pointer)
        .object(const $Expression_StopType());
  }

  static final _id_step = _class.staticMethodId(
    r'step',
    r'(Ljava/lang/Number;Lorg/maplibre/android/style/expressions/Expression;[Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _step = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression step(java.lang.Number number, org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression step(
    jni.JNumber number,
    Expression expression,
    jni.JArray<Expression> expressions,
  ) {
    return _step(
            _class.reference.pointer,
            _id_step as jni.JMethodIDPtr,
            number.reference.pointer,
            expression.reference.pointer,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_step1 = _class.staticMethodId(
    r'step',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;[Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _step1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression step(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1, org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression step1(
    Expression expression,
    Expression expression1,
    jni.JArray<Expression> expressions,
  ) {
    return _step1(
            _class.reference.pointer,
            _id_step1 as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_step2 = _class.staticMethodId(
    r'step',
    r'(Ljava/lang/Number;Lorg/maplibre/android/style/expressions/Expression;[Lorg/maplibre/android/style/expressions/Expression$Stop;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _step2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression step(java.lang.Number number, org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression$Stop[] stops)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression step2(
    jni.JNumber number,
    Expression expression,
    jni.JArray<Expression_Stop> stops,
  ) {
    return _step2(
            _class.reference.pointer,
            _id_step2 as jni.JMethodIDPtr,
            number.reference.pointer,
            expression.reference.pointer,
            stops.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_step3 = _class.staticMethodId(
    r'step',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;[Lorg/maplibre/android/style/expressions/Expression$Stop;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _step3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression step(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1, org.maplibre.android.style.expressions.Expression$Stop[] stops)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression step3(
    Expression expression,
    Expression expression1,
    jni.JArray<Expression_Stop> stops,
  ) {
    return _step3(
            _class.reference.pointer,
            _id_step3 as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer,
            stops.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_step4 = _class.staticMethodId(
    r'step',
    r'(Ljava/lang/Number;Ljava/lang/Number;[Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _step4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression step(java.lang.Number number, java.lang.Number number1, org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression step4(
    jni.JNumber number,
    jni.JNumber number1,
    jni.JArray<Expression> expressions,
  ) {
    return _step4(
            _class.reference.pointer,
            _id_step4 as jni.JMethodIDPtr,
            number.reference.pointer,
            number1.reference.pointer,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_step5 = _class.staticMethodId(
    r'step',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/Number;[Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _step5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression step(org.maplibre.android.style.expressions.Expression expression, java.lang.Number number, org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression step5(
    Expression expression,
    jni.JNumber number,
    jni.JArray<Expression> expressions,
  ) {
    return _step5(
            _class.reference.pointer,
            _id_step5 as jni.JMethodIDPtr,
            expression.reference.pointer,
            number.reference.pointer,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_step6 = _class.staticMethodId(
    r'step',
    r'(Ljava/lang/Number;Ljava/lang/Number;[Lorg/maplibre/android/style/expressions/Expression$Stop;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _step6 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression step(java.lang.Number number, java.lang.Number number1, org.maplibre.android.style.expressions.Expression$Stop[] stops)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression step6(
    jni.JNumber number,
    jni.JNumber number1,
    jni.JArray<Expression_Stop> stops,
  ) {
    return _step6(
            _class.reference.pointer,
            _id_step6 as jni.JMethodIDPtr,
            number.reference.pointer,
            number1.reference.pointer,
            stops.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_step7 = _class.staticMethodId(
    r'step',
    r'(Lorg/maplibre/android/style/expressions/Expression;Ljava/lang/Number;[Lorg/maplibre/android/style/expressions/Expression$Stop;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _step7 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression step(org.maplibre.android.style.expressions.Expression expression, java.lang.Number number, org.maplibre.android.style.expressions.Expression$Stop[] stops)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression step7(
    Expression expression,
    jni.JNumber number,
    jni.JArray<Expression_Stop> stops,
  ) {
    return _step7(
            _class.reference.pointer,
            _id_step7 as jni.JMethodIDPtr,
            expression.reference.pointer,
            number.reference.pointer,
            stops.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_interpolate = _class.staticMethodId(
    r'interpolate',
    r'(Lorg/maplibre/android/style/expressions/Expression$Interpolator;Lorg/maplibre/android/style/expressions/Expression;[Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _interpolate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression interpolate(org.maplibre.android.style.expressions.Expression$Interpolator interpolator, org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression[] expressions)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression interpolate(
    Expression_Interpolator interpolator,
    Expression expression,
    jni.JArray<Expression> expressions,
  ) {
    return _interpolate(
            _class.reference.pointer,
            _id_interpolate as jni.JMethodIDPtr,
            interpolator.reference.pointer,
            expression.reference.pointer,
            expressions.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_interpolate1 = _class.staticMethodId(
    r'interpolate',
    r'(Lorg/maplibre/android/style/expressions/Expression$Interpolator;Lorg/maplibre/android/style/expressions/Expression;[Lorg/maplibre/android/style/expressions/Expression$Stop;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _interpolate1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression interpolate(org.maplibre.android.style.expressions.Expression$Interpolator interpolator, org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression$Stop[] stops)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression interpolate1(
    Expression_Interpolator interpolator,
    Expression expression,
    jni.JArray<Expression_Stop> stops,
  ) {
    return _interpolate1(
            _class.reference.pointer,
            _id_interpolate1 as jni.JMethodIDPtr,
            interpolator.reference.pointer,
            expression.reference.pointer,
            stops.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_linear = _class.staticMethodId(
    r'linear',
    r'()Lorg/maplibre/android/style/expressions/Expression$Interpolator;',
  );

  static final _linear = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$Interpolator linear()`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_Interpolator linear() {
    return _linear(_class.reference.pointer, _id_linear as jni.JMethodIDPtr)
        .object(const $Expression_InterpolatorType());
  }

  static final _id_exponential = _class.staticMethodId(
    r'exponential',
    r'(Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression$Interpolator;',
  );

  static final _exponential = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$Interpolator exponential(java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_Interpolator exponential(
    jni.JNumber number,
  ) {
    return _exponential(_class.reference.pointer,
            _id_exponential as jni.JMethodIDPtr, number.reference.pointer)
        .object(const $Expression_InterpolatorType());
  }

  static final _id_exponential1 = _class.staticMethodId(
    r'exponential',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression$Interpolator;',
  );

  static final _exponential1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$Interpolator exponential(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_Interpolator exponential1(
    Expression expression,
  ) {
    return _exponential1(_class.reference.pointer,
            _id_exponential1 as jni.JMethodIDPtr, expression.reference.pointer)
        .object(const $Expression_InterpolatorType());
  }

  static final _id_cubicBezier = _class.staticMethodId(
    r'cubicBezier',
    r'(Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;Lorg/maplibre/android/style/expressions/Expression;)Lorg/maplibre/android/style/expressions/Expression$Interpolator;',
  );

  static final _cubicBezier = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$Interpolator cubicBezier(org.maplibre.android.style.expressions.Expression expression, org.maplibre.android.style.expressions.Expression expression1, org.maplibre.android.style.expressions.Expression expression2, org.maplibre.android.style.expressions.Expression expression3)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_Interpolator cubicBezier(
    Expression expression,
    Expression expression1,
    Expression expression2,
    Expression expression3,
  ) {
    return _cubicBezier(
            _class.reference.pointer,
            _id_cubicBezier as jni.JMethodIDPtr,
            expression.reference.pointer,
            expression1.reference.pointer,
            expression2.reference.pointer,
            expression3.reference.pointer)
        .object(const $Expression_InterpolatorType());
  }

  static final _id_cubicBezier1 = _class.staticMethodId(
    r'cubicBezier',
    r'(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)Lorg/maplibre/android/style/expressions/Expression$Interpolator;',
  );

  static final _cubicBezier1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression$Interpolator cubicBezier(java.lang.Number number, java.lang.Number number1, java.lang.Number number2, java.lang.Number number3)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression_Interpolator cubicBezier1(
    jni.JNumber number,
    jni.JNumber number1,
    jni.JNumber number2,
    jni.JNumber number3,
  ) {
    return _cubicBezier1(
            _class.reference.pointer,
            _id_cubicBezier1 as jni.JMethodIDPtr,
            number.reference.pointer,
            number1.reference.pointer,
            number2.reference.pointer,
            number3.reference.pointer)
        .object(const $Expression_InterpolatorType());
  }

  static final _id_toArray = _class.instanceMethodId(
    r'toArray',
    r'()[Ljava/lang/Object;',
  );

  static final _toArray = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Object[] toArray()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> toArray() {
    return _toArray(reference.pointer, _id_toArray as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_toString2 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString2() {
    return _toString2(reference.pointer, _id_toString2 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_raw = _class.staticMethodId(
    r'raw',
    r'(Ljava/lang/String;)Lorg/maplibre/android/style/expressions/Expression;',
  );

  static final _raw = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.style.expressions.Expression raw(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Expression raw(
    jni.JString string,
  ) {
    return _raw(_class.reference.pointer, _id_raw as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ExpressionType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }
}

final class $ExpressionType extends jni.JObjType<Expression> {
  const $ExpressionType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/style/expressions/Expression;';

  @override
  Expression fromReference(jni.JReference reference) =>
      Expression.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ExpressionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ExpressionType) && other is $ExpressionType;
  }
}
