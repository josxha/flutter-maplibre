// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `org.maplibre.android.style.sources.Source`
class Source extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Source> $type;

  @_$jni.internal
  Source.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/style/sources/Source');

  /// The type which includes information such as the signature of this class.
  static const type = $Source$Type();
  static final _id_getId = _class.instanceMethodId(
    r'getId',
    r'()Ljava/lang/String;',
  );

  static final _getId = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getId()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getId() {
    return _getId(reference.pointer, _id_getId as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getAttribution = _class.instanceMethodId(
    r'getAttribution',
    r'()Ljava/lang/String;',
  );

  static final _getAttribution = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getAttribution()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getAttribution() {
    return _getAttribution(
            reference.pointer, _id_getAttribution as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getPrefetchZoomDelta = _class.instanceMethodId(
    r'getPrefetchZoomDelta',
    r'()Ljava/lang/Integer;',
  );

  static final _getPrefetchZoomDelta = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Integer getPrefetchZoomDelta()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JInteger getPrefetchZoomDelta() {
    return _getPrefetchZoomDelta(
            reference.pointer, _id_getPrefetchZoomDelta as _$jni.JMethodIDPtr)
        .object(const _$jni.JIntegerType());
  }

  static final _id_setPrefetchZoomDelta = _class.instanceMethodId(
    r'setPrefetchZoomDelta',
    r'(Ljava/lang/Integer;)V',
  );

  static final _setPrefetchZoomDelta = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setPrefetchZoomDelta(java.lang.Integer integer)`
  void setPrefetchZoomDelta(
    _$jni.JInteger integer,
  ) {
    _setPrefetchZoomDelta(
            reference.pointer,
            _id_setPrefetchZoomDelta as _$jni.JMethodIDPtr,
            integer.reference.pointer)
        .check();
  }

  static final _id_setMaxOverscaleFactorForParentTiles =
      _class.instanceMethodId(
    r'setMaxOverscaleFactorForParentTiles',
    r'(Ljava/lang/Integer;)V',
  );

  static final _setMaxOverscaleFactorForParentTiles =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setMaxOverscaleFactorForParentTiles(java.lang.Integer integer)`
  void setMaxOverscaleFactorForParentTiles(
    _$jni.JInteger integer,
  ) {
    _setMaxOverscaleFactorForParentTiles(
            reference.pointer,
            _id_setMaxOverscaleFactorForParentTiles as _$jni.JMethodIDPtr,
            integer.reference.pointer)
        .check();
  }

  static final _id_getMaxOverscaleFactorForParentTiles =
      _class.instanceMethodId(
    r'getMaxOverscaleFactorForParentTiles',
    r'()Ljava/lang/Integer;',
  );

  static final _getMaxOverscaleFactorForParentTiles =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public java.lang.Integer getMaxOverscaleFactorForParentTiles()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JInteger getMaxOverscaleFactorForParentTiles() {
    return _getMaxOverscaleFactorForParentTiles(reference.pointer,
            _id_getMaxOverscaleFactorForParentTiles as _$jni.JMethodIDPtr)
        .object(const _$jni.JIntegerType());
  }

  static final _id_isVolatile = _class.instanceMethodId(
    r'isVolatile',
    r'()Ljava/lang/Boolean;',
  );

  static final _isVolatile = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Boolean isVolatile()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JBoolean isVolatile() {
    return _isVolatile(reference.pointer, _id_isVolatile as _$jni.JMethodIDPtr)
        .object(const _$jni.JBooleanType());
  }

  static final _id_setVolatile = _class.instanceMethodId(
    r'setVolatile',
    r'(Ljava/lang/Boolean;)V',
  );

  static final _setVolatile = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setVolatile(java.lang.Boolean boolean)`
  void setVolatile(
    _$jni.JBoolean boolean,
  ) {
    _setVolatile(reference.pointer, _id_setVolatile as _$jni.JMethodIDPtr,
            boolean.reference.pointer)
        .check();
  }

  static final _id_setMinimumTileUpdateInterval = _class.instanceMethodId(
    r'setMinimumTileUpdateInterval',
    r'(Ljava/lang/Long;)V',
  );

  static final _setMinimumTileUpdateInterval =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setMinimumTileUpdateInterval(java.lang.Long long)`
  void setMinimumTileUpdateInterval(
    _$jni.JLong long,
  ) {
    _setMinimumTileUpdateInterval(
            reference.pointer,
            _id_setMinimumTileUpdateInterval as _$jni.JMethodIDPtr,
            long.reference.pointer)
        .check();
  }

  static final _id_getMinimumTileUpdateInterval = _class.instanceMethodId(
    r'getMinimumTileUpdateInterval',
    r'()Ljava/lang/Long;',
  );

  static final _getMinimumTileUpdateInterval =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public java.lang.Long getMinimumTileUpdateInterval()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JLong getMinimumTileUpdateInterval() {
    return _getMinimumTileUpdateInterval(reference.pointer,
            _id_getMinimumTileUpdateInterval as _$jni.JMethodIDPtr)
        .object(const _$jni.JLongType());
  }

  static final _id_getNativePtr = _class.instanceMethodId(
    r'getNativePtr',
    r'()J',
  );

  static final _getNativePtr = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public long getNativePtr()`
  int getNativePtr() {
    return _getNativePtr(
            reference.pointer, _id_getNativePtr as _$jni.JMethodIDPtr)
        .long;
  }

  static final _id_setDetached = _class.instanceMethodId(
    r'setDetached',
    r'()V',
  );

  static final _setDetached = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void setDetached()`
  void setDetached() {
    _setDetached(reference.pointer, _id_setDetached as _$jni.JMethodIDPtr)
        .check();
  }
}

final class $Source$Type extends _$jni.JObjType<Source> {
  @_$jni.internal
  const $Source$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/style/sources/Source;';

  @_$jni.internal
  @_$core.override
  Source fromReference(_$jni.JReference reference) =>
      Source.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($Source$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Source$Type) && other is $Source$Type;
  }
}
