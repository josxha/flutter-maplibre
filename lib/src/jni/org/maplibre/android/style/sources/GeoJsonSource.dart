// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'GeoJsonOptions.dart' as geojsonoptions_;

import 'Source.dart' as source_;

/// from: `org.maplibre.android.style.sources.GeoJsonSource`
class GeoJsonSource extends source_.Source {
  @override
  late final jni.JObjType<GeoJsonSource> $type = type;

  GeoJsonSource.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/style/sources/GeoJsonSource');

  /// The type which includes information such as the signature of this class.
  static const type = $GeoJsonSourceType();
  static final _id_new0 = _class.constructorId(
    r'(J)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void <init>(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource(
    int j,
  ) {
    return GeoJsonSource.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr, j)
            .reference);
  }

  static final _id_new2 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new2(
    jni.JString string,
  ) {
    return GeoJsonSource.fromReference(_new2(_class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr, string.reference.pointer)
        .reference);
  }

  static final _id_new3 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/android/style/sources/GeoJsonOptions;)V',
  );

  static final _new3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.android.style.sources.GeoJsonOptions geoJsonOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new3(
    jni.JString string,
    geojsonoptions_.GeoJsonOptions geoJsonOptions,
  ) {
    return GeoJsonSource.fromReference(_new3(
            _class.reference.pointer,
            _id_new3 as jni.JMethodIDPtr,
            string.reference.pointer,
            geoJsonOptions.reference.pointer)
        .reference);
  }

  static final _id_new4 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new4(
    jni.JString string,
    jni.JString string1,
  ) {
    return GeoJsonSource.fromReference(_new4(
            _class.reference.pointer,
            _id_new4 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .reference);
  }

  static final _id_new5 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;Lorg/maplibre/android/style/sources/GeoJsonOptions;)V',
  );

  static final _new5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1, org.maplibre.android.style.sources.GeoJsonOptions geoJsonOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new5(
    jni.JString string,
    jni.JString string1,
    geojsonoptions_.GeoJsonOptions geoJsonOptions,
  ) {
    return GeoJsonSource.fromReference(_new5(
            _class.reference.pointer,
            _id_new5 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            geoJsonOptions.reference.pointer)
        .reference);
  }

  static final _id_new6 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/net/URL;)V',
  );

  static final _new6 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.net.URL uRL)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new6(
    jni.JString string,
    jni.JObject uRL,
  ) {
    return GeoJsonSource.fromReference(_new6(
            _class.reference.pointer,
            _id_new6 as jni.JMethodIDPtr,
            string.reference.pointer,
            uRL.reference.pointer)
        .reference);
  }

  static final _id_new7 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/net/URL;Lorg/maplibre/android/style/sources/GeoJsonOptions;)V',
  );

  static final _new7 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.net.URL uRL, org.maplibre.android.style.sources.GeoJsonOptions geoJsonOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new7(
    jni.JString string,
    jni.JObject uRL,
    geojsonoptions_.GeoJsonOptions geoJsonOptions,
  ) {
    return GeoJsonSource.fromReference(_new7(
            _class.reference.pointer,
            _id_new7 as jni.JMethodIDPtr,
            string.reference.pointer,
            uRL.reference.pointer,
            geoJsonOptions.reference.pointer)
        .reference);
  }

  static final _id_new8 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/net/URI;)V',
  );

  static final _new8 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.net.URI uRI)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new8(
    jni.JString string,
    jni.JObject uRI,
  ) {
    return GeoJsonSource.fromReference(_new8(
            _class.reference.pointer,
            _id_new8 as jni.JMethodIDPtr,
            string.reference.pointer,
            uRI.reference.pointer)
        .reference);
  }

  static final _id_new9 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/net/URI;Lorg/maplibre/android/style/sources/GeoJsonOptions;)V',
  );

  static final _new9 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.net.URI uRI, org.maplibre.android.style.sources.GeoJsonOptions geoJsonOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new9(
    jni.JString string,
    jni.JObject uRI,
    geojsonoptions_.GeoJsonOptions geoJsonOptions,
  ) {
    return GeoJsonSource.fromReference(_new9(
            _class.reference.pointer,
            _id_new9 as jni.JMethodIDPtr,
            string.reference.pointer,
            uRI.reference.pointer,
            geoJsonOptions.reference.pointer)
        .reference);
  }

  static final _id_new10 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/geojson/FeatureCollection;)V',
  );

  static final _new10 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.geojson.FeatureCollection featureCollection)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new10(
    jni.JString string,
    jni.JObject featureCollection,
  ) {
    return GeoJsonSource.fromReference(_new10(
            _class.reference.pointer,
            _id_new10 as jni.JMethodIDPtr,
            string.reference.pointer,
            featureCollection.reference.pointer)
        .reference);
  }

  static final _id_new11 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/geojson/FeatureCollection;Lorg/maplibre/android/style/sources/GeoJsonOptions;)V',
  );

  static final _new11 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.geojson.FeatureCollection featureCollection, org.maplibre.android.style.sources.GeoJsonOptions geoJsonOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new11(
    jni.JString string,
    jni.JObject featureCollection,
    geojsonoptions_.GeoJsonOptions geoJsonOptions,
  ) {
    return GeoJsonSource.fromReference(_new11(
            _class.reference.pointer,
            _id_new11 as jni.JMethodIDPtr,
            string.reference.pointer,
            featureCollection.reference.pointer,
            geoJsonOptions.reference.pointer)
        .reference);
  }

  static final _id_new12 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/geojson/Feature;)V',
  );

  static final _new12 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.geojson.Feature feature)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new12(
    jni.JString string,
    jni.JObject feature,
  ) {
    return GeoJsonSource.fromReference(_new12(
            _class.reference.pointer,
            _id_new12 as jni.JMethodIDPtr,
            string.reference.pointer,
            feature.reference.pointer)
        .reference);
  }

  static final _id_new13 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/geojson/Feature;Lorg/maplibre/android/style/sources/GeoJsonOptions;)V',
  );

  static final _new13 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.geojson.Feature feature, org.maplibre.android.style.sources.GeoJsonOptions geoJsonOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new13(
    jni.JString string,
    jni.JObject feature,
    geojsonoptions_.GeoJsonOptions geoJsonOptions,
  ) {
    return GeoJsonSource.fromReference(_new13(
            _class.reference.pointer,
            _id_new13 as jni.JMethodIDPtr,
            string.reference.pointer,
            feature.reference.pointer,
            geoJsonOptions.reference.pointer)
        .reference);
  }

  static final _id_new14 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/geojson/Geometry;)V',
  );

  static final _new14 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.geojson.Geometry geometry)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new14(
    jni.JString string,
    jni.JObject geometry,
  ) {
    return GeoJsonSource.fromReference(_new14(
            _class.reference.pointer,
            _id_new14 as jni.JMethodIDPtr,
            string.reference.pointer,
            geometry.reference.pointer)
        .reference);
  }

  static final _id_new15 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/geojson/Geometry;Lorg/maplibre/android/style/sources/GeoJsonOptions;)V',
  );

  static final _new15 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.geojson.Geometry geometry, org.maplibre.android.style.sources.GeoJsonOptions geoJsonOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory GeoJsonSource.new15(
    jni.JString string,
    jni.JObject geometry,
    geojsonoptions_.GeoJsonOptions geoJsonOptions,
  ) {
    return GeoJsonSource.fromReference(_new15(
            _class.reference.pointer,
            _id_new15 as jni.JMethodIDPtr,
            string.reference.pointer,
            geometry.reference.pointer,
            geoJsonOptions.reference.pointer)
        .reference);
  }

  static final _id_setGeoJson = _class.instanceMethodId(
    r'setGeoJson',
    r'(Lorg/maplibre/geojson/Feature;)V',
  );

  static final _setGeoJson = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void setGeoJson(org.maplibre.geojson.Feature feature)`
  void setGeoJson(
    jni.JObject feature,
  ) {
    _setGeoJson(reference.pointer, _id_setGeoJson as jni.JMethodIDPtr,
            feature.reference.pointer)
        .check();
  }

  static final _id_setGeoJson1 = _class.instanceMethodId(
    r'setGeoJson',
    r'(Lorg/maplibre/geojson/Geometry;)V',
  );

  static final _setGeoJson1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void setGeoJson(org.maplibre.geojson.Geometry geometry)`
  void setGeoJson1(
    jni.JObject geometry,
  ) {
    _setGeoJson1(reference.pointer, _id_setGeoJson1 as jni.JMethodIDPtr,
            geometry.reference.pointer)
        .check();
  }

  static final _id_setGeoJson2 = _class.instanceMethodId(
    r'setGeoJson',
    r'(Lorg/maplibre/geojson/FeatureCollection;)V',
  );

  static final _setGeoJson2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void setGeoJson(org.maplibre.geojson.FeatureCollection featureCollection)`
  void setGeoJson2(
    jni.JObject featureCollection,
  ) {
    _setGeoJson2(reference.pointer, _id_setGeoJson2 as jni.JMethodIDPtr,
            featureCollection.reference.pointer)
        .check();
  }

  static final _id_setGeoJson3 = _class.instanceMethodId(
    r'setGeoJson',
    r'(Ljava/lang/String;)V',
  );

  static final _setGeoJson3 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void setGeoJson(java.lang.String string)`
  void setGeoJson3(
    jni.JString string,
  ) {
    _setGeoJson3(reference.pointer, _id_setGeoJson3 as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_setUrl = _class.instanceMethodId(
    r'setUrl',
    r'(Ljava/net/URL;)V',
  );

  static final _setUrl = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void setUrl(java.net.URL uRL)`
  void setUrl(
    jni.JObject uRL,
  ) {
    _setUrl(reference.pointer, _id_setUrl as jni.JMethodIDPtr,
            uRL.reference.pointer)
        .check();
  }

  static final _id_setUri = _class.instanceMethodId(
    r'setUri',
    r'(Ljava/net/URI;)V',
  );

  static final _setUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void setUri(java.net.URI uRI)`
  void setUri(
    jni.JObject uRI,
  ) {
    _setUri(reference.pointer, _id_setUri as jni.JMethodIDPtr,
            uRI.reference.pointer)
        .check();
  }

  static final _id_setUri1 = _class.instanceMethodId(
    r'setUri',
    r'(Ljava/lang/String;)V',
  );

  static final _setUri1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void setUri(java.lang.String string)`
  void setUri1(
    jni.JString string,
  ) {
    _setUri1(reference.pointer, _id_setUri1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getUrl = _class.instanceMethodId(
    r'getUrl',
    r'()Ljava/lang/String;',
  );

  static final _getUrl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getUrl()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getUrl() {
    return _getUrl(reference.pointer, _id_getUrl as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setUrl1 = _class.instanceMethodId(
    r'setUrl',
    r'(Ljava/lang/String;)V',
  );

  static final _setUrl1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final void setUrl(java.lang.String string)`
  void setUrl1(
    jni.JString string,
  ) {
    _setUrl1(reference.pointer, _id_setUrl1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getUri = _class.instanceMethodId(
    r'getUri',
    r'()Ljava/lang/String;',
  );

  static final _getUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getUri()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getUri() {
    return _getUri(reference.pointer, _id_getUri as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_querySourceFeatures = _class.instanceMethodId(
    r'querySourceFeatures',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Ljava/util/List;',
  );

  static final _querySourceFeatures = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final java.util.List querySourceFeatures(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<jni.JObject> querySourceFeatures(
    jni.JObject expression,
  ) {
    return _querySourceFeatures(
            reference.pointer,
            _id_querySourceFeatures as jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const jni.JListType(jni.JObjectType()));
  }

  static final _id_getClusterChildren = _class.instanceMethodId(
    r'getClusterChildren',
    r'(Lorg/maplibre/geojson/Feature;)Lorg/maplibre/geojson/FeatureCollection;',
  );

  static final _getClusterChildren = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final org.maplibre.geojson.FeatureCollection getClusterChildren(org.maplibre.geojson.Feature feature)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getClusterChildren(
    jni.JObject feature,
  ) {
    return _getClusterChildren(
            reference.pointer,
            _id_getClusterChildren as jni.JMethodIDPtr,
            feature.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getClusterLeaves = _class.instanceMethodId(
    r'getClusterLeaves',
    r'(Lorg/maplibre/geojson/Feature;JJ)Lorg/maplibre/geojson/FeatureCollection;',
  );

  static final _getClusterLeaves = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: `public final org.maplibre.geojson.FeatureCollection getClusterLeaves(org.maplibre.geojson.Feature feature, long j, long j1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getClusterLeaves(
    jni.JObject feature,
    int j,
    int j1,
  ) {
    return _getClusterLeaves(
            reference.pointer,
            _id_getClusterLeaves as jni.JMethodIDPtr,
            feature.reference.pointer,
            j,
            j1)
        .object(const jni.JObjectType());
  }

  static final _id_getClusterExpansionZoom = _class.instanceMethodId(
    r'getClusterExpansionZoom',
    r'(Lorg/maplibre/geojson/Feature;)I',
  );

  static final _getClusterExpansionZoom = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final int getClusterExpansionZoom(org.maplibre.geojson.Feature feature)`
  int getClusterExpansionZoom(
    jni.JObject feature,
  ) {
    return _getClusterExpansionZoom(
            reference.pointer,
            _id_getClusterExpansionZoom as jni.JMethodIDPtr,
            feature.reference.pointer)
        .integer;
  }

  static final _id_initialize = _class.instanceMethodId(
    r'initialize',
    r'(Ljava/lang/String;Ljava/lang/Object;)V',
  );

  static final _initialize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `protected native final void initialize(java.lang.String string, java.lang.Object object)`
  void initialize(
    jni.JString string,
    jni.JObject object,
  ) {
    _initialize(reference.pointer, _id_initialize as jni.JMethodIDPtr,
            string.reference.pointer, object.reference.pointer)
        .check();
  }

  static final _id_nativeSetUrl = _class.instanceMethodId(
    r'nativeSetUrl',
    r'(Ljava/lang/String;)V',
  );

  static final _nativeSetUrl = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `protected native final void nativeSetUrl(java.lang.String string)`
  void nativeSetUrl(
    jni.JString string,
  ) {
    _nativeSetUrl(reference.pointer, _id_nativeSetUrl as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_nativeGetUrl = _class.instanceMethodId(
    r'nativeGetUrl',
    r'()Ljava/lang/String;',
  );

  static final _nativeGetUrl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected native final java.lang.String nativeGetUrl()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString nativeGetUrl() {
    return _nativeGetUrl(
            reference.pointer, _id_nativeGetUrl as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_finalize = _class.instanceMethodId(
    r'finalize',
    r'()V',
  );

  static final _finalize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected native final void finalize()`
  void finalize() {
    _finalize(reference.pointer, _id_finalize as jni.JMethodIDPtr).check();
  }
}

final class $GeoJsonSourceType extends jni.JObjType<GeoJsonSource> {
  const $GeoJsonSourceType();

  @override
  String get signature => r'Lorg/maplibre/android/style/sources/GeoJsonSource;';

  @override
  GeoJsonSource fromReference(jni.JReference reference) =>
      GeoJsonSource.fromReference(reference);

  @override
  jni.JObjType get superType => const source_.$SourceType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($GeoJsonSourceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($GeoJsonSourceType) &&
        other is $GeoJsonSourceType;
  }
}
