// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.style.types.FormattedSection`
class FormattedSection extends jni.JObject {
  @override
  late final jni.JObjType<FormattedSection> $type = type;

  FormattedSection.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/style/types/FormattedSection');

  /// The type which includes information such as the signature of this class.
  static const type = $FormattedSectionType();
  static final _id_new0 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FormattedSection(
    jni.JString string,
  ) {
    return FormattedSection.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, string.reference.pointer)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/Number;[Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.Number number, java.lang.String[] strings, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FormattedSection.new1(
    jni.JString string,
    jni.JNumber number,
    jni.JArray<jni.JString> strings,
    jni.JString string1,
  ) {
    return FormattedSection.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            string.reference.pointer,
            number.reference.pointer,
            strings.reference.pointer,
            string1.reference.pointer)
        .reference);
  }

  static final _id_new2 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/Number;[Ljava/lang/String;)V',
  );

  static final _new2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.Number number, java.lang.String[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FormattedSection.new2(
    jni.JString string,
    jni.JNumber number,
    jni.JArray<jni.JString> strings,
  ) {
    return FormattedSection.fromReference(_new2(
            _class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr,
            string.reference.pointer,
            number.reference.pointer,
            strings.reference.pointer)
        .reference);
  }

  static final _id_new3 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/Number;)V',
  );

  static final _new3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.Number number)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FormattedSection.new3(
    jni.JString string,
    jni.JNumber number,
  ) {
    return FormattedSection.fromReference(_new3(
            _class.reference.pointer,
            _id_new3 as jni.JMethodIDPtr,
            string.reference.pointer,
            number.reference.pointer)
        .reference);
  }

  static final _id_new4 = _class.constructorId(
    r'(Ljava/lang/String;[Ljava/lang/String;)V',
  );

  static final _new4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FormattedSection.new4(
    jni.JString string,
    jni.JArray<jni.JString> strings,
  ) {
    return FormattedSection.fromReference(_new4(
            _class.reference.pointer,
            _id_new4 as jni.JMethodIDPtr,
            string.reference.pointer,
            strings.reference.pointer)
        .reference);
  }

  static final _id_getText = _class.instanceMethodId(
    r'getText',
    r'()Ljava/lang/String;',
  );

  static final _getText = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getText()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getText() {
    return _getText(reference.pointer, _id_getText as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getFontScale = _class.instanceMethodId(
    r'getFontScale',
    r'()Ljava/lang/Number;',
  );

  static final _getFontScale = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Number getFontScale()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JNumber getFontScale() {
    return _getFontScale(
            reference.pointer, _id_getFontScale as jni.JMethodIDPtr)
        .object(const jni.JNumberType());
  }

  static final _id_getFontStack = _class.instanceMethodId(
    r'getFontStack',
    r'()[Ljava/lang/String;',
  );

  static final _getFontStack = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String[] getFontStack()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> getFontStack() {
    return _getFontStack(
            reference.pointer, _id_getFontStack as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_getTextColor = _class.instanceMethodId(
    r'getTextColor',
    r'()Ljava/lang/String;',
  );

  static final _getTextColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getTextColor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getTextColor() {
    return _getTextColor(
            reference.pointer, _id_getTextColor as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setFontScale = _class.instanceMethodId(
    r'setFontScale',
    r'(Ljava/lang/Number;)V',
  );

  static final _setFontScale = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setFontScale(java.lang.Number number)`
  void setFontScale(
    jni.JNumber number,
  ) {
    _setFontScale(reference.pointer, _id_setFontScale as jni.JMethodIDPtr,
            number.reference.pointer)
        .check();
  }

  static final _id_setFontStack = _class.instanceMethodId(
    r'setFontStack',
    r'([Ljava/lang/String;)V',
  );

  static final _setFontStack = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setFontStack(java.lang.String[] strings)`
  void setFontStack(
    jni.JArray<jni.JString> strings,
  ) {
    _setFontStack(reference.pointer, _id_setFontStack as jni.JMethodIDPtr,
            strings.reference.pointer)
        .check();
  }

  static final _id_setTextColor = _class.instanceMethodId(
    r'setTextColor',
    r'(Ljava/lang/String;)V',
  );

  static final _setTextColor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setTextColor(java.lang.String string)`
  void setTextColor(
    jni.JString string,
  ) {
    _setTextColor(reference.pointer, _id_setTextColor as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_setTextColor1 = _class.instanceMethodId(
    r'setTextColor',
    r'(I)V',
  );

  static final _setTextColor1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setTextColor(int i)`
  void setTextColor1(
    int i,
  ) {
    _setTextColor1(reference.pointer, _id_setTextColor1 as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $FormattedSectionType extends jni.JObjType<FormattedSection> {
  const $FormattedSectionType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/style/types/FormattedSection;';

  @override
  FormattedSection fromReference(jni.JReference reference) =>
      FormattedSection.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FormattedSectionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FormattedSectionType) &&
        other is $FormattedSectionType;
  }
}
