// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../layers/TransitionOptions.dart' as transitionoptions_;

import 'Position.dart' as position_;

/// from: `org.maplibre.android.style.light.Light`
class Light extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Light> $type;

  @_$jni.internal
  Light.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/style/light/Light');

  /// The type which includes information such as the signature of this class.
  static const type = $Light$Type();
  static final _id_setAnchor = _class.instanceMethodId(
    r'setAnchor',
    r'(Ljava/lang/String;)V',
  );

  static final _setAnchor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setAnchor(java.lang.String string)`
  void setAnchor(
    _$jni.JString string,
  ) {
    _setAnchor(reference.pointer, _id_setAnchor as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getAnchor = _class.instanceMethodId(
    r'getAnchor',
    r'()Ljava/lang/String;',
  );

  static final _getAnchor = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getAnchor()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getAnchor() {
    return _getAnchor(reference.pointer, _id_getAnchor as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_setPosition = _class.instanceMethodId(
    r'setPosition',
    r'(Lorg/maplibre/android/style/light/Position;)V',
  );

  static final _setPosition = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setPosition(org.maplibre.android.style.light.Position position)`
  void setPosition(
    position_.Position position,
  ) {
    _setPosition(reference.pointer, _id_setPosition as _$jni.JMethodIDPtr,
            position.reference.pointer)
        .check();
  }

  static final _id_getPosition = _class.instanceMethodId(
    r'getPosition',
    r'()Lorg/maplibre/android/style/light/Position;',
  );

  static final _getPosition = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.light.Position getPosition()`
  /// The returned object must be released after use, by calling the [release] method.
  position_.Position getPosition() {
    return _getPosition(
            reference.pointer, _id_getPosition as _$jni.JMethodIDPtr)
        .object(const position_.$Position$Type());
  }

  static final _id_getPositionTransition = _class.instanceMethodId(
    r'getPositionTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getPositionTransition = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getPositionTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getPositionTransition() {
    return _getPositionTransition(
            reference.pointer, _id_getPositionTransition as _$jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptions$Type());
  }

  static final _id_setPositionTransition = _class.instanceMethodId(
    r'setPositionTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setPositionTransition = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setPositionTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setPositionTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setPositionTransition(
            reference.pointer,
            _id_setPositionTransition as _$jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_setColor = _class.instanceMethodId(
    r'setColor',
    r'(I)V',
  );

  static final _setColor = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setColor(int i)`
  void setColor(
    int i,
  ) {
    _setColor(reference.pointer, _id_setColor as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_setColor$1 = _class.instanceMethodId(
    r'setColor',
    r'(Ljava/lang/String;)V',
  );

  static final _setColor$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setColor(java.lang.String string)`
  void setColor$1(
    _$jni.JString string,
  ) {
    _setColor$1(reference.pointer, _id_setColor$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getColor = _class.instanceMethodId(
    r'getColor',
    r'()Ljava/lang/String;',
  );

  static final _getColor = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getColor()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getColor() {
    return _getColor(reference.pointer, _id_getColor as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getColorTransition = _class.instanceMethodId(
    r'getColorTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getColorTransition = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getColorTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getColorTransition() {
    return _getColorTransition(
            reference.pointer, _id_getColorTransition as _$jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptions$Type());
  }

  static final _id_setColorTransition = _class.instanceMethodId(
    r'setColorTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setColorTransition = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setColorTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setColorTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setColorTransition(
            reference.pointer,
            _id_setColorTransition as _$jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_setIntensity = _class.instanceMethodId(
    r'setIntensity',
    r'(F)V',
  );

  static final _setIntensity = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Double,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();

  /// from: `public void setIntensity(float f)`
  void setIntensity(
    double f,
  ) {
    _setIntensity(reference.pointer, _id_setIntensity as _$jni.JMethodIDPtr, f)
        .check();
  }

  static final _id_getIntensity = _class.instanceMethodId(
    r'getIntensity',
    r'()F',
  );

  static final _getIntensity = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public float getIntensity()`
  double getIntensity() {
    return _getIntensity(
            reference.pointer, _id_getIntensity as _$jni.JMethodIDPtr)
        .float;
  }

  static final _id_getIntensityTransition = _class.instanceMethodId(
    r'getIntensityTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getIntensityTransition = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getIntensityTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getIntensityTransition() {
    return _getIntensityTransition(
            reference.pointer, _id_getIntensityTransition as _$jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptions$Type());
  }

  static final _id_setIntensityTransition = _class.instanceMethodId(
    r'setIntensityTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setIntensityTransition = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setIntensityTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setIntensityTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setIntensityTransition(
            reference.pointer,
            _id_setIntensityTransition as _$jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }
}

final class $Light$Type extends _$jni.JObjType<Light> {
  @_$jni.internal
  const $Light$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/style/light/Light;';

  @_$jni.internal
  @_$core.override
  Light fromReference(_$jni.JReference reference) =>
      Light.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($Light$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Light$Type) && other is $Light$Type;
  }
}
