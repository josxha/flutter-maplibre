// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../layers/TransitionOptions.dart' as transitionoptions_;

import 'Position.dart' as position_;

/// from: `org.maplibre.android.style.light.Light`
class Light extends jni.JObject {
  @override
  late final jni.JObjType<Light> $type = type;

  Light.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/style/light/Light');

  /// The type which includes information such as the signature of this class.
  static const type = $LightType();
  static final _id_setAnchor = _class.instanceMethodId(
    r'setAnchor',
    r'(Ljava/lang/String;)V',
  );

  static final _setAnchor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setAnchor(java.lang.String string)`
  void setAnchor(
    jni.JString string,
  ) {
    _setAnchor(reference.pointer, _id_setAnchor as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getAnchor = _class.instanceMethodId(
    r'getAnchor',
    r'()Ljava/lang/String;',
  );

  static final _getAnchor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getAnchor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAnchor() {
    return _getAnchor(reference.pointer, _id_getAnchor as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setPosition = _class.instanceMethodId(
    r'setPosition',
    r'(Lorg/maplibre/android/style/light/Position;)V',
  );

  static final _setPosition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setPosition(org.maplibre.android.style.light.Position position)`
  void setPosition(
    position_.Position position,
  ) {
    _setPosition(reference.pointer, _id_setPosition as jni.JMethodIDPtr,
            position.reference.pointer)
        .check();
  }

  static final _id_getPosition = _class.instanceMethodId(
    r'getPosition',
    r'()Lorg/maplibre/android/style/light/Position;',
  );

  static final _getPosition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.light.Position getPosition()`
  /// The returned object must be released after use, by calling the [release] method.
  position_.Position getPosition() {
    return _getPosition(reference.pointer, _id_getPosition as jni.JMethodIDPtr)
        .object(const position_.$PositionType());
  }

  static final _id_getPositionTransition = _class.instanceMethodId(
    r'getPositionTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getPositionTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getPositionTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getPositionTransition() {
    return _getPositionTransition(
            reference.pointer, _id_getPositionTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setPositionTransition = _class.instanceMethodId(
    r'setPositionTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setPositionTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setPositionTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setPositionTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setPositionTransition(
            reference.pointer,
            _id_setPositionTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_setColor = _class.instanceMethodId(
    r'setColor',
    r'(I)V',
  );

  static final _setColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setColor(int i)`
  void setColor(
    int i,
  ) {
    _setColor(reference.pointer, _id_setColor as jni.JMethodIDPtr, i).check();
  }

  static final _id_setColor1 = _class.instanceMethodId(
    r'setColor',
    r'(Ljava/lang/String;)V',
  );

  static final _setColor1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setColor(java.lang.String string)`
  void setColor1(
    jni.JString string,
  ) {
    _setColor1(reference.pointer, _id_setColor1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getColor = _class.instanceMethodId(
    r'getColor',
    r'()Ljava/lang/String;',
  );

  static final _getColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getColor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getColor() {
    return _getColor(reference.pointer, _id_getColor as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getColorTransition = _class.instanceMethodId(
    r'getColorTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getColorTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getColorTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getColorTransition() {
    return _getColorTransition(
            reference.pointer, _id_getColorTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setColorTransition = _class.instanceMethodId(
    r'setColorTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setColorTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setColorTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setColorTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setColorTransition(
            reference.pointer,
            _id_setColorTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }

  static final _id_setIntensity = _class.instanceMethodId(
    r'setIntensity',
    r'(F)V',
  );

  static final _setIntensity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public void setIntensity(float f)`
  void setIntensity(
    double f,
  ) {
    _setIntensity(reference.pointer, _id_setIntensity as jni.JMethodIDPtr, f)
        .check();
  }

  static final _id_getIntensity = _class.instanceMethodId(
    r'getIntensity',
    r'()F',
  );

  static final _getIntensity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public float getIntensity()`
  double getIntensity() {
    return _getIntensity(
            reference.pointer, _id_getIntensity as jni.JMethodIDPtr)
        .float;
  }

  static final _id_getIntensityTransition = _class.instanceMethodId(
    r'getIntensityTransition',
    r'()Lorg/maplibre/android/style/layers/TransitionOptions;',
  );

  static final _getIntensityTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.style.layers.TransitionOptions getIntensityTransition()`
  /// The returned object must be released after use, by calling the [release] method.
  transitionoptions_.TransitionOptions getIntensityTransition() {
    return _getIntensityTransition(
            reference.pointer, _id_getIntensityTransition as jni.JMethodIDPtr)
        .object(const transitionoptions_.$TransitionOptionsType());
  }

  static final _id_setIntensityTransition = _class.instanceMethodId(
    r'setIntensityTransition',
    r'(Lorg/maplibre/android/style/layers/TransitionOptions;)V',
  );

  static final _setIntensityTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setIntensityTransition(org.maplibre.android.style.layers.TransitionOptions transitionOptions)`
  void setIntensityTransition(
    transitionoptions_.TransitionOptions transitionOptions,
  ) {
    _setIntensityTransition(
            reference.pointer,
            _id_setIntensityTransition as jni.JMethodIDPtr,
            transitionOptions.reference.pointer)
        .check();
  }
}

final class $LightType extends jni.JObjType<Light> {
  const $LightType();

  @override
  String get signature => r'Lorg/maplibre/android/style/light/Light;';

  @override
  Light fromReference(jni.JReference reference) =>
      Light.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LightType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LightType) && other is $LightType;
  }
}
