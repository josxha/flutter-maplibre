// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.location.Utils`
class Utils extends jni.JObject {
  @override
  late final jni.JObjType<Utils> $type = type;

  Utils.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/location/Utils');

  /// The type which includes information such as the signature of this class.
  static const type = $UtilsType();
  static final _id_shortestRotation = _class.staticMethodId(
    r'shortestRotation',
    r'(FF)F',
  );

  static final _shortestRotation = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Double, ffi.Double)>)>>(
          'globalEnv_CallStaticFloatMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double, double)>();

  /// from: `static public float shortestRotation(float f, float f1)`
  static double shortestRotation(
    double f,
    double f1,
  ) {
    return _shortestRotation(_class.reference.pointer,
            _id_shortestRotation as jni.JMethodIDPtr, f, f1)
        .float;
  }

  static final _id_normalize = _class.staticMethodId(
    r'normalize',
    r'(F)F',
  );

  static final _normalize = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Double,)>)>>(
          'globalEnv_CallStaticFloatMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `static public float normalize(float f)`
  static double normalize(
    double f,
  ) {
    return _normalize(
            _class.reference.pointer, _id_normalize as jni.JMethodIDPtr, f)
        .float;
  }
}

final class $UtilsType extends jni.JObjType<Utils> {
  const $UtilsType();

  @override
  String get signature => r'Lorg/maplibre/android/location/Utils;';

  @override
  Utils fromReference(jni.JReference reference) =>
      Utils.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UtilsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UtilsType) && other is $UtilsType;
  }
}
