// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'LocationEngine.dart' as locationengine_;

/// from: `org.maplibre.android.location.engine.LocationEngineDefault`
class LocationEngineDefault extends jni.JObject {
  @override
  late final jni.JObjType<LocationEngineDefault> $type = type;

  LocationEngineDefault.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/location/engine/LocationEngineDefault');

  /// The type which includes information such as the signature of this class.
  static const type = $LocationEngineDefaultType();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Lorg/maplibre/android/location/engine/LocationEngineDefault;',
  );

  /// from: `static public final org.maplibre.android.location.engine.LocationEngineDefault INSTANCE`
  /// The returned object must be released after use, by calling the [release] method.
  static LocationEngineDefault get INSTANCE =>
      _id_INSTANCE.get(_class, const $LocationEngineDefaultType());

  static final _id_getDefaultLocationEngine = _class.instanceMethodId(
    r'getDefaultLocationEngine',
    r'(Landroid/content/Context;)Lorg/maplibre/android/location/engine/LocationEngine;',
  );

  static final _getDefaultLocationEngine = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final org.maplibre.android.location.engine.LocationEngine getDefaultLocationEngine(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  locationengine_.LocationEngine getDefaultLocationEngine(
    jni.JObject context,
  ) {
    return _getDefaultLocationEngine(
            reference.pointer,
            _id_getDefaultLocationEngine as jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const locationengine_.$LocationEngineType());
  }
}

final class $LocationEngineDefaultType
    extends jni.JObjType<LocationEngineDefault> {
  const $LocationEngineDefaultType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/location/engine/LocationEngineDefault;';

  @override
  LocationEngineDefault fromReference(jni.JReference reference) =>
      LocationEngineDefault.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LocationEngineDefaultType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LocationEngineDefaultType) &&
        other is $LocationEngineDefaultType;
  }
}
