// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `org.maplibre.android.location.engine.LocationEngineRequest$Builder`
class LocationEngineRequest_Builder extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<LocationEngineRequest_Builder> $type;

  @_$jni.internal
  LocationEngineRequest_Builder.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/location/engine/LocationEngineRequest$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $LocationEngineRequest_Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'(J)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int64,)>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void <init>(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  factory LocationEngineRequest_Builder(
    int j,
  ) {
    return LocationEngineRequest_Builder.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr, j)
            .reference);
  }

  static final _id_setPriority = _class.instanceMethodId(
    r'setPriority',
    r'(I)Lorg/maplibre/android/location/engine/LocationEngineRequest$Builder;',
  );

  static final _setPriority = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.engine.LocationEngineRequest$Builder setPriority(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationEngineRequest_Builder setPriority(
    int i,
  ) {
    return _setPriority(
            reference.pointer, _id_setPriority as _$jni.JMethodIDPtr, i)
        .object(const $LocationEngineRequest_Builder$Type());
  }

  static final _id_setDisplacement = _class.instanceMethodId(
    r'setDisplacement',
    r'(F)Lorg/maplibre/android/location/engine/LocationEngineRequest$Builder;',
  );

  static final _setDisplacement = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();

  /// from: `public org.maplibre.android.location.engine.LocationEngineRequest$Builder setDisplacement(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationEngineRequest_Builder setDisplacement(
    double f,
  ) {
    return _setDisplacement(
            reference.pointer, _id_setDisplacement as _$jni.JMethodIDPtr, f)
        .object(const $LocationEngineRequest_Builder$Type());
  }

  static final _id_setMaxWaitTime = _class.instanceMethodId(
    r'setMaxWaitTime',
    r'(J)Lorg/maplibre/android/location/engine/LocationEngineRequest$Builder;',
  );

  static final _setMaxWaitTime = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.engine.LocationEngineRequest$Builder setMaxWaitTime(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationEngineRequest_Builder setMaxWaitTime(
    int j,
  ) {
    return _setMaxWaitTime(
            reference.pointer, _id_setMaxWaitTime as _$jni.JMethodIDPtr, j)
        .object(const $LocationEngineRequest_Builder$Type());
  }

  static final _id_setFastestInterval = _class.instanceMethodId(
    r'setFastestInterval',
    r'(J)Lorg/maplibre/android/location/engine/LocationEngineRequest$Builder;',
  );

  static final _setFastestInterval = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.engine.LocationEngineRequest$Builder setFastestInterval(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationEngineRequest_Builder setFastestInterval(
    int j,
  ) {
    return _setFastestInterval(
            reference.pointer, _id_setFastestInterval as _$jni.JMethodIDPtr, j)
        .object(const $LocationEngineRequest_Builder$Type());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Lorg/maplibre/android/location/engine/LocationEngineRequest;',
  );

  static final _build = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.location.engine.LocationEngineRequest build()`
  /// The returned object must be released after use, by calling the [release] method.
  LocationEngineRequest build() {
    return _build(reference.pointer, _id_build as _$jni.JMethodIDPtr)
        .object(const $LocationEngineRequest$Type());
  }
}

final class $LocationEngineRequest_Builder$Type
    extends _$jni.JObjType<LocationEngineRequest_Builder> {
  @_$jni.internal
  const $LocationEngineRequest_Builder$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/location/engine/LocationEngineRequest$Builder;';

  @_$jni.internal
  @_$core.override
  LocationEngineRequest_Builder fromReference(_$jni.JReference reference) =>
      LocationEngineRequest_Builder.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($LocationEngineRequest_Builder$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LocationEngineRequest_Builder$Type) &&
        other is $LocationEngineRequest_Builder$Type;
  }
}

/// from: `org.maplibre.android.location.engine.LocationEngineRequest`
class LocationEngineRequest extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<LocationEngineRequest> $type;

  @_$jni.internal
  LocationEngineRequest.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/location/engine/LocationEngineRequest');

  /// The type which includes information such as the signature of this class.
  static const type = $LocationEngineRequest$Type();

  /// from: `static public final int PRIORITY_HIGH_ACCURACY`
  static const PRIORITY_HIGH_ACCURACY = 0;

  /// from: `static public final int PRIORITY_BALANCED_POWER_ACCURACY`
  static const PRIORITY_BALANCED_POWER_ACCURACY = 1;

  /// from: `static public final int PRIORITY_LOW_POWER`
  static const PRIORITY_LOW_POWER = 2;

  /// from: `static public final int PRIORITY_NO_POWER`
  static const PRIORITY_NO_POWER = 3;
  static final _id_getInterval = _class.instanceMethodId(
    r'getInterval',
    r'()J',
  );

  static final _getInterval = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public long getInterval()`
  int getInterval() {
    return _getInterval(
            reference.pointer, _id_getInterval as _$jni.JMethodIDPtr)
        .long;
  }

  static final _id_getPriority = _class.instanceMethodId(
    r'getPriority',
    r'()I',
  );

  static final _getPriority = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getPriority()`
  int getPriority() {
    return _getPriority(
            reference.pointer, _id_getPriority as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getDisplacement = _class.instanceMethodId(
    r'getDisplacement',
    r'()F',
  );

  static final _getDisplacement = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public float getDisplacement()`
  double getDisplacement() {
    return _getDisplacement(
            reference.pointer, _id_getDisplacement as _$jni.JMethodIDPtr)
        .float;
  }

  static final _id_getMaxWaitTime = _class.instanceMethodId(
    r'getMaxWaitTime',
    r'()J',
  );

  static final _getMaxWaitTime = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public long getMaxWaitTime()`
  int getMaxWaitTime() {
    return _getMaxWaitTime(
            reference.pointer, _id_getMaxWaitTime as _$jni.JMethodIDPtr)
        .long;
  }

  static final _id_getFastestInterval = _class.instanceMethodId(
    r'getFastestInterval',
    r'()J',
  );

  static final _getFastestInterval = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public long getFastestInterval()`
  int getFastestInterval() {
    return _getFastestInterval(
            reference.pointer, _id_getFastestInterval as _$jni.JMethodIDPtr)
        .long;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    _$jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as _$jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as _$jni.JMethodIDPtr)
        .integer;
  }
}

final class $LocationEngineRequest$Type
    extends _$jni.JObjType<LocationEngineRequest> {
  @_$jni.internal
  const $LocationEngineRequest$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/location/engine/LocationEngineRequest;';

  @_$jni.internal
  @_$core.override
  LocationEngineRequest fromReference(_$jni.JReference reference) =>
      LocationEngineRequest.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($LocationEngineRequest$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LocationEngineRequest$Type) &&
        other is $LocationEngineRequest$Type;
  }
}
