// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.location.engine.LocationEngineRequest$Builder`
class LocationEngineRequest_Builder extends jni.JObject {
  @override
  late final jni.JObjType<LocationEngineRequest_Builder> $type = type;

  LocationEngineRequest_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/location/engine/LocationEngineRequest$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $LocationEngineRequest_BuilderType();
  static final _id_new0 = _class.constructorId(
    r'(J)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void <init>(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  factory LocationEngineRequest_Builder(
    int j,
  ) {
    return LocationEngineRequest_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr, j)
            .reference);
  }

  static final _id_setPriority = _class.instanceMethodId(
    r'setPriority',
    r'(I)Lorg/maplibre/android/location/engine/LocationEngineRequest$Builder;',
  );

  static final _setPriority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.engine.LocationEngineRequest$Builder setPriority(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationEngineRequest_Builder setPriority(
    int i,
  ) {
    return _setPriority(
            reference.pointer, _id_setPriority as jni.JMethodIDPtr, i)
        .object(const $LocationEngineRequest_BuilderType());
  }

  static final _id_setDisplacement = _class.instanceMethodId(
    r'setDisplacement',
    r'(F)Lorg/maplibre/android/location/engine/LocationEngineRequest$Builder;',
  );

  static final _setDisplacement = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public org.maplibre.android.location.engine.LocationEngineRequest$Builder setDisplacement(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationEngineRequest_Builder setDisplacement(
    double f,
  ) {
    return _setDisplacement(
            reference.pointer, _id_setDisplacement as jni.JMethodIDPtr, f)
        .object(const $LocationEngineRequest_BuilderType());
  }

  static final _id_setMaxWaitTime = _class.instanceMethodId(
    r'setMaxWaitTime',
    r'(J)Lorg/maplibre/android/location/engine/LocationEngineRequest$Builder;',
  );

  static final _setMaxWaitTime = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.engine.LocationEngineRequest$Builder setMaxWaitTime(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationEngineRequest_Builder setMaxWaitTime(
    int j,
  ) {
    return _setMaxWaitTime(
            reference.pointer, _id_setMaxWaitTime as jni.JMethodIDPtr, j)
        .object(const $LocationEngineRequest_BuilderType());
  }

  static final _id_setFastestInterval = _class.instanceMethodId(
    r'setFastestInterval',
    r'(J)Lorg/maplibre/android/location/engine/LocationEngineRequest$Builder;',
  );

  static final _setFastestInterval = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.engine.LocationEngineRequest$Builder setFastestInterval(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationEngineRequest_Builder setFastestInterval(
    int j,
  ) {
    return _setFastestInterval(
            reference.pointer, _id_setFastestInterval as jni.JMethodIDPtr, j)
        .object(const $LocationEngineRequest_BuilderType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Lorg/maplibre/android/location/engine/LocationEngineRequest;',
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.location.engine.LocationEngineRequest build()`
  /// The returned object must be released after use, by calling the [release] method.
  LocationEngineRequest build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $LocationEngineRequestType());
  }
}

final class $LocationEngineRequest_BuilderType
    extends jni.JObjType<LocationEngineRequest_Builder> {
  const $LocationEngineRequest_BuilderType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/location/engine/LocationEngineRequest$Builder;';

  @override
  LocationEngineRequest_Builder fromReference(jni.JReference reference) =>
      LocationEngineRequest_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LocationEngineRequest_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LocationEngineRequest_BuilderType) &&
        other is $LocationEngineRequest_BuilderType;
  }
}

/// from: `org.maplibre.android.location.engine.LocationEngineRequest`
class LocationEngineRequest extends jni.JObject {
  @override
  late final jni.JObjType<LocationEngineRequest> $type = type;

  LocationEngineRequest.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/location/engine/LocationEngineRequest');

  /// The type which includes information such as the signature of this class.
  static const type = $LocationEngineRequestType();

  /// from: `static public final int PRIORITY_HIGH_ACCURACY`
  static const PRIORITY_HIGH_ACCURACY = 0;

  /// from: `static public final int PRIORITY_BALANCED_POWER_ACCURACY`
  static const PRIORITY_BALANCED_POWER_ACCURACY = 1;

  /// from: `static public final int PRIORITY_LOW_POWER`
  static const PRIORITY_LOW_POWER = 2;

  /// from: `static public final int PRIORITY_NO_POWER`
  static const PRIORITY_NO_POWER = 3;
  static final _id_getInterval = _class.instanceMethodId(
    r'getInterval',
    r'()J',
  );

  static final _getInterval = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public long getInterval()`
  int getInterval() {
    return _getInterval(reference.pointer, _id_getInterval as jni.JMethodIDPtr)
        .long;
  }

  static final _id_getPriority = _class.instanceMethodId(
    r'getPriority',
    r'()I',
  );

  static final _getPriority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getPriority()`
  int getPriority() {
    return _getPriority(reference.pointer, _id_getPriority as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getDisplacement = _class.instanceMethodId(
    r'getDisplacement',
    r'()F',
  );

  static final _getDisplacement = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public float getDisplacement()`
  double getDisplacement() {
    return _getDisplacement(
            reference.pointer, _id_getDisplacement as jni.JMethodIDPtr)
        .float;
  }

  static final _id_getMaxWaitTime = _class.instanceMethodId(
    r'getMaxWaitTime',
    r'()J',
  );

  static final _getMaxWaitTime = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public long getMaxWaitTime()`
  int getMaxWaitTime() {
    return _getMaxWaitTime(
            reference.pointer, _id_getMaxWaitTime as jni.JMethodIDPtr)
        .long;
  }

  static final _id_getFastestInterval = _class.instanceMethodId(
    r'getFastestInterval',
    r'()J',
  );

  static final _getFastestInterval = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public long getFastestInterval()`
  int getFastestInterval() {
    return _getFastestInterval(
            reference.pointer, _id_getFastestInterval as jni.JMethodIDPtr)
        .long;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }
}

final class $LocationEngineRequestType
    extends jni.JObjType<LocationEngineRequest> {
  const $LocationEngineRequestType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/location/engine/LocationEngineRequest;';

  @override
  LocationEngineRequest fromReference(jni.JReference reference) =>
      LocationEngineRequest.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LocationEngineRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LocationEngineRequestType) &&
        other is $LocationEngineRequestType;
  }
}
