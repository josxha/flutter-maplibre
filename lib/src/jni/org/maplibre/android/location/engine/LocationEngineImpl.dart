// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'LocationEngineCallback.dart' as locationenginecallback_;

import 'LocationEngineRequest.dart' as locationenginerequest_;

import 'LocationEngineResult.dart' as locationengineresult_;

/// from: `org.maplibre.android.location.engine.LocationEngineImpl`
class LocationEngineImpl<$T extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<LocationEngineImpl<$T>> $type = type(T);

  final jni.JObjType<$T> T;

  LocationEngineImpl.fromReference(
    this.T,
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/location/engine/LocationEngineImpl');

  /// The type which includes information such as the signature of this class.
  static $LocationEngineImplType<$T> type<$T extends jni.JObject>(
    jni.JObjType<$T> T,
  ) {
    return $LocationEngineImplType(
      T,
    );
  }

  static final _id_createListener = _class.instanceMethodId(
    r'createListener',
    r'(Lorg/maplibre/android/location/engine/LocationEngineCallback;)Ljava/lang/Object;',
  );

  static final _createListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract T createListener(org.maplibre.android.location.engine.LocationEngineCallback locationEngineCallback)`
  /// The returned object must be released after use, by calling the [release] method.
  $T createListener(
    locationenginecallback_
        .LocationEngineCallback<locationengineresult_.LocationEngineResult>
        locationEngineCallback,
  ) {
    return _createListener(
            reference.pointer,
            _id_createListener as jni.JMethodIDPtr,
            locationEngineCallback.reference.pointer)
        .object(T);
  }

  static final _id_getLastLocation = _class.instanceMethodId(
    r'getLastLocation',
    r'(Lorg/maplibre/android/location/engine/LocationEngineCallback;)V',
  );

  static final _getLastLocation = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void getLastLocation(org.maplibre.android.location.engine.LocationEngineCallback locationEngineCallback)`
  void getLastLocation(
    locationenginecallback_
        .LocationEngineCallback<locationengineresult_.LocationEngineResult>
        locationEngineCallback,
  ) {
    _getLastLocation(reference.pointer, _id_getLastLocation as jni.JMethodIDPtr,
            locationEngineCallback.reference.pointer)
        .check();
  }

  static final _id_requestLocationUpdates = _class.instanceMethodId(
    r'requestLocationUpdates',
    r'(Lorg/maplibre/android/location/engine/LocationEngineRequest;Ljava/lang/Object;Landroid/os/Looper;)V',
  );

  static final _requestLocationUpdates = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void requestLocationUpdates(org.maplibre.android.location.engine.LocationEngineRequest locationEngineRequest, T object, android.os.Looper looper)`
  void requestLocationUpdates(
    locationenginerequest_.LocationEngineRequest locationEngineRequest,
    $T object,
    jni.JObject looper,
  ) {
    _requestLocationUpdates(
            reference.pointer,
            _id_requestLocationUpdates as jni.JMethodIDPtr,
            locationEngineRequest.reference.pointer,
            object.reference.pointer,
            looper.reference.pointer)
        .check();
  }

  static final _id_requestLocationUpdates1 = _class.instanceMethodId(
    r'requestLocationUpdates',
    r'(Lorg/maplibre/android/location/engine/LocationEngineRequest;Landroid/app/PendingIntent;)V',
  );

  static final _requestLocationUpdates1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void requestLocationUpdates(org.maplibre.android.location.engine.LocationEngineRequest locationEngineRequest, android.app.PendingIntent pendingIntent)`
  void requestLocationUpdates1(
    locationenginerequest_.LocationEngineRequest locationEngineRequest,
    jni.JObject pendingIntent,
  ) {
    _requestLocationUpdates1(
            reference.pointer,
            _id_requestLocationUpdates1 as jni.JMethodIDPtr,
            locationEngineRequest.reference.pointer,
            pendingIntent.reference.pointer)
        .check();
  }

  static final _id_removeLocationUpdates = _class.instanceMethodId(
    r'removeLocationUpdates',
    r'(Ljava/lang/Object;)V',
  );

  static final _removeLocationUpdates = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void removeLocationUpdates(T object)`
  void removeLocationUpdates(
    $T object,
  ) {
    _removeLocationUpdates(
            reference.pointer,
            _id_removeLocationUpdates as jni.JMethodIDPtr,
            object.reference.pointer)
        .check();
  }

  static final _id_removeLocationUpdates1 = _class.instanceMethodId(
    r'removeLocationUpdates',
    r'(Landroid/app/PendingIntent;)V',
  );

  static final _removeLocationUpdates1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void removeLocationUpdates(android.app.PendingIntent pendingIntent)`
  void removeLocationUpdates1(
    jni.JObject pendingIntent,
  ) {
    _removeLocationUpdates1(
            reference.pointer,
            _id_removeLocationUpdates1 as jni.JMethodIDPtr,
            pendingIntent.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $LocationEngineImplImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'createListener(Lorg/maplibre/android/location/engine/LocationEngineCallback;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.createListener(
          $a[0].castTo(
              const locationenginecallback_.$LocationEngineCallbackType(
                  locationengineresult_.$LocationEngineResultType()),
              releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'getLastLocation(Lorg/maplibre/android/location/engine/LocationEngineCallback;)V') {
        _$impls[$p]!.getLastLocation(
          $a[0].castTo(
              const locationenginecallback_.$LocationEngineCallbackType(
                  locationengineresult_.$LocationEngineResultType()),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r'requestLocationUpdates(Lorg/maplibre/android/location/engine/LocationEngineRequest;Ljava/lang/Object;Landroid/os/Looper;)V') {
        _$impls[$p]!.requestLocationUpdates(
          $a[0].castTo(
              const locationenginerequest_.$LocationEngineRequestType(),
              releaseOriginal: true),
          $a[1].castTo(_$impls[$p]!.T, releaseOriginal: true),
          $a[2].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r'requestLocationUpdates(Lorg/maplibre/android/location/engine/LocationEngineRequest;Landroid/app/PendingIntent;)V') {
        _$impls[$p]!.requestLocationUpdates1(
          $a[0].castTo(
              const locationenginerequest_.$LocationEngineRequestType(),
              releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r'removeLocationUpdates(Ljava/lang/Object;)V') {
        _$impls[$p]!.removeLocationUpdates(
          $a[0].castTo(_$impls[$p]!.T, releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r'removeLocationUpdates(Landroid/app/PendingIntent;)V') {
        _$impls[$p]!.removeLocationUpdates1(
          $a[0].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory LocationEngineImpl.implement(
    $LocationEngineImplImpl<$T> $impl,
  ) {
    final $p = ReceivePort();
    final $x = LocationEngineImpl.fromReference(
      $impl.T,
      ProtectedJniExtensions.newPortProxy(
        r'org.maplibre.android.location.engine.LocationEngineImpl',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $LocationEngineImplImpl<$T extends jni.JObject> {
  factory $LocationEngineImplImpl({
    required jni.JObjType<$T> T,
    required $T Function(
            locationenginecallback_.LocationEngineCallback<
                    locationengineresult_.LocationEngineResult>
                locationEngineCallback)
        createListener,
    required void Function(
            locationenginecallback_.LocationEngineCallback<
                    locationengineresult_.LocationEngineResult>
                locationEngineCallback)
        getLastLocation,
    required void Function(
            locationenginerequest_.LocationEngineRequest locationEngineRequest,
            $T object,
            jni.JObject looper)
        requestLocationUpdates,
    required void Function(
            locationenginerequest_.LocationEngineRequest locationEngineRequest,
            jni.JObject pendingIntent)
        requestLocationUpdates1,
    required void Function($T object) removeLocationUpdates,
    required void Function(jni.JObject pendingIntent) removeLocationUpdates1,
  }) = _$LocationEngineImplImpl;

  jni.JObjType<$T> get T;

  $T createListener(
      locationenginecallback_
          .LocationEngineCallback<locationengineresult_.LocationEngineResult>
          locationEngineCallback);
  void getLastLocation(
      locationenginecallback_
          .LocationEngineCallback<locationengineresult_.LocationEngineResult>
          locationEngineCallback);
  void requestLocationUpdates(
      locationenginerequest_.LocationEngineRequest locationEngineRequest,
      $T object,
      jni.JObject looper);
  void requestLocationUpdates1(
      locationenginerequest_.LocationEngineRequest locationEngineRequest,
      jni.JObject pendingIntent);
  void removeLocationUpdates($T object);
  void removeLocationUpdates1(jni.JObject pendingIntent);
}

class _$LocationEngineImplImpl<$T extends jni.JObject>
    implements $LocationEngineImplImpl<$T> {
  _$LocationEngineImplImpl({
    required this.T,
    required $T Function(
            locationenginecallback_.LocationEngineCallback<
                    locationengineresult_.LocationEngineResult>
                locationEngineCallback)
        createListener,
    required void Function(
            locationenginecallback_.LocationEngineCallback<
                    locationengineresult_.LocationEngineResult>
                locationEngineCallback)
        getLastLocation,
    required void Function(
            locationenginerequest_.LocationEngineRequest locationEngineRequest,
            $T object,
            jni.JObject looper)
        requestLocationUpdates,
    required void Function(
            locationenginerequest_.LocationEngineRequest locationEngineRequest,
            jni.JObject pendingIntent)
        requestLocationUpdates1,
    required void Function($T object) removeLocationUpdates,
    required void Function(jni.JObject pendingIntent) removeLocationUpdates1,
  })  : _createListener = createListener,
        _getLastLocation = getLastLocation,
        _requestLocationUpdates = requestLocationUpdates,
        _requestLocationUpdates1 = requestLocationUpdates1,
        _removeLocationUpdates = removeLocationUpdates,
        _removeLocationUpdates1 = removeLocationUpdates1;

  @override
  final jni.JObjType<$T> T;

  final $T Function(
      locationenginecallback_
          .LocationEngineCallback<locationengineresult_.LocationEngineResult>
          locationEngineCallback) _createListener;
  final void Function(
      locationenginecallback_
          .LocationEngineCallback<locationengineresult_.LocationEngineResult>
          locationEngineCallback) _getLastLocation;
  final void Function(
      locationenginerequest_.LocationEngineRequest locationEngineRequest,
      $T object,
      jni.JObject looper) _requestLocationUpdates;
  final void Function(
      locationenginerequest_.LocationEngineRequest locationEngineRequest,
      jni.JObject pendingIntent) _requestLocationUpdates1;
  final void Function($T object) _removeLocationUpdates;
  final void Function(jni.JObject pendingIntent) _removeLocationUpdates1;

  $T createListener(
      locationenginecallback_
          .LocationEngineCallback<locationengineresult_.LocationEngineResult>
          locationEngineCallback) {
    return _createListener(locationEngineCallback);
  }

  void getLastLocation(
      locationenginecallback_
          .LocationEngineCallback<locationengineresult_.LocationEngineResult>
          locationEngineCallback) {
    return _getLastLocation(locationEngineCallback);
  }

  void requestLocationUpdates(
      locationenginerequest_.LocationEngineRequest locationEngineRequest,
      $T object,
      jni.JObject looper) {
    return _requestLocationUpdates(locationEngineRequest, object, looper);
  }

  void requestLocationUpdates1(
      locationenginerequest_.LocationEngineRequest locationEngineRequest,
      jni.JObject pendingIntent) {
    return _requestLocationUpdates1(locationEngineRequest, pendingIntent);
  }

  void removeLocationUpdates($T object) {
    return _removeLocationUpdates(object);
  }

  void removeLocationUpdates1(jni.JObject pendingIntent) {
    return _removeLocationUpdates1(pendingIntent);
  }
}

final class $LocationEngineImplType<$T extends jni.JObject>
    extends jni.JObjType<LocationEngineImpl<$T>> {
  final jni.JObjType<$T> T;

  const $LocationEngineImplType(
    this.T,
  );

  @override
  String get signature =>
      r'Lorg/maplibre/android/location/engine/LocationEngineImpl;';

  @override
  LocationEngineImpl<$T> fromReference(jni.JReference reference) =>
      LocationEngineImpl.fromReference(T, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($LocationEngineImplType, T);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LocationEngineImplType<$T>) &&
        other is $LocationEngineImplType<$T> &&
        T == other.T;
  }
}
