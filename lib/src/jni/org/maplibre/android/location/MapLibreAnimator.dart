// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.location.MapLibreAnimator`
class MapLibreAnimator<$K extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<MapLibreAnimator<$K>> $type = type(K);

  final jni.JObjType<$K> K;

  MapLibreAnimator.fromReference(
    this.K,
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/location/MapLibreAnimator');

  /// The type which includes information such as the signature of this class.
  static $MapLibreAnimatorType<$K> type<$K extends jni.JObject>(
    jni.JObjType<$K> K,
  ) {
    return $MapLibreAnimatorType(
      K,
    );
  }

  static final _id_new0 = _class.constructorId(
    r'([Ljava/lang/Object;Lorg/maplibre/android/location/MapLibreAnimator$AnimationsValueChangeListener;I)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: `public void <init>(java.lang.Object[] objects, org.maplibre.android.location.MapLibreAnimator$AnimationsValueChangeListener animationsValueChangeListener, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapLibreAnimator(
    jni.JArray<$K> objects,
    jni.JObject animationsValueChangeListener,
    int i, {
    jni.JObjType<$K>? K,
  }) {
    K ??= jni.lowestCommonSuperType([
      ((objects.$type as jni.JArrayType).elementType as jni.JObjType),
    ]) as jni.JObjType<$K>;
    return MapLibreAnimator.fromReference(
        K,
        _new0(
                _class.reference.pointer,
                _id_new0 as jni.JMethodIDPtr,
                objects.reference.pointer,
                animationsValueChangeListener.reference.pointer,
                i)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Lorg/maplibre/android/location/MapLibreAnimator$AnimationsValueChangeListener;Ljava/lang/Object;Ljava/lang/Object;DJ)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Double,
                        ffi.Int64
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              double,
              int)>();

  /// from: `public void <init>(org.maplibre.android.location.MapLibreAnimator$AnimationsValueChangeListener animationsValueChangeListener, K object, K object1, double d, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapLibreAnimator.new1(
    jni.JObject animationsValueChangeListener,
    $K object,
    $K object1,
    double d,
    int j, {
    jni.JObjType<$K>? K,
  }) {
    K ??= jni.lowestCommonSuperType([
      object1.$type,
      object.$type,
    ]) as jni.JObjType<$K>;
    return MapLibreAnimator.fromReference(
        K,
        _new1(
                _class.reference.pointer,
                _id_new1 as jni.JMethodIDPtr,
                animationsValueChangeListener.reference.pointer,
                object.reference.pointer,
                object1.reference.pointer,
                d,
                j)
            .reference);
  }

  static final _id_onAnimationUpdate = _class.instanceMethodId(
    r'onAnimationUpdate',
    r'(Landroid/animation/ValueAnimator;)V',
  );

  static final _onAnimationUpdate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void onAnimationUpdate(android.animation.ValueAnimator valueAnimator)`
  void onAnimationUpdate(
    jni.JObject valueAnimator,
  ) {
    _onAnimationUpdate(
            reference.pointer,
            _id_onAnimationUpdate as jni.JMethodIDPtr,
            valueAnimator.reference.pointer)
        .check();
  }

  static final _id_makeInvalid = _class.instanceMethodId(
    r'makeInvalid',
    r'()V',
  );

  static final _makeInvalid = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void makeInvalid()`
  void makeInvalid() {
    _makeInvalid(reference.pointer, _id_makeInvalid as jni.JMethodIDPtr)
        .check();
  }
}

final class $MapLibreAnimatorType<$K extends jni.JObject>
    extends jni.JObjType<MapLibreAnimator<$K>> {
  final jni.JObjType<$K> K;

  const $MapLibreAnimatorType(
    this.K,
  );

  @override
  String get signature => r'Lorg/maplibre/android/location/MapLibreAnimator;';

  @override
  MapLibreAnimator<$K> fromReference(jni.JReference reference) =>
      MapLibreAnimator.fromReference(K, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($MapLibreAnimatorType, K);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapLibreAnimatorType<$K>) &&
        other is $MapLibreAnimatorType<$K> &&
        K == other.K;
  }
}
