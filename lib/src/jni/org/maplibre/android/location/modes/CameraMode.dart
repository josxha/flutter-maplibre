// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.location.modes.CameraMode$Mode`
class CameraMode_Mode extends jni.JObject {
  @override
  late final jni.JObjType<CameraMode_Mode> $type = type;

  CameraMode_Mode.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/location/modes/CameraMode$Mode');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraMode_ModeType();
}

final class $CameraMode_ModeType extends jni.JObjType<CameraMode_Mode> {
  const $CameraMode_ModeType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/location/modes/CameraMode$Mode;';

  @override
  CameraMode_Mode fromReference(jni.JReference reference) =>
      CameraMode_Mode.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraMode_ModeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraMode_ModeType) &&
        other is $CameraMode_ModeType;
  }
}

/// from: `org.maplibre.android.location.modes.CameraMode`
class CameraMode extends jni.JObject {
  @override
  late final jni.JObjType<CameraMode> $type = type;

  CameraMode.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/location/modes/CameraMode');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraModeType();

  /// from: `static public final int NONE`
  static const NONE = 8;

  /// from: `static public final int NONE_COMPASS`
  static const NONE_COMPASS = 16;

  /// from: `static public final int NONE_GPS`
  static const NONE_GPS = 22;

  /// from: `static public final int TRACKING`
  static const TRACKING = 24;

  /// from: `static public final int TRACKING_COMPASS`
  static const TRACKING_COMPASS = 32;

  /// from: `static public final int TRACKING_GPS`
  static const TRACKING_GPS = 34;

  /// from: `static public final int TRACKING_GPS_NORTH`
  static const TRACKING_GPS_NORTH = 36;
}

final class $CameraModeType extends jni.JObjType<CameraMode> {
  const $CameraModeType();

  @override
  String get signature => r'Lorg/maplibre/android/location/modes/CameraMode;';

  @override
  CameraMode fromReference(jni.JReference reference) =>
      CameraMode.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraModeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraModeType) && other is $CameraModeType;
  }
}
