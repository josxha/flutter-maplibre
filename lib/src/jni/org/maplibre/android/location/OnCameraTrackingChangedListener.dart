// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.location.OnCameraTrackingChangedListener`
class OnCameraTrackingChangedListener extends jni.JObject {
  @override
  late final jni.JObjType<OnCameraTrackingChangedListener> $type = type;

  OnCameraTrackingChangedListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/location/OnCameraTrackingChangedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $OnCameraTrackingChangedListenerType();
  static final _id_onCameraTrackingDismissed = _class.instanceMethodId(
    r'onCameraTrackingDismissed',
    r'()V',
  );

  static final _onCameraTrackingDismissed = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onCameraTrackingDismissed()`
  void onCameraTrackingDismissed() {
    _onCameraTrackingDismissed(reference.pointer,
            _id_onCameraTrackingDismissed as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onCameraTrackingChanged = _class.instanceMethodId(
    r'onCameraTrackingChanged',
    r'(I)V',
  );

  static final _onCameraTrackingChanged = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public abstract void onCameraTrackingChanged(int i)`
  void onCameraTrackingChanged(
    int i,
  ) {
    _onCameraTrackingChanged(reference.pointer,
            _id_onCameraTrackingChanged as jni.JMethodIDPtr, i)
        .check();
  }
}

final class $OnCameraTrackingChangedListenerType
    extends jni.JObjType<OnCameraTrackingChangedListener> {
  const $OnCameraTrackingChangedListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/location/OnCameraTrackingChangedListener;';

  @override
  OnCameraTrackingChangedListener fromReference(jni.JReference reference) =>
      OnCameraTrackingChangedListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($OnCameraTrackingChangedListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OnCameraTrackingChangedListenerType) &&
        other is $OnCameraTrackingChangedListenerType;
  }
}
