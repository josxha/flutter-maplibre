// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../maps/MapLibreMap.dart' as maplibremap_;

import '../maps/Transform.dart' as transform_;

import 'CompassEngine.dart' as compassengine_;

import 'LocationComponentActivationOptions.dart'
    as locationcomponentactivationoptions_;

import 'LocationComponentOptions.dart' as locationcomponentoptions_;

import 'OnCameraTrackingChangedListener.dart'
    as oncameratrackingchangedlistener_;

import 'OnLocationCameraTransitionListener.dart'
    as onlocationcameratransitionlistener_;

import 'OnLocationClickListener.dart' as onlocationclicklistener_;

import 'OnLocationLongClickListener.dart' as onlocationlongclicklistener_;

import 'OnLocationStaleListener.dart' as onlocationstalelistener_;

import 'OnRenderModeChangedListener.dart' as onrendermodechangedlistener_;

import 'engine/LocationEngine.dart' as locationengine_;

import 'engine/LocationEngineRequest.dart' as locationenginerequest_;

/// from: `org.maplibre.android.location.LocationComponent`
class LocationComponent extends jni.JObject {
  @override
  late final jni.JObjType<LocationComponent> $type = type;

  LocationComponent.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/location/LocationComponent');

  /// The type which includes information such as the signature of this class.
  static const type = $LocationComponentType();
  static final _id_new0 = _class.constructorId(
    r'(Lorg/maplibre/android/maps/MapLibreMap;Lorg/maplibre/android/maps/Transform;Ljava/util/List;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(org.maplibre.android.maps.MapLibreMap mapLibreMap, org.maplibre.android.maps.Transform transform, java.util.List list)`
  /// The returned object must be released after use, by calling the [release] method.
  factory LocationComponent(
    maplibremap_.MapLibreMap mapLibreMap,
    transform_.Transform transform,
    jni.JList<maplibremap_.MapLibreMap_OnDeveloperAnimationListener> list,
  ) {
    return LocationComponent.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            mapLibreMap.reference.pointer,
            transform.reference.pointer,
            list.reference.pointer)
        .reference);
  }

  static final _id_activateLocationComponent = _class.instanceMethodId(
    r'activateLocationComponent',
    r'(Lorg/maplibre/android/location/LocationComponentActivationOptions;)V',
  );

  static final _activateLocationComponent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void activateLocationComponent(org.maplibre.android.location.LocationComponentActivationOptions locationComponentActivationOptions)`
  void activateLocationComponent(
    locationcomponentactivationoptions_.LocationComponentActivationOptions
        locationComponentActivationOptions,
  ) {
    _activateLocationComponent(
            reference.pointer,
            _id_activateLocationComponent as jni.JMethodIDPtr,
            locationComponentActivationOptions.reference.pointer)
        .check();
  }

  static final _id_setLocationComponentEnabled = _class.instanceMethodId(
    r'setLocationComponentEnabled',
    r'(Z)V',
  );

  static final _setLocationComponentEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setLocationComponentEnabled(boolean z)`
  void setLocationComponentEnabled(
    bool z,
  ) {
    _setLocationComponentEnabled(reference.pointer,
            _id_setLocationComponentEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isLocationComponentEnabled = _class.instanceMethodId(
    r'isLocationComponentEnabled',
    r'()Z',
  );

  static final _isLocationComponentEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isLocationComponentEnabled()`
  bool isLocationComponentEnabled() {
    return _isLocationComponentEnabled(reference.pointer,
            _id_isLocationComponentEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setCameraMode = _class.instanceMethodId(
    r'setCameraMode',
    r'(I)V',
  );

  static final _setCameraMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setCameraMode(int i)`
  void setCameraMode(
    int i,
  ) {
    _setCameraMode(reference.pointer, _id_setCameraMode as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setCameraMode1 = _class.instanceMethodId(
    r'setCameraMode',
    r'(ILorg/maplibre/android/location/OnLocationCameraTransitionListener;)V',
  );

  static final _setCameraMode1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: `public void setCameraMode(int i, org.maplibre.android.location.OnLocationCameraTransitionListener onLocationCameraTransitionListener)`
  void setCameraMode1(
    int i,
    onlocationcameratransitionlistener_.OnLocationCameraTransitionListener
        onLocationCameraTransitionListener,
  ) {
    _setCameraMode1(reference.pointer, _id_setCameraMode1 as jni.JMethodIDPtr,
            i, onLocationCameraTransitionListener.reference.pointer)
        .check();
  }

  static final _id_setCameraMode2 = _class.instanceMethodId(
    r'setCameraMode',
    r'(IJLjava/lang/Double;Ljava/lang/Double;Ljava/lang/Double;Lorg/maplibre/android/location/OnLocationCameraTransitionListener;)V',
  );

  static final _setCameraMode2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        $Int32,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setCameraMode(int i, long j, java.lang.Double double, java.lang.Double double1, java.lang.Double double2, org.maplibre.android.location.OnLocationCameraTransitionListener onLocationCameraTransitionListener)`
  void setCameraMode2(
    int i,
    int j,
    jni.JDouble double,
    jni.JDouble double1,
    jni.JDouble double2,
    onlocationcameratransitionlistener_.OnLocationCameraTransitionListener
        onLocationCameraTransitionListener,
  ) {
    _setCameraMode2(
            reference.pointer,
            _id_setCameraMode2 as jni.JMethodIDPtr,
            i,
            j,
            double.reference.pointer,
            double1.reference.pointer,
            double2.reference.pointer,
            onLocationCameraTransitionListener.reference.pointer)
        .check();
  }

  static final _id_getCameraMode = _class.instanceMethodId(
    r'getCameraMode',
    r'()I',
  );

  static final _getCameraMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getCameraMode()`
  int getCameraMode() {
    return _getCameraMode(
            reference.pointer, _id_getCameraMode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setRenderMode = _class.instanceMethodId(
    r'setRenderMode',
    r'(I)V',
  );

  static final _setRenderMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setRenderMode(int i)`
  void setRenderMode(
    int i,
  ) {
    _setRenderMode(reference.pointer, _id_setRenderMode as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getRenderMode = _class.instanceMethodId(
    r'getRenderMode',
    r'()I',
  );

  static final _getRenderMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int getRenderMode()`
  int getRenderMode() {
    return _getRenderMode(
            reference.pointer, _id_getRenderMode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getLocationComponentOptions = _class.instanceMethodId(
    r'getLocationComponentOptions',
    r'()Lorg/maplibre/android/location/LocationComponentOptions;',
  );

  static final _getLocationComponentOptions = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions getLocationComponentOptions()`
  /// The returned object must be released after use, by calling the [release] method.
  locationcomponentoptions_.LocationComponentOptions
      getLocationComponentOptions() {
    return _getLocationComponentOptions(reference.pointer,
            _id_getLocationComponentOptions as jni.JMethodIDPtr)
        .object(
            const locationcomponentoptions_.$LocationComponentOptionsType());
  }

  static final _id_applyStyle = _class.instanceMethodId(
    r'applyStyle',
    r'(Landroid/content/Context;I)V',
  );

  static final _applyStyle = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `public void applyStyle(android.content.Context context, int i)`
  void applyStyle(
    jni.JObject context,
    int i,
  ) {
    _applyStyle(reference.pointer, _id_applyStyle as jni.JMethodIDPtr,
            context.reference.pointer, i)
        .check();
  }

  static final _id_applyStyle1 = _class.instanceMethodId(
    r'applyStyle',
    r'(Lorg/maplibre/android/location/LocationComponentOptions;)V',
  );

  static final _applyStyle1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void applyStyle(org.maplibre.android.location.LocationComponentOptions locationComponentOptions)`
  void applyStyle1(
    locationcomponentoptions_.LocationComponentOptions locationComponentOptions,
  ) {
    _applyStyle1(reference.pointer, _id_applyStyle1 as jni.JMethodIDPtr,
            locationComponentOptions.reference.pointer)
        .check();
  }

  static final _id_zoomWhileTracking = _class.instanceMethodId(
    r'zoomWhileTracking',
    r'(DJLorg/maplibre/android/maps/MapLibreMap$CancelableCallback;)V',
  );

  static final _zoomWhileTracking = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Double,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              double, int, ffi.Pointer<ffi.Void>)>();

  /// from: `public void zoomWhileTracking(double d, long j, org.maplibre.android.maps.MapLibreMap$CancelableCallback cancelableCallback)`
  void zoomWhileTracking(
    double d,
    int j,
    maplibremap_.MapLibreMap_CancelableCallback cancelableCallback,
  ) {
    _zoomWhileTracking(
            reference.pointer,
            _id_zoomWhileTracking as jni.JMethodIDPtr,
            d,
            j,
            cancelableCallback.reference.pointer)
        .check();
  }

  static final _id_zoomWhileTracking1 = _class.instanceMethodId(
    r'zoomWhileTracking',
    r'(DJ)V',
  );

  static final _zoomWhileTracking1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Double, ffi.Int64)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double, int)>();

  /// from: `public void zoomWhileTracking(double d, long j)`
  void zoomWhileTracking1(
    double d,
    int j,
  ) {
    _zoomWhileTracking1(
            reference.pointer, _id_zoomWhileTracking1 as jni.JMethodIDPtr, d, j)
        .check();
  }

  static final _id_zoomWhileTracking2 = _class.instanceMethodId(
    r'zoomWhileTracking',
    r'(D)V',
  );

  static final _zoomWhileTracking2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public void zoomWhileTracking(double d)`
  void zoomWhileTracking2(
    double d,
  ) {
    _zoomWhileTracking2(
            reference.pointer, _id_zoomWhileTracking2 as jni.JMethodIDPtr, d)
        .check();
  }

  static final _id_cancelZoomWhileTrackingAnimation = _class.instanceMethodId(
    r'cancelZoomWhileTrackingAnimation',
    r'()V',
  );

  static final _cancelZoomWhileTrackingAnimation =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: `public void cancelZoomWhileTrackingAnimation()`
  void cancelZoomWhileTrackingAnimation() {
    _cancelZoomWhileTrackingAnimation(reference.pointer,
            _id_cancelZoomWhileTrackingAnimation as jni.JMethodIDPtr)
        .check();
  }

  static final _id_paddingWhileTracking = _class.instanceMethodId(
    r'paddingWhileTracking',
    r'([D)V',
  );

  static final _paddingWhileTracking = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void paddingWhileTracking(double[] ds)`
  void paddingWhileTracking(
    jni.JArray<jni.jdouble> ds,
  ) {
    _paddingWhileTracking(reference.pointer,
            _id_paddingWhileTracking as jni.JMethodIDPtr, ds.reference.pointer)
        .check();
  }

  static final _id_paddingWhileTracking1 = _class.instanceMethodId(
    r'paddingWhileTracking',
    r'([DJ)V',
  );

  static final _paddingWhileTracking1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `public void paddingWhileTracking(double[] ds, long j)`
  void paddingWhileTracking1(
    jni.JArray<jni.jdouble> ds,
    int j,
  ) {
    _paddingWhileTracking1(
            reference.pointer,
            _id_paddingWhileTracking1 as jni.JMethodIDPtr,
            ds.reference.pointer,
            j)
        .check();
  }

  static final _id_paddingWhileTracking2 = _class.instanceMethodId(
    r'paddingWhileTracking',
    r'([DJLorg/maplibre/android/maps/MapLibreMap$CancelableCallback;)V',
  );

  static final _paddingWhileTracking2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: `public void paddingWhileTracking(double[] ds, long j, org.maplibre.android.maps.MapLibreMap$CancelableCallback cancelableCallback)`
  void paddingWhileTracking2(
    jni.JArray<jni.jdouble> ds,
    int j,
    maplibremap_.MapLibreMap_CancelableCallback cancelableCallback,
  ) {
    _paddingWhileTracking2(
            reference.pointer,
            _id_paddingWhileTracking2 as jni.JMethodIDPtr,
            ds.reference.pointer,
            j,
            cancelableCallback.reference.pointer)
        .check();
  }

  static final _id_cancelPaddingWhileTrackingAnimation =
      _class.instanceMethodId(
    r'cancelPaddingWhileTrackingAnimation',
    r'()V',
  );

  static final _cancelPaddingWhileTrackingAnimation =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: `public void cancelPaddingWhileTrackingAnimation()`
  void cancelPaddingWhileTrackingAnimation() {
    _cancelPaddingWhileTrackingAnimation(reference.pointer,
            _id_cancelPaddingWhileTrackingAnimation as jni.JMethodIDPtr)
        .check();
  }

  static final _id_tiltWhileTracking = _class.instanceMethodId(
    r'tiltWhileTracking',
    r'(DJLorg/maplibre/android/maps/MapLibreMap$CancelableCallback;)V',
  );

  static final _tiltWhileTracking = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Double,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              double, int, ffi.Pointer<ffi.Void>)>();

  /// from: `public void tiltWhileTracking(double d, long j, org.maplibre.android.maps.MapLibreMap$CancelableCallback cancelableCallback)`
  void tiltWhileTracking(
    double d,
    int j,
    maplibremap_.MapLibreMap_CancelableCallback cancelableCallback,
  ) {
    _tiltWhileTracking(
            reference.pointer,
            _id_tiltWhileTracking as jni.JMethodIDPtr,
            d,
            j,
            cancelableCallback.reference.pointer)
        .check();
  }

  static final _id_tiltWhileTracking1 = _class.instanceMethodId(
    r'tiltWhileTracking',
    r'(DJ)V',
  );

  static final _tiltWhileTracking1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Double, ffi.Int64)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double, int)>();

  /// from: `public void tiltWhileTracking(double d, long j)`
  void tiltWhileTracking1(
    double d,
    int j,
  ) {
    _tiltWhileTracking1(
            reference.pointer, _id_tiltWhileTracking1 as jni.JMethodIDPtr, d, j)
        .check();
  }

  static final _id_tiltWhileTracking2 = _class.instanceMethodId(
    r'tiltWhileTracking',
    r'(D)V',
  );

  static final _tiltWhileTracking2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public void tiltWhileTracking(double d)`
  void tiltWhileTracking2(
    double d,
  ) {
    _tiltWhileTracking2(
            reference.pointer, _id_tiltWhileTracking2 as jni.JMethodIDPtr, d)
        .check();
  }

  static final _id_cancelTiltWhileTrackingAnimation = _class.instanceMethodId(
    r'cancelTiltWhileTrackingAnimation',
    r'()V',
  );

  static final _cancelTiltWhileTrackingAnimation =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: `public void cancelTiltWhileTrackingAnimation()`
  void cancelTiltWhileTrackingAnimation() {
    _cancelTiltWhileTrackingAnimation(reference.pointer,
            _id_cancelTiltWhileTrackingAnimation as jni.JMethodIDPtr)
        .check();
  }

  static final _id_forceLocationUpdate = _class.instanceMethodId(
    r'forceLocationUpdate',
    r'(Landroid/location/Location;)V',
  );

  static final _forceLocationUpdate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void forceLocationUpdate(android.location.Location location)`
  void forceLocationUpdate(
    jni.JObject location,
  ) {
    _forceLocationUpdate(
            reference.pointer,
            _id_forceLocationUpdate as jni.JMethodIDPtr,
            location.reference.pointer)
        .check();
  }

  static final _id_forceLocationUpdate1 = _class.instanceMethodId(
    r'forceLocationUpdate',
    r'(Ljava/util/List;Z)V',
  );

  static final _forceLocationUpdate1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `public void forceLocationUpdate(java.util.List list, boolean z)`
  void forceLocationUpdate1(
    jni.JList<jni.JObject> list,
    bool z,
  ) {
    _forceLocationUpdate1(
            reference.pointer,
            _id_forceLocationUpdate1 as jni.JMethodIDPtr,
            list.reference.pointer,
            z ? 1 : 0)
        .check();
  }

  static final _id_setMaxAnimationFps = _class.instanceMethodId(
    r'setMaxAnimationFps',
    r'(I)V',
  );

  static final _setMaxAnimationFps = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void setMaxAnimationFps(int i)`
  void setMaxAnimationFps(
    int i,
  ) {
    _setMaxAnimationFps(
            reference.pointer, _id_setMaxAnimationFps as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setLocationEngine = _class.instanceMethodId(
    r'setLocationEngine',
    r'(Lorg/maplibre/android/location/engine/LocationEngine;)V',
  );

  static final _setLocationEngine = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setLocationEngine(org.maplibre.android.location.engine.LocationEngine locationEngine)`
  void setLocationEngine(
    locationengine_.LocationEngine locationEngine,
  ) {
    _setLocationEngine(
            reference.pointer,
            _id_setLocationEngine as jni.JMethodIDPtr,
            locationEngine.reference.pointer)
        .check();
  }

  static final _id_setLocationEngineRequest = _class.instanceMethodId(
    r'setLocationEngineRequest',
    r'(Lorg/maplibre/android/location/engine/LocationEngineRequest;)V',
  );

  static final _setLocationEngineRequest = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setLocationEngineRequest(org.maplibre.android.location.engine.LocationEngineRequest locationEngineRequest)`
  void setLocationEngineRequest(
    locationenginerequest_.LocationEngineRequest locationEngineRequest,
  ) {
    _setLocationEngineRequest(
            reference.pointer,
            _id_setLocationEngineRequest as jni.JMethodIDPtr,
            locationEngineRequest.reference.pointer)
        .check();
  }

  static final _id_getLocationEngineRequest = _class.instanceMethodId(
    r'getLocationEngineRequest',
    r'()Lorg/maplibre/android/location/engine/LocationEngineRequest;',
  );

  static final _getLocationEngineRequest = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.location.engine.LocationEngineRequest getLocationEngineRequest()`
  /// The returned object must be released after use, by calling the [release] method.
  locationenginerequest_.LocationEngineRequest getLocationEngineRequest() {
    return _getLocationEngineRequest(
            reference.pointer, _id_getLocationEngineRequest as jni.JMethodIDPtr)
        .object(const locationenginerequest_.$LocationEngineRequestType());
  }

  static final _id_getLocationEngine = _class.instanceMethodId(
    r'getLocationEngine',
    r'()Lorg/maplibre/android/location/engine/LocationEngine;',
  );

  static final _getLocationEngine = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.location.engine.LocationEngine getLocationEngine()`
  /// The returned object must be released after use, by calling the [release] method.
  locationengine_.LocationEngine getLocationEngine() {
    return _getLocationEngine(
            reference.pointer, _id_getLocationEngine as jni.JMethodIDPtr)
        .object(const locationengine_.$LocationEngineType());
  }

  static final _id_setCompassEngine = _class.instanceMethodId(
    r'setCompassEngine',
    r'(Lorg/maplibre/android/location/CompassEngine;)V',
  );

  static final _setCompassEngine = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void setCompassEngine(org.maplibre.android.location.CompassEngine compassEngine)`
  void setCompassEngine(
    compassengine_.CompassEngine compassEngine,
  ) {
    _setCompassEngine(
            reference.pointer,
            _id_setCompassEngine as jni.JMethodIDPtr,
            compassEngine.reference.pointer)
        .check();
  }

  static final _id_getCompassEngine = _class.instanceMethodId(
    r'getCompassEngine',
    r'()Lorg/maplibre/android/location/CompassEngine;',
  );

  static final _getCompassEngine = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.location.CompassEngine getCompassEngine()`
  /// The returned object must be released after use, by calling the [release] method.
  compassengine_.CompassEngine getCompassEngine() {
    return _getCompassEngine(
            reference.pointer, _id_getCompassEngine as jni.JMethodIDPtr)
        .object(const compassengine_.$CompassEngineType());
  }

  static final _id_getLastKnownLocation = _class.instanceMethodId(
    r'getLastKnownLocation',
    r'()Landroid/location/Location;',
  );

  static final _getLastKnownLocation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public android.location.Location getLastKnownLocation()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLastKnownLocation() {
    return _getLastKnownLocation(
            reference.pointer, _id_getLastKnownLocation as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_addOnLocationClickListener = _class.instanceMethodId(
    r'addOnLocationClickListener',
    r'(Lorg/maplibre/android/location/OnLocationClickListener;)V',
  );

  static final _addOnLocationClickListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnLocationClickListener(org.maplibre.android.location.OnLocationClickListener onLocationClickListener)`
  void addOnLocationClickListener(
    onlocationclicklistener_.OnLocationClickListener onLocationClickListener,
  ) {
    _addOnLocationClickListener(
            reference.pointer,
            _id_addOnLocationClickListener as jni.JMethodIDPtr,
            onLocationClickListener.reference.pointer)
        .check();
  }

  static final _id_removeOnLocationClickListener = _class.instanceMethodId(
    r'removeOnLocationClickListener',
    r'(Lorg/maplibre/android/location/OnLocationClickListener;)V',
  );

  static final _removeOnLocationClickListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnLocationClickListener(org.maplibre.android.location.OnLocationClickListener onLocationClickListener)`
  void removeOnLocationClickListener(
    onlocationclicklistener_.OnLocationClickListener onLocationClickListener,
  ) {
    _removeOnLocationClickListener(
            reference.pointer,
            _id_removeOnLocationClickListener as jni.JMethodIDPtr,
            onLocationClickListener.reference.pointer)
        .check();
  }

  static final _id_addOnLocationLongClickListener = _class.instanceMethodId(
    r'addOnLocationLongClickListener',
    r'(Lorg/maplibre/android/location/OnLocationLongClickListener;)V',
  );

  static final _addOnLocationLongClickListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnLocationLongClickListener(org.maplibre.android.location.OnLocationLongClickListener onLocationLongClickListener)`
  void addOnLocationLongClickListener(
    onlocationlongclicklistener_.OnLocationLongClickListener
        onLocationLongClickListener,
  ) {
    _addOnLocationLongClickListener(
            reference.pointer,
            _id_addOnLocationLongClickListener as jni.JMethodIDPtr,
            onLocationLongClickListener.reference.pointer)
        .check();
  }

  static final _id_removeOnLocationLongClickListener = _class.instanceMethodId(
    r'removeOnLocationLongClickListener',
    r'(Lorg/maplibre/android/location/OnLocationLongClickListener;)V',
  );

  static final _removeOnLocationLongClickListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnLocationLongClickListener(org.maplibre.android.location.OnLocationLongClickListener onLocationLongClickListener)`
  void removeOnLocationLongClickListener(
    onlocationlongclicklistener_.OnLocationLongClickListener
        onLocationLongClickListener,
  ) {
    _removeOnLocationLongClickListener(
            reference.pointer,
            _id_removeOnLocationLongClickListener as jni.JMethodIDPtr,
            onLocationLongClickListener.reference.pointer)
        .check();
  }

  static final _id_addOnCameraTrackingChangedListener = _class.instanceMethodId(
    r'addOnCameraTrackingChangedListener',
    r'(Lorg/maplibre/android/location/OnCameraTrackingChangedListener;)V',
  );

  static final _addOnCameraTrackingChangedListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnCameraTrackingChangedListener(org.maplibre.android.location.OnCameraTrackingChangedListener onCameraTrackingChangedListener)`
  void addOnCameraTrackingChangedListener(
    oncameratrackingchangedlistener_.OnCameraTrackingChangedListener
        onCameraTrackingChangedListener,
  ) {
    _addOnCameraTrackingChangedListener(
            reference.pointer,
            _id_addOnCameraTrackingChangedListener as jni.JMethodIDPtr,
            onCameraTrackingChangedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnCameraTrackingChangedListener =
      _class.instanceMethodId(
    r'removeOnCameraTrackingChangedListener',
    r'(Lorg/maplibre/android/location/OnCameraTrackingChangedListener;)V',
  );

  static final _removeOnCameraTrackingChangedListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnCameraTrackingChangedListener(org.maplibre.android.location.OnCameraTrackingChangedListener onCameraTrackingChangedListener)`
  void removeOnCameraTrackingChangedListener(
    oncameratrackingchangedlistener_.OnCameraTrackingChangedListener
        onCameraTrackingChangedListener,
  ) {
    _removeOnCameraTrackingChangedListener(
            reference.pointer,
            _id_removeOnCameraTrackingChangedListener as jni.JMethodIDPtr,
            onCameraTrackingChangedListener.reference.pointer)
        .check();
  }

  static final _id_addOnRenderModeChangedListener = _class.instanceMethodId(
    r'addOnRenderModeChangedListener',
    r'(Lorg/maplibre/android/location/OnRenderModeChangedListener;)V',
  );

  static final _addOnRenderModeChangedListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnRenderModeChangedListener(org.maplibre.android.location.OnRenderModeChangedListener onRenderModeChangedListener)`
  void addOnRenderModeChangedListener(
    onrendermodechangedlistener_.OnRenderModeChangedListener
        onRenderModeChangedListener,
  ) {
    _addOnRenderModeChangedListener(
            reference.pointer,
            _id_addOnRenderModeChangedListener as jni.JMethodIDPtr,
            onRenderModeChangedListener.reference.pointer)
        .check();
  }

  static final _id_removeRenderModeChangedListener = _class.instanceMethodId(
    r'removeRenderModeChangedListener',
    r'(Lorg/maplibre/android/location/OnRenderModeChangedListener;)V',
  );

  static final _removeRenderModeChangedListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeRenderModeChangedListener(org.maplibre.android.location.OnRenderModeChangedListener onRenderModeChangedListener)`
  void removeRenderModeChangedListener(
    onrendermodechangedlistener_.OnRenderModeChangedListener
        onRenderModeChangedListener,
  ) {
    _removeRenderModeChangedListener(
            reference.pointer,
            _id_removeRenderModeChangedListener as jni.JMethodIDPtr,
            onRenderModeChangedListener.reference.pointer)
        .check();
  }

  static final _id_addOnLocationStaleListener = _class.instanceMethodId(
    r'addOnLocationStaleListener',
    r'(Lorg/maplibre/android/location/OnLocationStaleListener;)V',
  );

  static final _addOnLocationStaleListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void addOnLocationStaleListener(org.maplibre.android.location.OnLocationStaleListener onLocationStaleListener)`
  void addOnLocationStaleListener(
    onlocationstalelistener_.OnLocationStaleListener onLocationStaleListener,
  ) {
    _addOnLocationStaleListener(
            reference.pointer,
            _id_addOnLocationStaleListener as jni.JMethodIDPtr,
            onLocationStaleListener.reference.pointer)
        .check();
  }

  static final _id_removeOnLocationStaleListener = _class.instanceMethodId(
    r'removeOnLocationStaleListener',
    r'(Lorg/maplibre/android/location/OnLocationStaleListener;)V',
  );

  static final _removeOnLocationStaleListener = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void removeOnLocationStaleListener(org.maplibre.android.location.OnLocationStaleListener onLocationStaleListener)`
  void removeOnLocationStaleListener(
    onlocationstalelistener_.OnLocationStaleListener onLocationStaleListener,
  ) {
    _removeOnLocationStaleListener(
            reference.pointer,
            _id_removeOnLocationStaleListener as jni.JMethodIDPtr,
            onLocationStaleListener.reference.pointer)
        .check();
  }

  static final _id_onStart = _class.instanceMethodId(
    r'onStart',
    r'()V',
  );

  static final _onStart = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onStart()`
  void onStart() {
    _onStart(reference.pointer, _id_onStart as jni.JMethodIDPtr).check();
  }

  static final _id_onStop = _class.instanceMethodId(
    r'onStop',
    r'()V',
  );

  static final _onStop = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onStop()`
  void onStop() {
    _onStop(reference.pointer, _id_onStop as jni.JMethodIDPtr).check();
  }

  static final _id_onDestroy = _class.instanceMethodId(
    r'onDestroy',
    r'()V',
  );

  static final _onDestroy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onDestroy()`
  void onDestroy() {
    _onDestroy(reference.pointer, _id_onDestroy as jni.JMethodIDPtr).check();
  }

  static final _id_onStartLoadingMap = _class.instanceMethodId(
    r'onStartLoadingMap',
    r'()V',
  );

  static final _onStartLoadingMap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onStartLoadingMap()`
  void onStartLoadingMap() {
    _onStartLoadingMap(
            reference.pointer, _id_onStartLoadingMap as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onFinishLoadingStyle = _class.instanceMethodId(
    r'onFinishLoadingStyle',
    r'()V',
  );

  static final _onFinishLoadingStyle = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void onFinishLoadingStyle()`
  void onFinishLoadingStyle() {
    _onFinishLoadingStyle(
            reference.pointer, _id_onFinishLoadingStyle as jni.JMethodIDPtr)
        .check();
  }

  static final _id_isLocationComponentActivated = _class.instanceMethodId(
    r'isLocationComponentActivated',
    r'()Z',
  );

  static final _isLocationComponentActivated = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isLocationComponentActivated()`
  bool isLocationComponentActivated() {
    return _isLocationComponentActivated(reference.pointer,
            _id_isLocationComponentActivated as jni.JMethodIDPtr)
        .boolean;
  }
}

final class $LocationComponentType extends jni.JObjType<LocationComponent> {
  const $LocationComponentType();

  @override
  String get signature => r'Lorg/maplibre/android/location/LocationComponent;';

  @override
  LocationComponent fromReference(jni.JReference reference) =>
      LocationComponent.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LocationComponentType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LocationComponentType) &&
        other is $LocationComponentType;
  }
}
