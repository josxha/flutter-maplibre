// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.location.LocationComponentOptions$Builder`
class LocationComponentOptions_Builder extends jni.JObject {
  @override
  late final jni.JObjType<LocationComponentOptions_Builder> $type = type;

  LocationComponentOptions_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/location/LocationComponentOptions$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $LocationComponentOptions_BuilderType();
  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Lorg/maplibre/android/location/LocationComponentOptions;',
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions build()`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $LocationComponentOptionsType());
  }

  static final _id_accuracyAlpha = _class.instanceMethodId(
    r'accuracyAlpha',
    r'(F)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _accuracyAlpha = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder accuracyAlpha(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder accuracyAlpha(
    double f,
  ) {
    return _accuracyAlpha(
            reference.pointer, _id_accuracyAlpha as jni.JMethodIDPtr, f)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_accuracyColor = _class.instanceMethodId(
    r'accuracyColor',
    r'(I)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _accuracyColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder accuracyColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder accuracyColor(
    int i,
  ) {
    return _accuracyColor(
            reference.pointer, _id_accuracyColor as jni.JMethodIDPtr, i)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_backgroundDrawableStale = _class.instanceMethodId(
    r'backgroundDrawableStale',
    r'(I)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _backgroundDrawableStale = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder backgroundDrawableStale(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder backgroundDrawableStale(
    int i,
  ) {
    return _backgroundDrawableStale(reference.pointer,
            _id_backgroundDrawableStale as jni.JMethodIDPtr, i)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_backgroundStaleName = _class.instanceMethodId(
    r'backgroundStaleName',
    r'(Ljava/lang/String;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _backgroundStaleName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder backgroundStaleName(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder backgroundStaleName(
    jni.JString string,
  ) {
    return _backgroundStaleName(
            reference.pointer,
            _id_backgroundStaleName as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_foregroundDrawableStale = _class.instanceMethodId(
    r'foregroundDrawableStale',
    r'(I)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _foregroundDrawableStale = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder foregroundDrawableStale(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder foregroundDrawableStale(
    int i,
  ) {
    return _foregroundDrawableStale(reference.pointer,
            _id_foregroundDrawableStale as jni.JMethodIDPtr, i)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_foregroundStaleName = _class.instanceMethodId(
    r'foregroundStaleName',
    r'(Ljava/lang/String;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _foregroundStaleName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder foregroundStaleName(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder foregroundStaleName(
    jni.JString string,
  ) {
    return _foregroundStaleName(
            reference.pointer,
            _id_foregroundStaleName as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_gpsDrawable = _class.instanceMethodId(
    r'gpsDrawable',
    r'(I)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _gpsDrawable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder gpsDrawable(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder gpsDrawable(
    int i,
  ) {
    return _gpsDrawable(
            reference.pointer, _id_gpsDrawable as jni.JMethodIDPtr, i)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_gpsName = _class.instanceMethodId(
    r'gpsName',
    r'(Ljava/lang/String;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _gpsName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder gpsName(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder gpsName(
    jni.JString string,
  ) {
    return _gpsName(reference.pointer, _id_gpsName as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_foregroundDrawable = _class.instanceMethodId(
    r'foregroundDrawable',
    r'(I)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _foregroundDrawable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder foregroundDrawable(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder foregroundDrawable(
    int i,
  ) {
    return _foregroundDrawable(
            reference.pointer, _id_foregroundDrawable as jni.JMethodIDPtr, i)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_foregroundName = _class.instanceMethodId(
    r'foregroundName',
    r'(Ljava/lang/String;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _foregroundName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder foregroundName(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder foregroundName(
    jni.JString string,
  ) {
    return _foregroundName(reference.pointer,
            _id_foregroundName as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_backgroundDrawable = _class.instanceMethodId(
    r'backgroundDrawable',
    r'(I)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _backgroundDrawable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder backgroundDrawable(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder backgroundDrawable(
    int i,
  ) {
    return _backgroundDrawable(
            reference.pointer, _id_backgroundDrawable as jni.JMethodIDPtr, i)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_backgroundName = _class.instanceMethodId(
    r'backgroundName',
    r'(Ljava/lang/String;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _backgroundName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder backgroundName(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder backgroundName(
    jni.JString string,
  ) {
    return _backgroundName(reference.pointer,
            _id_backgroundName as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_bearingDrawable = _class.instanceMethodId(
    r'bearingDrawable',
    r'(I)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _bearingDrawable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder bearingDrawable(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder bearingDrawable(
    int i,
  ) {
    return _bearingDrawable(
            reference.pointer, _id_bearingDrawable as jni.JMethodIDPtr, i)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_bearingName = _class.instanceMethodId(
    r'bearingName',
    r'(Ljava/lang/String;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _bearingName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder bearingName(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder bearingName(
    jni.JString string,
  ) {
    return _bearingName(reference.pointer, _id_bearingName as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_bearingTintColor = _class.instanceMethodId(
    r'bearingTintColor',
    r'(Ljava/lang/Integer;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _bearingTintColor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder bearingTintColor(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder bearingTintColor(
    jni.JInteger integer,
  ) {
    return _bearingTintColor(reference.pointer,
            _id_bearingTintColor as jni.JMethodIDPtr, integer.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_foregroundTintColor = _class.instanceMethodId(
    r'foregroundTintColor',
    r'(Ljava/lang/Integer;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _foregroundTintColor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder foregroundTintColor(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder foregroundTintColor(
    jni.JInteger integer,
  ) {
    return _foregroundTintColor(
            reference.pointer,
            _id_foregroundTintColor as jni.JMethodIDPtr,
            integer.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_backgroundTintColor = _class.instanceMethodId(
    r'backgroundTintColor',
    r'(Ljava/lang/Integer;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _backgroundTintColor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder backgroundTintColor(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder backgroundTintColor(
    jni.JInteger integer,
  ) {
    return _backgroundTintColor(
            reference.pointer,
            _id_backgroundTintColor as jni.JMethodIDPtr,
            integer.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_foregroundStaleTintColor = _class.instanceMethodId(
    r'foregroundStaleTintColor',
    r'(Ljava/lang/Integer;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _foregroundStaleTintColor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder foregroundStaleTintColor(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder foregroundStaleTintColor(
    jni.JInteger integer,
  ) {
    return _foregroundStaleTintColor(
            reference.pointer,
            _id_foregroundStaleTintColor as jni.JMethodIDPtr,
            integer.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_backgroundStaleTintColor = _class.instanceMethodId(
    r'backgroundStaleTintColor',
    r'(Ljava/lang/Integer;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _backgroundStaleTintColor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder backgroundStaleTintColor(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder backgroundStaleTintColor(
    jni.JInteger integer,
  ) {
    return _backgroundStaleTintColor(
            reference.pointer,
            _id_backgroundStaleTintColor as jni.JMethodIDPtr,
            integer.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_elevation = _class.instanceMethodId(
    r'elevation',
    r'(F)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _elevation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder elevation(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder elevation(
    double f,
  ) {
    return _elevation(reference.pointer, _id_elevation as jni.JMethodIDPtr, f)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_enableStaleState = _class.instanceMethodId(
    r'enableStaleState',
    r'(Z)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _enableStaleState = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder enableStaleState(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder enableStaleState(
    bool z,
  ) {
    return _enableStaleState(reference.pointer,
            _id_enableStaleState as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_staleStateTimeout = _class.instanceMethodId(
    r'staleStateTimeout',
    r'(J)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _staleStateTimeout = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder staleStateTimeout(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder staleStateTimeout(
    int j,
  ) {
    return _staleStateTimeout(
            reference.pointer, _id_staleStateTimeout as jni.JMethodIDPtr, j)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_padding = _class.instanceMethodId(
    r'padding',
    r'([I)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _padding = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder padding(int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder padding(
    jni.JArray<jni.jint> is0,
  ) {
    return _padding(reference.pointer, _id_padding as jni.JMethodIDPtr,
            is0.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_maxZoomIconScale = _class.instanceMethodId(
    r'maxZoomIconScale',
    r'(F)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _maxZoomIconScale = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder maxZoomIconScale(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder maxZoomIconScale(
    double f,
  ) {
    return _maxZoomIconScale(
            reference.pointer, _id_maxZoomIconScale as jni.JMethodIDPtr, f)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_minZoomIconScale = _class.instanceMethodId(
    r'minZoomIconScale',
    r'(F)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _minZoomIconScale = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder minZoomIconScale(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder minZoomIconScale(
    double f,
  ) {
    return _minZoomIconScale(
            reference.pointer, _id_minZoomIconScale as jni.JMethodIDPtr, f)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_trackingGesturesManagement = _class.instanceMethodId(
    r'trackingGesturesManagement',
    r'(Z)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _trackingGesturesManagement = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder trackingGesturesManagement(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder trackingGesturesManagement(
    bool z,
  ) {
    return _trackingGesturesManagement(reference.pointer,
            _id_trackingGesturesManagement as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_trackingInitialMoveThreshold = _class.instanceMethodId(
    r'trackingInitialMoveThreshold',
    r'(F)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _trackingInitialMoveThreshold = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder trackingInitialMoveThreshold(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder trackingInitialMoveThreshold(
    double f,
  ) {
    return _trackingInitialMoveThreshold(reference.pointer,
            _id_trackingInitialMoveThreshold as jni.JMethodIDPtr, f)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_trackingMultiFingerMoveThreshold = _class.instanceMethodId(
    r'trackingMultiFingerMoveThreshold',
    r'(F)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _trackingMultiFingerMoveThreshold =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr, ffi.VarArgs<(ffi.Double,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder trackingMultiFingerMoveThreshold(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder trackingMultiFingerMoveThreshold(
    double f,
  ) {
    return _trackingMultiFingerMoveThreshold(reference.pointer,
            _id_trackingMultiFingerMoveThreshold as jni.JMethodIDPtr, f)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_trackingMultiFingerProtectedMoveArea =
      _class.instanceMethodId(
    r'trackingMultiFingerProtectedMoveArea',
    r'(Landroid/graphics/RectF;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _trackingMultiFingerProtectedMoveArea =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder trackingMultiFingerProtectedMoveArea(android.graphics.RectF rectF)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder trackingMultiFingerProtectedMoveArea(
    jni.JObject rectF,
  ) {
    return _trackingMultiFingerProtectedMoveArea(
            reference.pointer,
            _id_trackingMultiFingerProtectedMoveArea as jni.JMethodIDPtr,
            rectF.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_layerAbove = _class.instanceMethodId(
    r'layerAbove',
    r'(Ljava/lang/String;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _layerAbove = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder layerAbove(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder layerAbove(
    jni.JString string,
  ) {
    return _layerAbove(reference.pointer, _id_layerAbove as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_layerBelow = _class.instanceMethodId(
    r'layerBelow',
    r'(Ljava/lang/String;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _layerBelow = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder layerBelow(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder layerBelow(
    jni.JString string,
  ) {
    return _layerBelow(reference.pointer, _id_layerBelow as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_trackingAnimationDurationMultiplier =
      _class.instanceMethodId(
    r'trackingAnimationDurationMultiplier',
    r'(F)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _trackingAnimationDurationMultiplier =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr, ffi.VarArgs<(ffi.Double,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder trackingAnimationDurationMultiplier(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder trackingAnimationDurationMultiplier(
    double f,
  ) {
    return _trackingAnimationDurationMultiplier(reference.pointer,
            _id_trackingAnimationDurationMultiplier as jni.JMethodIDPtr, f)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_compassAnimationEnabled = _class.instanceMethodId(
    r'compassAnimationEnabled',
    r'(Ljava/lang/Boolean;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _compassAnimationEnabled = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder compassAnimationEnabled(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder compassAnimationEnabled(
    jni.JBoolean boolean,
  ) {
    return _compassAnimationEnabled(
            reference.pointer,
            _id_compassAnimationEnabled as jni.JMethodIDPtr,
            boolean.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_accuracyAnimationEnabled = _class.instanceMethodId(
    r'accuracyAnimationEnabled',
    r'(Z)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _accuracyAnimationEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder accuracyAnimationEnabled(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder accuracyAnimationEnabled(
    bool z,
  ) {
    return _accuracyAnimationEnabled(reference.pointer,
            _id_accuracyAnimationEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_pulseEnabled = _class.instanceMethodId(
    r'pulseEnabled',
    r'(Z)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _pulseEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder pulseEnabled(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder pulseEnabled(
    bool z,
  ) {
    return _pulseEnabled(
            reference.pointer, _id_pulseEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_pulseFadeEnabled = _class.instanceMethodId(
    r'pulseFadeEnabled',
    r'(Z)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _pulseFadeEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder pulseFadeEnabled(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder pulseFadeEnabled(
    bool z,
  ) {
    return _pulseFadeEnabled(reference.pointer,
            _id_pulseFadeEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_pulseColor = _class.instanceMethodId(
    r'pulseColor',
    r'(I)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _pulseColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder pulseColor(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder pulseColor(
    int i,
  ) {
    return _pulseColor(reference.pointer, _id_pulseColor as jni.JMethodIDPtr, i)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_pulseSingleDuration = _class.instanceMethodId(
    r'pulseSingleDuration',
    r'(F)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _pulseSingleDuration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder pulseSingleDuration(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder pulseSingleDuration(
    double f,
  ) {
    return _pulseSingleDuration(
            reference.pointer, _id_pulseSingleDuration as jni.JMethodIDPtr, f)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_pulseMaxRadius = _class.instanceMethodId(
    r'pulseMaxRadius',
    r'(F)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _pulseMaxRadius = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder pulseMaxRadius(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder pulseMaxRadius(
    double f,
  ) {
    return _pulseMaxRadius(
            reference.pointer, _id_pulseMaxRadius as jni.JMethodIDPtr, f)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_pulseAlpha = _class.instanceMethodId(
    r'pulseAlpha',
    r'(F)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _pulseAlpha = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder pulseAlpha(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder pulseAlpha(
    double f,
  ) {
    return _pulseAlpha(reference.pointer, _id_pulseAlpha as jni.JMethodIDPtr, f)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_pulseInterpolator = _class.instanceMethodId(
    r'pulseInterpolator',
    r'(Landroid/view/animation/Interpolator;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _pulseInterpolator = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder pulseInterpolator(android.view.animation.Interpolator interpolator)`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder pulseInterpolator(
    jni.JObject interpolator,
  ) {
    return _pulseInterpolator(
            reference.pointer,
            _id_pulseInterpolator as jni.JMethodIDPtr,
            interpolator.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }
}

final class $LocationComponentOptions_BuilderType
    extends jni.JObjType<LocationComponentOptions_Builder> {
  const $LocationComponentOptions_BuilderType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/location/LocationComponentOptions$Builder;';

  @override
  LocationComponentOptions_Builder fromReference(jni.JReference reference) =>
      LocationComponentOptions_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LocationComponentOptions_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LocationComponentOptions_BuilderType) &&
        other is $LocationComponentOptions_BuilderType;
  }
}

/// from: `org.maplibre.android.location.LocationComponentOptions`
class LocationComponentOptions extends jni.JObject {
  @override
  late final jni.JObjType<LocationComponentOptions> $type = type;

  LocationComponentOptions.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/location/LocationComponentOptions');

  /// The type which includes information such as the signature of this class.
  static const type = $LocationComponentOptionsType();

  /// from: `static public final float CIRCLE_PULSING_MAX_RADIUS_DEFAULT`
  static const CIRCLE_PULSING_MAX_RADIUS_DEFAULT = 35.0;
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  static final _id_new0 = _class.constructorId(
    r'(FIILjava/lang/String;ILjava/lang/String;ILjava/lang/String;ILjava/lang/String;ILjava/lang/String;ILjava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;FZJ[IFFZFFLandroid/graphics/RectF;Ljava/lang/String;Ljava/lang/String;FZZLjava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Integer;FFFLandroid/view/animation/Interpolator;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Double,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Double,
                        $Int32,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Double,
                        ffi.Double,
                        $Int32,
                        ffi.Double,
                        ffi.Double,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Double,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Double,
                        ffi.Double,
                        ffi.Double,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              double,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              double,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              double,
              double,
              int,
              double,
              double,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              double,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              double,
              double,
              double,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(float f, int i, int i1, java.lang.String string, int i2, java.lang.String string1, int i3, java.lang.String string2, int i4, java.lang.String string3, int i5, java.lang.String string4, int i6, java.lang.String string5, java.lang.Integer integer, java.lang.Integer integer1, java.lang.Integer integer2, java.lang.Integer integer3, java.lang.Integer integer4, float f1, boolean z, long j, int[] is, float f2, float f3, boolean z1, float f4, float f5, android.graphics.RectF rectF, java.lang.String string6, java.lang.String string7, float f6, boolean z2, boolean z3, java.lang.Boolean boolean, java.lang.Boolean boolean1, java.lang.Integer integer5, float f7, float f8, float f9, android.view.animation.Interpolator interpolator)`
  /// The returned object must be released after use, by calling the [release] method.
  factory LocationComponentOptions(
    double f,
    int i,
    int i1,
    jni.JString string,
    int i2,
    jni.JString string1,
    int i3,
    jni.JString string2,
    int i4,
    jni.JString string3,
    int i5,
    jni.JString string4,
    int i6,
    jni.JString string5,
    jni.JInteger integer,
    jni.JInteger integer1,
    jni.JInteger integer2,
    jni.JInteger integer3,
    jni.JInteger integer4,
    double f1,
    bool z,
    int j,
    jni.JArray<jni.jint> is0,
    double f2,
    double f3,
    bool z1,
    double f4,
    double f5,
    jni.JObject rectF,
    jni.JString string6,
    jni.JString string7,
    double f6,
    bool z2,
    bool z3,
    jni.JBoolean boolean,
    jni.JBoolean boolean1,
    jni.JInteger integer5,
    double f7,
    double f8,
    double f9,
    jni.JObject interpolator,
  ) {
    return LocationComponentOptions.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            f,
            i,
            i1,
            string.reference.pointer,
            i2,
            string1.reference.pointer,
            i3,
            string2.reference.pointer,
            i4,
            string3.reference.pointer,
            i5,
            string4.reference.pointer,
            i6,
            string5.reference.pointer,
            integer.reference.pointer,
            integer1.reference.pointer,
            integer2.reference.pointer,
            integer3.reference.pointer,
            integer4.reference.pointer,
            f1,
            z ? 1 : 0,
            j,
            is0.reference.pointer,
            f2,
            f3,
            z1 ? 1 : 0,
            f4,
            f5,
            rectF.reference.pointer,
            string6.reference.pointer,
            string7.reference.pointer,
            f6,
            z2 ? 1 : 0,
            z3 ? 1 : 0,
            boolean.reference.pointer,
            boolean1.reference.pointer,
            integer5.reference.pointer,
            f7,
            f8,
            f9,
            interpolator.reference.pointer)
        .reference);
  }

  static final _id_createFromAttributes = _class.staticMethodId(
    r'createFromAttributes',
    r'(Landroid/content/Context;I)Lorg/maplibre/android/location/LocationComponentOptions;',
  );

  static final _createFromAttributes = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `static public org.maplibre.android.location.LocationComponentOptions createFromAttributes(android.content.Context context, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static LocationComponentOptions createFromAttributes(
    jni.JObject context,
    int i,
  ) {
    return _createFromAttributes(
            _class.reference.pointer,
            _id_createFromAttributes as jni.JMethodIDPtr,
            context.reference.pointer,
            i)
        .object(const $LocationComponentOptionsType());
  }

  static final _id_toBuilder = _class.instanceMethodId(
    r'toBuilder',
    r'()Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _toBuilder = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.location.LocationComponentOptions$Builder toBuilder()`
  /// The returned object must be released after use, by calling the [release] method.
  LocationComponentOptions_Builder toBuilder() {
    return _toBuilder(reference.pointer, _id_toBuilder as jni.JMethodIDPtr)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_builder = _class.staticMethodId(
    r'builder',
    r'(Landroid/content/Context;)Lorg/maplibre/android/location/LocationComponentOptions$Builder;',
  );

  static final _builder = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.location.LocationComponentOptions$Builder builder(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static LocationComponentOptions_Builder builder(
    jni.JObject context,
  ) {
    return _builder(_class.reference.pointer, _id_builder as jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const $LocationComponentOptions_BuilderType());
  }

  static final _id_accuracyAlpha = _class.instanceMethodId(
    r'accuracyAlpha',
    r'()F',
  );

  static final _accuracyAlpha = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public float accuracyAlpha()`
  double accuracyAlpha() {
    return _accuracyAlpha(
            reference.pointer, _id_accuracyAlpha as jni.JMethodIDPtr)
        .float;
  }

  static final _id_accuracyColor = _class.instanceMethodId(
    r'accuracyColor',
    r'()I',
  );

  static final _accuracyColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int accuracyColor()`
  int accuracyColor() {
    return _accuracyColor(
            reference.pointer, _id_accuracyColor as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_backgroundDrawableStale = _class.instanceMethodId(
    r'backgroundDrawableStale',
    r'()I',
  );

  static final _backgroundDrawableStale = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int backgroundDrawableStale()`
  int backgroundDrawableStale() {
    return _backgroundDrawableStale(
            reference.pointer, _id_backgroundDrawableStale as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_backgroundStaleName = _class.instanceMethodId(
    r'backgroundStaleName',
    r'()Ljava/lang/String;',
  );

  static final _backgroundStaleName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String backgroundStaleName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString backgroundStaleName() {
    return _backgroundStaleName(
            reference.pointer, _id_backgroundStaleName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_foregroundDrawableStale = _class.instanceMethodId(
    r'foregroundDrawableStale',
    r'()I',
  );

  static final _foregroundDrawableStale = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int foregroundDrawableStale()`
  int foregroundDrawableStale() {
    return _foregroundDrawableStale(
            reference.pointer, _id_foregroundDrawableStale as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_foregroundStaleName = _class.instanceMethodId(
    r'foregroundStaleName',
    r'()Ljava/lang/String;',
  );

  static final _foregroundStaleName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String foregroundStaleName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString foregroundStaleName() {
    return _foregroundStaleName(
            reference.pointer, _id_foregroundStaleName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_gpsDrawable = _class.instanceMethodId(
    r'gpsDrawable',
    r'()I',
  );

  static final _gpsDrawable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int gpsDrawable()`
  int gpsDrawable() {
    return _gpsDrawable(reference.pointer, _id_gpsDrawable as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_gpsName = _class.instanceMethodId(
    r'gpsName',
    r'()Ljava/lang/String;',
  );

  static final _gpsName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String gpsName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString gpsName() {
    return _gpsName(reference.pointer, _id_gpsName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_foregroundDrawable = _class.instanceMethodId(
    r'foregroundDrawable',
    r'()I',
  );

  static final _foregroundDrawable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int foregroundDrawable()`
  int foregroundDrawable() {
    return _foregroundDrawable(
            reference.pointer, _id_foregroundDrawable as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_foregroundName = _class.instanceMethodId(
    r'foregroundName',
    r'()Ljava/lang/String;',
  );

  static final _foregroundName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String foregroundName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString foregroundName() {
    return _foregroundName(
            reference.pointer, _id_foregroundName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_backgroundDrawable = _class.instanceMethodId(
    r'backgroundDrawable',
    r'()I',
  );

  static final _backgroundDrawable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int backgroundDrawable()`
  int backgroundDrawable() {
    return _backgroundDrawable(
            reference.pointer, _id_backgroundDrawable as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_backgroundName = _class.instanceMethodId(
    r'backgroundName',
    r'()Ljava/lang/String;',
  );

  static final _backgroundName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String backgroundName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString backgroundName() {
    return _backgroundName(
            reference.pointer, _id_backgroundName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_bearingDrawable = _class.instanceMethodId(
    r'bearingDrawable',
    r'()I',
  );

  static final _bearingDrawable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int bearingDrawable()`
  int bearingDrawable() {
    return _bearingDrawable(
            reference.pointer, _id_bearingDrawable as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_bearingName = _class.instanceMethodId(
    r'bearingName',
    r'()Ljava/lang/String;',
  );

  static final _bearingName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String bearingName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString bearingName() {
    return _bearingName(reference.pointer, _id_bearingName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_bearingTintColor = _class.instanceMethodId(
    r'bearingTintColor',
    r'()Ljava/lang/Integer;',
  );

  static final _bearingTintColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Integer bearingTintColor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JInteger bearingTintColor() {
    return _bearingTintColor(
            reference.pointer, _id_bearingTintColor as jni.JMethodIDPtr)
        .object(const jni.JIntegerType());
  }

  static final _id_foregroundTintColor = _class.instanceMethodId(
    r'foregroundTintColor',
    r'()Ljava/lang/Integer;',
  );

  static final _foregroundTintColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Integer foregroundTintColor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JInteger foregroundTintColor() {
    return _foregroundTintColor(
            reference.pointer, _id_foregroundTintColor as jni.JMethodIDPtr)
        .object(const jni.JIntegerType());
  }

  static final _id_backgroundTintColor = _class.instanceMethodId(
    r'backgroundTintColor',
    r'()Ljava/lang/Integer;',
  );

  static final _backgroundTintColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Integer backgroundTintColor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JInteger backgroundTintColor() {
    return _backgroundTintColor(
            reference.pointer, _id_backgroundTintColor as jni.JMethodIDPtr)
        .object(const jni.JIntegerType());
  }

  static final _id_foregroundStaleTintColor = _class.instanceMethodId(
    r'foregroundStaleTintColor',
    r'()Ljava/lang/Integer;',
  );

  static final _foregroundStaleTintColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Integer foregroundStaleTintColor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JInteger foregroundStaleTintColor() {
    return _foregroundStaleTintColor(
            reference.pointer, _id_foregroundStaleTintColor as jni.JMethodIDPtr)
        .object(const jni.JIntegerType());
  }

  static final _id_backgroundStaleTintColor = _class.instanceMethodId(
    r'backgroundStaleTintColor',
    r'()Ljava/lang/Integer;',
  );

  static final _backgroundStaleTintColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Integer backgroundStaleTintColor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JInteger backgroundStaleTintColor() {
    return _backgroundStaleTintColor(
            reference.pointer, _id_backgroundStaleTintColor as jni.JMethodIDPtr)
        .object(const jni.JIntegerType());
  }

  static final _id_elevation = _class.instanceMethodId(
    r'elevation',
    r'()F',
  );

  static final _elevation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public float elevation()`
  double elevation() {
    return _elevation(reference.pointer, _id_elevation as jni.JMethodIDPtr)
        .float;
  }

  static final _id_enableStaleState = _class.instanceMethodId(
    r'enableStaleState',
    r'()Z',
  );

  static final _enableStaleState = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean enableStaleState()`
  bool enableStaleState() {
    return _enableStaleState(
            reference.pointer, _id_enableStaleState as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_staleStateTimeout = _class.instanceMethodId(
    r'staleStateTimeout',
    r'()J',
  );

  static final _staleStateTimeout = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public long staleStateTimeout()`
  int staleStateTimeout() {
    return _staleStateTimeout(
            reference.pointer, _id_staleStateTimeout as jni.JMethodIDPtr)
        .long;
  }

  static final _id_padding = _class.instanceMethodId(
    r'padding',
    r'()[I',
  );

  static final _padding = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int[] padding()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> padding() {
    return _padding(reference.pointer, _id_padding as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_maxZoomIconScale = _class.instanceMethodId(
    r'maxZoomIconScale',
    r'()F',
  );

  static final _maxZoomIconScale = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public float maxZoomIconScale()`
  double maxZoomIconScale() {
    return _maxZoomIconScale(
            reference.pointer, _id_maxZoomIconScale as jni.JMethodIDPtr)
        .float;
  }

  static final _id_minZoomIconScale = _class.instanceMethodId(
    r'minZoomIconScale',
    r'()F',
  );

  static final _minZoomIconScale = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public float minZoomIconScale()`
  double minZoomIconScale() {
    return _minZoomIconScale(
            reference.pointer, _id_minZoomIconScale as jni.JMethodIDPtr)
        .float;
  }

  static final _id_trackingGesturesManagement = _class.instanceMethodId(
    r'trackingGesturesManagement',
    r'()Z',
  );

  static final _trackingGesturesManagement = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean trackingGesturesManagement()`
  bool trackingGesturesManagement() {
    return _trackingGesturesManagement(reference.pointer,
            _id_trackingGesturesManagement as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_trackingInitialMoveThreshold = _class.instanceMethodId(
    r'trackingInitialMoveThreshold',
    r'()F',
  );

  static final _trackingInitialMoveThreshold = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public float trackingInitialMoveThreshold()`
  double trackingInitialMoveThreshold() {
    return _trackingInitialMoveThreshold(reference.pointer,
            _id_trackingInitialMoveThreshold as jni.JMethodIDPtr)
        .float;
  }

  static final _id_trackingMultiFingerMoveThreshold = _class.instanceMethodId(
    r'trackingMultiFingerMoveThreshold',
    r'()F',
  );

  static final _trackingMultiFingerMoveThreshold =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallFloatMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: `public float trackingMultiFingerMoveThreshold()`
  double trackingMultiFingerMoveThreshold() {
    return _trackingMultiFingerMoveThreshold(reference.pointer,
            _id_trackingMultiFingerMoveThreshold as jni.JMethodIDPtr)
        .float;
  }

  static final _id_trackingMultiFingerProtectedMoveArea =
      _class.instanceMethodId(
    r'trackingMultiFingerProtectedMoveArea',
    r'()Landroid/graphics/RectF;',
  );

  static final _trackingMultiFingerProtectedMoveArea =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: `public android.graphics.RectF trackingMultiFingerProtectedMoveArea()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject trackingMultiFingerProtectedMoveArea() {
    return _trackingMultiFingerProtectedMoveArea(reference.pointer,
            _id_trackingMultiFingerProtectedMoveArea as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_layerAbove = _class.instanceMethodId(
    r'layerAbove',
    r'()Ljava/lang/String;',
  );

  static final _layerAbove = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String layerAbove()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString layerAbove() {
    return _layerAbove(reference.pointer, _id_layerAbove as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_layerBelow = _class.instanceMethodId(
    r'layerBelow',
    r'()Ljava/lang/String;',
  );

  static final _layerBelow = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String layerBelow()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString layerBelow() {
    return _layerBelow(reference.pointer, _id_layerBelow as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_trackingAnimationDurationMultiplier =
      _class.instanceMethodId(
    r'trackingAnimationDurationMultiplier',
    r'()F',
  );

  static final _trackingAnimationDurationMultiplier =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallFloatMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: `public float trackingAnimationDurationMultiplier()`
  double trackingAnimationDurationMultiplier() {
    return _trackingAnimationDurationMultiplier(reference.pointer,
            _id_trackingAnimationDurationMultiplier as jni.JMethodIDPtr)
        .float;
  }

  static final _id_compassAnimationEnabled = _class.instanceMethodId(
    r'compassAnimationEnabled',
    r'()Z',
  );

  static final _compassAnimationEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean compassAnimationEnabled()`
  bool compassAnimationEnabled() {
    return _compassAnimationEnabled(
            reference.pointer, _id_compassAnimationEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_accuracyAnimationEnabled = _class.instanceMethodId(
    r'accuracyAnimationEnabled',
    r'()Z',
  );

  static final _accuracyAnimationEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public boolean accuracyAnimationEnabled()`
  bool accuracyAnimationEnabled() {
    return _accuracyAnimationEnabled(
            reference.pointer, _id_accuracyAnimationEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_pulseEnabled = _class.instanceMethodId(
    r'pulseEnabled',
    r'()Ljava/lang/Boolean;',
  );

  static final _pulseEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Boolean pulseEnabled()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean pulseEnabled() {
    return _pulseEnabled(
            reference.pointer, _id_pulseEnabled as jni.JMethodIDPtr)
        .object(const jni.JBooleanType());
  }

  static final _id_pulseFadeEnabled = _class.instanceMethodId(
    r'pulseFadeEnabled',
    r'()Ljava/lang/Boolean;',
  );

  static final _pulseFadeEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Boolean pulseFadeEnabled()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean pulseFadeEnabled() {
    return _pulseFadeEnabled(
            reference.pointer, _id_pulseFadeEnabled as jni.JMethodIDPtr)
        .object(const jni.JBooleanType());
  }

  static final _id_pulseColor = _class.instanceMethodId(
    r'pulseColor',
    r'()Ljava/lang/Integer;',
  );

  static final _pulseColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Integer pulseColor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JInteger pulseColor() {
    return _pulseColor(reference.pointer, _id_pulseColor as jni.JMethodIDPtr)
        .object(const jni.JIntegerType());
  }

  static final _id_pulseSingleDuration = _class.instanceMethodId(
    r'pulseSingleDuration',
    r'()F',
  );

  static final _pulseSingleDuration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public float pulseSingleDuration()`
  double pulseSingleDuration() {
    return _pulseSingleDuration(
            reference.pointer, _id_pulseSingleDuration as jni.JMethodIDPtr)
        .float;
  }

  static final _id_pulseMaxRadius = _class.instanceMethodId(
    r'pulseMaxRadius',
    r'()F',
  );

  static final _pulseMaxRadius = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public float pulseMaxRadius()`
  double pulseMaxRadius() {
    return _pulseMaxRadius(
            reference.pointer, _id_pulseMaxRadius as jni.JMethodIDPtr)
        .float;
  }

  static final _id_pulseAlpha = _class.instanceMethodId(
    r'pulseAlpha',
    r'()F',
  );

  static final _pulseAlpha = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public float pulseAlpha()`
  double pulseAlpha() {
    return _pulseAlpha(reference.pointer, _id_pulseAlpha as jni.JMethodIDPtr)
        .float;
  }

  static final _id_pulseInterpolator = _class.instanceMethodId(
    r'pulseInterpolator',
    r'()Landroid/view/animation/Interpolator;',
  );

  static final _pulseInterpolator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public android.view.animation.Interpolator pulseInterpolator()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject pulseInterpolator() {
    return _pulseInterpolator(
            reference.pointer, _id_pulseInterpolator as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_new1 = _class.constructorId(
    r'(Landroid/os/Parcel;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `protected void <init>(android.os.Parcel parcel)`
  /// The returned object must be released after use, by calling the [release] method.
  factory LocationComponentOptions.new1(
    jni.JObject parcel,
  ) {
    return LocationComponentOptions.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            parcel.reference.pointer)
        .reference);
  }
}

final class $LocationComponentOptionsType
    extends jni.JObjType<LocationComponentOptions> {
  const $LocationComponentOptionsType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/location/LocationComponentOptions;';

  @override
  LocationComponentOptions fromReference(jni.JReference reference) =>
      LocationComponentOptions.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LocationComponentOptionsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LocationComponentOptionsType) &&
        other is $LocationComponentOptionsType;
  }
}
