// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../util/TileServerOptions.dart' as tileserveroptions_;

/// from: `org.maplibre.android.storage.FileSource$ResourceTransformCallback`
class FileSource_ResourceTransformCallback extends jni.JObject {
  @override
  late final jni.JObjType<FileSource_ResourceTransformCallback> $type = type;

  FileSource_ResourceTransformCallback.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/storage/FileSource$ResourceTransformCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $FileSource_ResourceTransformCallbackType();
  static final _id_onURL = _class.instanceMethodId(
    r'onURL',
    r'(ILjava/lang/String;)Ljava/lang/String;',
  );

  static final _onURL = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract java.lang.String onURL(int i, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString onURL(
    int i,
    jni.JString string,
  ) {
    return _onURL(reference.pointer, _id_onURL as jni.JMethodIDPtr, i,
            string.reference.pointer)
        .object(const jni.JStringType());
  }
}

final class $FileSource_ResourceTransformCallbackType
    extends jni.JObjType<FileSource_ResourceTransformCallback> {
  const $FileSource_ResourceTransformCallbackType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/storage/FileSource$ResourceTransformCallback;';

  @override
  FileSource_ResourceTransformCallback fromReference(
          jni.JReference reference) =>
      FileSource_ResourceTransformCallback.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FileSource_ResourceTransformCallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FileSource_ResourceTransformCallbackType) &&
        other is $FileSource_ResourceTransformCallbackType;
  }
}

/// from: `org.maplibre.android.storage.FileSource$ResourcesCachePathChangeCallback`
class FileSource_ResourcesCachePathChangeCallback extends jni.JObject {
  @override
  late final jni.JObjType<FileSource_ResourcesCachePathChangeCallback> $type =
      type;

  FileSource_ResourcesCachePathChangeCallback.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/storage/FileSource$ResourcesCachePathChangeCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $FileSource_ResourcesCachePathChangeCallbackType();
  static final _id_onSuccess = _class.instanceMethodId(
    r'onSuccess',
    r'(Ljava/lang/String;)V',
  );

  static final _onSuccess = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onSuccess(java.lang.String string)`
  void onSuccess(
    jni.JString string,
  ) {
    _onSuccess(reference.pointer, _id_onSuccess as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'(Ljava/lang/String;)V',
  );

  static final _onError = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public abstract void onError(java.lang.String string)`
  void onError(
    jni.JString string,
  ) {
    _onError(reference.pointer, _id_onError as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }
}

final class $FileSource_ResourcesCachePathChangeCallbackType
    extends jni.JObjType<FileSource_ResourcesCachePathChangeCallback> {
  const $FileSource_ResourcesCachePathChangeCallbackType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/storage/FileSource$ResourcesCachePathChangeCallback;';

  @override
  FileSource_ResourcesCachePathChangeCallback fromReference(
          jni.JReference reference) =>
      FileSource_ResourcesCachePathChangeCallback.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($FileSource_ResourcesCachePathChangeCallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($FileSource_ResourcesCachePathChangeCallbackType) &&
        other is $FileSource_ResourcesCachePathChangeCallbackType;
  }
}

/// from: `org.maplibre.android.storage.FileSource`
class FileSource extends jni.JObject {
  @override
  late final jni.JObjType<FileSource> $type = type;

  FileSource.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/storage/FileSource');

  /// The type which includes information such as the signature of this class.
  static const type = $FileSourceType();
  static final _id_getInstance = _class.staticMethodId(
    r'getInstance',
    r'(Landroid/content/Context;)Lorg/maplibre/android/storage/FileSource;',
  );

  static final _getInstance = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public org.maplibre.android.storage.FileSource getInstance(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static FileSource getInstance(
    jni.JObject context,
  ) {
    return _getInstance(_class.reference.pointer,
            _id_getInstance as jni.JMethodIDPtr, context.reference.pointer)
        .object(const $FileSourceType());
  }

  static final _id_isExternalStorageReadable = _class.staticMethodId(
    r'isExternalStorageReadable',
    r'()Z',
  );

  static final _isExternalStorageReadable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public boolean isExternalStorageReadable()`
  static bool isExternalStorageReadable() {
    return _isExternalStorageReadable(_class.reference.pointer,
            _id_isExternalStorageReadable as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_initializeFileDirsPaths = _class.staticMethodId(
    r'initializeFileDirsPaths',
    r'(Landroid/content/Context;)V',
  );

  static final _initializeFileDirsPaths = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public void initializeFileDirsPaths(android.content.Context context)`
  static void initializeFileDirsPaths(
    jni.JObject context,
  ) {
    _initializeFileDirsPaths(
            _class.reference.pointer,
            _id_initializeFileDirsPaths as jni.JMethodIDPtr,
            context.reference.pointer)
        .check();
  }

  static final _id_getResourcesCachePath = _class.staticMethodId(
    r'getResourcesCachePath',
    r'(Landroid/content/Context;)Ljava/lang/String;',
  );

  static final _getResourcesCachePath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public java.lang.String getResourcesCachePath(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString getResourcesCachePath(
    jni.JObject context,
  ) {
    return _getResourcesCachePath(
            _class.reference.pointer,
            _id_getResourcesCachePath as jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getInternalCachePath = _class.staticMethodId(
    r'getInternalCachePath',
    r'(Landroid/content/Context;)Ljava/lang/String;',
  );

  static final _getInternalCachePath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public java.lang.String getInternalCachePath(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString getInternalCachePath(
    jni.JObject context,
  ) {
    return _getInternalCachePath(
            _class.reference.pointer,
            _id_getInternalCachePath as jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_setResourcesCachePath = _class.staticMethodId(
    r'setResourcesCachePath',
    r'(Landroid/content/Context;Ljava/lang/String;Lorg/maplibre/android/storage/FileSource$ResourcesCachePathChangeCallback;)V',
  );

  static final _setResourcesCachePath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public void setResourcesCachePath(android.content.Context context, java.lang.String string, org.maplibre.android.storage.FileSource$ResourcesCachePathChangeCallback resourcesCachePathChangeCallback)`
  static void setResourcesCachePath(
    jni.JObject context,
    jni.JString string,
    FileSource_ResourcesCachePathChangeCallback
        resourcesCachePathChangeCallback,
  ) {
    _setResourcesCachePath(
            _class.reference.pointer,
            _id_setResourcesCachePath as jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer,
            resourcesCachePathChangeCallback.reference.pointer)
        .check();
  }

  static final _id_setResourcesCachePath1 = _class.staticMethodId(
    r'setResourcesCachePath',
    r'(Ljava/lang/String;Lorg/maplibre/android/storage/FileSource$ResourcesCachePathChangeCallback;)V',
  );

  static final _setResourcesCachePath1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public void setResourcesCachePath(java.lang.String string, org.maplibre.android.storage.FileSource$ResourcesCachePathChangeCallback resourcesCachePathChangeCallback)`
  static void setResourcesCachePath1(
    jni.JString string,
    FileSource_ResourcesCachePathChangeCallback
        resourcesCachePathChangeCallback,
  ) {
    _setResourcesCachePath1(
            _class.reference.pointer,
            _id_setResourcesCachePath1 as jni.JMethodIDPtr,
            string.reference.pointer,
            resourcesCachePathChangeCallback.reference.pointer)
        .check();
  }

  static final _id_setTileServerOptions = _class.instanceMethodId(
    r'setTileServerOptions',
    r'(Lorg/maplibre/android/util/TileServerOptions;)V',
  );

  static final _setTileServerOptions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public native void setTileServerOptions(org.maplibre.android.util.TileServerOptions tileServerOptions)`
  void setTileServerOptions(
    tileserveroptions_.TileServerOptions tileServerOptions,
  ) {
    _setTileServerOptions(
            reference.pointer,
            _id_setTileServerOptions as jni.JMethodIDPtr,
            tileServerOptions.reference.pointer)
        .check();
  }

  static final _id_isActivated = _class.instanceMethodId(
    r'isActivated',
    r'()Z',
  );

  static final _isActivated = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public native boolean isActivated()`
  bool isActivated() {
    return _isActivated(reference.pointer, _id_isActivated as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_activate = _class.instanceMethodId(
    r'activate',
    r'()V',
  );

  static final _activate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public native void activate()`
  void activate() {
    _activate(reference.pointer, _id_activate as jni.JMethodIDPtr).check();
  }

  static final _id_deactivate = _class.instanceMethodId(
    r'deactivate',
    r'()V',
  );

  static final _deactivate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public native void deactivate()`
  void deactivate() {
    _deactivate(reference.pointer, _id_deactivate as jni.JMethodIDPtr).check();
  }

  static final _id_setApiKey = _class.instanceMethodId(
    r'setApiKey',
    r'(Ljava/lang/String;)V',
  );

  static final _setApiKey = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public native void setApiKey(java.lang.String string)`
  void setApiKey(
    jni.JString string,
  ) {
    _setApiKey(reference.pointer, _id_setApiKey as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getApiKey = _class.instanceMethodId(
    r'getApiKey',
    r'()Ljava/lang/String;',
  );

  static final _getApiKey = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public native java.lang.String getApiKey()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getApiKey() {
    return _getApiKey(reference.pointer, _id_getApiKey as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setApiBaseUrl = _class.instanceMethodId(
    r'setApiBaseUrl',
    r'(Ljava/lang/String;)V',
  );

  static final _setApiBaseUrl = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public native void setApiBaseUrl(java.lang.String string)`
  void setApiBaseUrl(
    jni.JString string,
  ) {
    _setApiBaseUrl(reference.pointer, _id_setApiBaseUrl as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getApiBaseUrl = _class.instanceMethodId(
    r'getApiBaseUrl',
    r'()Ljava/lang/String;',
  );

  static final _getApiBaseUrl = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public native java.lang.String getApiBaseUrl()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getApiBaseUrl() {
    return _getApiBaseUrl(
            reference.pointer, _id_getApiBaseUrl as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setResourceTransform = _class.instanceMethodId(
    r'setResourceTransform',
    r'(Lorg/maplibre/android/storage/FileSource$ResourceTransformCallback;)V',
  );

  static final _setResourceTransform = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public native void setResourceTransform(org.maplibre.android.storage.FileSource$ResourceTransformCallback resourceTransformCallback)`
  void setResourceTransform(
    FileSource_ResourceTransformCallback resourceTransformCallback,
  ) {
    _setResourceTransform(
            reference.pointer,
            _id_setResourceTransform as jni.JMethodIDPtr,
            resourceTransformCallback.reference.pointer)
        .check();
  }

  static final _id_finalize = _class.instanceMethodId(
    r'finalize',
    r'()V',
  );

  static final _finalize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected native void finalize()`
  void finalize() {
    _finalize(reference.pointer, _id_finalize as jni.JMethodIDPtr).check();
  }
}

final class $FileSourceType extends jni.JObjType<FileSource> {
  const $FileSourceType();

  @override
  String get signature => r'Lorg/maplibre/android/storage/FileSource;';

  @override
  FileSource fromReference(jni.JReference reference) =>
      FileSource.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FileSourceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FileSourceType) && other is $FileSourceType;
  }
}
