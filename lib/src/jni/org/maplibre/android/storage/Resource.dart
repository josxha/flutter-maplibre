// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.storage.Resource$Kind`
class Resource_Kind extends jni.JObject {
  @override
  late final jni.JObjType<Resource_Kind> $type = type;

  Resource_Kind.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/storage/Resource$Kind');

  /// The type which includes information such as the signature of this class.
  static const type = $Resource_KindType();
}

final class $Resource_KindType extends jni.JObjType<Resource_Kind> {
  const $Resource_KindType();

  @override
  String get signature => r'Lorg/maplibre/android/storage/Resource$Kind;';

  @override
  Resource_Kind fromReference(jni.JReference reference) =>
      Resource_Kind.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Resource_KindType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Resource_KindType) &&
        other is $Resource_KindType;
  }
}

/// from: `org.maplibre.android.storage.Resource`
class Resource extends jni.JObject {
  @override
  late final jni.JObjType<Resource> $type = type;

  Resource.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/storage/Resource');

  /// The type which includes information such as the signature of this class.
  static const type = $ResourceType();

  /// from: `static public final int UNKNOWN`
  static const UNKNOWN = 0;

  /// from: `static public final int STYLE`
  static const STYLE = 1;

  /// from: `static public final int SOURCE`
  static const SOURCE = 2;

  /// from: `static public final int TILE`
  static const TILE = 3;

  /// from: `static public final int GLYPHS`
  static const GLYPHS = 4;

  /// from: `static public final int SPRITE_IMAGE`
  static const SPRITE_IMAGE = 5;

  /// from: `static public final int SPRITE_JSON`
  static const SPRITE_JSON = 6;
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Resource() {
    return Resource.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }
}

final class $ResourceType extends jni.JObjType<Resource> {
  const $ResourceType();

  @override
  String get signature => r'Lorg/maplibre/android/storage/Resource;';

  @override
  Resource fromReference(jni.JReference reference) =>
      Resource.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ResourceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ResourceType) && other is $ResourceType;
  }
}
