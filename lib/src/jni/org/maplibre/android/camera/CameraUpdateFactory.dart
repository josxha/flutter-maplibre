// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../geometry/LatLng.dart' as latlng_;

import '../geometry/LatLngBounds.dart' as latlngbounds_;

import '../maps/MapLibreMap.dart' as maplibremap_;

import 'CameraPosition.dart' as cameraposition_;

import 'CameraUpdate.dart' as cameraupdate_;

/// from: `org.maplibre.android.camera.CameraUpdateFactory$CameraBoundsUpdate`
class CameraUpdateFactory_CameraBoundsUpdate extends jni.JObject {
  @override
  late final jni.JObjType<CameraUpdateFactory_CameraBoundsUpdate> $type = type;

  CameraUpdateFactory_CameraBoundsUpdate.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/camera/CameraUpdateFactory$CameraBoundsUpdate');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraUpdateFactory_CameraBoundsUpdateType();
  static final _id_new0 = _class.constructorId(
    r'(Lorg/maplibre/android/geometry/LatLngBounds;Ljava/lang/Double;Ljava/lang/Double;[I)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(org.maplibre.android.geometry.LatLngBounds latLngBounds, java.lang.Double double, java.lang.Double double1, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory_CameraBoundsUpdate(
    latlngbounds_.LatLngBounds latLngBounds,
    jni.JDouble double,
    jni.JDouble double1,
    jni.JArray<jni.jint> is0,
  ) {
    return CameraUpdateFactory_CameraBoundsUpdate.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            latLngBounds.reference.pointer,
            double.reference.pointer,
            double1.reference.pointer,
            is0.reference.pointer)
        .reference);
  }

  static final _id_getBounds = _class.instanceMethodId(
    r'getBounds',
    r'()Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _getBounds = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds getBounds()`
  /// The returned object must be released after use, by calling the [release] method.
  latlngbounds_.LatLngBounds getBounds() {
    return _getBounds(reference.pointer, _id_getBounds as jni.JMethodIDPtr)
        .object(const latlngbounds_.$LatLngBoundsType());
  }

  static final _id_getPadding = _class.instanceMethodId(
    r'getPadding',
    r'()[I',
  );

  static final _getPadding = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final int[] getPadding()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> getPadding() {
    return _getPadding(reference.pointer, _id_getPadding as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_new1 = _class.constructorId(
    r'(Lorg/maplibre/android/geometry/LatLngBounds;Ljava/lang/Double;Ljava/lang/Double;IIII)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              int)>();

  /// from: `public void <init>(org.maplibre.android.geometry.LatLngBounds latLngBounds, java.lang.Double double, java.lang.Double double1, int i, int i1, int i2, int i3)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory_CameraBoundsUpdate.new1(
    latlngbounds_.LatLngBounds latLngBounds,
    jni.JDouble double,
    jni.JDouble double1,
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return CameraUpdateFactory_CameraBoundsUpdate.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            latLngBounds.reference.pointer,
            double.reference.pointer,
            double1.reference.pointer,
            i,
            i1,
            i2,
            i3)
        .reference);
  }

  static final _id_getCameraPosition = _class.instanceMethodId(
    r'getCameraPosition',
    r'(Lorg/maplibre/android/maps/MapLibreMap;)Lorg/maplibre/android/camera/CameraPosition;',
  );

  static final _getCameraPosition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.camera.CameraPosition getCameraPosition(org.maplibre.android.maps.MapLibreMap mapLibreMap)`
  /// The returned object must be released after use, by calling the [release] method.
  cameraposition_.CameraPosition getCameraPosition(
    maplibremap_.MapLibreMap mapLibreMap,
  ) {
    return _getCameraPosition(
            reference.pointer,
            _id_getCameraPosition as jni.JMethodIDPtr,
            mapLibreMap.reference.pointer)
        .object(const cameraposition_.$CameraPositionType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $CameraUpdateFactory_CameraBoundsUpdateType
    extends jni.JObjType<CameraUpdateFactory_CameraBoundsUpdate> {
  const $CameraUpdateFactory_CameraBoundsUpdateType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$CameraBoundsUpdate;';

  @override
  CameraUpdateFactory_CameraBoundsUpdate fromReference(
          jni.JReference reference) =>
      CameraUpdateFactory_CameraBoundsUpdate.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraUpdateFactory_CameraBoundsUpdateType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraUpdateFactory_CameraBoundsUpdateType) &&
        other is $CameraUpdateFactory_CameraBoundsUpdateType;
  }
}

/// from: `org.maplibre.android.camera.CameraUpdateFactory$CameraPositionUpdate`
class CameraUpdateFactory_CameraPositionUpdate extends jni.JObject {
  @override
  late final jni.JObjType<CameraUpdateFactory_CameraPositionUpdate> $type =
      type;

  CameraUpdateFactory_CameraPositionUpdate.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/camera/CameraUpdateFactory$CameraPositionUpdate');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraUpdateFactory_CameraPositionUpdateType();
  static final _id_new0 = _class.constructorId(
    r'(DLorg/maplibre/android/geometry/LatLng;DD[D)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Double,
                        ffi.Pointer<ffi.Void>,
                        ffi.Double,
                        ffi.Double,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              double,
              ffi.Pointer<ffi.Void>,
              double,
              double,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(double d, org.maplibre.android.geometry.LatLng latLng, double d1, double d2, double[] ds)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory_CameraPositionUpdate(
    double d,
    latlng_.LatLng latLng,
    double d1,
    double d2,
    jni.JArray<jni.jdouble> ds,
  ) {
    return CameraUpdateFactory_CameraPositionUpdate.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            d,
            latLng.reference.pointer,
            d1,
            d2,
            ds.reference.pointer)
        .reference);
  }

  static final _id_getBearing = _class.instanceMethodId(
    r'getBearing',
    r'()D',
  );

  static final _getBearing = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final double getBearing()`
  double getBearing() {
    return _getBearing(reference.pointer, _id_getBearing as jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getTarget = _class.instanceMethodId(
    r'getTarget',
    r'()Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _getTarget = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.geometry.LatLng getTarget()`
  /// The returned object must be released after use, by calling the [release] method.
  latlng_.LatLng getTarget() {
    return _getTarget(reference.pointer, _id_getTarget as jni.JMethodIDPtr)
        .object(const latlng_.$LatLngType());
  }

  static final _id_getTilt = _class.instanceMethodId(
    r'getTilt',
    r'()D',
  );

  static final _getTilt = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final double getTilt()`
  double getTilt() {
    return _getTilt(reference.pointer, _id_getTilt as jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getZoom = _class.instanceMethodId(
    r'getZoom',
    r'()D',
  );

  static final _getZoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final double getZoom()`
  double getZoom() {
    return _getZoom(reference.pointer, _id_getZoom as jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getPadding = _class.instanceMethodId(
    r'getPadding',
    r'()[D',
  );

  static final _getPadding = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final double[] getPadding()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jdouble> getPadding() {
    return _getPadding(reference.pointer, _id_getPadding as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.jdoubleType()));
  }

  static final _id_getCameraPosition = _class.instanceMethodId(
    r'getCameraPosition',
    r'(Lorg/maplibre/android/maps/MapLibreMap;)Lorg/maplibre/android/camera/CameraPosition;',
  );

  static final _getCameraPosition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.camera.CameraPosition getCameraPosition(org.maplibre.android.maps.MapLibreMap mapLibreMap)`
  /// The returned object must be released after use, by calling the [release] method.
  cameraposition_.CameraPosition getCameraPosition(
    maplibremap_.MapLibreMap mapLibreMap,
  ) {
    return _getCameraPosition(
            reference.pointer,
            _id_getCameraPosition as jni.JMethodIDPtr,
            mapLibreMap.reference.pointer)
        .object(const cameraposition_.$CameraPositionType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $CameraUpdateFactory_CameraPositionUpdateType
    extends jni.JObjType<CameraUpdateFactory_CameraPositionUpdate> {
  const $CameraUpdateFactory_CameraPositionUpdateType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$CameraPositionUpdate;';

  @override
  CameraUpdateFactory_CameraPositionUpdate fromReference(
          jni.JReference reference) =>
      CameraUpdateFactory_CameraPositionUpdate.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraUpdateFactory_CameraPositionUpdateType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CameraUpdateFactory_CameraPositionUpdateType) &&
        other is $CameraUpdateFactory_CameraPositionUpdateType;
  }
}

/// from: `org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate$Companion`
class CameraUpdateFactory_ZoomUpdate_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CameraUpdateFactory_ZoomUpdate_Companion> $type =
      type;

  CameraUpdateFactory_ZoomUpdate_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraUpdateFactory_ZoomUpdate_CompanionType();
  static final _id_new0 = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory_ZoomUpdate_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CameraUpdateFactory_ZoomUpdate_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $CameraUpdateFactory_ZoomUpdate_CompanionType
    extends jni.JObjType<CameraUpdateFactory_ZoomUpdate_Companion> {
  const $CameraUpdateFactory_ZoomUpdate_CompanionType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Companion;';

  @override
  CameraUpdateFactory_ZoomUpdate_Companion fromReference(
          jni.JReference reference) =>
      CameraUpdateFactory_ZoomUpdate_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraUpdateFactory_ZoomUpdate_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CameraUpdateFactory_ZoomUpdate_CompanionType) &&
        other is $CameraUpdateFactory_ZoomUpdate_CompanionType;
  }
}

/// from: `org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate$Type`
class CameraUpdateFactory_ZoomUpdate_Type extends jni.JObject {
  @override
  late final jni.JObjType<CameraUpdateFactory_ZoomUpdate_Type> $type = type;

  CameraUpdateFactory_ZoomUpdate_Type.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Type');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraUpdateFactory_ZoomUpdate_TypeType();

  /// Maps a specific port to the implemented interface.
  static final Map<int, $CameraUpdateFactory_ZoomUpdate_TypeImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory CameraUpdateFactory_ZoomUpdate_Type.implement(
    $CameraUpdateFactory_ZoomUpdate_TypeImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = CameraUpdateFactory_ZoomUpdate_Type.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate$Type',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $CameraUpdateFactory_ZoomUpdate_TypeImpl {
  factory $CameraUpdateFactory_ZoomUpdate_TypeImpl() =
      _$CameraUpdateFactory_ZoomUpdate_TypeImpl;
}

class _$CameraUpdateFactory_ZoomUpdate_TypeImpl
    implements $CameraUpdateFactory_ZoomUpdate_TypeImpl {
  _$CameraUpdateFactory_ZoomUpdate_TypeImpl();
}

final class $CameraUpdateFactory_ZoomUpdate_TypeType
    extends jni.JObjType<CameraUpdateFactory_ZoomUpdate_Type> {
  const $CameraUpdateFactory_ZoomUpdate_TypeType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Type;';

  @override
  CameraUpdateFactory_ZoomUpdate_Type fromReference(jni.JReference reference) =>
      CameraUpdateFactory_ZoomUpdate_Type.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraUpdateFactory_ZoomUpdate_TypeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraUpdateFactory_ZoomUpdate_TypeType) &&
        other is $CameraUpdateFactory_ZoomUpdate_TypeType;
  }
}

/// from: `org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate`
class CameraUpdateFactory_ZoomUpdate extends jni.JObject {
  @override
  late final jni.JObjType<CameraUpdateFactory_ZoomUpdate> $type = type;

  CameraUpdateFactory_ZoomUpdate.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraUpdateFactory_ZoomUpdateType();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Companion;',
  );

  /// from: `static public final org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraUpdateFactory_ZoomUpdate_Companion get Companion => _id_Companion
      .get(_class, const $CameraUpdateFactory_ZoomUpdate_CompanionType());

  /// from: `static public final int ZOOM_IN`
  static const ZOOM_IN = 0;

  /// from: `static public final int ZOOM_OUT`
  static const ZOOM_OUT = 1;

  /// from: `static public final int ZOOM_BY`
  static const ZOOM_BY = 2;

  /// from: `static public final int ZOOM_TO`
  static const ZOOM_TO = 3;

  /// from: `static public final int ZOOM_TO_POINT`
  static const ZOOM_TO_POINT = 4;
  static final _id_getType = _class.instanceMethodId(
    r'getType',
    r'()I',
  );

  static final _getType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final int getType()`
  int getType() {
    return _getType(reference.pointer, _id_getType as jni.JMethodIDPtr).integer;
  }

  static final _id_getZoom = _class.instanceMethodId(
    r'getZoom',
    r'()D',
  );

  static final _getZoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final double getZoom()`
  double getZoom() {
    return _getZoom(reference.pointer, _id_getZoom as jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getX = _class.instanceMethodId(
    r'getX',
    r'()F',
  );

  static final _getX = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final float getX()`
  double getX() {
    return _getX(reference.pointer, _id_getX as jni.JMethodIDPtr).float;
  }

  static final _id_getY = _class.instanceMethodId(
    r'getY',
    r'()F',
  );

  static final _getY = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final float getY()`
  double getY() {
    return _getY(reference.pointer, _id_getY as jni.JMethodIDPtr).float;
  }

  static final _id_new0 = _class.constructorId(
    r'(I)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `public void <init>(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory_ZoomUpdate(
    int i,
  ) {
    return CameraUpdateFactory_ZoomUpdate.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr, i)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(ID)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32, ffi.Double)>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, double)>();

  /// from: `public void <init>(int i, double d)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory_ZoomUpdate.new1(
    int i,
    double d,
  ) {
    return CameraUpdateFactory_ZoomUpdate.fromReference(
        _new1(_class.reference.pointer, _id_new1 as jni.JMethodIDPtr, i, d)
            .reference);
  }

  static final _id_new2 = _class.constructorId(
    r'(DFF)V',
  );

  static final _new2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Double, ffi.Double, ffi.Double)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              double, double, double)>();

  /// from: `public void <init>(double d, float f, float f1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory_ZoomUpdate.new2(
    double d,
    double f,
    double f1,
  ) {
    return CameraUpdateFactory_ZoomUpdate.fromReference(
        _new2(_class.reference.pointer, _id_new2 as jni.JMethodIDPtr, d, f, f1)
            .reference);
  }

  static final _id_getCameraPosition = _class.instanceMethodId(
    r'getCameraPosition',
    r'(Lorg/maplibre/android/maps/MapLibreMap;)Lorg/maplibre/android/camera/CameraPosition;',
  );

  static final _getCameraPosition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public org.maplibre.android.camera.CameraPosition getCameraPosition(org.maplibre.android.maps.MapLibreMap mapLibreMap)`
  /// The returned object must be released after use, by calling the [release] method.
  cameraposition_.CameraPosition getCameraPosition(
    maplibremap_.MapLibreMap mapLibreMap,
  ) {
    return _getCameraPosition(
            reference.pointer,
            _id_getCameraPosition as jni.JMethodIDPtr,
            mapLibreMap.reference.pointer)
        .object(const cameraposition_.$CameraPositionType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $CameraUpdateFactory_ZoomUpdateType
    extends jni.JObjType<CameraUpdateFactory_ZoomUpdate> {
  const $CameraUpdateFactory_ZoomUpdateType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate;';

  @override
  CameraUpdateFactory_ZoomUpdate fromReference(jni.JReference reference) =>
      CameraUpdateFactory_ZoomUpdate.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraUpdateFactory_ZoomUpdateType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraUpdateFactory_ZoomUpdateType) &&
        other is $CameraUpdateFactory_ZoomUpdateType;
  }
}

/// from: `org.maplibre.android.camera.CameraUpdateFactory`
class CameraUpdateFactory extends jni.JObject {
  @override
  late final jni.JObjType<CameraUpdateFactory> $type = type;

  CameraUpdateFactory.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/camera/CameraUpdateFactory');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraUpdateFactoryType();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Lorg/maplibre/android/camera/CameraUpdateFactory;',
  );

  /// from: `static public final org.maplibre.android.camera.CameraUpdateFactory INSTANCE`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraUpdateFactory get INSTANCE =>
      _id_INSTANCE.get(_class, const $CameraUpdateFactoryType());

  static final _id_newCameraPosition = _class.staticMethodId(
    r'newCameraPosition',
    r'(Lorg/maplibre/android/camera/CameraPosition;)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newCameraPosition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newCameraPosition(org.maplibre.android.camera.CameraPosition cameraPosition)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate newCameraPosition(
    cameraposition_.CameraPosition cameraPosition,
  ) {
    return _newCameraPosition(
            _class.reference.pointer,
            _id_newCameraPosition as jni.JMethodIDPtr,
            cameraPosition.reference.pointer)
        .object(const cameraupdate_.$CameraUpdateType());
  }

  static final _id_newLatLng = _class.staticMethodId(
    r'newLatLng',
    r'(Lorg/maplibre/android/geometry/LatLng;)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLng = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLng(org.maplibre.android.geometry.LatLng latLng)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate newLatLng(
    latlng_.LatLng latLng,
  ) {
    return _newLatLng(_class.reference.pointer,
            _id_newLatLng as jni.JMethodIDPtr, latLng.reference.pointer)
        .object(const cameraupdate_.$CameraUpdateType());
  }

  static final _id_newLatLngBounds = _class.staticMethodId(
    r'newLatLngBounds',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;I)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngBounds = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngBounds(org.maplibre.android.geometry.LatLngBounds latLngBounds, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate newLatLngBounds(
    latlngbounds_.LatLngBounds latLngBounds,
    int i,
  ) {
    return _newLatLngBounds(
            _class.reference.pointer,
            _id_newLatLngBounds as jni.JMethodIDPtr,
            latLngBounds.reference.pointer,
            i)
        .object(const cameraupdate_.$CameraUpdateType());
  }

  static final _id_newLatLngBounds1 = _class.staticMethodId(
    r'newLatLngBounds',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;DDI)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngBounds1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Double,
                        ffi.Double,
                        $Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, double, double, int)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngBounds(org.maplibre.android.geometry.LatLngBounds latLngBounds, double d, double d1, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate newLatLngBounds1(
    latlngbounds_.LatLngBounds latLngBounds,
    double d,
    double d1,
    int i,
  ) {
    return _newLatLngBounds1(
            _class.reference.pointer,
            _id_newLatLngBounds1 as jni.JMethodIDPtr,
            latLngBounds.reference.pointer,
            d,
            d1,
            i)
        .object(const cameraupdate_.$CameraUpdateType());
  }

  static final _id_newLatLngBounds2 = _class.staticMethodId(
    r'newLatLngBounds',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;IIII)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngBounds2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int, int)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngBounds(org.maplibre.android.geometry.LatLngBounds latLngBounds, int i, int i1, int i2, int i3)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate newLatLngBounds2(
    latlngbounds_.LatLngBounds latLngBounds,
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return _newLatLngBounds2(
            _class.reference.pointer,
            _id_newLatLngBounds2 as jni.JMethodIDPtr,
            latLngBounds.reference.pointer,
            i,
            i1,
            i2,
            i3)
        .object(const cameraupdate_.$CameraUpdateType());
  }

  static final _id_newLatLngBounds3 = _class.staticMethodId(
    r'newLatLngBounds',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;DDIIII)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngBounds3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Double,
                        ffi.Double,
                        $Int32,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, double, double, int, int, int, int)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngBounds(org.maplibre.android.geometry.LatLngBounds latLngBounds, double d, double d1, int i, int i1, int i2, int i3)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate newLatLngBounds3(
    latlngbounds_.LatLngBounds latLngBounds,
    double d,
    double d1,
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return _newLatLngBounds3(
            _class.reference.pointer,
            _id_newLatLngBounds3 as jni.JMethodIDPtr,
            latLngBounds.reference.pointer,
            d,
            d1,
            i,
            i1,
            i2,
            i3)
        .object(const cameraupdate_.$CameraUpdateType());
  }

  static final _id_newLatLngZoom = _class.staticMethodId(
    r'newLatLngZoom',
    r'(Lorg/maplibre/android/geometry/LatLng;D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngZoom = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Double)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngZoom(org.maplibre.android.geometry.LatLng latLng, double d)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate newLatLngZoom(
    latlng_.LatLng latLng,
    double d,
  ) {
    return _newLatLngZoom(_class.reference.pointer,
            _id_newLatLngZoom as jni.JMethodIDPtr, latLng.reference.pointer, d)
        .object(const cameraupdate_.$CameraUpdateType());
  }

  static final _id_newLatLngPadding = _class.staticMethodId(
    r'newLatLngPadding',
    r'(Lorg/maplibre/android/geometry/LatLng;DDDD)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngPadding = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Double,
                        ffi.Double,
                        ffi.Double,
                        ffi.Double
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, double, double, double, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngPadding(org.maplibre.android.geometry.LatLng latLng, double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate newLatLngPadding(
    latlng_.LatLng latLng,
    double d,
    double d1,
    double d2,
    double d3,
  ) {
    return _newLatLngPadding(
            _class.reference.pointer,
            _id_newLatLngPadding as jni.JMethodIDPtr,
            latLng.reference.pointer,
            d,
            d1,
            d2,
            d3)
        .object(const cameraupdate_.$CameraUpdateType());
  }

  static final _id_zoomBy = _class.staticMethodId(
    r'zoomBy',
    r'(DLandroid/graphics/Point;)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _zoomBy = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Double, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              double, ffi.Pointer<ffi.Void>)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate zoomBy(double d, android.graphics.Point point)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate zoomBy(
    double d,
    jni.JObject point,
  ) {
    return _zoomBy(_class.reference.pointer, _id_zoomBy as jni.JMethodIDPtr, d,
            point.reference.pointer)
        .object(const cameraupdate_.$CameraUpdateType());
  }

  static final _id_zoomBy1 = _class.staticMethodId(
    r'zoomBy',
    r'(D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _zoomBy1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Double,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate zoomBy(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate zoomBy1(
    double d,
  ) {
    return _zoomBy1(
            _class.reference.pointer, _id_zoomBy1 as jni.JMethodIDPtr, d)
        .object(const cameraupdate_.$CameraUpdateType());
  }

  static final _id_zoomIn = _class.staticMethodId(
    r'zoomIn',
    r'()Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _zoomIn = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate zoomIn()`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate zoomIn() {
    return _zoomIn(_class.reference.pointer, _id_zoomIn as jni.JMethodIDPtr)
        .object(const cameraupdate_.$CameraUpdateType());
  }

  static final _id_zoomOut = _class.staticMethodId(
    r'zoomOut',
    r'()Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _zoomOut = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate zoomOut()`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate zoomOut() {
    return _zoomOut(_class.reference.pointer, _id_zoomOut as jni.JMethodIDPtr)
        .object(const cameraupdate_.$CameraUpdateType());
  }

  static final _id_zoomTo = _class.staticMethodId(
    r'zoomTo',
    r'(D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _zoomTo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Double,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate zoomTo(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate zoomTo(
    double d,
  ) {
    return _zoomTo(_class.reference.pointer, _id_zoomTo as jni.JMethodIDPtr, d)
        .object(const cameraupdate_.$CameraUpdateType());
  }

  static final _id_bearingTo = _class.staticMethodId(
    r'bearingTo',
    r'(D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _bearingTo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Double,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate bearingTo(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate bearingTo(
    double d,
  ) {
    return _bearingTo(
            _class.reference.pointer, _id_bearingTo as jni.JMethodIDPtr, d)
        .object(const cameraupdate_.$CameraUpdateType());
  }

  static final _id_tiltTo = _class.staticMethodId(
    r'tiltTo',
    r'(D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _tiltTo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Double,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate tiltTo(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate tiltTo(
    double d,
  ) {
    return _tiltTo(_class.reference.pointer, _id_tiltTo as jni.JMethodIDPtr, d)
        .object(const cameraupdate_.$CameraUpdateType());
  }

  static final _id_paddingTo = _class.staticMethodId(
    r'paddingTo',
    r'([D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _paddingTo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate paddingTo(double[] ds)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate paddingTo(
    jni.JArray<jni.jdouble> ds,
  ) {
    return _paddingTo(_class.reference.pointer,
            _id_paddingTo as jni.JMethodIDPtr, ds.reference.pointer)
        .object(const cameraupdate_.$CameraUpdateType());
  }

  static final _id_paddingTo1 = _class.staticMethodId(
    r'paddingTo',
    r'(DDDD)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _paddingTo1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Double,
                        ffi.Double,
                        ffi.Double,
                        ffi.Double
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              double, double, double, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate paddingTo(double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate paddingTo1(
    double d,
    double d1,
    double d2,
    double d3,
  ) {
    return _paddingTo1(_class.reference.pointer,
            _id_paddingTo1 as jni.JMethodIDPtr, d, d1, d2, d3)
        .object(const cameraupdate_.$CameraUpdateType());
  }
}

final class $CameraUpdateFactoryType extends jni.JObjType<CameraUpdateFactory> {
  const $CameraUpdateFactoryType();

  @override
  String get signature => r'Lorg/maplibre/android/camera/CameraUpdateFactory;';

  @override
  CameraUpdateFactory fromReference(jni.JReference reference) =>
      CameraUpdateFactory.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraUpdateFactoryType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraUpdateFactoryType) &&
        other is $CameraUpdateFactoryType;
  }
}
