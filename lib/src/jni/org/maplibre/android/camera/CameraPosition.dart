// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../geometry/LatLng.dart' as latlng_;

import 'CameraUpdateFactory.dart' as cameraupdatefactory_;

/// from: `org.maplibre.android.camera.CameraPosition$Builder`
class CameraPosition_Builder extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CameraPosition_Builder> $type;

  @_$jni.internal
  CameraPosition_Builder.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/camera/CameraPosition$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraPosition_Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition_Builder() {
    return CameraPosition_Builder.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Lorg/maplibre/android/camera/CameraPosition;)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(org.maplibre.android.camera.CameraPosition cameraPosition)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition_Builder.new$1(
    CameraPosition cameraPosition,
  ) {
    return CameraPosition_Builder.fromReference(_new$1(_class.reference.pointer,
            _id_new$1 as _$jni.JMethodIDPtr, cameraPosition.reference.pointer)
        .reference);
  }

  static final _id_new$2 = _class.constructorId(
    r'(Landroid/content/res/TypedArray;)V',
  );

  static final _new$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.content.res.TypedArray typedArray)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition_Builder.new$2(
    _$jni.JObject typedArray,
  ) {
    return CameraPosition_Builder.fromReference(_new$2(_class.reference.pointer,
            _id_new$2 as _$jni.JMethodIDPtr, typedArray.reference.pointer)
        .reference);
  }

  static final _id_new$3 = _class.constructorId(
    r'(Lorg/maplibre/android/camera/CameraUpdateFactory$CameraPositionUpdate;)V',
  );

  static final _new$3 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(org.maplibre.android.camera.CameraUpdateFactory$CameraPositionUpdate cameraPositionUpdate)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition_Builder.new$3(
    cameraupdatefactory_.CameraUpdateFactory_CameraPositionUpdate
        cameraPositionUpdate,
  ) {
    return CameraPosition_Builder.fromReference(_new$3(
            _class.reference.pointer,
            _id_new$3 as _$jni.JMethodIDPtr,
            cameraPositionUpdate.reference.pointer)
        .reference);
  }

  static final _id_new$4 = _class.constructorId(
    r'(Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate;)V',
  );

  static final _new$4 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate zoomUpdate)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition_Builder.new$4(
    cameraupdatefactory_.CameraUpdateFactory_ZoomUpdate zoomUpdate,
  ) {
    return CameraPosition_Builder.fromReference(_new$4(_class.reference.pointer,
            _id_new$4 as _$jni.JMethodIDPtr, zoomUpdate.reference.pointer)
        .reference);
  }

  static final _id_bearing = _class.instanceMethodId(
    r'bearing',
    r'(D)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _bearing = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder bearing(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition_Builder bearing(
    double d,
  ) {
    return _bearing(reference.pointer, _id_bearing as _$jni.JMethodIDPtr, d)
        .object(const $CameraPosition_Builder$Type());
  }

  static final _id_target = _class.instanceMethodId(
    r'target',
    r'(Lorg/maplibre/android/geometry/LatLng;)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _target = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder target(org.maplibre.android.geometry.LatLng latLng)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition_Builder target(
    latlng_.LatLng latLng,
  ) {
    return _target(reference.pointer, _id_target as _$jni.JMethodIDPtr,
            latLng.reference.pointer)
        .object(const $CameraPosition_Builder$Type());
  }

  static final _id_tilt = _class.instanceMethodId(
    r'tilt',
    r'(D)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _tilt = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder tilt(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition_Builder tilt(
    double d,
  ) {
    return _tilt(reference.pointer, _id_tilt as _$jni.JMethodIDPtr, d)
        .object(const $CameraPosition_Builder$Type());
  }

  static final _id_zoom = _class.instanceMethodId(
    r'zoom',
    r'(D)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _zoom = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder zoom(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition_Builder zoom(
    double d,
  ) {
    return _zoom(reference.pointer, _id_zoom as _$jni.JMethodIDPtr, d)
        .object(const $CameraPosition_Builder$Type());
  }

  static final _id_padding = _class.instanceMethodId(
    r'padding',
    r'([D)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _padding = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder padding(double[] ds)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition_Builder padding(
    _$jni.JArray<_$jni.jdouble> ds,
  ) {
    return _padding(reference.pointer, _id_padding as _$jni.JMethodIDPtr,
            ds.reference.pointer)
        .object(const $CameraPosition_Builder$Type());
  }

  static final _id_padding$1 = _class.instanceMethodId(
    r'padding',
    r'(DDDD)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _padding$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Double,
                        _$jni.Double,
                        _$jni.Double,
                        _$jni.Double
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, double, double, double, double)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder padding(double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition_Builder padding$1(
    double d,
    double d1,
    double d2,
    double d3,
  ) {
    return _padding$1(reference.pointer, _id_padding$1 as _$jni.JMethodIDPtr, d,
            d1, d2, d3)
        .object(const $CameraPosition_Builder$Type());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Lorg/maplibre/android/camera/CameraPosition;',
  );

  static final _build = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.camera.CameraPosition build()`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition build() {
    return _build(reference.pointer, _id_build as _$jni.JMethodIDPtr)
        .object(const $CameraPosition$Type());
  }
}

final class $CameraPosition_Builder$Type
    extends _$jni.JObjType<CameraPosition_Builder> {
  @_$jni.internal
  const $CameraPosition_Builder$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraPosition$Builder;';

  @_$jni.internal
  @_$core.override
  CameraPosition_Builder fromReference(_$jni.JReference reference) =>
      CameraPosition_Builder.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CameraPosition_Builder$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraPosition_Builder$Type) &&
        other is $CameraPosition_Builder$Type;
  }
}

/// from: `org.maplibre.android.camera.CameraPosition$Companion`
class CameraPosition_Companion extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CameraPosition_Companion> $type;

  @_$jni.internal
  CameraPosition_Companion.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/camera/CameraPosition$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraPosition_Companion$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition_Companion(
    _$jni.JObject defaultConstructorMarker,
  ) {
    return CameraPosition_Companion.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $CameraPosition_Companion$Type
    extends _$jni.JObjType<CameraPosition_Companion> {
  @_$jni.internal
  const $CameraPosition_Companion$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraPosition$Companion;';

  @_$jni.internal
  @_$core.override
  CameraPosition_Companion fromReference(_$jni.JReference reference) =>
      CameraPosition_Companion.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CameraPosition_Companion$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraPosition_Companion$Type) &&
        other is $CameraPosition_Companion$Type;
  }
}

/// from: `org.maplibre.android.camera.CameraPosition`
class CameraPosition extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CameraPosition> $type;

  @_$jni.internal
  CameraPosition.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/camera/CameraPosition');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraPosition$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lorg/maplibre/android/camera/CameraPosition$Companion;',
  );

  /// from: `static public final org.maplibre.android.camera.CameraPosition$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraPosition_Companion get Companion =>
      _id_Companion.get(_class, const $CameraPosition_Companion$Type());

  static final _id_target = _class.instanceFieldId(
    r'target',
    r'Lorg/maplibre/android/geometry/LatLng;',
  );

  /// from: `public final org.maplibre.android.geometry.LatLng target`
  /// The returned object must be released after use, by calling the [release] method.
  latlng_.LatLng get target =>
      _id_target.get(this, const latlng_.$LatLng$Type());

  static final _id_zoom = _class.instanceFieldId(
    r'zoom',
    r'D',
  );

  /// from: `public final double zoom`
  double get zoom => _id_zoom.get(this, const _$jni.jdoubleType());

  static final _id_tilt = _class.instanceFieldId(
    r'tilt',
    r'D',
  );

  /// from: `public final double tilt`
  double get tilt => _id_tilt.get(this, const _$jni.jdoubleType());

  static final _id_bearing = _class.instanceFieldId(
    r'bearing',
    r'D',
  );

  /// from: `public final double bearing`
  double get bearing => _id_bearing.get(this, const _$jni.jdoubleType());

  static final _id_padding = _class.instanceFieldId(
    r'padding',
    r'[D',
  );

  /// from: `public final double[] padding`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.jdouble> get padding =>
      _id_padding.get(this, const _$jni.JArrayType(_$jni.jdoubleType()));

  static final _id_DEFAULT = _class.staticFieldId(
    r'DEFAULT',
    r'Lorg/maplibre/android/camera/CameraPosition;',
  );

  /// from: `static public final org.maplibre.android.camera.CameraPosition DEFAULT`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraPosition get DEFAULT =>
      _id_DEFAULT.get(_class, const $CameraPosition$Type());

  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const _$jni.JObjectType());

  static final _id_new$ = _class.constructorId(
    r'(Lorg/maplibre/android/geometry/LatLng;DDD[D)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Double,
                        _$jni.Double,
                        _$jni.Double,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              double,
              double,
              double,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(org.maplibre.android.geometry.LatLng latLng, double d, double d1, double d2, double[] ds)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition(
    latlng_.LatLng latLng,
    double d,
    double d1,
    double d2,
    _$jni.JArray<_$jni.jdouble> ds,
  ) {
    return CameraPosition.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            latLng.reference.pointer,
            d,
            d1,
            d2,
            ds.reference.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Lorg/maplibre/android/geometry/LatLng;DDD)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Double,
                        _$jni.Double,
                        _$jni.Double
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              double,
              double,
              double)>();

  /// from: `public void <init>(org.maplibre.android.geometry.LatLng latLng, double d, double d1, double d2)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition.new$1(
    latlng_.LatLng latLng,
    double d,
    double d1,
    double d2,
  ) {
    return CameraPosition.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as _$jni.JMethodIDPtr,
            latLng.reference.pointer,
            d,
            d1,
            d2)
        .reference);
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    _$jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as _$jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    _$jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as _$jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as _$jni.JMethodIDPtr)
        .integer;
  }
}

final class $CameraPosition$Type extends _$jni.JObjType<CameraPosition> {
  @_$jni.internal
  const $CameraPosition$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/camera/CameraPosition;';

  @_$jni.internal
  @_$core.override
  CameraPosition fromReference(_$jni.JReference reference) =>
      CameraPosition.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CameraPosition$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraPosition$Type) &&
        other is $CameraPosition$Type;
  }
}
