// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import '../geometry/LatLng.dart' as latlng_;

import 'CameraUpdateFactory.dart' as cameraupdatefactory_;

/// from: `org.maplibre.android.camera.CameraPosition$Builder`
class CameraPosition_Builder extends jni.JObject {
  @override
  late final jni.JObjType<CameraPosition_Builder> $type = type;

  CameraPosition_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/camera/CameraPosition$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraPosition_BuilderType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition_Builder() {
    return CameraPosition_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Lorg/maplibre/android/camera/CameraPosition;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(org.maplibre.android.camera.CameraPosition cameraPosition)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition_Builder.new1(
    CameraPosition cameraPosition,
  ) {
    return CameraPosition_Builder.fromReference(_new1(_class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr, cameraPosition.reference.pointer)
        .reference);
  }

  static final _id_new2 = _class.constructorId(
    r'(Landroid/content/res/TypedArray;)V',
  );

  static final _new2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(android.content.res.TypedArray typedArray)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition_Builder.new2(
    jni.JObject typedArray,
  ) {
    return CameraPosition_Builder.fromReference(_new2(_class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr, typedArray.reference.pointer)
        .reference);
  }

  static final _id_new3 = _class.constructorId(
    r'(Lorg/maplibre/android/camera/CameraUpdateFactory$CameraPositionUpdate;)V',
  );

  static final _new3 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(org.maplibre.android.camera.CameraUpdateFactory$CameraPositionUpdate cameraPositionUpdate)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition_Builder.new3(
    cameraupdatefactory_.CameraUpdateFactory_CameraPositionUpdate
        cameraPositionUpdate,
  ) {
    return CameraPosition_Builder.fromReference(_new3(
            _class.reference.pointer,
            _id_new3 as jni.JMethodIDPtr,
            cameraPositionUpdate.reference.pointer)
        .reference);
  }

  static final _id_new4 = _class.constructorId(
    r'(Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate;)V',
  );

  static final _new4 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate zoomUpdate)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition_Builder.new4(
    cameraupdatefactory_.CameraUpdateFactory_ZoomUpdate zoomUpdate,
  ) {
    return CameraPosition_Builder.fromReference(_new4(_class.reference.pointer,
            _id_new4 as jni.JMethodIDPtr, zoomUpdate.reference.pointer)
        .reference);
  }

  static final _id_bearing = _class.instanceMethodId(
    r'bearing',
    r'(D)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _bearing = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder bearing(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition_Builder bearing(
    double d,
  ) {
    return _bearing(reference.pointer, _id_bearing as jni.JMethodIDPtr, d)
        .object(const $CameraPosition_BuilderType());
  }

  static final _id_target = _class.instanceMethodId(
    r'target',
    r'(Lorg/maplibre/android/geometry/LatLng;)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _target = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder target(org.maplibre.android.geometry.LatLng latLng)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition_Builder target(
    latlng_.LatLng latLng,
  ) {
    return _target(reference.pointer, _id_target as jni.JMethodIDPtr,
            latLng.reference.pointer)
        .object(const $CameraPosition_BuilderType());
  }

  static final _id_tilt = _class.instanceMethodId(
    r'tilt',
    r'(D)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _tilt = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder tilt(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition_Builder tilt(
    double d,
  ) {
    return _tilt(reference.pointer, _id_tilt as jni.JMethodIDPtr, d)
        .object(const $CameraPosition_BuilderType());
  }

  static final _id_zoom = _class.instanceMethodId(
    r'zoom',
    r'(D)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _zoom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Double,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, double)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder zoom(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition_Builder zoom(
    double d,
  ) {
    return _zoom(reference.pointer, _id_zoom as jni.JMethodIDPtr, d)
        .object(const $CameraPosition_BuilderType());
  }

  static final _id_padding = _class.instanceMethodId(
    r'padding',
    r'([D)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _padding = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder padding(double[] ds)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition_Builder padding(
    jni.JArray<jni.jdouble> ds,
  ) {
    return _padding(reference.pointer, _id_padding as jni.JMethodIDPtr,
            ds.reference.pointer)
        .object(const $CameraPosition_BuilderType());
  }

  static final _id_padding1 = _class.instanceMethodId(
    r'padding',
    r'(DDDD)Lorg/maplibre/android/camera/CameraPosition$Builder;',
  );

  static final _padding1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Double,
                        ffi.Double,
                        ffi.Double,
                        ffi.Double
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              double, double, double, double)>();

  /// from: `public final org.maplibre.android.camera.CameraPosition$Builder padding(double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition_Builder padding1(
    double d,
    double d1,
    double d2,
    double d3,
  ) {
    return _padding1(
            reference.pointer, _id_padding1 as jni.JMethodIDPtr, d, d1, d2, d3)
        .object(const $CameraPosition_BuilderType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Lorg/maplibre/android/camera/CameraPosition;',
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.camera.CameraPosition build()`
  /// The returned object must be released after use, by calling the [release] method.
  CameraPosition build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $CameraPositionType());
  }
}

final class $CameraPosition_BuilderType
    extends jni.JObjType<CameraPosition_Builder> {
  const $CameraPosition_BuilderType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraPosition$Builder;';

  @override
  CameraPosition_Builder fromReference(jni.JReference reference) =>
      CameraPosition_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraPosition_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraPosition_BuilderType) &&
        other is $CameraPosition_BuilderType;
  }
}

/// from: `org.maplibre.android.camera.CameraPosition$Companion`
class CameraPosition_Companion extends jni.JObject {
  @override
  late final jni.JObjType<CameraPosition_Companion> $type = type;

  CameraPosition_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/camera/CameraPosition$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraPosition_CompanionType();
  static final _id_new0 = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return CameraPosition_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $CameraPosition_CompanionType
    extends jni.JObjType<CameraPosition_Companion> {
  const $CameraPosition_CompanionType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraPosition$Companion;';

  @override
  CameraPosition_Companion fromReference(jni.JReference reference) =>
      CameraPosition_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraPosition_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraPosition_CompanionType) &&
        other is $CameraPosition_CompanionType;
  }
}

/// from: `org.maplibre.android.camera.CameraPosition`
class CameraPosition extends jni.JObject {
  @override
  late final jni.JObjType<CameraPosition> $type = type;

  CameraPosition.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/camera/CameraPosition');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraPositionType();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lorg/maplibre/android/camera/CameraPosition$Companion;',
  );

  /// from: `static public final org.maplibre.android.camera.CameraPosition$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraPosition_Companion get Companion =>
      _id_Companion.get(_class, const $CameraPosition_CompanionType());

  static final _id_target = _class.instanceFieldId(
    r'target',
    r'Lorg/maplibre/android/geometry/LatLng;',
  );

  /// from: `public final org.maplibre.android.geometry.LatLng target`
  /// The returned object must be released after use, by calling the [release] method.
  latlng_.LatLng get target =>
      _id_target.get(this, const latlng_.$LatLngType());

  static final _id_zoom = _class.instanceFieldId(
    r'zoom',
    r'D',
  );

  /// from: `public final double zoom`
  double get zoom => _id_zoom.get(this, const jni.jdoubleType());

  static final _id_tilt = _class.instanceFieldId(
    r'tilt',
    r'D',
  );

  /// from: `public final double tilt`
  double get tilt => _id_tilt.get(this, const jni.jdoubleType());

  static final _id_bearing = _class.instanceFieldId(
    r'bearing',
    r'D',
  );

  /// from: `public final double bearing`
  double get bearing => _id_bearing.get(this, const jni.jdoubleType());

  static final _id_padding = _class.instanceFieldId(
    r'padding',
    r'[D',
  );

  /// from: `public final double[] padding`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jdouble> get padding =>
      _id_padding.get(this, const jni.JArrayType(jni.jdoubleType()));

  static final _id_DEFAULT = _class.staticFieldId(
    r'DEFAULT',
    r'Lorg/maplibre/android/camera/CameraPosition;',
  );

  /// from: `static public final org.maplibre.android.camera.CameraPosition DEFAULT`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraPosition get DEFAULT =>
      _id_DEFAULT.get(_class, const $CameraPositionType());

  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  static final _id_new0 = _class.constructorId(
    r'(Lorg/maplibre/android/geometry/LatLng;DDD[D)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Double,
                        ffi.Double,
                        ffi.Double,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              double,
              double,
              double,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(org.maplibre.android.geometry.LatLng latLng, double d, double d1, double d2, double[] ds)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition(
    latlng_.LatLng latLng,
    double d,
    double d1,
    double d2,
    jni.JArray<jni.jdouble> ds,
  ) {
    return CameraPosition.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            latLng.reference.pointer,
            d,
            d1,
            d2,
            ds.reference.pointer)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Lorg/maplibre/android/geometry/LatLng;DDD)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Double,
                        ffi.Double,
                        ffi.Double
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, double, double, double)>();

  /// from: `public void <init>(org.maplibre.android.geometry.LatLng latLng, double d, double d1, double d2)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraPosition.new1(
    latlng_.LatLng latLng,
    double d,
    double d1,
    double d2,
  ) {
    return CameraPosition.fromReference(_new1(_class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr, latLng.reference.pointer, d, d1, d2)
        .reference);
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }
}

final class $CameraPositionType extends jni.JObjType<CameraPosition> {
  const $CameraPositionType();

  @override
  String get signature => r'Lorg/maplibre/android/camera/CameraPosition;';

  @override
  CameraPosition fromReference(jni.JReference reference) =>
      CameraPosition.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CameraPositionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraPositionType) &&
        other is $CameraPositionType;
  }
}
