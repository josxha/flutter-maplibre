// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `org.maplibre.android.utils.AnimatorUtils$OnAnimationEndListener`
class AnimatorUtils_OnAnimationEndListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<AnimatorUtils_OnAnimationEndListener> $type;

  @_$jni.internal
  AnimatorUtils_OnAnimationEndListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/utils/AnimatorUtils$OnAnimationEndListener');

  /// The type which includes information such as the signature of this class.
  static const type = $AnimatorUtils_OnAnimationEndListener$Type();
  static final _id_onAnimationEnd = _class.instanceMethodId(
    r'onAnimationEnd',
    r'()V',
  );

  static final _onAnimationEnd = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onAnimationEnd()`
  void onAnimationEnd() {
    _onAnimationEnd(reference.pointer, _id_onAnimationEnd as _$jni.JMethodIDPtr)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $AnimatorUtils_OnAnimationEndListener> _$impls =
      {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onAnimationEnd()V') {
        _$impls[$p]!.onAnimationEnd();
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $AnimatorUtils_OnAnimationEndListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.utils.AnimatorUtils$OnAnimationEndListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onAnimationEnd$async) r'onAnimationEnd()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory AnimatorUtils_OnAnimationEndListener.implement(
    $AnimatorUtils_OnAnimationEndListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return AnimatorUtils_OnAnimationEndListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract mixin class $AnimatorUtils_OnAnimationEndListener {
  factory $AnimatorUtils_OnAnimationEndListener({
    required void Function() onAnimationEnd,
    bool onAnimationEnd$async,
  }) = _$AnimatorUtils_OnAnimationEndListener;

  void onAnimationEnd();
  bool get onAnimationEnd$async => false;
}

class _$AnimatorUtils_OnAnimationEndListener
    implements $AnimatorUtils_OnAnimationEndListener {
  _$AnimatorUtils_OnAnimationEndListener({
    required void Function() onAnimationEnd,
    this.onAnimationEnd$async = false,
  }) : _onAnimationEnd = onAnimationEnd;

  final void Function() _onAnimationEnd;
  final bool onAnimationEnd$async;

  void onAnimationEnd() {
    return _onAnimationEnd();
  }
}

final class $AnimatorUtils_OnAnimationEndListener$Type
    extends _$jni.JObjType<AnimatorUtils_OnAnimationEndListener> {
  @_$jni.internal
  const $AnimatorUtils_OnAnimationEndListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/utils/AnimatorUtils$OnAnimationEndListener;';

  @_$jni.internal
  @_$core.override
  AnimatorUtils_OnAnimationEndListener fromReference(
          _$jni.JReference reference) =>
      AnimatorUtils_OnAnimationEndListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($AnimatorUtils_OnAnimationEndListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AnimatorUtils_OnAnimationEndListener$Type) &&
        other is $AnimatorUtils_OnAnimationEndListener$Type;
  }
}

/// from: `org.maplibre.android.utils.AnimatorUtils`
class AnimatorUtils extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<AnimatorUtils> $type;

  @_$jni.internal
  AnimatorUtils.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/utils/AnimatorUtils');

  /// The type which includes information such as the signature of this class.
  static const type = $AnimatorUtils$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory AnimatorUtils() {
    return AnimatorUtils.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_animate = _class.staticMethodId(
    r'animate',
    r'(Landroid/view/View;ILorg/maplibre/android/utils/AnimatorUtils$OnAnimationEndListener;)V',
  );

  static final _animate = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void animate(android.view.View view, int i, org.maplibre.android.utils.AnimatorUtils$OnAnimationEndListener onAnimationEndListener)`
  static void animate(
    _$jni.JObject view,
    int i,
    AnimatorUtils_OnAnimationEndListener onAnimationEndListener,
  ) {
    _animate(_class.reference.pointer, _id_animate as _$jni.JMethodIDPtr,
            view.reference.pointer, i, onAnimationEndListener.reference.pointer)
        .check();
  }

  static final _id_animate$1 = _class.staticMethodId(
    r'animate',
    r'(Landroid/view/View;IILorg/maplibre/android/utils/AnimatorUtils$OnAnimationEndListener;)V',
  );

  static final _animate$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void animate(android.view.View view, int i, int i1, org.maplibre.android.utils.AnimatorUtils$OnAnimationEndListener onAnimationEndListener)`
  static void animate$1(
    _$jni.JObject view,
    int i,
    int i1,
    AnimatorUtils_OnAnimationEndListener onAnimationEndListener,
  ) {
    _animate$1(
            _class.reference.pointer,
            _id_animate$1 as _$jni.JMethodIDPtr,
            view.reference.pointer,
            i,
            i1,
            onAnimationEndListener.reference.pointer)
        .check();
  }

  static final _id_animate$2 = _class.staticMethodId(
    r'animate',
    r'(Landroid/view/View;I)V',
  );

  static final _animate$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `static public void animate(android.view.View view, int i)`
  static void animate$2(
    _$jni.JObject view,
    int i,
  ) {
    _animate$2(_class.reference.pointer, _id_animate$2 as _$jni.JMethodIDPtr,
            view.reference.pointer, i)
        .check();
  }

  static final _id_animate$3 = _class.staticMethodId(
    r'animate',
    r'(Landroid/view/View;II)V',
  );

  static final _animate$3 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int, int)>();

  /// from: `static public void animate(android.view.View view, int i, int i1)`
  static void animate$3(
    _$jni.JObject view,
    int i,
    int i1,
  ) {
    _animate$3(_class.reference.pointer, _id_animate$3 as _$jni.JMethodIDPtr,
            view.reference.pointer, i, i1)
        .check();
  }

  static final _id_rotate = _class.staticMethodId(
    r'rotate',
    r'(Landroid/view/View;F)V',
  );

  static final _rotate = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Double
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, double)>();

  /// from: `static public void rotate(android.view.View view, float f)`
  static void rotate(
    _$jni.JObject view,
    double f,
  ) {
    _rotate(_class.reference.pointer, _id_rotate as _$jni.JMethodIDPtr,
            view.reference.pointer, f)
        .check();
  }

  static final _id_rotateBy = _class.staticMethodId(
    r'rotateBy',
    r'(Landroid/view/View;F)V',
  );

  static final _rotateBy = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Double
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, double)>();

  /// from: `static public void rotateBy(android.view.View view, float f)`
  static void rotateBy(
    _$jni.JObject view,
    double f,
  ) {
    _rotateBy(_class.reference.pointer, _id_rotateBy as _$jni.JMethodIDPtr,
            view.reference.pointer, f)
        .check();
  }

  static final _id_alpha = _class.staticMethodId(
    r'alpha',
    r'(Landroid/view/View;FLorg/maplibre/android/utils/AnimatorUtils$OnAnimationEndListener;)V',
  );

  static final _alpha = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Double,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              double,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void alpha(android.view.View view, float f, org.maplibre.android.utils.AnimatorUtils$OnAnimationEndListener onAnimationEndListener)`
  static void alpha(
    _$jni.JObject view,
    double f,
    AnimatorUtils_OnAnimationEndListener onAnimationEndListener,
  ) {
    _alpha(_class.reference.pointer, _id_alpha as _$jni.JMethodIDPtr,
            view.reference.pointer, f, onAnimationEndListener.reference.pointer)
        .check();
  }

  static final _id_alpha$1 = _class.staticMethodId(
    r'alpha',
    r'(Landroid/view/View;F)V',
  );

  static final _alpha$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Double
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, double)>();

  /// from: `static public void alpha(android.view.View view, float f)`
  static void alpha$1(
    _$jni.JObject view,
    double f,
  ) {
    _alpha$1(_class.reference.pointer, _id_alpha$1 as _$jni.JMethodIDPtr,
            view.reference.pointer, f)
        .check();
  }
}

final class $AnimatorUtils$Type extends _$jni.JObjType<AnimatorUtils> {
  @_$jni.internal
  const $AnimatorUtils$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/utils/AnimatorUtils;';

  @_$jni.internal
  @_$core.override
  AnimatorUtils fromReference(_$jni.JReference reference) =>
      AnimatorUtils.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($AnimatorUtils$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AnimatorUtils$Type) &&
        other is $AnimatorUtils$Type;
  }
}
