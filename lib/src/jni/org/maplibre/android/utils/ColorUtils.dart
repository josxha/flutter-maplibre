// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.utils.ColorUtils`
class ColorUtils extends jni.JObject {
  @override
  late final jni.JObjType<ColorUtils> $type = type;

  ColorUtils.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/utils/ColorUtils');

  /// The type which includes information such as the signature of this class.
  static const type = $ColorUtilsType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ColorUtils() {
    return ColorUtils.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getPrimaryColor = _class.staticMethodId(
    r'getPrimaryColor',
    r'(Landroid/content/Context;)I',
  );

  static final _getPrimaryColor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public int getPrimaryColor(android.content.Context context)`
  static int getPrimaryColor(
    jni.JObject context,
  ) {
    return _getPrimaryColor(_class.reference.pointer,
            _id_getPrimaryColor as jni.JMethodIDPtr, context.reference.pointer)
        .integer;
  }

  static final _id_getPrimaryDarkColor = _class.staticMethodId(
    r'getPrimaryDarkColor',
    r'(Landroid/content/Context;)I',
  );

  static final _getPrimaryDarkColor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public int getPrimaryDarkColor(android.content.Context context)`
  static int getPrimaryDarkColor(
    jni.JObject context,
  ) {
    return _getPrimaryDarkColor(
            _class.reference.pointer,
            _id_getPrimaryDarkColor as jni.JMethodIDPtr,
            context.reference.pointer)
        .integer;
  }

  static final _id_getAccentColor = _class.staticMethodId(
    r'getAccentColor',
    r'(Landroid/content/Context;)I',
  );

  static final _getAccentColor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public int getAccentColor(android.content.Context context)`
  static int getAccentColor(
    jni.JObject context,
  ) {
    return _getAccentColor(_class.reference.pointer,
            _id_getAccentColor as jni.JMethodIDPtr, context.reference.pointer)
        .integer;
  }

  static final _id_getSelector = _class.staticMethodId(
    r'getSelector',
    r'(I)Landroid/content/res/ColorStateList;',
  );

  static final _getSelector = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public android.content.res.ColorStateList getSelector(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getSelector(
    int i,
  ) {
    return _getSelector(
            _class.reference.pointer, _id_getSelector as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_setTintList = _class.staticMethodId(
    r'setTintList',
    r'(Landroid/widget/ImageView;I)V',
  );

  static final _setTintList = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `static public void setTintList(android.widget.ImageView imageView, int i)`
  static void setTintList(
    jni.JObject imageView,
    int i,
  ) {
    _setTintList(_class.reference.pointer, _id_setTintList as jni.JMethodIDPtr,
            imageView.reference.pointer, i)
        .check();
  }

  static final _id_rgbaToColor = _class.staticMethodId(
    r'rgbaToColor',
    r'(Ljava/lang/String;)I',
  );

  static final _rgbaToColor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public int rgbaToColor(java.lang.String string)`
  static int rgbaToColor(
    jni.JString string,
  ) {
    return _rgbaToColor(_class.reference.pointer,
            _id_rgbaToColor as jni.JMethodIDPtr, string.reference.pointer)
        .integer;
  }

  static final _id_colorToRgbaString = _class.staticMethodId(
    r'colorToRgbaString',
    r'(I)Ljava/lang/String;',
  );

  static final _colorToRgbaString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public java.lang.String colorToRgbaString(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString colorToRgbaString(
    int i,
  ) {
    return _colorToRgbaString(_class.reference.pointer,
            _id_colorToRgbaString as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_colorToRgbaArray = _class.staticMethodId(
    r'colorToRgbaArray',
    r'(I)[F',
  );

  static final _colorToRgbaArray = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public float[] colorToRgbaArray(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<jni.jfloat> colorToRgbaArray(
    int i,
  ) {
    return _colorToRgbaArray(_class.reference.pointer,
            _id_colorToRgbaArray as jni.JMethodIDPtr, i)
        .object(const jni.JArrayType(jni.jfloatType()));
  }

  static final _id_colorToGlRgbaArray = _class.staticMethodId(
    r'colorToGlRgbaArray',
    r'(I)[F',
  );

  static final _colorToGlRgbaArray = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: `static public float[] colorToGlRgbaArray(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<jni.jfloat> colorToGlRgbaArray(
    int i,
  ) {
    return _colorToGlRgbaArray(_class.reference.pointer,
            _id_colorToGlRgbaArray as jni.JMethodIDPtr, i)
        .object(const jni.JArrayType(jni.jfloatType()));
  }
}

final class $ColorUtilsType extends jni.JObjType<ColorUtils> {
  const $ColorUtilsType();

  @override
  String get signature => r'Lorg/maplibre/android/utils/ColorUtils;';

  @override
  ColorUtils fromReference(jni.JReference reference) =>
      ColorUtils.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ColorUtilsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ColorUtilsType) && other is $ColorUtilsType;
  }
}
