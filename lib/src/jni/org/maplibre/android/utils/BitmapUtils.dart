// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `org.maplibre.android.utils.BitmapUtils`
class BitmapUtils extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<BitmapUtils> $type;

  @_$jni.internal
  BitmapUtils.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/utils/BitmapUtils');

  /// The type which includes information such as the signature of this class.
  static const type = $BitmapUtils$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory BitmapUtils() {
    return BitmapUtils.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_createBitmapFromView = _class.staticMethodId(
    r'createBitmapFromView',
    r'(Landroid/view/View;)Landroid/graphics/Bitmap;',
  );

  static final _createBitmapFromView = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.graphics.Bitmap createBitmapFromView(android.view.View view)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject createBitmapFromView(
    _$jni.JObject view,
  ) {
    return _createBitmapFromView(
            _class.reference.pointer,
            _id_createBitmapFromView as _$jni.JMethodIDPtr,
            view.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_mergeBitmap = _class.staticMethodId(
    r'mergeBitmap',
    r'(Landroid/graphics/Bitmap;Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap;',
  );

  static final _mergeBitmap = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.graphics.Bitmap mergeBitmap(android.graphics.Bitmap bitmap, android.graphics.Bitmap bitmap1)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject mergeBitmap(
    _$jni.JObject bitmap,
    _$jni.JObject bitmap1,
  ) {
    return _mergeBitmap(
            _class.reference.pointer,
            _id_mergeBitmap as _$jni.JMethodIDPtr,
            bitmap.reference.pointer,
            bitmap1.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_mergeBitmaps = _class.staticMethodId(
    r'mergeBitmaps',
    r'(Landroid/graphics/Bitmap;Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap;',
  );

  static final _mergeBitmaps = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.graphics.Bitmap mergeBitmaps(android.graphics.Bitmap bitmap, android.graphics.Bitmap bitmap1)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject mergeBitmaps(
    _$jni.JObject bitmap,
    _$jni.JObject bitmap1,
  ) {
    return _mergeBitmaps(
            _class.reference.pointer,
            _id_mergeBitmaps as _$jni.JMethodIDPtr,
            bitmap.reference.pointer,
            bitmap1.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_mergeBitmap$1 = _class.staticMethodId(
    r'mergeBitmap',
    r'(Landroid/graphics/Bitmap;Landroid/graphics/Bitmap;FF)Landroid/graphics/Bitmap;',
  );

  static final _mergeBitmap$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Double,
                        _$jni.Double
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              double,
              double)>();

  /// from: `static public android.graphics.Bitmap mergeBitmap(android.graphics.Bitmap bitmap, android.graphics.Bitmap bitmap1, float f, float f1)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject mergeBitmap$1(
    _$jni.JObject bitmap,
    _$jni.JObject bitmap1,
    double f,
    double f1,
  ) {
    return _mergeBitmap$1(
            _class.reference.pointer,
            _id_mergeBitmap$1 as _$jni.JMethodIDPtr,
            bitmap.reference.pointer,
            bitmap1.reference.pointer,
            f,
            f1)
        .object(const _$jni.JObjectType());
  }

  static final _id_getBitmapFromDrawable = _class.staticMethodId(
    r'getBitmapFromDrawable',
    r'(Landroid/graphics/drawable/Drawable;)Landroid/graphics/Bitmap;',
  );

  static final _getBitmapFromDrawable = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.graphics.Bitmap getBitmapFromDrawable(android.graphics.drawable.Drawable drawable)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getBitmapFromDrawable(
    _$jni.JObject drawable,
  ) {
    return _getBitmapFromDrawable(
            _class.reference.pointer,
            _id_getBitmapFromDrawable as _$jni.JMethodIDPtr,
            drawable.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getByteArrayFromDrawable = _class.staticMethodId(
    r'getByteArrayFromDrawable',
    r'(Landroid/graphics/drawable/Drawable;)[B',
  );

  static final _getByteArrayFromDrawable = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public byte[] getByteArrayFromDrawable(android.graphics.drawable.Drawable drawable)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<_$jni.jbyte> getByteArrayFromDrawable(
    _$jni.JObject drawable,
  ) {
    return _getByteArrayFromDrawable(
            _class.reference.pointer,
            _id_getByteArrayFromDrawable as _$jni.JMethodIDPtr,
            drawable.reference.pointer)
        .object(const _$jni.JArrayType(_$jni.jbyteType()));
  }

  static final _id_getDrawableFromByteArray = _class.staticMethodId(
    r'getDrawableFromByteArray',
    r'(Landroid/content/Context;[B)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawableFromByteArray = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.graphics.drawable.Drawable getDrawableFromByteArray(android.content.Context context, byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getDrawableFromByteArray(
    _$jni.JObject context,
    _$jni.JArray<_$jni.jbyte> bs,
  ) {
    return _getDrawableFromByteArray(
            _class.reference.pointer,
            _id_getDrawableFromByteArray as _$jni.JMethodIDPtr,
            context.reference.pointer,
            bs.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getDrawableFromRes = _class.staticMethodId(
    r'getDrawableFromRes',
    r'(Landroid/content/Context;I)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawableFromRes = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `static public android.graphics.drawable.Drawable getDrawableFromRes(android.content.Context context, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getDrawableFromRes(
    _$jni.JObject context,
    int i,
  ) {
    return _getDrawableFromRes(
            _class.reference.pointer,
            _id_getDrawableFromRes as _$jni.JMethodIDPtr,
            context.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_getDrawableFromRes$1 = _class.staticMethodId(
    r'getDrawableFromRes',
    r'(Landroid/content/Context;ILjava/lang/Integer;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawableFromRes$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.graphics.drawable.Drawable getDrawableFromRes(android.content.Context context, int i, java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getDrawableFromRes$1(
    _$jni.JObject context,
    int i,
    _$jni.JInteger integer,
  ) {
    return _getDrawableFromRes$1(
            _class.reference.pointer,
            _id_getDrawableFromRes$1 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            i,
            integer.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_equals = _class.staticMethodId(
    r'equals',
    r'(Landroid/graphics/Bitmap;Landroid/graphics/Bitmap;)Z',
  );

  static final _equals = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public boolean equals(android.graphics.Bitmap bitmap, android.graphics.Bitmap bitmap1)`
  static bool equals(
    _$jni.JObject bitmap,
    _$jni.JObject bitmap1,
  ) {
    return _equals(_class.reference.pointer, _id_equals as _$jni.JMethodIDPtr,
            bitmap.reference.pointer, bitmap1.reference.pointer)
        .boolean;
  }
}

final class $BitmapUtils$Type extends _$jni.JObjType<BitmapUtils> {
  @_$jni.internal
  const $BitmapUtils$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/utils/BitmapUtils;';

  @_$jni.internal
  @_$core.override
  BitmapUtils fromReference(_$jni.JReference reference) =>
      BitmapUtils.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($BitmapUtils$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BitmapUtils$Type) &&
        other is $BitmapUtils$Type;
  }
}
