// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.utils.BitmapUtils`
class BitmapUtils extends jni.JObject {
  @override
  late final jni.JObjType<BitmapUtils> $type = type;

  BitmapUtils.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/utils/BitmapUtils');

  /// The type which includes information such as the signature of this class.
  static const type = $BitmapUtilsType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory BitmapUtils() {
    return BitmapUtils.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_createBitmapFromView = _class.staticMethodId(
    r'createBitmapFromView',
    r'(Landroid/view/View;)Landroid/graphics/Bitmap;',
  );

  static final _createBitmapFromView = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public android.graphics.Bitmap createBitmapFromView(android.view.View view)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject createBitmapFromView(
    jni.JObject view,
  ) {
    return _createBitmapFromView(
            _class.reference.pointer,
            _id_createBitmapFromView as jni.JMethodIDPtr,
            view.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_mergeBitmap = _class.staticMethodId(
    r'mergeBitmap',
    r'(Landroid/graphics/Bitmap;Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap;',
  );

  static final _mergeBitmap = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public android.graphics.Bitmap mergeBitmap(android.graphics.Bitmap bitmap, android.graphics.Bitmap bitmap1)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject mergeBitmap(
    jni.JObject bitmap,
    jni.JObject bitmap1,
  ) {
    return _mergeBitmap(
            _class.reference.pointer,
            _id_mergeBitmap as jni.JMethodIDPtr,
            bitmap.reference.pointer,
            bitmap1.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_mergeBitmaps = _class.staticMethodId(
    r'mergeBitmaps',
    r'(Landroid/graphics/Bitmap;Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap;',
  );

  static final _mergeBitmaps = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public android.graphics.Bitmap mergeBitmaps(android.graphics.Bitmap bitmap, android.graphics.Bitmap bitmap1)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject mergeBitmaps(
    jni.JObject bitmap,
    jni.JObject bitmap1,
  ) {
    return _mergeBitmaps(
            _class.reference.pointer,
            _id_mergeBitmaps as jni.JMethodIDPtr,
            bitmap.reference.pointer,
            bitmap1.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_mergeBitmap1 = _class.staticMethodId(
    r'mergeBitmap',
    r'(Landroid/graphics/Bitmap;Landroid/graphics/Bitmap;FF)Landroid/graphics/Bitmap;',
  );

  static final _mergeBitmap1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Double,
                        ffi.Double
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, double, double)>();

  /// from: `static public android.graphics.Bitmap mergeBitmap(android.graphics.Bitmap bitmap, android.graphics.Bitmap bitmap1, float f, float f1)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject mergeBitmap1(
    jni.JObject bitmap,
    jni.JObject bitmap1,
    double f,
    double f1,
  ) {
    return _mergeBitmap1(
            _class.reference.pointer,
            _id_mergeBitmap1 as jni.JMethodIDPtr,
            bitmap.reference.pointer,
            bitmap1.reference.pointer,
            f,
            f1)
        .object(const jni.JObjectType());
  }

  static final _id_getBitmapFromDrawable = _class.staticMethodId(
    r'getBitmapFromDrawable',
    r'(Landroid/graphics/drawable/Drawable;)Landroid/graphics/Bitmap;',
  );

  static final _getBitmapFromDrawable = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public android.graphics.Bitmap getBitmapFromDrawable(android.graphics.drawable.Drawable drawable)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getBitmapFromDrawable(
    jni.JObject drawable,
  ) {
    return _getBitmapFromDrawable(
            _class.reference.pointer,
            _id_getBitmapFromDrawable as jni.JMethodIDPtr,
            drawable.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getByteArrayFromDrawable = _class.staticMethodId(
    r'getByteArrayFromDrawable',
    r'(Landroid/graphics/drawable/Drawable;)[B',
  );

  static final _getByteArrayFromDrawable = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public byte[] getByteArrayFromDrawable(android.graphics.drawable.Drawable drawable)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<jni.jbyte> getByteArrayFromDrawable(
    jni.JObject drawable,
  ) {
    return _getByteArrayFromDrawable(
            _class.reference.pointer,
            _id_getByteArrayFromDrawable as jni.JMethodIDPtr,
            drawable.reference.pointer)
        .object(const jni.JArrayType(jni.jbyteType()));
  }

  static final _id_getDrawableFromByteArray = _class.staticMethodId(
    r'getDrawableFromByteArray',
    r'(Landroid/content/Context;[B)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawableFromByteArray = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public android.graphics.drawable.Drawable getDrawableFromByteArray(android.content.Context context, byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getDrawableFromByteArray(
    jni.JObject context,
    jni.JArray<jni.jbyte> bs,
  ) {
    return _getDrawableFromByteArray(
            _class.reference.pointer,
            _id_getDrawableFromByteArray as jni.JMethodIDPtr,
            context.reference.pointer,
            bs.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getDrawableFromRes = _class.staticMethodId(
    r'getDrawableFromRes',
    r'(Landroid/content/Context;I)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawableFromRes = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `static public android.graphics.drawable.Drawable getDrawableFromRes(android.content.Context context, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getDrawableFromRes(
    jni.JObject context,
    int i,
  ) {
    return _getDrawableFromRes(
            _class.reference.pointer,
            _id_getDrawableFromRes as jni.JMethodIDPtr,
            context.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_getDrawableFromRes1 = _class.staticMethodId(
    r'getDrawableFromRes',
    r'(Landroid/content/Context;ILjava/lang/Integer;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawableFromRes1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: `static public android.graphics.drawable.Drawable getDrawableFromRes(android.content.Context context, int i, java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getDrawableFromRes1(
    jni.JObject context,
    int i,
    jni.JInteger integer,
  ) {
    return _getDrawableFromRes1(
            _class.reference.pointer,
            _id_getDrawableFromRes1 as jni.JMethodIDPtr,
            context.reference.pointer,
            i,
            integer.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_equals = _class.staticMethodId(
    r'equals',
    r'(Landroid/graphics/Bitmap;Landroid/graphics/Bitmap;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: `static public boolean equals(android.graphics.Bitmap bitmap, android.graphics.Bitmap bitmap1)`
  static bool equals(
    jni.JObject bitmap,
    jni.JObject bitmap1,
  ) {
    return _equals(_class.reference.pointer, _id_equals as jni.JMethodIDPtr,
            bitmap.reference.pointer, bitmap1.reference.pointer)
        .boolean;
  }
}

final class $BitmapUtilsType extends jni.JObjType<BitmapUtils> {
  const $BitmapUtilsType();

  @override
  String get signature => r'Lorg/maplibre/android/utils/BitmapUtils;';

  @override
  BitmapUtils fromReference(jni.JReference reference) =>
      BitmapUtils.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BitmapUtilsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BitmapUtilsType) && other is $BitmapUtilsType;
  }
}
