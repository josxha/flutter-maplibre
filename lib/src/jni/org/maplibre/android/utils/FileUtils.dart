// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: `org.maplibre.android.utils.FileUtils$CheckFileReadPermissionTask`
class FileUtils_CheckFileReadPermissionTask extends jni.JObject {
  @override
  late final jni.JObjType<FileUtils_CheckFileReadPermissionTask> $type = type;

  FileUtils_CheckFileReadPermissionTask.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/utils/FileUtils$CheckFileReadPermissionTask');

  /// The type which includes information such as the signature of this class.
  static const type = $FileUtils_CheckFileReadPermissionTaskType();
  static final _id_new0 = _class.constructorId(
    r'(Lorg/maplibre/android/utils/FileUtils$OnCheckFileReadPermissionListener;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(org.maplibre.android.utils.FileUtils$OnCheckFileReadPermissionListener onCheckFileReadPermissionListener)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FileUtils_CheckFileReadPermissionTask(
    FileUtils_OnCheckFileReadPermissionListener
        onCheckFileReadPermissionListener,
  ) {
    return FileUtils_CheckFileReadPermissionTask.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            onCheckFileReadPermissionListener.reference.pointer)
        .reference);
  }

  static final _id_doInBackground = _class.instanceMethodId(
    r'doInBackground',
    r'([Ljava/io/File;)Ljava/lang/Boolean;',
  );

  static final _doInBackground = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `protected java.lang.Boolean doInBackground(java.io.File[] files)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean doInBackground(
    jni.JArray<jni.JObject> files,
  ) {
    return _doInBackground(reference.pointer,
            _id_doInBackground as jni.JMethodIDPtr, files.reference.pointer)
        .object(const jni.JBooleanType());
  }

  static final _id_onCancelled = _class.instanceMethodId(
    r'onCancelled',
    r'()V',
  );

  static final _onCancelled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected void onCancelled()`
  void onCancelled() {
    _onCancelled(reference.pointer, _id_onCancelled as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onPostExecute = _class.instanceMethodId(
    r'onPostExecute',
    r'(Ljava/lang/Boolean;)V',
  );

  static final _onPostExecute = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `protected void onPostExecute(java.lang.Boolean boolean)`
  void onPostExecute(
    jni.JBoolean boolean,
  ) {
    _onPostExecute(reference.pointer, _id_onPostExecute as jni.JMethodIDPtr,
            boolean.reference.pointer)
        .check();
  }

  static final _id_onPostExecute1 = _class.instanceMethodId(
    r'onPostExecute',
    r'(Ljava/lang/Object;)V',
  );

  static final _onPostExecute1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `protected void onPostExecute(java.lang.Object object)`
  void onPostExecute1(
    jni.JObject object,
  ) {
    _onPostExecute1(reference.pointer, _id_onPostExecute1 as jni.JMethodIDPtr,
            object.reference.pointer)
        .check();
  }

  static final _id_doInBackground1 = _class.instanceMethodId(
    r'doInBackground',
    r'([Ljava/lang/Object;)Ljava/lang/Object;',
  );

  static final _doInBackground1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `protected java.lang.Object doInBackground(java.lang.Object[] objects)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject doInBackground1(
    jni.JArray<jni.JObject> objects,
  ) {
    return _doInBackground1(reference.pointer,
            _id_doInBackground1 as jni.JMethodIDPtr, objects.reference.pointer)
        .object(const jni.JObjectType());
  }
}

final class $FileUtils_CheckFileReadPermissionTaskType
    extends jni.JObjType<FileUtils_CheckFileReadPermissionTask> {
  const $FileUtils_CheckFileReadPermissionTaskType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/utils/FileUtils$CheckFileReadPermissionTask;';

  @override
  FileUtils_CheckFileReadPermissionTask fromReference(
          jni.JReference reference) =>
      FileUtils_CheckFileReadPermissionTask.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FileUtils_CheckFileReadPermissionTaskType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FileUtils_CheckFileReadPermissionTaskType) &&
        other is $FileUtils_CheckFileReadPermissionTaskType;
  }
}

/// from: `org.maplibre.android.utils.FileUtils$CheckFileWritePermissionTask`
class FileUtils_CheckFileWritePermissionTask extends jni.JObject {
  @override
  late final jni.JObjType<FileUtils_CheckFileWritePermissionTask> $type = type;

  FileUtils_CheckFileWritePermissionTask.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/utils/FileUtils$CheckFileWritePermissionTask');

  /// The type which includes information such as the signature of this class.
  static const type = $FileUtils_CheckFileWritePermissionTaskType();
  static final _id_new0 = _class.constructorId(
    r'(Lorg/maplibre/android/utils/FileUtils$OnCheckFileWritePermissionListener;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(org.maplibre.android.utils.FileUtils$OnCheckFileWritePermissionListener onCheckFileWritePermissionListener)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FileUtils_CheckFileWritePermissionTask(
    FileUtils_OnCheckFileWritePermissionListener
        onCheckFileWritePermissionListener,
  ) {
    return FileUtils_CheckFileWritePermissionTask.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            onCheckFileWritePermissionListener.reference.pointer)
        .reference);
  }

  static final _id_doInBackground = _class.instanceMethodId(
    r'doInBackground',
    r'([Ljava/io/File;)Ljava/lang/Boolean;',
  );

  static final _doInBackground = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `protected java.lang.Boolean doInBackground(java.io.File[] files)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JBoolean doInBackground(
    jni.JArray<jni.JObject> files,
  ) {
    return _doInBackground(reference.pointer,
            _id_doInBackground as jni.JMethodIDPtr, files.reference.pointer)
        .object(const jni.JBooleanType());
  }

  static final _id_onCancelled = _class.instanceMethodId(
    r'onCancelled',
    r'()V',
  );

  static final _onCancelled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `protected void onCancelled()`
  void onCancelled() {
    _onCancelled(reference.pointer, _id_onCancelled as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onPostExecute = _class.instanceMethodId(
    r'onPostExecute',
    r'(Ljava/lang/Boolean;)V',
  );

  static final _onPostExecute = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `protected void onPostExecute(java.lang.Boolean boolean)`
  void onPostExecute(
    jni.JBoolean boolean,
  ) {
    _onPostExecute(reference.pointer, _id_onPostExecute as jni.JMethodIDPtr,
            boolean.reference.pointer)
        .check();
  }

  static final _id_onPostExecute1 = _class.instanceMethodId(
    r'onPostExecute',
    r'(Ljava/lang/Object;)V',
  );

  static final _onPostExecute1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `protected void onPostExecute(java.lang.Object object)`
  void onPostExecute1(
    jni.JObject object,
  ) {
    _onPostExecute1(reference.pointer, _id_onPostExecute1 as jni.JMethodIDPtr,
            object.reference.pointer)
        .check();
  }

  static final _id_doInBackground1 = _class.instanceMethodId(
    r'doInBackground',
    r'([Ljava/lang/Object;)Ljava/lang/Object;',
  );

  static final _doInBackground1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `protected java.lang.Object doInBackground(java.lang.Object[] objects)`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject doInBackground1(
    jni.JArray<jni.JObject> objects,
  ) {
    return _doInBackground1(reference.pointer,
            _id_doInBackground1 as jni.JMethodIDPtr, objects.reference.pointer)
        .object(const jni.JObjectType());
  }
}

final class $FileUtils_CheckFileWritePermissionTaskType
    extends jni.JObjType<FileUtils_CheckFileWritePermissionTask> {
  const $FileUtils_CheckFileWritePermissionTaskType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/utils/FileUtils$CheckFileWritePermissionTask;';

  @override
  FileUtils_CheckFileWritePermissionTask fromReference(
          jni.JReference reference) =>
      FileUtils_CheckFileWritePermissionTask.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FileUtils_CheckFileWritePermissionTaskType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FileUtils_CheckFileWritePermissionTaskType) &&
        other is $FileUtils_CheckFileWritePermissionTaskType;
  }
}

/// from: `org.maplibre.android.utils.FileUtils$OnCheckFileReadPermissionListener`
class FileUtils_OnCheckFileReadPermissionListener extends jni.JObject {
  @override
  late final jni.JObjType<FileUtils_OnCheckFileReadPermissionListener> $type =
      type;

  FileUtils_OnCheckFileReadPermissionListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/utils/FileUtils$OnCheckFileReadPermissionListener');

  /// The type which includes information such as the signature of this class.
  static const type = $FileUtils_OnCheckFileReadPermissionListenerType();
  static final _id_onReadPermissionGranted = _class.instanceMethodId(
    r'onReadPermissionGranted',
    r'()V',
  );

  static final _onReadPermissionGranted = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onReadPermissionGranted()`
  void onReadPermissionGranted() {
    _onReadPermissionGranted(
            reference.pointer, _id_onReadPermissionGranted as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'()V',
  );

  static final _onError = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onError()`
  void onError() {
    _onError(reference.pointer, _id_onError as jni.JMethodIDPtr).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $FileUtils_OnCheckFileReadPermissionListenerImpl>
      _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onReadPermissionGranted()V') {
        _$impls[$p]!.onReadPermissionGranted();
        return jni.nullptr;
      }
      if ($d == r'onError()V') {
        _$impls[$p]!.onError();
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory FileUtils_OnCheckFileReadPermissionListener.implement(
    $FileUtils_OnCheckFileReadPermissionListenerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = FileUtils_OnCheckFileReadPermissionListener.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'org.maplibre.android.utils.FileUtils$OnCheckFileReadPermissionListener',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $FileUtils_OnCheckFileReadPermissionListenerImpl {
  factory $FileUtils_OnCheckFileReadPermissionListenerImpl({
    required void Function() onReadPermissionGranted,
    required void Function() onError,
  }) = _$FileUtils_OnCheckFileReadPermissionListenerImpl;

  void onReadPermissionGranted();
  void onError();
}

class _$FileUtils_OnCheckFileReadPermissionListenerImpl
    implements $FileUtils_OnCheckFileReadPermissionListenerImpl {
  _$FileUtils_OnCheckFileReadPermissionListenerImpl({
    required void Function() onReadPermissionGranted,
    required void Function() onError,
  })  : _onReadPermissionGranted = onReadPermissionGranted,
        _onError = onError;

  final void Function() _onReadPermissionGranted;
  final void Function() _onError;

  void onReadPermissionGranted() {
    return _onReadPermissionGranted();
  }

  void onError() {
    return _onError();
  }
}

final class $FileUtils_OnCheckFileReadPermissionListenerType
    extends jni.JObjType<FileUtils_OnCheckFileReadPermissionListener> {
  const $FileUtils_OnCheckFileReadPermissionListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/utils/FileUtils$OnCheckFileReadPermissionListener;';

  @override
  FileUtils_OnCheckFileReadPermissionListener fromReference(
          jni.JReference reference) =>
      FileUtils_OnCheckFileReadPermissionListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($FileUtils_OnCheckFileReadPermissionListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($FileUtils_OnCheckFileReadPermissionListenerType) &&
        other is $FileUtils_OnCheckFileReadPermissionListenerType;
  }
}

/// from: `org.maplibre.android.utils.FileUtils$OnCheckFileWritePermissionListener`
class FileUtils_OnCheckFileWritePermissionListener extends jni.JObject {
  @override
  late final jni.JObjType<FileUtils_OnCheckFileWritePermissionListener> $type =
      type;

  FileUtils_OnCheckFileWritePermissionListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/utils/FileUtils$OnCheckFileWritePermissionListener');

  /// The type which includes information such as the signature of this class.
  static const type = $FileUtils_OnCheckFileWritePermissionListenerType();
  static final _id_onWritePermissionGranted = _class.instanceMethodId(
    r'onWritePermissionGranted',
    r'()V',
  );

  static final _onWritePermissionGranted = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onWritePermissionGranted()`
  void onWritePermissionGranted() {
    _onWritePermissionGranted(
            reference.pointer, _id_onWritePermissionGranted as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'()V',
  );

  static final _onError = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onError()`
  void onError() {
    _onError(reference.pointer, _id_onError as jni.JMethodIDPtr).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $FileUtils_OnCheckFileWritePermissionListenerImpl>
      _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onWritePermissionGranted()V') {
        _$impls[$p]!.onWritePermissionGranted();
        return jni.nullptr;
      }
      if ($d == r'onError()V') {
        _$impls[$p]!.onError();
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory FileUtils_OnCheckFileWritePermissionListener.implement(
    $FileUtils_OnCheckFileWritePermissionListenerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = FileUtils_OnCheckFileWritePermissionListener.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'org.maplibre.android.utils.FileUtils$OnCheckFileWritePermissionListener',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $FileUtils_OnCheckFileWritePermissionListenerImpl {
  factory $FileUtils_OnCheckFileWritePermissionListenerImpl({
    required void Function() onWritePermissionGranted,
    required void Function() onError,
  }) = _$FileUtils_OnCheckFileWritePermissionListenerImpl;

  void onWritePermissionGranted();
  void onError();
}

class _$FileUtils_OnCheckFileWritePermissionListenerImpl
    implements $FileUtils_OnCheckFileWritePermissionListenerImpl {
  _$FileUtils_OnCheckFileWritePermissionListenerImpl({
    required void Function() onWritePermissionGranted,
    required void Function() onError,
  })  : _onWritePermissionGranted = onWritePermissionGranted,
        _onError = onError;

  final void Function() _onWritePermissionGranted;
  final void Function() _onError;

  void onWritePermissionGranted() {
    return _onWritePermissionGranted();
  }

  void onError() {
    return _onError();
  }
}

final class $FileUtils_OnCheckFileWritePermissionListenerType
    extends jni.JObjType<FileUtils_OnCheckFileWritePermissionListener> {
  const $FileUtils_OnCheckFileWritePermissionListenerType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/utils/FileUtils$OnCheckFileWritePermissionListener;';

  @override
  FileUtils_OnCheckFileWritePermissionListener fromReference(
          jni.JReference reference) =>
      FileUtils_OnCheckFileWritePermissionListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($FileUtils_OnCheckFileWritePermissionListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($FileUtils_OnCheckFileWritePermissionListenerType) &&
        other is $FileUtils_OnCheckFileWritePermissionListenerType;
  }
}

/// from: `org.maplibre.android.utils.FileUtils`
class FileUtils extends jni.JObject {
  @override
  late final jni.JObjType<FileUtils> $type = type;

  FileUtils.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/utils/FileUtils');

  /// The type which includes information such as the signature of this class.
  static const type = $FileUtilsType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory FileUtils() {
    return FileUtils.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_deleteFile = _class.staticMethodId(
    r'deleteFile',
    r'(Ljava/lang/String;)V',
  );

  static final _deleteFile = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `static public void deleteFile(java.lang.String string)`
  static void deleteFile(
    jni.JString string,
  ) {
    _deleteFile(_class.reference.pointer, _id_deleteFile as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }
}

final class $FileUtilsType extends jni.JObjType<FileUtils> {
  const $FileUtilsType();

  @override
  String get signature => r'Lorg/maplibre/android/utils/FileUtils;';

  @override
  FileUtils fromReference(jni.JReference reference) =>
      FileUtils.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FileUtilsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FileUtilsType) && other is $FileUtilsType;
  }
}
