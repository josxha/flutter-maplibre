// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `org.maplibre.android.utils.FileUtils$CheckFileReadPermissionTask`
class FileUtils_CheckFileReadPermissionTask extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<FileUtils_CheckFileReadPermissionTask> $type;

  @_$jni.internal
  FileUtils_CheckFileReadPermissionTask.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/utils/FileUtils$CheckFileReadPermissionTask');

  /// The type which includes information such as the signature of this class.
  static const type = $FileUtils_CheckFileReadPermissionTask$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lorg/maplibre/android/utils/FileUtils$OnCheckFileReadPermissionListener;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(org.maplibre.android.utils.FileUtils$OnCheckFileReadPermissionListener onCheckFileReadPermissionListener)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FileUtils_CheckFileReadPermissionTask(
    FileUtils_OnCheckFileReadPermissionListener
        onCheckFileReadPermissionListener,
  ) {
    return FileUtils_CheckFileReadPermissionTask.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            onCheckFileReadPermissionListener.reference.pointer)
        .reference);
  }
}

final class $FileUtils_CheckFileReadPermissionTask$Type
    extends _$jni.JObjType<FileUtils_CheckFileReadPermissionTask> {
  @_$jni.internal
  const $FileUtils_CheckFileReadPermissionTask$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/utils/FileUtils$CheckFileReadPermissionTask;';

  @_$jni.internal
  @_$core.override
  FileUtils_CheckFileReadPermissionTask fromReference(
          _$jni.JReference reference) =>
      FileUtils_CheckFileReadPermissionTask.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($FileUtils_CheckFileReadPermissionTask$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FileUtils_CheckFileReadPermissionTask$Type) &&
        other is $FileUtils_CheckFileReadPermissionTask$Type;
  }
}

/// from: `org.maplibre.android.utils.FileUtils$CheckFileWritePermissionTask`
class FileUtils_CheckFileWritePermissionTask extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<FileUtils_CheckFileWritePermissionTask> $type;

  @_$jni.internal
  FileUtils_CheckFileWritePermissionTask.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/utils/FileUtils$CheckFileWritePermissionTask');

  /// The type which includes information such as the signature of this class.
  static const type = $FileUtils_CheckFileWritePermissionTask$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lorg/maplibre/android/utils/FileUtils$OnCheckFileWritePermissionListener;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(org.maplibre.android.utils.FileUtils$OnCheckFileWritePermissionListener onCheckFileWritePermissionListener)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FileUtils_CheckFileWritePermissionTask(
    FileUtils_OnCheckFileWritePermissionListener
        onCheckFileWritePermissionListener,
  ) {
    return FileUtils_CheckFileWritePermissionTask.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            onCheckFileWritePermissionListener.reference.pointer)
        .reference);
  }
}

final class $FileUtils_CheckFileWritePermissionTask$Type
    extends _$jni.JObjType<FileUtils_CheckFileWritePermissionTask> {
  @_$jni.internal
  const $FileUtils_CheckFileWritePermissionTask$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/utils/FileUtils$CheckFileWritePermissionTask;';

  @_$jni.internal
  @_$core.override
  FileUtils_CheckFileWritePermissionTask fromReference(
          _$jni.JReference reference) =>
      FileUtils_CheckFileWritePermissionTask.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($FileUtils_CheckFileWritePermissionTask$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($FileUtils_CheckFileWritePermissionTask$Type) &&
        other is $FileUtils_CheckFileWritePermissionTask$Type;
  }
}

/// from: `org.maplibre.android.utils.FileUtils$OnCheckFileReadPermissionListener`
class FileUtils_OnCheckFileReadPermissionListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<FileUtils_OnCheckFileReadPermissionListener> $type;

  @_$jni.internal
  FileUtils_OnCheckFileReadPermissionListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/utils/FileUtils$OnCheckFileReadPermissionListener');

  /// The type which includes information such as the signature of this class.
  static const type = $FileUtils_OnCheckFileReadPermissionListener$Type();
  static final _id_onReadPermissionGranted = _class.instanceMethodId(
    r'onReadPermissionGranted',
    r'()V',
  );

  static final _onReadPermissionGranted = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onReadPermissionGranted()`
  void onReadPermissionGranted() {
    _onReadPermissionGranted(reference.pointer,
            _id_onReadPermissionGranted as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'()V',
  );

  static final _onError = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onError()`
  void onError() {
    _onError(reference.pointer, _id_onError as _$jni.JMethodIDPtr).check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $FileUtils_OnCheckFileReadPermissionListener>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onReadPermissionGranted()V') {
        _$impls[$p]!.onReadPermissionGranted();
        return _$jni.nullptr;
      }
      if ($d == r'onError()V') {
        _$impls[$p]!.onError();
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $FileUtils_OnCheckFileReadPermissionListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.utils.FileUtils$OnCheckFileReadPermissionListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onReadPermissionGranted$async) r'onReadPermissionGranted()V',
        if ($impl.onError$async) r'onError()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory FileUtils_OnCheckFileReadPermissionListener.implement(
    $FileUtils_OnCheckFileReadPermissionListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return FileUtils_OnCheckFileReadPermissionListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract mixin class $FileUtils_OnCheckFileReadPermissionListener {
  factory $FileUtils_OnCheckFileReadPermissionListener({
    required void Function() onReadPermissionGranted,
    bool onReadPermissionGranted$async,
    required void Function() onError,
    bool onError$async,
  }) = _$FileUtils_OnCheckFileReadPermissionListener;

  void onReadPermissionGranted();
  bool get onReadPermissionGranted$async => false;
  void onError();
  bool get onError$async => false;
}

class _$FileUtils_OnCheckFileReadPermissionListener
    implements $FileUtils_OnCheckFileReadPermissionListener {
  _$FileUtils_OnCheckFileReadPermissionListener({
    required void Function() onReadPermissionGranted,
    this.onReadPermissionGranted$async = false,
    required void Function() onError,
    this.onError$async = false,
  })  : _onReadPermissionGranted = onReadPermissionGranted,
        _onError = onError;

  final void Function() _onReadPermissionGranted;
  final bool onReadPermissionGranted$async;
  final void Function() _onError;
  final bool onError$async;

  void onReadPermissionGranted() {
    return _onReadPermissionGranted();
  }

  void onError() {
    return _onError();
  }
}

final class $FileUtils_OnCheckFileReadPermissionListener$Type
    extends _$jni.JObjType<FileUtils_OnCheckFileReadPermissionListener> {
  @_$jni.internal
  const $FileUtils_OnCheckFileReadPermissionListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/utils/FileUtils$OnCheckFileReadPermissionListener;';

  @_$jni.internal
  @_$core.override
  FileUtils_OnCheckFileReadPermissionListener fromReference(
          _$jni.JReference reference) =>
      FileUtils_OnCheckFileReadPermissionListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($FileUtils_OnCheckFileReadPermissionListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($FileUtils_OnCheckFileReadPermissionListener$Type) &&
        other is $FileUtils_OnCheckFileReadPermissionListener$Type;
  }
}

/// from: `org.maplibre.android.utils.FileUtils$OnCheckFileWritePermissionListener`
class FileUtils_OnCheckFileWritePermissionListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<FileUtils_OnCheckFileWritePermissionListener> $type;

  @_$jni.internal
  FileUtils_OnCheckFileWritePermissionListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/utils/FileUtils$OnCheckFileWritePermissionListener');

  /// The type which includes information such as the signature of this class.
  static const type = $FileUtils_OnCheckFileWritePermissionListener$Type();
  static final _id_onWritePermissionGranted = _class.instanceMethodId(
    r'onWritePermissionGranted',
    r'()V',
  );

  static final _onWritePermissionGranted = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onWritePermissionGranted()`
  void onWritePermissionGranted() {
    _onWritePermissionGranted(reference.pointer,
            _id_onWritePermissionGranted as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'()V',
  );

  static final _onError = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onError()`
  void onError() {
    _onError(reference.pointer, _id_onError as _$jni.JMethodIDPtr).check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $FileUtils_OnCheckFileWritePermissionListener>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onWritePermissionGranted()V') {
        _$impls[$p]!.onWritePermissionGranted();
        return _$jni.nullptr;
      }
      if ($d == r'onError()V') {
        _$impls[$p]!.onError();
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $FileUtils_OnCheckFileWritePermissionListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.utils.FileUtils$OnCheckFileWritePermissionListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onWritePermissionGranted$async)
          r'onWritePermissionGranted()V',
        if ($impl.onError$async) r'onError()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory FileUtils_OnCheckFileWritePermissionListener.implement(
    $FileUtils_OnCheckFileWritePermissionListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return FileUtils_OnCheckFileWritePermissionListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract mixin class $FileUtils_OnCheckFileWritePermissionListener {
  factory $FileUtils_OnCheckFileWritePermissionListener({
    required void Function() onWritePermissionGranted,
    bool onWritePermissionGranted$async,
    required void Function() onError,
    bool onError$async,
  }) = _$FileUtils_OnCheckFileWritePermissionListener;

  void onWritePermissionGranted();
  bool get onWritePermissionGranted$async => false;
  void onError();
  bool get onError$async => false;
}

class _$FileUtils_OnCheckFileWritePermissionListener
    implements $FileUtils_OnCheckFileWritePermissionListener {
  _$FileUtils_OnCheckFileWritePermissionListener({
    required void Function() onWritePermissionGranted,
    this.onWritePermissionGranted$async = false,
    required void Function() onError,
    this.onError$async = false,
  })  : _onWritePermissionGranted = onWritePermissionGranted,
        _onError = onError;

  final void Function() _onWritePermissionGranted;
  final bool onWritePermissionGranted$async;
  final void Function() _onError;
  final bool onError$async;

  void onWritePermissionGranted() {
    return _onWritePermissionGranted();
  }

  void onError() {
    return _onError();
  }
}

final class $FileUtils_OnCheckFileWritePermissionListener$Type
    extends _$jni.JObjType<FileUtils_OnCheckFileWritePermissionListener> {
  @_$jni.internal
  const $FileUtils_OnCheckFileWritePermissionListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/utils/FileUtils$OnCheckFileWritePermissionListener;';

  @_$jni.internal
  @_$core.override
  FileUtils_OnCheckFileWritePermissionListener fromReference(
          _$jni.JReference reference) =>
      FileUtils_OnCheckFileWritePermissionListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($FileUtils_OnCheckFileWritePermissionListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($FileUtils_OnCheckFileWritePermissionListener$Type) &&
        other is $FileUtils_OnCheckFileWritePermissionListener$Type;
  }
}

/// from: `org.maplibre.android.utils.FileUtils`
class FileUtils extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<FileUtils> $type;

  @_$jni.internal
  FileUtils.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/utils/FileUtils');

  /// The type which includes information such as the signature of this class.
  static const type = $FileUtils$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory FileUtils() {
    return FileUtils.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_deleteFile = _class.staticMethodId(
    r'deleteFile',
    r'(Ljava/lang/String;)V',
  );

  static final _deleteFile = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void deleteFile(java.lang.String string)`
  static void deleteFile(
    _$jni.JString string,
  ) {
    _deleteFile(_class.reference.pointer, _id_deleteFile as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }
}

final class $FileUtils$Type extends _$jni.JObjType<FileUtils> {
  @_$jni.internal
  const $FileUtils$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/utils/FileUtils;';

  @_$jni.internal
  @_$core.override
  FileUtils fromReference(_$jni.JReference reference) =>
      FileUtils.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($FileUtils$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FileUtils$Type) && other is $FileUtils$Type;
  }
}
