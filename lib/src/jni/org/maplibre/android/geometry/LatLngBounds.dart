// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

import 'LatLng.dart' as latlng_;

import 'LatLngSpan.dart' as latlngspan_;

/// from: `org.maplibre.android.geometry.LatLngBounds$Builder`
class LatLngBounds_Builder extends jni.JObject {
  @override
  late final jni.JObjType<LatLngBounds_Builder> $type = type;

  LatLngBounds_Builder.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/geometry/LatLngBounds$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $LatLngBounds_BuilderType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory LatLngBounds_Builder() {
    return LatLngBounds_Builder.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _build = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds build()`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds build() {
    return _build(reference.pointer, _id_build as jni.JMethodIDPtr)
        .object(const $LatLngBoundsType());
  }

  static final _id_includes = _class.instanceMethodId(
    r'includes',
    r'(Ljava/util/List;)Lorg/maplibre/android/geometry/LatLngBounds$Builder;',
  );

  static final _includes = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds$Builder includes(java.util.List list)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds_Builder includes(
    jni.JList<latlng_.LatLng> list,
  ) {
    return _includes(reference.pointer, _id_includes as jni.JMethodIDPtr,
            list.reference.pointer)
        .object(const $LatLngBounds_BuilderType());
  }

  static final _id_include = _class.instanceMethodId(
    r'include',
    r'(Lorg/maplibre/android/geometry/LatLng;)Lorg/maplibre/android/geometry/LatLngBounds$Builder;',
  );

  static final _include = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds$Builder include(org.maplibre.android.geometry.LatLng latLng)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds_Builder include(
    latlng_.LatLng latLng,
  ) {
    return _include(reference.pointer, _id_include as jni.JMethodIDPtr,
            latLng.reference.pointer)
        .object(const $LatLngBounds_BuilderType());
  }
}

final class $LatLngBounds_BuilderType
    extends jni.JObjType<LatLngBounds_Builder> {
  const $LatLngBounds_BuilderType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/geometry/LatLngBounds$Builder;';

  @override
  LatLngBounds_Builder fromReference(jni.JReference reference) =>
      LatLngBounds_Builder.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LatLngBounds_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LatLngBounds_BuilderType) &&
        other is $LatLngBounds_BuilderType;
  }
}

/// from: `org.maplibre.android.geometry.LatLngBounds$Companion`
class LatLngBounds_Companion extends jni.JObject {
  @override
  late final jni.JObjType<LatLngBounds_Companion> $type = type;

  LatLngBounds_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'org/maplibre/android/geometry/LatLngBounds$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $LatLngBounds_CompanionType();
  static final _id_world = _class.instanceMethodId(
    r'world',
    r'()Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _world = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds world()`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds world() {
    return _world(reference.pointer, _id_world as jni.JMethodIDPtr)
        .object(const $LatLngBoundsType());
  }

  static final _id_fromLatLngs = _class.instanceMethodId(
    r'fromLatLngs',
    r'(Ljava/util/List;)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _fromLatLngs = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds fromLatLngs(java.util.List list)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds fromLatLngs(
    jni.JList<latlng_.LatLng> list,
  ) {
    return _fromLatLngs(reference.pointer, _id_fromLatLngs as jni.JMethodIDPtr,
            list.reference.pointer)
        .object(const $LatLngBoundsType());
  }

  static final _id_from = _class.instanceMethodId(
    r'from',
    r'(DDDD)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _from = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Double,
                        ffi.Double,
                        ffi.Double,
                        ffi.Double
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              double, double, double, double)>();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds from(double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds from(
    double d,
    double d1,
    double d2,
    double d3,
  ) {
    return _from(reference.pointer, _id_from as jni.JMethodIDPtr, d, d1, d2, d3)
        .object(const $LatLngBoundsType());
  }

  static final _id_from1 = _class.instanceMethodId(
    r'from',
    r'(III)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _from1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int)>();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds from(int i, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds from1(
    int i,
    int i1,
    int i2,
  ) {
    return _from1(reference.pointer, _id_from1 as jni.JMethodIDPtr, i, i1, i2)
        .object(const $LatLngBoundsType());
  }

  static final _id_new0 = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory LatLngBounds_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return LatLngBounds_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $LatLngBounds_CompanionType
    extends jni.JObjType<LatLngBounds_Companion> {
  const $LatLngBounds_CompanionType();

  @override
  String get signature =>
      r'Lorg/maplibre/android/geometry/LatLngBounds$Companion;';

  @override
  LatLngBounds_Companion fromReference(jni.JReference reference) =>
      LatLngBounds_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LatLngBounds_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LatLngBounds_CompanionType) &&
        other is $LatLngBounds_CompanionType;
  }
}

/// from: `org.maplibre.android.geometry.LatLngBounds`
class LatLngBounds extends jni.JObject {
  @override
  late final jni.JObjType<LatLngBounds> $type = type;

  LatLngBounds.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'org/maplibre/android/geometry/LatLngBounds');

  /// The type which includes information such as the signature of this class.
  static const type = $LatLngBoundsType();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lorg/maplibre/android/geometry/LatLngBounds$Companion;',
  );

  /// from: `static public final org.maplibre.android.geometry.LatLngBounds$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static LatLngBounds_Companion get Companion =>
      _id_Companion.get(_class, const $LatLngBounds_CompanionType());

  static final _id_latitudeNorth = _class.instanceFieldId(
    r'latitudeNorth',
    r'D',
  );

  /// from: `public final double latitudeNorth`
  double get latitudeNorth =>
      _id_latitudeNorth.get(this, const jni.jdoubleType());

  static final _id_longitudeEast = _class.instanceFieldId(
    r'longitudeEast',
    r'D',
  );

  /// from: `public final double longitudeEast`
  double get longitudeEast =>
      _id_longitudeEast.get(this, const jni.jdoubleType());

  static final _id_latitudeSouth = _class.instanceFieldId(
    r'latitudeSouth',
    r'D',
  );

  /// from: `public final double latitudeSouth`
  double get latitudeSouth =>
      _id_latitudeSouth.get(this, const jni.jdoubleType());

  static final _id_longitudeWest = _class.instanceFieldId(
    r'longitudeWest',
    r'D',
  );

  /// from: `public final double longitudeWest`
  double get longitudeWest =>
      _id_longitudeWest.get(this, const jni.jdoubleType());

  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  static final _id_new0 = _class.constructorId(
    r'(DDDD)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Double,
                        ffi.Double,
                        ffi.Double,
                        ffi.Double
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              double, double, double, double)>();

  /// from: `public void <init>(double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  factory LatLngBounds(
    double d,
    double d1,
    double d2,
    double d3,
  ) {
    return LatLngBounds.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, d, d1, d2, d3)
        .reference);
  }

  static final _id_getCenter = _class.instanceMethodId(
    r'getCenter',
    r'()Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _getCenter = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.geometry.LatLng getCenter()`
  /// The returned object must be released after use, by calling the [release] method.
  latlng_.LatLng getCenter() {
    return _getCenter(reference.pointer, _id_getCenter as jni.JMethodIDPtr)
        .object(const latlng_.$LatLngType());
  }

  static final _id_getLatNorth = _class.instanceMethodId(
    r'getLatNorth',
    r'()D',
  );

  static final _getLatNorth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final double getLatNorth()`
  double getLatNorth() {
    return _getLatNorth(reference.pointer, _id_getLatNorth as jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getLatSouth = _class.instanceMethodId(
    r'getLatSouth',
    r'()D',
  );

  static final _getLatSouth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final double getLatSouth()`
  double getLatSouth() {
    return _getLatSouth(reference.pointer, _id_getLatSouth as jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getLonEast = _class.instanceMethodId(
    r'getLonEast',
    r'()D',
  );

  static final _getLonEast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final double getLonEast()`
  double getLonEast() {
    return _getLonEast(reference.pointer, _id_getLonEast as jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getLonWest = _class.instanceMethodId(
    r'getLonWest',
    r'()D',
  );

  static final _getLonWest = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final double getLonWest()`
  double getLonWest() {
    return _getLonWest(reference.pointer, _id_getLonWest as jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getSouthWest = _class.instanceMethodId(
    r'getSouthWest',
    r'()Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _getSouthWest = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.geometry.LatLng getSouthWest()`
  /// The returned object must be released after use, by calling the [release] method.
  latlng_.LatLng getSouthWest() {
    return _getSouthWest(
            reference.pointer, _id_getSouthWest as jni.JMethodIDPtr)
        .object(const latlng_.$LatLngType());
  }

  static final _id_getNorthEast = _class.instanceMethodId(
    r'getNorthEast',
    r'()Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _getNorthEast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.geometry.LatLng getNorthEast()`
  /// The returned object must be released after use, by calling the [release] method.
  latlng_.LatLng getNorthEast() {
    return _getNorthEast(
            reference.pointer, _id_getNorthEast as jni.JMethodIDPtr)
        .object(const latlng_.$LatLngType());
  }

  static final _id_getSouthEast = _class.instanceMethodId(
    r'getSouthEast',
    r'()Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _getSouthEast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.geometry.LatLng getSouthEast()`
  /// The returned object must be released after use, by calling the [release] method.
  latlng_.LatLng getSouthEast() {
    return _getSouthEast(
            reference.pointer, _id_getSouthEast as jni.JMethodIDPtr)
        .object(const latlng_.$LatLngType());
  }

  static final _id_getNorthWest = _class.instanceMethodId(
    r'getNorthWest',
    r'()Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _getNorthWest = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.geometry.LatLng getNorthWest()`
  /// The returned object must be released after use, by calling the [release] method.
  latlng_.LatLng getNorthWest() {
    return _getNorthWest(
            reference.pointer, _id_getNorthWest as jni.JMethodIDPtr)
        .object(const latlng_.$LatLngType());
  }

  static final _id_getSpan = _class.instanceMethodId(
    r'getSpan',
    r'()Lorg/maplibre/android/geometry/LatLngSpan;',
  );

  static final _getSpan = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.geometry.LatLngSpan getSpan()`
  /// The returned object must be released after use, by calling the [release] method.
  latlngspan_.LatLngSpan getSpan() {
    return _getSpan(reference.pointer, _id_getSpan as jni.JMethodIDPtr)
        .object(const latlngspan_.$LatLngSpanType());
  }

  static final _id_getLatitudeSpan = _class.instanceMethodId(
    r'getLatitudeSpan',
    r'()D',
  );

  static final _getLatitudeSpan = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final double getLatitudeSpan()`
  double getLatitudeSpan() {
    return _getLatitudeSpan(
            reference.pointer, _id_getLatitudeSpan as jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getLongitudeSpan = _class.instanceMethodId(
    r'getLongitudeSpan',
    r'()D',
  );

  static final _getLongitudeSpan = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final double getLongitudeSpan()`
  double getLongitudeSpan() {
    return _getLongitudeSpan(
            reference.pointer, _id_getLongitudeSpan as jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_isEmptySpan = _class.instanceMethodId(
    r'isEmptySpan',
    r'()Z',
  );

  static final _isEmptySpan = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final boolean isEmptySpan()`
  bool isEmptySpan() {
    return _isEmptySpan(reference.pointer, _id_isEmptySpan as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_toLatLngs = _class.instanceMethodId(
    r'toLatLngs',
    r'()[Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _toLatLngs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.geometry.LatLng[] toLatLngs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<latlng_.LatLng> toLatLngs() {
    return _toLatLngs(reference.pointer, _id_toLatLngs as jni.JMethodIDPtr)
        .object(const jni.JArrayType(latlng_.$LatLngType()));
  }

  static final _id_include = _class.instanceMethodId(
    r'include',
    r'(Lorg/maplibre/android/geometry/LatLng;)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _include = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds include(org.maplibre.android.geometry.LatLng latLng)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds include(
    latlng_.LatLng latLng,
  ) {
    return _include(reference.pointer, _id_include as jni.JMethodIDPtr,
            latLng.reference.pointer)
        .object(const $LatLngBoundsType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_contains = _class.instanceMethodId(
    r'contains',
    r'(Lorg/maplibre/android/geometry/LatLng;)Z',
  );

  static final _contains = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final boolean contains(org.maplibre.android.geometry.LatLng latLng)`
  bool contains(
    latlng_.LatLng latLng,
  ) {
    return _contains(reference.pointer, _id_contains as jni.JMethodIDPtr,
            latLng.reference.pointer)
        .boolean;
  }

  static final _id_contains1 = _class.instanceMethodId(
    r'contains',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;)Z',
  );

  static final _contains1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final boolean contains(org.maplibre.android.geometry.LatLngBounds latLngBounds)`
  bool contains1(
    LatLngBounds latLngBounds,
  ) {
    return _contains1(reference.pointer, _id_contains1 as jni.JMethodIDPtr,
            latLngBounds.reference.pointer)
        .boolean;
  }

  static final _id_union = _class.instanceMethodId(
    r'union',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _union = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds union(org.maplibre.android.geometry.LatLngBounds latLngBounds)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds union(
    LatLngBounds latLngBounds,
  ) {
    return _union(reference.pointer, _id_union as jni.JMethodIDPtr,
            latLngBounds.reference.pointer)
        .object(const $LatLngBoundsType());
  }

  static final _id_union1 = _class.instanceMethodId(
    r'union',
    r'(DDDD)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _union1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Double,
                        ffi.Double,
                        ffi.Double,
                        ffi.Double
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              double, double, double, double)>();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds union(double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds union1(
    double d,
    double d1,
    double d2,
    double d3,
  ) {
    return _union1(
            reference.pointer, _id_union1 as jni.JMethodIDPtr, d, d1, d2, d3)
        .object(const $LatLngBoundsType());
  }

  static final _id_intersect = _class.instanceMethodId(
    r'intersect',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _intersect = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds intersect(org.maplibre.android.geometry.LatLngBounds latLngBounds)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds intersect(
    LatLngBounds latLngBounds,
  ) {
    return _intersect(reference.pointer, _id_intersect as jni.JMethodIDPtr,
            latLngBounds.reference.pointer)
        .object(const $LatLngBoundsType());
  }

  static final _id_intersect1 = _class.instanceMethodId(
    r'intersect',
    r'(DDDD)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _intersect1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Double,
                        ffi.Double,
                        ffi.Double,
                        ffi.Double
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              double, double, double, double)>();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds intersect(double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  LatLngBounds intersect1(
    double d,
    double d1,
    double d2,
    double d3,
  ) {
    return _intersect1(reference.pointer, _id_intersect1 as jni.JMethodIDPtr, d,
            d1, d2, d3)
        .object(const $LatLngBoundsType());
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_world = _class.staticMethodId(
    r'world',
    r'()Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _world = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: `static public final org.maplibre.android.geometry.LatLngBounds world()`
  /// The returned object must be released after use, by calling the [release] method.
  static LatLngBounds world() {
    return _world(_class.reference.pointer, _id_world as jni.JMethodIDPtr)
        .object(const $LatLngBoundsType());
  }

  static final _id_from = _class.staticMethodId(
    r'from',
    r'(DDDD)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _from = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Double,
                        ffi.Double,
                        ffi.Double,
                        ffi.Double
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              double, double, double, double)>();

  /// from: `static public final org.maplibre.android.geometry.LatLngBounds from(double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  static LatLngBounds from(
    double d,
    double d1,
    double d2,
    double d3,
  ) {
    return _from(_class.reference.pointer, _id_from as jni.JMethodIDPtr, d, d1,
            d2, d3)
        .object(const $LatLngBoundsType());
  }

  static final _id_from1 = _class.staticMethodId(
    r'from',
    r'(III)Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _from1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, $Int32, $Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int)>();

  /// from: `static public final org.maplibre.android.geometry.LatLngBounds from(int i, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  static LatLngBounds from1(
    int i,
    int i1,
    int i2,
  ) {
    return _from1(
            _class.reference.pointer, _id_from1 as jni.JMethodIDPtr, i, i1, i2)
        .object(const $LatLngBoundsType());
  }
}

final class $LatLngBoundsType extends jni.JObjType<LatLngBounds> {
  const $LatLngBoundsType();

  @override
  String get signature => r'Lorg/maplibre/android/geometry/LatLngBounds;';

  @override
  LatLngBounds fromReference(jni.JReference reference) =>
      LatLngBounds.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LatLngBoundsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LatLngBoundsType) &&
        other is $LatLngBoundsType;
  }
}
