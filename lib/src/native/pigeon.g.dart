// Autogenerated from Pigeon (v22.4.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

/// Influences the y direction of the tile coordinates.
enum TileScheme {
  /// Slippy map tilenames scheme.
  xyz,

  /// OSGeo spec scheme.
  tms,
}

/// The encoding used by this source. Mapbox Terrain RGB is used by default.
enum RasterDemEncoding {
  /// Terrarium format PNG tiles.
  terrarium,

  /// Mapbox Terrain RGB tiles.
  mapbox,

  /// Decodes tiles using the redFactor, blueFactor, greenFactor, baseShift
  /// parameters.
  custom,
}

/// A longitude/latitude coordinate object.
class LngLat {
  LngLat({
    required this.lng,
    required this.lat,
  });

  /// The longitude
  double lng;

  /// The latitude
  double lat;

  Object encode() {
    return <Object?>[
      lng,
      lat,
    ];
  }

  static LngLat decode(Object result) {
    result as List<Object?>;
    return LngLat(
      lng: result[0]! as double,
      lat: result[1]! as double,
    );
  }
}

/// A pixel location / location on the device screen.
class ScreenLocation {
  ScreenLocation({
    required this.x,
    required this.y,
  });

  /// The x coordinate
  double x;

  /// The y coordinate
  double y;

  Object encode() {
    return <Object?>[
      x,
      y,
    ];
  }

  static ScreenLocation decode(Object result) {
    result as List<Object?>;
    return ScreenLocation(
      x: result[0]! as double,
      y: result[1]! as double,
    );
  }
}

/// The current position of the map camera.
class MapCamera {
  MapCamera({
    required this.center,
    required this.zoom,
    required this.tilt,
    required this.bearing,
  });

  LngLat center;

  double zoom;

  double tilt;

  double bearing;

  Object encode() {
    return <Object?>[
      center,
      zoom,
      tilt,
      bearing,
    ];
  }

  static MapCamera decode(Object result) {
    result as List<Object?>;
    return MapCamera(
      center: result[0]! as LngLat,
      zoom: result[1]! as double,
      tilt: result[2]! as double,
      bearing: result[3]! as double,
    );
  }
}

/// LatLng bound object
class LngLatBounds {
  LngLatBounds({
    required this.longitudeWest,
    required this.longitudeEast,
    required this.latitudeSouth,
    required this.latitudeNorth,
  });

  double longitudeWest;

  double longitudeEast;

  double latitudeSouth;

  double latitudeNorth;

  Object encode() {
    return <Object?>[
      longitudeWest,
      longitudeEast,
      latitudeSouth,
      latitudeNorth,
    ];
  }

  static LngLatBounds decode(Object result) {
    result as List<Object?>;
    return LngLatBounds(
      longitudeWest: result[0]! as double,
      longitudeEast: result[1]! as double,
      latitudeSouth: result[2]! as double,
      latitudeNorth: result[3]! as double,
    );
  }
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is TileScheme) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    } else if (value is RasterDemEncoding) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    } else if (value is LngLat) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is ScreenLocation) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is MapCamera) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is LngLatBounds) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : TileScheme.values[value];
      case 130:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : RasterDemEncoding.values[value];
      case 131:
        return LngLat.decode(readValue(buffer)!);
      case 132:
        return ScreenLocation.decode(readValue(buffer)!);
      case 133:
        return MapCamera.decode(readValue(buffer)!);
      case 134:
        return LngLatBounds.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}
