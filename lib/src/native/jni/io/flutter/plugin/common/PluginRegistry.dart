// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `io.flutter.plugin.common.PluginRegistry$ActivityResultListener`
class PluginRegistry_ActivityResultListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PluginRegistry_ActivityResultListener> $type;

  @_$jni.internal
  PluginRegistry_ActivityResultListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'io/flutter/plugin/common/PluginRegistry$ActivityResultListener');

  /// The type which includes information such as the signature of this class.
  static const type = $PluginRegistry_ActivityResultListener$Type();
  static final _id_onActivityResult = _class.instanceMethodId(
    r'onActivityResult',
    r'(IILandroid/content/Intent;)Z',
  );

  static final _onActivityResult = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract boolean onActivityResult(int i, int i1, android.content.Intent intent)`
  bool onActivityResult(
    int i,
    int i1,
    _$jni.JObject intent,
  ) {
    return _onActivityResult(
            reference.pointer,
            _id_onActivityResult as _$jni.JMethodIDPtr,
            i,
            i1,
            intent.reference.pointer)
        .boolean;
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $PluginRegistry_ActivityResultListener> _$impls =
      {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onActivityResult(IILandroid/content/Intent;)Z') {
        final $r = _$impls[$p]!.onActivityResult(
          $a[0]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[1]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[2].as(const _$jni.JObjectType(), releaseOriginal: true),
        );
        return _$jni.JBoolean($r).reference.toPointer();
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $PluginRegistry_ActivityResultListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$ActivityResultListener',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry_ActivityResultListener.implement(
    $PluginRegistry_ActivityResultListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry_ActivityResultListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry_ActivityResultListener {
  factory $PluginRegistry_ActivityResultListener({
    required bool Function(int i, int i1, _$jni.JObject intent)
        onActivityResult,
  }) = _$PluginRegistry_ActivityResultListener;

  bool onActivityResult(int i, int i1, _$jni.JObject intent);
}

final class _$PluginRegistry_ActivityResultListener
    with $PluginRegistry_ActivityResultListener {
  _$PluginRegistry_ActivityResultListener({
    required bool Function(int i, int i1, _$jni.JObject intent)
        onActivityResult,
  }) : _onActivityResult = onActivityResult;

  final bool Function(int i, int i1, _$jni.JObject intent) _onActivityResult;

  bool onActivityResult(int i, int i1, _$jni.JObject intent) {
    return _onActivityResult(i, i1, intent);
  }
}

final class $PluginRegistry_ActivityResultListener$Type
    extends _$jni.JObjType<PluginRegistry_ActivityResultListener> {
  @_$jni.internal
  const $PluginRegistry_ActivityResultListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;';

  @_$jni.internal
  @_$core.override
  PluginRegistry_ActivityResultListener fromReference(
          _$jni.JReference reference) =>
      PluginRegistry_ActivityResultListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PluginRegistry_ActivityResultListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry_ActivityResultListener$Type) &&
        other is $PluginRegistry_ActivityResultListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$NewIntentListener`
class PluginRegistry_NewIntentListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PluginRegistry_NewIntentListener> $type;

  @_$jni.internal
  PluginRegistry_NewIntentListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'io/flutter/plugin/common/PluginRegistry$NewIntentListener');

  /// The type which includes information such as the signature of this class.
  static const type = $PluginRegistry_NewIntentListener$Type();
  static final _id_onNewIntent = _class.instanceMethodId(
    r'onNewIntent',
    r'(Landroid/content/Intent;)Z',
  );

  static final _onNewIntent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract boolean onNewIntent(android.content.Intent intent)`
  bool onNewIntent(
    _$jni.JObject intent,
  ) {
    return _onNewIntent(reference.pointer,
            _id_onNewIntent as _$jni.JMethodIDPtr, intent.reference.pointer)
        .boolean;
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $PluginRegistry_NewIntentListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onNewIntent(Landroid/content/Intent;)Z') {
        final $r = _$impls[$p]!.onNewIntent(
          $a[0].as(const _$jni.JObjectType(), releaseOriginal: true),
        );
        return _$jni.JBoolean($r).reference.toPointer();
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $PluginRegistry_NewIntentListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$NewIntentListener',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry_NewIntentListener.implement(
    $PluginRegistry_NewIntentListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry_NewIntentListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry_NewIntentListener {
  factory $PluginRegistry_NewIntentListener({
    required bool Function(_$jni.JObject intent) onNewIntent,
  }) = _$PluginRegistry_NewIntentListener;

  bool onNewIntent(_$jni.JObject intent);
}

final class _$PluginRegistry_NewIntentListener
    with $PluginRegistry_NewIntentListener {
  _$PluginRegistry_NewIntentListener({
    required bool Function(_$jni.JObject intent) onNewIntent,
  }) : _onNewIntent = onNewIntent;

  final bool Function(_$jni.JObject intent) _onNewIntent;

  bool onNewIntent(_$jni.JObject intent) {
    return _onNewIntent(intent);
  }
}

final class $PluginRegistry_NewIntentListener$Type
    extends _$jni.JObjType<PluginRegistry_NewIntentListener> {
  @_$jni.internal
  const $PluginRegistry_NewIntentListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$NewIntentListener;';

  @_$jni.internal
  @_$core.override
  PluginRegistry_NewIntentListener fromReference(_$jni.JReference reference) =>
      PluginRegistry_NewIntentListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PluginRegistry_NewIntentListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry_NewIntentListener$Type) &&
        other is $PluginRegistry_NewIntentListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$PluginRegistrantCallback`
class PluginRegistry_PluginRegistrantCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PluginRegistry_PluginRegistrantCallback> $type;

  @_$jni.internal
  PluginRegistry_PluginRegistrantCallback.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'io/flutter/plugin/common/PluginRegistry$PluginRegistrantCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $PluginRegistry_PluginRegistrantCallback$Type();
  static final _id_registerWith = _class.instanceMethodId(
    r'registerWith',
    r'(Lio/flutter/plugin/common/PluginRegistry;)V',
  );

  static final _registerWith = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void registerWith(io.flutter.plugin.common.PluginRegistry pluginRegistry)`
  void registerWith(
    PluginRegistry pluginRegistry,
  ) {
    _registerWith(reference.pointer, _id_registerWith as _$jni.JMethodIDPtr,
            pluginRegistry.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $PluginRegistry_PluginRegistrantCallback>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'registerWith(Lio/flutter/plugin/common/PluginRegistry;)V') {
        _$impls[$p]!.registerWith(
          $a[0].as(const $PluginRegistry$Type(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $PluginRegistry_PluginRegistrantCallback $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$PluginRegistrantCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.registerWith$async)
          r'registerWith(Lio/flutter/plugin/common/PluginRegistry;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry_PluginRegistrantCallback.implement(
    $PluginRegistry_PluginRegistrantCallback $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry_PluginRegistrantCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry_PluginRegistrantCallback {
  factory $PluginRegistry_PluginRegistrantCallback({
    required void Function(PluginRegistry pluginRegistry) registerWith,
    bool registerWith$async,
  }) = _$PluginRegistry_PluginRegistrantCallback;

  void registerWith(PluginRegistry pluginRegistry);
  bool get registerWith$async => false;
}

final class _$PluginRegistry_PluginRegistrantCallback
    with $PluginRegistry_PluginRegistrantCallback {
  _$PluginRegistry_PluginRegistrantCallback({
    required void Function(PluginRegistry pluginRegistry) registerWith,
    this.registerWith$async = false,
  }) : _registerWith = registerWith;

  final void Function(PluginRegistry pluginRegistry) _registerWith;
  final bool registerWith$async;

  void registerWith(PluginRegistry pluginRegistry) {
    return _registerWith(pluginRegistry);
  }
}

final class $PluginRegistry_PluginRegistrantCallback$Type
    extends _$jni.JObjType<PluginRegistry_PluginRegistrantCallback> {
  @_$jni.internal
  const $PluginRegistry_PluginRegistrantCallback$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$PluginRegistrantCallback;';

  @_$jni.internal
  @_$core.override
  PluginRegistry_PluginRegistrantCallback fromReference(
          _$jni.JReference reference) =>
      PluginRegistry_PluginRegistrantCallback.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PluginRegistry_PluginRegistrantCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry_PluginRegistrantCallback$Type) &&
        other is $PluginRegistry_PluginRegistrantCallback$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$Registrar`
class PluginRegistry_Registrar extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PluginRegistry_Registrar> $type;

  @_$jni.internal
  PluginRegistry_Registrar.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'io/flutter/plugin/common/PluginRegistry$Registrar');

  /// The type which includes information such as the signature of this class.
  static const type = $PluginRegistry_Registrar$Type();
  static final _id_activity = _class.instanceMethodId(
    r'activity',
    r'()Landroid/app/Activity;',
  );

  static final _activity = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract android.app.Activity activity()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject activity() {
    return _activity(reference.pointer, _id_activity as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_context = _class.instanceMethodId(
    r'context',
    r'()Landroid/content/Context;',
  );

  static final _context = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.Context context()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject context() {
    return _context(reference.pointer, _id_context as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_activeContext = _class.instanceMethodId(
    r'activeContext',
    r'()Landroid/content/Context;',
  );

  static final _activeContext = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.Context activeContext()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject activeContext() {
    return _activeContext(
            reference.pointer, _id_activeContext as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_messenger = _class.instanceMethodId(
    r'messenger',
    r'()Lio/flutter/plugin/common/BinaryMessenger;',
  );

  static final _messenger = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract io.flutter.plugin.common.BinaryMessenger messenger()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject messenger() {
    return _messenger(reference.pointer, _id_messenger as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_textures = _class.instanceMethodId(
    r'textures',
    r'()Lio/flutter/view/TextureRegistry;',
  );

  static final _textures = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract io.flutter.view.TextureRegistry textures()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject textures() {
    return _textures(reference.pointer, _id_textures as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_platformViewRegistry = _class.instanceMethodId(
    r'platformViewRegistry',
    r'()Lio/flutter/plugin/platform/PlatformViewRegistry;',
  );

  static final _platformViewRegistry = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject platformViewRegistry() {
    return _platformViewRegistry(
            reference.pointer, _id_platformViewRegistry as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_view = _class.instanceMethodId(
    r'view',
    r'()Lio/flutter/view/FlutterView;',
  );

  static final _view = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract io.flutter.view.FlutterView view()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject view() {
    return _view(reference.pointer, _id_view as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_lookupKeyForAsset = _class.instanceMethodId(
    r'lookupKeyForAsset',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _lookupKeyForAsset = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract java.lang.String lookupKeyForAsset(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString lookupKeyForAsset(
    _$jni.JString string,
  ) {
    return _lookupKeyForAsset(
            reference.pointer,
            _id_lookupKeyForAsset as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JStringType());
  }

  static final _id_lookupKeyForAsset$1 = _class.instanceMethodId(
    r'lookupKeyForAsset',
    r'(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _lookupKeyForAsset$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract java.lang.String lookupKeyForAsset(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString lookupKeyForAsset$1(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    return _lookupKeyForAsset$1(
            reference.pointer,
            _id_lookupKeyForAsset$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .object(const _$jni.JStringType());
  }

  static final _id_publish = _class.instanceMethodId(
    r'publish',
    r'(Ljava/lang/Object;)Lio/flutter/plugin/common/PluginRegistry$Registrar;',
  );

  static final _publish = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract io.flutter.plugin.common.PluginRegistry$Registrar publish(java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  PluginRegistry_Registrar publish(
    _$jni.JObject object,
  ) {
    return _publish(reference.pointer, _id_publish as _$jni.JMethodIDPtr,
            object.reference.pointer)
        .object(const $PluginRegistry_Registrar$Type());
  }

  static final _id_addRequestPermissionsResultListener =
      _class.instanceMethodId(
    r'addRequestPermissionsResultListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;',
  );

  static final _addRequestPermissionsResultListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract io.flutter.plugin.common.PluginRegistry$Registrar addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener requestPermissionsResultListener)`
  /// The returned object must be released after use, by calling the [release] method.
  PluginRegistry_Registrar addRequestPermissionsResultListener(
    PluginRegistry_RequestPermissionsResultListener
        requestPermissionsResultListener,
  ) {
    return _addRequestPermissionsResultListener(
            reference.pointer,
            _id_addRequestPermissionsResultListener as _$jni.JMethodIDPtr,
            requestPermissionsResultListener.reference.pointer)
        .object(const $PluginRegistry_Registrar$Type());
  }

  static final _id_addActivityResultListener = _class.instanceMethodId(
    r'addActivityResultListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;',
  );

  static final _addActivityResultListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract io.flutter.plugin.common.PluginRegistry$Registrar addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener activityResultListener)`
  /// The returned object must be released after use, by calling the [release] method.
  PluginRegistry_Registrar addActivityResultListener(
    PluginRegistry_ActivityResultListener activityResultListener,
  ) {
    return _addActivityResultListener(
            reference.pointer,
            _id_addActivityResultListener as _$jni.JMethodIDPtr,
            activityResultListener.reference.pointer)
        .object(const $PluginRegistry_Registrar$Type());
  }

  static final _id_addNewIntentListener = _class.instanceMethodId(
    r'addNewIntentListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$NewIntentListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;',
  );

  static final _addNewIntentListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract io.flutter.plugin.common.PluginRegistry$Registrar addNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener newIntentListener)`
  /// The returned object must be released after use, by calling the [release] method.
  PluginRegistry_Registrar addNewIntentListener(
    PluginRegistry_NewIntentListener newIntentListener,
  ) {
    return _addNewIntentListener(
            reference.pointer,
            _id_addNewIntentListener as _$jni.JMethodIDPtr,
            newIntentListener.reference.pointer)
        .object(const $PluginRegistry_Registrar$Type());
  }

  static final _id_addUserLeaveHintListener = _class.instanceMethodId(
    r'addUserLeaveHintListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$UserLeaveHintListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;',
  );

  static final _addUserLeaveHintListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract io.flutter.plugin.common.PluginRegistry$Registrar addUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener userLeaveHintListener)`
  /// The returned object must be released after use, by calling the [release] method.
  PluginRegistry_Registrar addUserLeaveHintListener(
    PluginRegistry_UserLeaveHintListener userLeaveHintListener,
  ) {
    return _addUserLeaveHintListener(
            reference.pointer,
            _id_addUserLeaveHintListener as _$jni.JMethodIDPtr,
            userLeaveHintListener.reference.pointer)
        .object(const $PluginRegistry_Registrar$Type());
  }

  static final _id_addWindowFocusChangedListener = _class.instanceMethodId(
    r'addWindowFocusChangedListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;',
  );

  static final _addWindowFocusChangedListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract io.flutter.plugin.common.PluginRegistry$Registrar addWindowFocusChangedListener(io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener windowFocusChangedListener)`
  /// The returned object must be released after use, by calling the [release] method.
  PluginRegistry_Registrar addWindowFocusChangedListener(
    PluginRegistry_WindowFocusChangedListener windowFocusChangedListener,
  ) {
    return _addWindowFocusChangedListener(
            reference.pointer,
            _id_addWindowFocusChangedListener as _$jni.JMethodIDPtr,
            windowFocusChangedListener.reference.pointer)
        .object(const $PluginRegistry_Registrar$Type());
  }

  static final _id_addViewDestroyListener = _class.instanceMethodId(
    r'addViewDestroyListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$ViewDestroyListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;',
  );

  static final _addViewDestroyListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract io.flutter.plugin.common.PluginRegistry$Registrar addViewDestroyListener(io.flutter.plugin.common.PluginRegistry$ViewDestroyListener viewDestroyListener)`
  /// The returned object must be released after use, by calling the [release] method.
  PluginRegistry_Registrar addViewDestroyListener(
    PluginRegistry_ViewDestroyListener viewDestroyListener,
  ) {
    return _addViewDestroyListener(
            reference.pointer,
            _id_addViewDestroyListener as _$jni.JMethodIDPtr,
            viewDestroyListener.reference.pointer)
        .object(const $PluginRegistry_Registrar$Type());
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $PluginRegistry_Registrar> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'activity()Landroid/app/Activity;') {
        final $r = _$impls[$p]!.activity();
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'context()Landroid/content/Context;') {
        final $r = _$impls[$p]!.context();
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'activeContext()Landroid/content/Context;') {
        final $r = _$impls[$p]!.activeContext();
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'messenger()Lio/flutter/plugin/common/BinaryMessenger;') {
        final $r = _$impls[$p]!.messenger();
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'textures()Lio/flutter/view/TextureRegistry;') {
        final $r = _$impls[$p]!.textures();
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'platformViewRegistry()Lio/flutter/plugin/platform/PlatformViewRegistry;') {
        final $r = _$impls[$p]!.platformViewRegistry();
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'view()Lio/flutter/view/FlutterView;') {
        final $r = _$impls[$p]!.view();
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'lookupKeyForAsset(Ljava/lang/String;)Ljava/lang/String;') {
        final $r = _$impls[$p]!.lookupKeyForAsset(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'lookupKeyForAsset(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;') {
        final $r = _$impls[$p]!.lookupKeyForAsset$1(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[1].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'publish(Ljava/lang/Object;)Lio/flutter/plugin/common/PluginRegistry$Registrar;') {
        final $r = _$impls[$p]!.publish(
          $a[0].as(const _$jni.JObjectType(), releaseOriginal: true),
        );
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'addRequestPermissionsResultListener(Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;') {
        final $r = _$impls[$p]!.addRequestPermissionsResultListener(
          $a[0].as(
              const $PluginRegistry_RequestPermissionsResultListener$Type(),
              releaseOriginal: true),
        );
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'addActivityResultListener(Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;') {
        final $r = _$impls[$p]!.addActivityResultListener(
          $a[0].as(const $PluginRegistry_ActivityResultListener$Type(),
              releaseOriginal: true),
        );
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'addNewIntentListener(Lio/flutter/plugin/common/PluginRegistry$NewIntentListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;') {
        final $r = _$impls[$p]!.addNewIntentListener(
          $a[0].as(const $PluginRegistry_NewIntentListener$Type(),
              releaseOriginal: true),
        );
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'addUserLeaveHintListener(Lio/flutter/plugin/common/PluginRegistry$UserLeaveHintListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;') {
        final $r = _$impls[$p]!.addUserLeaveHintListener(
          $a[0].as(const $PluginRegistry_UserLeaveHintListener$Type(),
              releaseOriginal: true),
        );
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'addWindowFocusChangedListener(Lio/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;') {
        final $r = _$impls[$p]!.addWindowFocusChangedListener(
          $a[0].as(const $PluginRegistry_WindowFocusChangedListener$Type(),
              releaseOriginal: true),
        );
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'addViewDestroyListener(Lio/flutter/plugin/common/PluginRegistry$ViewDestroyListener;)Lio/flutter/plugin/common/PluginRegistry$Registrar;') {
        final $r = _$impls[$p]!.addViewDestroyListener(
          $a[0].as(const $PluginRegistry_ViewDestroyListener$Type(),
              releaseOriginal: true),
        );
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $PluginRegistry_Registrar $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$Registrar',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry_Registrar.implement(
    $PluginRegistry_Registrar $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry_Registrar.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry_Registrar {
  factory $PluginRegistry_Registrar({
    required _$jni.JObject Function() activity,
    required _$jni.JObject Function() context,
    required _$jni.JObject Function() activeContext,
    required _$jni.JObject Function() messenger,
    required _$jni.JObject Function() textures,
    required _$jni.JObject Function() platformViewRegistry,
    required _$jni.JObject Function() view,
    required _$jni.JString Function(_$jni.JString string) lookupKeyForAsset,
    required _$jni.JString Function(_$jni.JString string, _$jni.JString string1)
        lookupKeyForAsset$1,
    required PluginRegistry_Registrar Function(_$jni.JObject object) publish,
    required PluginRegistry_Registrar Function(
            PluginRegistry_RequestPermissionsResultListener
                requestPermissionsResultListener)
        addRequestPermissionsResultListener,
    required PluginRegistry_Registrar Function(
            PluginRegistry_ActivityResultListener activityResultListener)
        addActivityResultListener,
    required PluginRegistry_Registrar Function(
            PluginRegistry_NewIntentListener newIntentListener)
        addNewIntentListener,
    required PluginRegistry_Registrar Function(
            PluginRegistry_UserLeaveHintListener userLeaveHintListener)
        addUserLeaveHintListener,
    required PluginRegistry_Registrar Function(
            PluginRegistry_WindowFocusChangedListener
                windowFocusChangedListener)
        addWindowFocusChangedListener,
    required PluginRegistry_Registrar Function(
            PluginRegistry_ViewDestroyListener viewDestroyListener)
        addViewDestroyListener,
  }) = _$PluginRegistry_Registrar;

  _$jni.JObject activity();
  _$jni.JObject context();
  _$jni.JObject activeContext();
  _$jni.JObject messenger();
  _$jni.JObject textures();
  _$jni.JObject platformViewRegistry();
  _$jni.JObject view();
  _$jni.JString lookupKeyForAsset(_$jni.JString string);
  _$jni.JString lookupKeyForAsset$1(
      _$jni.JString string, _$jni.JString string1);
  PluginRegistry_Registrar publish(_$jni.JObject object);
  PluginRegistry_Registrar addRequestPermissionsResultListener(
      PluginRegistry_RequestPermissionsResultListener
          requestPermissionsResultListener);
  PluginRegistry_Registrar addActivityResultListener(
      PluginRegistry_ActivityResultListener activityResultListener);
  PluginRegistry_Registrar addNewIntentListener(
      PluginRegistry_NewIntentListener newIntentListener);
  PluginRegistry_Registrar addUserLeaveHintListener(
      PluginRegistry_UserLeaveHintListener userLeaveHintListener);
  PluginRegistry_Registrar addWindowFocusChangedListener(
      PluginRegistry_WindowFocusChangedListener windowFocusChangedListener);
  PluginRegistry_Registrar addViewDestroyListener(
      PluginRegistry_ViewDestroyListener viewDestroyListener);
}

final class _$PluginRegistry_Registrar with $PluginRegistry_Registrar {
  _$PluginRegistry_Registrar({
    required _$jni.JObject Function() activity,
    required _$jni.JObject Function() context,
    required _$jni.JObject Function() activeContext,
    required _$jni.JObject Function() messenger,
    required _$jni.JObject Function() textures,
    required _$jni.JObject Function() platformViewRegistry,
    required _$jni.JObject Function() view,
    required _$jni.JString Function(_$jni.JString string) lookupKeyForAsset,
    required _$jni.JString Function(_$jni.JString string, _$jni.JString string1)
        lookupKeyForAsset$1,
    required PluginRegistry_Registrar Function(_$jni.JObject object) publish,
    required PluginRegistry_Registrar Function(
            PluginRegistry_RequestPermissionsResultListener
                requestPermissionsResultListener)
        addRequestPermissionsResultListener,
    required PluginRegistry_Registrar Function(
            PluginRegistry_ActivityResultListener activityResultListener)
        addActivityResultListener,
    required PluginRegistry_Registrar Function(
            PluginRegistry_NewIntentListener newIntentListener)
        addNewIntentListener,
    required PluginRegistry_Registrar Function(
            PluginRegistry_UserLeaveHintListener userLeaveHintListener)
        addUserLeaveHintListener,
    required PluginRegistry_Registrar Function(
            PluginRegistry_WindowFocusChangedListener
                windowFocusChangedListener)
        addWindowFocusChangedListener,
    required PluginRegistry_Registrar Function(
            PluginRegistry_ViewDestroyListener viewDestroyListener)
        addViewDestroyListener,
  })  : _activity = activity,
        _context = context,
        _activeContext = activeContext,
        _messenger = messenger,
        _textures = textures,
        _platformViewRegistry = platformViewRegistry,
        _view = view,
        _lookupKeyForAsset = lookupKeyForAsset,
        _lookupKeyForAsset$1 = lookupKeyForAsset$1,
        _publish = publish,
        _addRequestPermissionsResultListener =
            addRequestPermissionsResultListener,
        _addActivityResultListener = addActivityResultListener,
        _addNewIntentListener = addNewIntentListener,
        _addUserLeaveHintListener = addUserLeaveHintListener,
        _addWindowFocusChangedListener = addWindowFocusChangedListener,
        _addViewDestroyListener = addViewDestroyListener;

  final _$jni.JObject Function() _activity;
  final _$jni.JObject Function() _context;
  final _$jni.JObject Function() _activeContext;
  final _$jni.JObject Function() _messenger;
  final _$jni.JObject Function() _textures;
  final _$jni.JObject Function() _platformViewRegistry;
  final _$jni.JObject Function() _view;
  final _$jni.JString Function(_$jni.JString string) _lookupKeyForAsset;
  final _$jni.JString Function(_$jni.JString string, _$jni.JString string1)
      _lookupKeyForAsset$1;
  final PluginRegistry_Registrar Function(_$jni.JObject object) _publish;
  final PluginRegistry_Registrar Function(
          PluginRegistry_RequestPermissionsResultListener
              requestPermissionsResultListener)
      _addRequestPermissionsResultListener;
  final PluginRegistry_Registrar Function(
          PluginRegistry_ActivityResultListener activityResultListener)
      _addActivityResultListener;
  final PluginRegistry_Registrar Function(
      PluginRegistry_NewIntentListener newIntentListener) _addNewIntentListener;
  final PluginRegistry_Registrar Function(
          PluginRegistry_UserLeaveHintListener userLeaveHintListener)
      _addUserLeaveHintListener;
  final PluginRegistry_Registrar Function(
          PluginRegistry_WindowFocusChangedListener windowFocusChangedListener)
      _addWindowFocusChangedListener;
  final PluginRegistry_Registrar Function(
          PluginRegistry_ViewDestroyListener viewDestroyListener)
      _addViewDestroyListener;

  _$jni.JObject activity() {
    return _activity();
  }

  _$jni.JObject context() {
    return _context();
  }

  _$jni.JObject activeContext() {
    return _activeContext();
  }

  _$jni.JObject messenger() {
    return _messenger();
  }

  _$jni.JObject textures() {
    return _textures();
  }

  _$jni.JObject platformViewRegistry() {
    return _platformViewRegistry();
  }

  _$jni.JObject view() {
    return _view();
  }

  _$jni.JString lookupKeyForAsset(_$jni.JString string) {
    return _lookupKeyForAsset(string);
  }

  _$jni.JString lookupKeyForAsset$1(
      _$jni.JString string, _$jni.JString string1) {
    return _lookupKeyForAsset$1(string, string1);
  }

  PluginRegistry_Registrar publish(_$jni.JObject object) {
    return _publish(object);
  }

  PluginRegistry_Registrar addRequestPermissionsResultListener(
      PluginRegistry_RequestPermissionsResultListener
          requestPermissionsResultListener) {
    return _addRequestPermissionsResultListener(
        requestPermissionsResultListener);
  }

  PluginRegistry_Registrar addActivityResultListener(
      PluginRegistry_ActivityResultListener activityResultListener) {
    return _addActivityResultListener(activityResultListener);
  }

  PluginRegistry_Registrar addNewIntentListener(
      PluginRegistry_NewIntentListener newIntentListener) {
    return _addNewIntentListener(newIntentListener);
  }

  PluginRegistry_Registrar addUserLeaveHintListener(
      PluginRegistry_UserLeaveHintListener userLeaveHintListener) {
    return _addUserLeaveHintListener(userLeaveHintListener);
  }

  PluginRegistry_Registrar addWindowFocusChangedListener(
      PluginRegistry_WindowFocusChangedListener windowFocusChangedListener) {
    return _addWindowFocusChangedListener(windowFocusChangedListener);
  }

  PluginRegistry_Registrar addViewDestroyListener(
      PluginRegistry_ViewDestroyListener viewDestroyListener) {
    return _addViewDestroyListener(viewDestroyListener);
  }
}

final class $PluginRegistry_Registrar$Type
    extends _$jni.JObjType<PluginRegistry_Registrar> {
  @_$jni.internal
  const $PluginRegistry_Registrar$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$Registrar;';

  @_$jni.internal
  @_$core.override
  PluginRegistry_Registrar fromReference(_$jni.JReference reference) =>
      PluginRegistry_Registrar.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PluginRegistry_Registrar$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry_Registrar$Type) &&
        other is $PluginRegistry_Registrar$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener`
class PluginRegistry_RequestPermissionsResultListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PluginRegistry_RequestPermissionsResultListener> $type;

  @_$jni.internal
  PluginRegistry_RequestPermissionsResultListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'io/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener');

  /// The type which includes information such as the signature of this class.
  static const type = $PluginRegistry_RequestPermissionsResultListener$Type();
  static final _id_onRequestPermissionsResult = _class.instanceMethodId(
    r'onRequestPermissionsResult',
    r'(I[Ljava/lang/String;[I)Z',
  );

  static final _onRequestPermissionsResult =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Int32,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  int,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract boolean onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)`
  bool onRequestPermissionsResult(
    int i,
    _$jni.JArray<_$jni.JString> strings,
    _$jni.JArray<_$jni.jint> is$,
  ) {
    return _onRequestPermissionsResult(
            reference.pointer,
            _id_onRequestPermissionsResult as _$jni.JMethodIDPtr,
            i,
            strings.reference.pointer,
            is$.reference.pointer)
        .boolean;
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $PluginRegistry_RequestPermissionsResultListener>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onRequestPermissionsResult(I[Ljava/lang/String;[I)Z') {
        final $r = _$impls[$p]!.onRequestPermissionsResult(
          $a[0]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[1].as(const _$jni.JArrayType(_$jni.JStringType()),
              releaseOriginal: true),
          $a[2].as(const _$jni.JArrayType(_$jni.jintType()),
              releaseOriginal: true),
        );
        return _$jni.JBoolean($r).reference.toPointer();
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $PluginRegistry_RequestPermissionsResultListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry_RequestPermissionsResultListener.implement(
    $PluginRegistry_RequestPermissionsResultListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry_RequestPermissionsResultListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry_RequestPermissionsResultListener {
  factory $PluginRegistry_RequestPermissionsResultListener({
    required bool Function(int i, _$jni.JArray<_$jni.JString> strings,
            _$jni.JArray<_$jni.jint> is$)
        onRequestPermissionsResult,
  }) = _$PluginRegistry_RequestPermissionsResultListener;

  bool onRequestPermissionsResult(
      int i, _$jni.JArray<_$jni.JString> strings, _$jni.JArray<_$jni.jint> is$);
}

final class _$PluginRegistry_RequestPermissionsResultListener
    with $PluginRegistry_RequestPermissionsResultListener {
  _$PluginRegistry_RequestPermissionsResultListener({
    required bool Function(int i, _$jni.JArray<_$jni.JString> strings,
            _$jni.JArray<_$jni.jint> is$)
        onRequestPermissionsResult,
  }) : _onRequestPermissionsResult = onRequestPermissionsResult;

  final bool Function(int i, _$jni.JArray<_$jni.JString> strings,
      _$jni.JArray<_$jni.jint> is$) _onRequestPermissionsResult;

  bool onRequestPermissionsResult(int i, _$jni.JArray<_$jni.JString> strings,
      _$jni.JArray<_$jni.jint> is$) {
    return _onRequestPermissionsResult(i, strings, is$);
  }
}

final class $PluginRegistry_RequestPermissionsResultListener$Type
    extends _$jni.JObjType<PluginRegistry_RequestPermissionsResultListener> {
  @_$jni.internal
  const $PluginRegistry_RequestPermissionsResultListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;';

  @_$jni.internal
  @_$core.override
  PluginRegistry_RequestPermissionsResultListener fromReference(
          _$jni.JReference reference) =>
      PluginRegistry_RequestPermissionsResultListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($PluginRegistry_RequestPermissionsResultListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry_RequestPermissionsResultListener$Type) &&
        other is $PluginRegistry_RequestPermissionsResultListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener`
class PluginRegistry_UserLeaveHintListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PluginRegistry_UserLeaveHintListener> $type;

  @_$jni.internal
  PluginRegistry_UserLeaveHintListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'io/flutter/plugin/common/PluginRegistry$UserLeaveHintListener');

  /// The type which includes information such as the signature of this class.
  static const type = $PluginRegistry_UserLeaveHintListener$Type();
  static final _id_onUserLeaveHint = _class.instanceMethodId(
    r'onUserLeaveHint',
    r'()V',
  );

  static final _onUserLeaveHint = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onUserLeaveHint()`
  void onUserLeaveHint() {
    _onUserLeaveHint(
            reference.pointer, _id_onUserLeaveHint as _$jni.JMethodIDPtr)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $PluginRegistry_UserLeaveHintListener> _$impls =
      {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onUserLeaveHint()V') {
        _$impls[$p]!.onUserLeaveHint();
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $PluginRegistry_UserLeaveHintListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onUserLeaveHint$async) r'onUserLeaveHint()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry_UserLeaveHintListener.implement(
    $PluginRegistry_UserLeaveHintListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry_UserLeaveHintListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry_UserLeaveHintListener {
  factory $PluginRegistry_UserLeaveHintListener({
    required void Function() onUserLeaveHint,
    bool onUserLeaveHint$async,
  }) = _$PluginRegistry_UserLeaveHintListener;

  void onUserLeaveHint();
  bool get onUserLeaveHint$async => false;
}

final class _$PluginRegistry_UserLeaveHintListener
    with $PluginRegistry_UserLeaveHintListener {
  _$PluginRegistry_UserLeaveHintListener({
    required void Function() onUserLeaveHint,
    this.onUserLeaveHint$async = false,
  }) : _onUserLeaveHint = onUserLeaveHint;

  final void Function() _onUserLeaveHint;
  final bool onUserLeaveHint$async;

  void onUserLeaveHint() {
    return _onUserLeaveHint();
  }
}

final class $PluginRegistry_UserLeaveHintListener$Type
    extends _$jni.JObjType<PluginRegistry_UserLeaveHintListener> {
  @_$jni.internal
  const $PluginRegistry_UserLeaveHintListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$UserLeaveHintListener;';

  @_$jni.internal
  @_$core.override
  PluginRegistry_UserLeaveHintListener fromReference(
          _$jni.JReference reference) =>
      PluginRegistry_UserLeaveHintListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PluginRegistry_UserLeaveHintListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry_UserLeaveHintListener$Type) &&
        other is $PluginRegistry_UserLeaveHintListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$ViewDestroyListener`
class PluginRegistry_ViewDestroyListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PluginRegistry_ViewDestroyListener> $type;

  @_$jni.internal
  PluginRegistry_ViewDestroyListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'io/flutter/plugin/common/PluginRegistry$ViewDestroyListener');

  /// The type which includes information such as the signature of this class.
  static const type = $PluginRegistry_ViewDestroyListener$Type();
  static final _id_onViewDestroy = _class.instanceMethodId(
    r'onViewDestroy',
    r'(Lio/flutter/view/FlutterNativeView;)Z',
  );

  static final _onViewDestroy = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract boolean onViewDestroy(io.flutter.view.FlutterNativeView flutterNativeView)`
  bool onViewDestroy(
    _$jni.JObject flutterNativeView,
  ) {
    return _onViewDestroy(
            reference.pointer,
            _id_onViewDestroy as _$jni.JMethodIDPtr,
            flutterNativeView.reference.pointer)
        .boolean;
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $PluginRegistry_ViewDestroyListener> _$impls =
      {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onViewDestroy(Lio/flutter/view/FlutterNativeView;)Z') {
        final $r = _$impls[$p]!.onViewDestroy(
          $a[0].as(const _$jni.JObjectType(), releaseOriginal: true),
        );
        return _$jni.JBoolean($r).reference.toPointer();
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $PluginRegistry_ViewDestroyListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$ViewDestroyListener',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry_ViewDestroyListener.implement(
    $PluginRegistry_ViewDestroyListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry_ViewDestroyListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry_ViewDestroyListener {
  factory $PluginRegistry_ViewDestroyListener({
    required bool Function(_$jni.JObject flutterNativeView) onViewDestroy,
  }) = _$PluginRegistry_ViewDestroyListener;

  bool onViewDestroy(_$jni.JObject flutterNativeView);
}

final class _$PluginRegistry_ViewDestroyListener
    with $PluginRegistry_ViewDestroyListener {
  _$PluginRegistry_ViewDestroyListener({
    required bool Function(_$jni.JObject flutterNativeView) onViewDestroy,
  }) : _onViewDestroy = onViewDestroy;

  final bool Function(_$jni.JObject flutterNativeView) _onViewDestroy;

  bool onViewDestroy(_$jni.JObject flutterNativeView) {
    return _onViewDestroy(flutterNativeView);
  }
}

final class $PluginRegistry_ViewDestroyListener$Type
    extends _$jni.JObjType<PluginRegistry_ViewDestroyListener> {
  @_$jni.internal
  const $PluginRegistry_ViewDestroyListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$ViewDestroyListener;';

  @_$jni.internal
  @_$core.override
  PluginRegistry_ViewDestroyListener fromReference(
          _$jni.JReference reference) =>
      PluginRegistry_ViewDestroyListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PluginRegistry_ViewDestroyListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry_ViewDestroyListener$Type) &&
        other is $PluginRegistry_ViewDestroyListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener`
class PluginRegistry_WindowFocusChangedListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PluginRegistry_WindowFocusChangedListener> $type;

  @_$jni.internal
  PluginRegistry_WindowFocusChangedListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'io/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $PluginRegistry_WindowFocusChangedListener$Type();
  static final _id_onWindowFocusChanged = _class.instanceMethodId(
    r'onWindowFocusChanged',
    r'(Z)V',
  );

  static final _onWindowFocusChanged = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void onWindowFocusChanged(boolean z)`
  void onWindowFocusChanged(
    bool z,
  ) {
    _onWindowFocusChanged(reference.pointer,
            _id_onWindowFocusChanged as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $PluginRegistry_WindowFocusChangedListener>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onWindowFocusChanged(Z)V') {
        _$impls[$p]!.onWindowFocusChanged(
          $a[0]
              .as(const _$jni.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $PluginRegistry_WindowFocusChangedListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onWindowFocusChanged$async) r'onWindowFocusChanged(Z)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry_WindowFocusChangedListener.implement(
    $PluginRegistry_WindowFocusChangedListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry_WindowFocusChangedListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry_WindowFocusChangedListener {
  factory $PluginRegistry_WindowFocusChangedListener({
    required void Function(bool z) onWindowFocusChanged,
    bool onWindowFocusChanged$async,
  }) = _$PluginRegistry_WindowFocusChangedListener;

  void onWindowFocusChanged(bool z);
  bool get onWindowFocusChanged$async => false;
}

final class _$PluginRegistry_WindowFocusChangedListener
    with $PluginRegistry_WindowFocusChangedListener {
  _$PluginRegistry_WindowFocusChangedListener({
    required void Function(bool z) onWindowFocusChanged,
    this.onWindowFocusChanged$async = false,
  }) : _onWindowFocusChanged = onWindowFocusChanged;

  final void Function(bool z) _onWindowFocusChanged;
  final bool onWindowFocusChanged$async;

  void onWindowFocusChanged(bool z) {
    return _onWindowFocusChanged(z);
  }
}

final class $PluginRegistry_WindowFocusChangedListener$Type
    extends _$jni.JObjType<PluginRegistry_WindowFocusChangedListener> {
  @_$jni.internal
  const $PluginRegistry_WindowFocusChangedListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lio/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener;';

  @_$jni.internal
  @_$core.override
  PluginRegistry_WindowFocusChangedListener fromReference(
          _$jni.JReference reference) =>
      PluginRegistry_WindowFocusChangedListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($PluginRegistry_WindowFocusChangedListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PluginRegistry_WindowFocusChangedListener$Type) &&
        other is $PluginRegistry_WindowFocusChangedListener$Type;
  }
}

/// from: `io.flutter.plugin.common.PluginRegistry`
class PluginRegistry extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PluginRegistry> $type;

  @_$jni.internal
  PluginRegistry.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'io/flutter/plugin/common/PluginRegistry');

  /// The type which includes information such as the signature of this class.
  static const type = $PluginRegistry$Type();
  static final _id_registrarFor = _class.instanceMethodId(
    r'registrarFor',
    r'(Ljava/lang/String;)Lio/flutter/plugin/common/PluginRegistry$Registrar;',
  );

  static final _registrarFor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  PluginRegistry_Registrar registrarFor(
    _$jni.JString string,
  ) {
    return _registrarFor(reference.pointer,
            _id_registrarFor as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const $PluginRegistry_Registrar$Type());
  }

  static final _id_hasPlugin = _class.instanceMethodId(
    r'hasPlugin',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasPlugin = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract boolean hasPlugin(java.lang.String string)`
  bool hasPlugin(
    _$jni.JString string,
  ) {
    return _hasPlugin(reference.pointer, _id_hasPlugin as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_valuePublishedByPlugin = _class.instanceMethodId(
    r'valuePublishedByPlugin',
    r'(Ljava/lang/String;)Ljava/lang/Object;',
  );

  static final _valuePublishedByPlugin = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract T valuePublishedByPlugin(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  $T valuePublishedByPlugin<$T extends _$jni.JObject>(
    _$jni.JString string, {
    required _$jni.JObjType<$T> T,
  }) {
    return _valuePublishedByPlugin(
            reference.pointer,
            _id_valuePublishedByPlugin as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(T);
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $PluginRegistry> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'registrarFor(Ljava/lang/String;)Lio/flutter/plugin/common/PluginRegistry$Registrar;') {
        final $r = _$impls[$p]!.registrarFor(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'hasPlugin(Ljava/lang/String;)Z') {
        final $r = _$impls[$p]!.hasPlugin(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.JBoolean($r).reference.toPointer();
      }
      if ($d ==
          r'valuePublishedByPlugin(Ljava/lang/String;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.valuePublishedByPlugin(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $PluginRegistry $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.plugin.common.PluginRegistry',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PluginRegistry.implement(
    $PluginRegistry $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return PluginRegistry.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PluginRegistry {
  factory $PluginRegistry({
    required PluginRegistry_Registrar Function(_$jni.JString string)
        registrarFor,
    required bool Function(_$jni.JString string) hasPlugin,
    required _$jni.JObject Function(_$jni.JString string)
        valuePublishedByPlugin,
  }) = _$PluginRegistry;

  PluginRegistry_Registrar registrarFor(_$jni.JString string);
  bool hasPlugin(_$jni.JString string);
  _$jni.JObject valuePublishedByPlugin(_$jni.JString string);
}

final class _$PluginRegistry with $PluginRegistry {
  _$PluginRegistry({
    required PluginRegistry_Registrar Function(_$jni.JString string)
        registrarFor,
    required bool Function(_$jni.JString string) hasPlugin,
    required _$jni.JObject Function(_$jni.JString string)
        valuePublishedByPlugin,
  })  : _registrarFor = registrarFor,
        _hasPlugin = hasPlugin,
        _valuePublishedByPlugin = valuePublishedByPlugin;

  final PluginRegistry_Registrar Function(_$jni.JString string) _registrarFor;
  final bool Function(_$jni.JString string) _hasPlugin;
  final _$jni.JObject Function(_$jni.JString string) _valuePublishedByPlugin;

  PluginRegistry_Registrar registrarFor(_$jni.JString string) {
    return _registrarFor(string);
  }

  bool hasPlugin(_$jni.JString string) {
    return _hasPlugin(string);
  }

  _$jni.JObject valuePublishedByPlugin(_$jni.JString string) {
    return _valuePublishedByPlugin(string);
  }
}

final class $PluginRegistry$Type extends _$jni.JObjType<PluginRegistry> {
  @_$jni.internal
  const $PluginRegistry$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lio/flutter/plugin/common/PluginRegistry;';

  @_$jni.internal
  @_$core.override
  PluginRegistry fromReference(_$jni.JReference reference) =>
      PluginRegistry.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PluginRegistry$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PluginRegistry$Type) &&
        other is $PluginRegistry$Type;
  }
}
