// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../../../../plugin/common/PluginRegistry.dart' as pluginregistry_;

/// from: `io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener`
class ActivityPluginBinding_OnSaveInstanceStateListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ActivityPluginBinding_OnSaveInstanceStateListener> $type;

  @_$jni.internal
  ActivityPluginBinding_OnSaveInstanceStateListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'io/flutter/embedding/engine/plugins/activity/ActivityPluginBinding$OnSaveInstanceStateListener');

  /// The type which includes information such as the signature of this class.
  static const type = $ActivityPluginBinding_OnSaveInstanceStateListener$Type();
  static final _id_onSaveInstanceState = _class.instanceMethodId(
    r'onSaveInstanceState',
    r'(Landroid/os/Bundle;)V',
  );

  static final _onSaveInstanceState = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onSaveInstanceState(android.os.Bundle bundle)`
  void onSaveInstanceState(
    _$jni.JObject bundle,
  ) {
    _onSaveInstanceState(
            reference.pointer,
            _id_onSaveInstanceState as _$jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onRestoreInstanceState = _class.instanceMethodId(
    r'onRestoreInstanceState',
    r'(Landroid/os/Bundle;)V',
  );

  static final _onRestoreInstanceState = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onRestoreInstanceState(android.os.Bundle bundle)`
  void onRestoreInstanceState(
    _$jni.JObject bundle,
  ) {
    _onRestoreInstanceState(
            reference.pointer,
            _id_onRestoreInstanceState as _$jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core
      .Map<int, $ActivityPluginBinding_OnSaveInstanceStateListener>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onSaveInstanceState(Landroid/os/Bundle;)V') {
        _$impls[$p]!.onSaveInstanceState(
          $a[0].as(const _$jni.JObjectType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d == r'onRestoreInstanceState(Landroid/os/Bundle;)V') {
        _$impls[$p]!.onRestoreInstanceState(
          $a[0].as(const _$jni.JObjectType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $ActivityPluginBinding_OnSaveInstanceStateListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onSaveInstanceState$async)
          r'onSaveInstanceState(Landroid/os/Bundle;)V',
        if ($impl.onRestoreInstanceState$async)
          r'onRestoreInstanceState(Landroid/os/Bundle;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ActivityPluginBinding_OnSaveInstanceStateListener.implement(
    $ActivityPluginBinding_OnSaveInstanceStateListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return ActivityPluginBinding_OnSaveInstanceStateListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ActivityPluginBinding_OnSaveInstanceStateListener {
  factory $ActivityPluginBinding_OnSaveInstanceStateListener({
    required void Function(_$jni.JObject bundle) onSaveInstanceState,
    bool onSaveInstanceState$async,
    required void Function(_$jni.JObject bundle) onRestoreInstanceState,
    bool onRestoreInstanceState$async,
  }) = _$ActivityPluginBinding_OnSaveInstanceStateListener;

  void onSaveInstanceState(_$jni.JObject bundle);
  bool get onSaveInstanceState$async => false;
  void onRestoreInstanceState(_$jni.JObject bundle);
  bool get onRestoreInstanceState$async => false;
}

final class _$ActivityPluginBinding_OnSaveInstanceStateListener
    with $ActivityPluginBinding_OnSaveInstanceStateListener {
  _$ActivityPluginBinding_OnSaveInstanceStateListener({
    required void Function(_$jni.JObject bundle) onSaveInstanceState,
    this.onSaveInstanceState$async = false,
    required void Function(_$jni.JObject bundle) onRestoreInstanceState,
    this.onRestoreInstanceState$async = false,
  })  : _onSaveInstanceState = onSaveInstanceState,
        _onRestoreInstanceState = onRestoreInstanceState;

  final void Function(_$jni.JObject bundle) _onSaveInstanceState;
  final bool onSaveInstanceState$async;
  final void Function(_$jni.JObject bundle) _onRestoreInstanceState;
  final bool onRestoreInstanceState$async;

  void onSaveInstanceState(_$jni.JObject bundle) {
    return _onSaveInstanceState(bundle);
  }

  void onRestoreInstanceState(_$jni.JObject bundle) {
    return _onRestoreInstanceState(bundle);
  }
}

final class $ActivityPluginBinding_OnSaveInstanceStateListener$Type
    extends _$jni.JObjType<ActivityPluginBinding_OnSaveInstanceStateListener> {
  @_$jni.internal
  const $ActivityPluginBinding_OnSaveInstanceStateListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lio/flutter/embedding/engine/plugins/activity/ActivityPluginBinding$OnSaveInstanceStateListener;';

  @_$jni.internal
  @_$core.override
  ActivityPluginBinding_OnSaveInstanceStateListener fromReference(
          _$jni.JReference reference) =>
      ActivityPluginBinding_OnSaveInstanceStateListener.fromReference(
          reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($ActivityPluginBinding_OnSaveInstanceStateListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($ActivityPluginBinding_OnSaveInstanceStateListener$Type) &&
        other is $ActivityPluginBinding_OnSaveInstanceStateListener$Type;
  }
}

/// from: `io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding`
class ActivityPluginBinding extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ActivityPluginBinding> $type;

  @_$jni.internal
  ActivityPluginBinding.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'io/flutter/embedding/engine/plugins/activity/ActivityPluginBinding');

  /// The type which includes information such as the signature of this class.
  static const type = $ActivityPluginBinding$Type();
  static final _id_getActivity = _class.instanceMethodId(
    r'getActivity',
    r'()Landroid/app/Activity;',
  );

  static final _getActivity = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract android.app.Activity getActivity()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getActivity() {
    return _getActivity(
            reference.pointer, _id_getActivity as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getLifecycle = _class.instanceMethodId(
    r'getLifecycle',
    r'()Ljava/lang/Object;',
  );

  static final _getLifecycle = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.Object getLifecycle()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getLifecycle() {
    return _getLifecycle(
            reference.pointer, _id_getLifecycle as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_addRequestPermissionsResultListener =
      _class.instanceMethodId(
    r'addRequestPermissionsResultListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;)V',
  );

  static final _addRequestPermissionsResultListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener requestPermissionsResultListener)`
  void addRequestPermissionsResultListener(
    pluginregistry_.PluginRegistry_RequestPermissionsResultListener
        requestPermissionsResultListener,
  ) {
    _addRequestPermissionsResultListener(
            reference.pointer,
            _id_addRequestPermissionsResultListener as _$jni.JMethodIDPtr,
            requestPermissionsResultListener.reference.pointer)
        .check();
  }

  static final _id_removeRequestPermissionsResultListener =
      _class.instanceMethodId(
    r'removeRequestPermissionsResultListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;)V',
  );

  static final _removeRequestPermissionsResultListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void removeRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener requestPermissionsResultListener)`
  void removeRequestPermissionsResultListener(
    pluginregistry_.PluginRegistry_RequestPermissionsResultListener
        requestPermissionsResultListener,
  ) {
    _removeRequestPermissionsResultListener(
            reference.pointer,
            _id_removeRequestPermissionsResultListener as _$jni.JMethodIDPtr,
            requestPermissionsResultListener.reference.pointer)
        .check();
  }

  static final _id_addActivityResultListener = _class.instanceMethodId(
    r'addActivityResultListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;)V',
  );

  static final _addActivityResultListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener activityResultListener)`
  void addActivityResultListener(
    pluginregistry_.PluginRegistry_ActivityResultListener
        activityResultListener,
  ) {
    _addActivityResultListener(
            reference.pointer,
            _id_addActivityResultListener as _$jni.JMethodIDPtr,
            activityResultListener.reference.pointer)
        .check();
  }

  static final _id_removeActivityResultListener = _class.instanceMethodId(
    r'removeActivityResultListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;)V',
  );

  static final _removeActivityResultListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void removeActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener activityResultListener)`
  void removeActivityResultListener(
    pluginregistry_.PluginRegistry_ActivityResultListener
        activityResultListener,
  ) {
    _removeActivityResultListener(
            reference.pointer,
            _id_removeActivityResultListener as _$jni.JMethodIDPtr,
            activityResultListener.reference.pointer)
        .check();
  }

  static final _id_addOnNewIntentListener = _class.instanceMethodId(
    r'addOnNewIntentListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$NewIntentListener;)V',
  );

  static final _addOnNewIntentListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void addOnNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener newIntentListener)`
  void addOnNewIntentListener(
    pluginregistry_.PluginRegistry_NewIntentListener newIntentListener,
  ) {
    _addOnNewIntentListener(
            reference.pointer,
            _id_addOnNewIntentListener as _$jni.JMethodIDPtr,
            newIntentListener.reference.pointer)
        .check();
  }

  static final _id_removeOnNewIntentListener = _class.instanceMethodId(
    r'removeOnNewIntentListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$NewIntentListener;)V',
  );

  static final _removeOnNewIntentListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void removeOnNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener newIntentListener)`
  void removeOnNewIntentListener(
    pluginregistry_.PluginRegistry_NewIntentListener newIntentListener,
  ) {
    _removeOnNewIntentListener(
            reference.pointer,
            _id_removeOnNewIntentListener as _$jni.JMethodIDPtr,
            newIntentListener.reference.pointer)
        .check();
  }

  static final _id_addOnUserLeaveHintListener = _class.instanceMethodId(
    r'addOnUserLeaveHintListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$UserLeaveHintListener;)V',
  );

  static final _addOnUserLeaveHintListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void addOnUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener userLeaveHintListener)`
  void addOnUserLeaveHintListener(
    pluginregistry_.PluginRegistry_UserLeaveHintListener userLeaveHintListener,
  ) {
    _addOnUserLeaveHintListener(
            reference.pointer,
            _id_addOnUserLeaveHintListener as _$jni.JMethodIDPtr,
            userLeaveHintListener.reference.pointer)
        .check();
  }

  static final _id_removeOnUserLeaveHintListener = _class.instanceMethodId(
    r'removeOnUserLeaveHintListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$UserLeaveHintListener;)V',
  );

  static final _removeOnUserLeaveHintListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void removeOnUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener userLeaveHintListener)`
  void removeOnUserLeaveHintListener(
    pluginregistry_.PluginRegistry_UserLeaveHintListener userLeaveHintListener,
  ) {
    _removeOnUserLeaveHintListener(
            reference.pointer,
            _id_removeOnUserLeaveHintListener as _$jni.JMethodIDPtr,
            userLeaveHintListener.reference.pointer)
        .check();
  }

  static final _id_addOnWindowFocusChangedListener = _class.instanceMethodId(
    r'addOnWindowFocusChangedListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener;)V',
  );

  static final _addOnWindowFocusChangedListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void addOnWindowFocusChangedListener(io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener windowFocusChangedListener)`
  void addOnWindowFocusChangedListener(
    pluginregistry_.PluginRegistry_WindowFocusChangedListener
        windowFocusChangedListener,
  ) {
    _addOnWindowFocusChangedListener(
            reference.pointer,
            _id_addOnWindowFocusChangedListener as _$jni.JMethodIDPtr,
            windowFocusChangedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnWindowFocusChangedListener = _class.instanceMethodId(
    r'removeOnWindowFocusChangedListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener;)V',
  );

  static final _removeOnWindowFocusChangedListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void removeOnWindowFocusChangedListener(io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener windowFocusChangedListener)`
  void removeOnWindowFocusChangedListener(
    pluginregistry_.PluginRegistry_WindowFocusChangedListener
        windowFocusChangedListener,
  ) {
    _removeOnWindowFocusChangedListener(
            reference.pointer,
            _id_removeOnWindowFocusChangedListener as _$jni.JMethodIDPtr,
            windowFocusChangedListener.reference.pointer)
        .check();
  }

  static final _id_addOnSaveStateListener = _class.instanceMethodId(
    r'addOnSaveStateListener',
    r'(Lio/flutter/embedding/engine/plugins/activity/ActivityPluginBinding$OnSaveInstanceStateListener;)V',
  );

  static final _addOnSaveStateListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void addOnSaveStateListener(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener onSaveInstanceStateListener)`
  void addOnSaveStateListener(
    ActivityPluginBinding_OnSaveInstanceStateListener
        onSaveInstanceStateListener,
  ) {
    _addOnSaveStateListener(
            reference.pointer,
            _id_addOnSaveStateListener as _$jni.JMethodIDPtr,
            onSaveInstanceStateListener.reference.pointer)
        .check();
  }

  static final _id_removeOnSaveStateListener = _class.instanceMethodId(
    r'removeOnSaveStateListener',
    r'(Lio/flutter/embedding/engine/plugins/activity/ActivityPluginBinding$OnSaveInstanceStateListener;)V',
  );

  static final _removeOnSaveStateListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void removeOnSaveStateListener(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener onSaveInstanceStateListener)`
  void removeOnSaveStateListener(
    ActivityPluginBinding_OnSaveInstanceStateListener
        onSaveInstanceStateListener,
  ) {
    _removeOnSaveStateListener(
            reference.pointer,
            _id_removeOnSaveStateListener as _$jni.JMethodIDPtr,
            onSaveInstanceStateListener.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $ActivityPluginBinding> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'getActivity()Landroid/app/Activity;') {
        final $r = _$impls[$p]!.getActivity();
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'getLifecycle()Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getLifecycle();
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d ==
          r'addRequestPermissionsResultListener(Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;)V') {
        _$impls[$p]!.addRequestPermissionsResultListener(
          $a[0].as(
              const pluginregistry_
                  .$PluginRegistry_RequestPermissionsResultListener$Type(),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'removeRequestPermissionsResultListener(Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;)V') {
        _$impls[$p]!.removeRequestPermissionsResultListener(
          $a[0].as(
              const pluginregistry_
                  .$PluginRegistry_RequestPermissionsResultListener$Type(),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'addActivityResultListener(Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;)V') {
        _$impls[$p]!.addActivityResultListener(
          $a[0].as(
              const pluginregistry_
                  .$PluginRegistry_ActivityResultListener$Type(),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'removeActivityResultListener(Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;)V') {
        _$impls[$p]!.removeActivityResultListener(
          $a[0].as(
              const pluginregistry_
                  .$PluginRegistry_ActivityResultListener$Type(),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'addOnNewIntentListener(Lio/flutter/plugin/common/PluginRegistry$NewIntentListener;)V') {
        _$impls[$p]!.addOnNewIntentListener(
          $a[0].as(
              const pluginregistry_.$PluginRegistry_NewIntentListener$Type(),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'removeOnNewIntentListener(Lio/flutter/plugin/common/PluginRegistry$NewIntentListener;)V') {
        _$impls[$p]!.removeOnNewIntentListener(
          $a[0].as(
              const pluginregistry_.$PluginRegistry_NewIntentListener$Type(),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'addOnUserLeaveHintListener(Lio/flutter/plugin/common/PluginRegistry$UserLeaveHintListener;)V') {
        _$impls[$p]!.addOnUserLeaveHintListener(
          $a[0].as(
              const pluginregistry_
                  .$PluginRegistry_UserLeaveHintListener$Type(),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'removeOnUserLeaveHintListener(Lio/flutter/plugin/common/PluginRegistry$UserLeaveHintListener;)V') {
        _$impls[$p]!.removeOnUserLeaveHintListener(
          $a[0].as(
              const pluginregistry_
                  .$PluginRegistry_UserLeaveHintListener$Type(),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'addOnWindowFocusChangedListener(Lio/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener;)V') {
        _$impls[$p]!.addOnWindowFocusChangedListener(
          $a[0].as(
              const pluginregistry_
                  .$PluginRegistry_WindowFocusChangedListener$Type(),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'removeOnWindowFocusChangedListener(Lio/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener;)V') {
        _$impls[$p]!.removeOnWindowFocusChangedListener(
          $a[0].as(
              const pluginregistry_
                  .$PluginRegistry_WindowFocusChangedListener$Type(),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'addOnSaveStateListener(Lio/flutter/embedding/engine/plugins/activity/ActivityPluginBinding$OnSaveInstanceStateListener;)V') {
        _$impls[$p]!.addOnSaveStateListener(
          $a[0].as(
              const $ActivityPluginBinding_OnSaveInstanceStateListener$Type(),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'removeOnSaveStateListener(Lio/flutter/embedding/engine/plugins/activity/ActivityPluginBinding$OnSaveInstanceStateListener;)V') {
        _$impls[$p]!.removeOnSaveStateListener(
          $a[0].as(
              const $ActivityPluginBinding_OnSaveInstanceStateListener$Type(),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $ActivityPluginBinding $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding',
      $p,
      _$invokePointer,
      [
        if ($impl.addRequestPermissionsResultListener$async)
          r'addRequestPermissionsResultListener(Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;)V',
        if ($impl.removeRequestPermissionsResultListener$async)
          r'removeRequestPermissionsResultListener(Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;)V',
        if ($impl.addActivityResultListener$async)
          r'addActivityResultListener(Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;)V',
        if ($impl.removeActivityResultListener$async)
          r'removeActivityResultListener(Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;)V',
        if ($impl.addOnNewIntentListener$async)
          r'addOnNewIntentListener(Lio/flutter/plugin/common/PluginRegistry$NewIntentListener;)V',
        if ($impl.removeOnNewIntentListener$async)
          r'removeOnNewIntentListener(Lio/flutter/plugin/common/PluginRegistry$NewIntentListener;)V',
        if ($impl.addOnUserLeaveHintListener$async)
          r'addOnUserLeaveHintListener(Lio/flutter/plugin/common/PluginRegistry$UserLeaveHintListener;)V',
        if ($impl.removeOnUserLeaveHintListener$async)
          r'removeOnUserLeaveHintListener(Lio/flutter/plugin/common/PluginRegistry$UserLeaveHintListener;)V',
        if ($impl.addOnWindowFocusChangedListener$async)
          r'addOnWindowFocusChangedListener(Lio/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener;)V',
        if ($impl.removeOnWindowFocusChangedListener$async)
          r'removeOnWindowFocusChangedListener(Lio/flutter/plugin/common/PluginRegistry$WindowFocusChangedListener;)V',
        if ($impl.addOnSaveStateListener$async)
          r'addOnSaveStateListener(Lio/flutter/embedding/engine/plugins/activity/ActivityPluginBinding$OnSaveInstanceStateListener;)V',
        if ($impl.removeOnSaveStateListener$async)
          r'removeOnSaveStateListener(Lio/flutter/embedding/engine/plugins/activity/ActivityPluginBinding$OnSaveInstanceStateListener;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ActivityPluginBinding.implement(
    $ActivityPluginBinding $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return ActivityPluginBinding.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ActivityPluginBinding {
  factory $ActivityPluginBinding({
    required _$jni.JObject Function() getActivity,
    required _$jni.JObject Function() getLifecycle,
    required void Function(
            pluginregistry_.PluginRegistry_RequestPermissionsResultListener
                requestPermissionsResultListener)
        addRequestPermissionsResultListener,
    bool addRequestPermissionsResultListener$async,
    required void Function(
            pluginregistry_.PluginRegistry_RequestPermissionsResultListener
                requestPermissionsResultListener)
        removeRequestPermissionsResultListener,
    bool removeRequestPermissionsResultListener$async,
    required void Function(
            pluginregistry_.PluginRegistry_ActivityResultListener
                activityResultListener)
        addActivityResultListener,
    bool addActivityResultListener$async,
    required void Function(
            pluginregistry_.PluginRegistry_ActivityResultListener
                activityResultListener)
        removeActivityResultListener,
    bool removeActivityResultListener$async,
    required void Function(
            pluginregistry_.PluginRegistry_NewIntentListener newIntentListener)
        addOnNewIntentListener,
    bool addOnNewIntentListener$async,
    required void Function(
            pluginregistry_.PluginRegistry_NewIntentListener newIntentListener)
        removeOnNewIntentListener,
    bool removeOnNewIntentListener$async,
    required void Function(
            pluginregistry_.PluginRegistry_UserLeaveHintListener
                userLeaveHintListener)
        addOnUserLeaveHintListener,
    bool addOnUserLeaveHintListener$async,
    required void Function(
            pluginregistry_.PluginRegistry_UserLeaveHintListener
                userLeaveHintListener)
        removeOnUserLeaveHintListener,
    bool removeOnUserLeaveHintListener$async,
    required void Function(
            pluginregistry_.PluginRegistry_WindowFocusChangedListener
                windowFocusChangedListener)
        addOnWindowFocusChangedListener,
    bool addOnWindowFocusChangedListener$async,
    required void Function(
            pluginregistry_.PluginRegistry_WindowFocusChangedListener
                windowFocusChangedListener)
        removeOnWindowFocusChangedListener,
    bool removeOnWindowFocusChangedListener$async,
    required void Function(
            ActivityPluginBinding_OnSaveInstanceStateListener
                onSaveInstanceStateListener)
        addOnSaveStateListener,
    bool addOnSaveStateListener$async,
    required void Function(
            ActivityPluginBinding_OnSaveInstanceStateListener
                onSaveInstanceStateListener)
        removeOnSaveStateListener,
    bool removeOnSaveStateListener$async,
  }) = _$ActivityPluginBinding;

  _$jni.JObject getActivity();
  _$jni.JObject getLifecycle();
  void addRequestPermissionsResultListener(
      pluginregistry_.PluginRegistry_RequestPermissionsResultListener
          requestPermissionsResultListener);
  bool get addRequestPermissionsResultListener$async => false;
  void removeRequestPermissionsResultListener(
      pluginregistry_.PluginRegistry_RequestPermissionsResultListener
          requestPermissionsResultListener);
  bool get removeRequestPermissionsResultListener$async => false;
  void addActivityResultListener(
      pluginregistry_.PluginRegistry_ActivityResultListener
          activityResultListener);
  bool get addActivityResultListener$async => false;
  void removeActivityResultListener(
      pluginregistry_.PluginRegistry_ActivityResultListener
          activityResultListener);
  bool get removeActivityResultListener$async => false;
  void addOnNewIntentListener(
      pluginregistry_.PluginRegistry_NewIntentListener newIntentListener);
  bool get addOnNewIntentListener$async => false;
  void removeOnNewIntentListener(
      pluginregistry_.PluginRegistry_NewIntentListener newIntentListener);
  bool get removeOnNewIntentListener$async => false;
  void addOnUserLeaveHintListener(
      pluginregistry_.PluginRegistry_UserLeaveHintListener
          userLeaveHintListener);
  bool get addOnUserLeaveHintListener$async => false;
  void removeOnUserLeaveHintListener(
      pluginregistry_.PluginRegistry_UserLeaveHintListener
          userLeaveHintListener);
  bool get removeOnUserLeaveHintListener$async => false;
  void addOnWindowFocusChangedListener(
      pluginregistry_.PluginRegistry_WindowFocusChangedListener
          windowFocusChangedListener);
  bool get addOnWindowFocusChangedListener$async => false;
  void removeOnWindowFocusChangedListener(
      pluginregistry_.PluginRegistry_WindowFocusChangedListener
          windowFocusChangedListener);
  bool get removeOnWindowFocusChangedListener$async => false;
  void addOnSaveStateListener(
      ActivityPluginBinding_OnSaveInstanceStateListener
          onSaveInstanceStateListener);
  bool get addOnSaveStateListener$async => false;
  void removeOnSaveStateListener(
      ActivityPluginBinding_OnSaveInstanceStateListener
          onSaveInstanceStateListener);
  bool get removeOnSaveStateListener$async => false;
}

final class _$ActivityPluginBinding with $ActivityPluginBinding {
  _$ActivityPluginBinding({
    required _$jni.JObject Function() getActivity,
    required _$jni.JObject Function() getLifecycle,
    required void Function(
            pluginregistry_.PluginRegistry_RequestPermissionsResultListener
                requestPermissionsResultListener)
        addRequestPermissionsResultListener,
    this.addRequestPermissionsResultListener$async = false,
    required void Function(
            pluginregistry_.PluginRegistry_RequestPermissionsResultListener
                requestPermissionsResultListener)
        removeRequestPermissionsResultListener,
    this.removeRequestPermissionsResultListener$async = false,
    required void Function(
            pluginregistry_.PluginRegistry_ActivityResultListener
                activityResultListener)
        addActivityResultListener,
    this.addActivityResultListener$async = false,
    required void Function(
            pluginregistry_.PluginRegistry_ActivityResultListener
                activityResultListener)
        removeActivityResultListener,
    this.removeActivityResultListener$async = false,
    required void Function(
            pluginregistry_.PluginRegistry_NewIntentListener newIntentListener)
        addOnNewIntentListener,
    this.addOnNewIntentListener$async = false,
    required void Function(
            pluginregistry_.PluginRegistry_NewIntentListener newIntentListener)
        removeOnNewIntentListener,
    this.removeOnNewIntentListener$async = false,
    required void Function(
            pluginregistry_.PluginRegistry_UserLeaveHintListener
                userLeaveHintListener)
        addOnUserLeaveHintListener,
    this.addOnUserLeaveHintListener$async = false,
    required void Function(
            pluginregistry_.PluginRegistry_UserLeaveHintListener
                userLeaveHintListener)
        removeOnUserLeaveHintListener,
    this.removeOnUserLeaveHintListener$async = false,
    required void Function(
            pluginregistry_.PluginRegistry_WindowFocusChangedListener
                windowFocusChangedListener)
        addOnWindowFocusChangedListener,
    this.addOnWindowFocusChangedListener$async = false,
    required void Function(
            pluginregistry_.PluginRegistry_WindowFocusChangedListener
                windowFocusChangedListener)
        removeOnWindowFocusChangedListener,
    this.removeOnWindowFocusChangedListener$async = false,
    required void Function(
            ActivityPluginBinding_OnSaveInstanceStateListener
                onSaveInstanceStateListener)
        addOnSaveStateListener,
    this.addOnSaveStateListener$async = false,
    required void Function(
            ActivityPluginBinding_OnSaveInstanceStateListener
                onSaveInstanceStateListener)
        removeOnSaveStateListener,
    this.removeOnSaveStateListener$async = false,
  })  : _getActivity = getActivity,
        _getLifecycle = getLifecycle,
        _addRequestPermissionsResultListener =
            addRequestPermissionsResultListener,
        _removeRequestPermissionsResultListener =
            removeRequestPermissionsResultListener,
        _addActivityResultListener = addActivityResultListener,
        _removeActivityResultListener = removeActivityResultListener,
        _addOnNewIntentListener = addOnNewIntentListener,
        _removeOnNewIntentListener = removeOnNewIntentListener,
        _addOnUserLeaveHintListener = addOnUserLeaveHintListener,
        _removeOnUserLeaveHintListener = removeOnUserLeaveHintListener,
        _addOnWindowFocusChangedListener = addOnWindowFocusChangedListener,
        _removeOnWindowFocusChangedListener =
            removeOnWindowFocusChangedListener,
        _addOnSaveStateListener = addOnSaveStateListener,
        _removeOnSaveStateListener = removeOnSaveStateListener;

  final _$jni.JObject Function() _getActivity;
  final _$jni.JObject Function() _getLifecycle;
  final void Function(
          pluginregistry_.PluginRegistry_RequestPermissionsResultListener
              requestPermissionsResultListener)
      _addRequestPermissionsResultListener;
  final bool addRequestPermissionsResultListener$async;
  final void Function(
          pluginregistry_.PluginRegistry_RequestPermissionsResultListener
              requestPermissionsResultListener)
      _removeRequestPermissionsResultListener;
  final bool removeRequestPermissionsResultListener$async;
  final void Function(
      pluginregistry_.PluginRegistry_ActivityResultListener
          activityResultListener) _addActivityResultListener;
  final bool addActivityResultListener$async;
  final void Function(
      pluginregistry_.PluginRegistry_ActivityResultListener
          activityResultListener) _removeActivityResultListener;
  final bool removeActivityResultListener$async;
  final void Function(
          pluginregistry_.PluginRegistry_NewIntentListener newIntentListener)
      _addOnNewIntentListener;
  final bool addOnNewIntentListener$async;
  final void Function(
          pluginregistry_.PluginRegistry_NewIntentListener newIntentListener)
      _removeOnNewIntentListener;
  final bool removeOnNewIntentListener$async;
  final void Function(
      pluginregistry_.PluginRegistry_UserLeaveHintListener
          userLeaveHintListener) _addOnUserLeaveHintListener;
  final bool addOnUserLeaveHintListener$async;
  final void Function(
      pluginregistry_.PluginRegistry_UserLeaveHintListener
          userLeaveHintListener) _removeOnUserLeaveHintListener;
  final bool removeOnUserLeaveHintListener$async;
  final void Function(
      pluginregistry_.PluginRegistry_WindowFocusChangedListener
          windowFocusChangedListener) _addOnWindowFocusChangedListener;
  final bool addOnWindowFocusChangedListener$async;
  final void Function(
      pluginregistry_.PluginRegistry_WindowFocusChangedListener
          windowFocusChangedListener) _removeOnWindowFocusChangedListener;
  final bool removeOnWindowFocusChangedListener$async;
  final void Function(
      ActivityPluginBinding_OnSaveInstanceStateListener
          onSaveInstanceStateListener) _addOnSaveStateListener;
  final bool addOnSaveStateListener$async;
  final void Function(
      ActivityPluginBinding_OnSaveInstanceStateListener
          onSaveInstanceStateListener) _removeOnSaveStateListener;
  final bool removeOnSaveStateListener$async;

  _$jni.JObject getActivity() {
    return _getActivity();
  }

  _$jni.JObject getLifecycle() {
    return _getLifecycle();
  }

  void addRequestPermissionsResultListener(
      pluginregistry_.PluginRegistry_RequestPermissionsResultListener
          requestPermissionsResultListener) {
    return _addRequestPermissionsResultListener(
        requestPermissionsResultListener);
  }

  void removeRequestPermissionsResultListener(
      pluginregistry_.PluginRegistry_RequestPermissionsResultListener
          requestPermissionsResultListener) {
    return _removeRequestPermissionsResultListener(
        requestPermissionsResultListener);
  }

  void addActivityResultListener(
      pluginregistry_.PluginRegistry_ActivityResultListener
          activityResultListener) {
    return _addActivityResultListener(activityResultListener);
  }

  void removeActivityResultListener(
      pluginregistry_.PluginRegistry_ActivityResultListener
          activityResultListener) {
    return _removeActivityResultListener(activityResultListener);
  }

  void addOnNewIntentListener(
      pluginregistry_.PluginRegistry_NewIntentListener newIntentListener) {
    return _addOnNewIntentListener(newIntentListener);
  }

  void removeOnNewIntentListener(
      pluginregistry_.PluginRegistry_NewIntentListener newIntentListener) {
    return _removeOnNewIntentListener(newIntentListener);
  }

  void addOnUserLeaveHintListener(
      pluginregistry_.PluginRegistry_UserLeaveHintListener
          userLeaveHintListener) {
    return _addOnUserLeaveHintListener(userLeaveHintListener);
  }

  void removeOnUserLeaveHintListener(
      pluginregistry_.PluginRegistry_UserLeaveHintListener
          userLeaveHintListener) {
    return _removeOnUserLeaveHintListener(userLeaveHintListener);
  }

  void addOnWindowFocusChangedListener(
      pluginregistry_.PluginRegistry_WindowFocusChangedListener
          windowFocusChangedListener) {
    return _addOnWindowFocusChangedListener(windowFocusChangedListener);
  }

  void removeOnWindowFocusChangedListener(
      pluginregistry_.PluginRegistry_WindowFocusChangedListener
          windowFocusChangedListener) {
    return _removeOnWindowFocusChangedListener(windowFocusChangedListener);
  }

  void addOnSaveStateListener(
      ActivityPluginBinding_OnSaveInstanceStateListener
          onSaveInstanceStateListener) {
    return _addOnSaveStateListener(onSaveInstanceStateListener);
  }

  void removeOnSaveStateListener(
      ActivityPluginBinding_OnSaveInstanceStateListener
          onSaveInstanceStateListener) {
    return _removeOnSaveStateListener(onSaveInstanceStateListener);
  }
}

final class $ActivityPluginBinding$Type
    extends _$jni.JObjType<ActivityPluginBinding> {
  @_$jni.internal
  const $ActivityPluginBinding$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lio/flutter/embedding/engine/plugins/activity/ActivityPluginBinding;';

  @_$jni.internal
  @_$core.override
  ActivityPluginBinding fromReference(_$jni.JReference reference) =>
      ActivityPluginBinding.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($ActivityPluginBinding$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityPluginBinding$Type) &&
        other is $ActivityPluginBinding$Type;
  }
}
