// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import 'LocationEngineCallback.dart' as locationenginecallback_;

import 'LocationEngineRequest.dart' as locationenginerequest_;

import 'LocationEngineResult.dart' as locationengineresult_;

/// from: `org.maplibre.android.location.engine.LocationEngine`
class LocationEngine extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<LocationEngine> $type;

  @_$jni.internal
  LocationEngine.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/location/engine/LocationEngine');

  /// The type which includes information such as the signature of this class.
  static const type = $LocationEngine$Type();
  static final _id_getLastLocation = _class.instanceMethodId(
    r'getLastLocation',
    r'(Lorg/maplibre/android/location/engine/LocationEngineCallback;)V',
  );

  static final _getLastLocation = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void getLastLocation(org.maplibre.android.location.engine.LocationEngineCallback locationEngineCallback)`
  void getLastLocation(
    locationenginecallback_
        .LocationEngineCallback<locationengineresult_.LocationEngineResult>
        locationEngineCallback,
  ) {
    _getLastLocation(
            reference.pointer,
            _id_getLastLocation as _$jni.JMethodIDPtr,
            locationEngineCallback.reference.pointer)
        .check();
  }

  static final _id_requestLocationUpdates = _class.instanceMethodId(
    r'requestLocationUpdates',
    r'(Lorg/maplibre/android/location/engine/LocationEngineRequest;Lorg/maplibre/android/location/engine/LocationEngineCallback;Landroid/os/Looper;)V',
  );

  static final _requestLocationUpdates = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void requestLocationUpdates(org.maplibre.android.location.engine.LocationEngineRequest locationEngineRequest, org.maplibre.android.location.engine.LocationEngineCallback locationEngineCallback, android.os.Looper looper)`
  void requestLocationUpdates(
    locationenginerequest_.LocationEngineRequest locationEngineRequest,
    locationenginecallback_
        .LocationEngineCallback<locationengineresult_.LocationEngineResult>
        locationEngineCallback,
    _$jni.JObject looper,
  ) {
    _requestLocationUpdates(
            reference.pointer,
            _id_requestLocationUpdates as _$jni.JMethodIDPtr,
            locationEngineRequest.reference.pointer,
            locationEngineCallback.reference.pointer,
            looper.reference.pointer)
        .check();
  }

  static final _id_requestLocationUpdates$1 = _class.instanceMethodId(
    r'requestLocationUpdates',
    r'(Lorg/maplibre/android/location/engine/LocationEngineRequest;Landroid/app/PendingIntent;)V',
  );

  static final _requestLocationUpdates$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void requestLocationUpdates(org.maplibre.android.location.engine.LocationEngineRequest locationEngineRequest, android.app.PendingIntent pendingIntent)`
  void requestLocationUpdates$1(
    locationenginerequest_.LocationEngineRequest locationEngineRequest,
    _$jni.JObject pendingIntent,
  ) {
    _requestLocationUpdates$1(
            reference.pointer,
            _id_requestLocationUpdates$1 as _$jni.JMethodIDPtr,
            locationEngineRequest.reference.pointer,
            pendingIntent.reference.pointer)
        .check();
  }

  static final _id_removeLocationUpdates = _class.instanceMethodId(
    r'removeLocationUpdates',
    r'(Lorg/maplibre/android/location/engine/LocationEngineCallback;)V',
  );

  static final _removeLocationUpdates = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void removeLocationUpdates(org.maplibre.android.location.engine.LocationEngineCallback locationEngineCallback)`
  void removeLocationUpdates(
    locationenginecallback_
        .LocationEngineCallback<locationengineresult_.LocationEngineResult>
        locationEngineCallback,
  ) {
    _removeLocationUpdates(
            reference.pointer,
            _id_removeLocationUpdates as _$jni.JMethodIDPtr,
            locationEngineCallback.reference.pointer)
        .check();
  }

  static final _id_removeLocationUpdates$1 = _class.instanceMethodId(
    r'removeLocationUpdates',
    r'(Landroid/app/PendingIntent;)V',
  );

  static final _removeLocationUpdates$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void removeLocationUpdates(android.app.PendingIntent pendingIntent)`
  void removeLocationUpdates$1(
    _$jni.JObject pendingIntent,
  ) {
    _removeLocationUpdates$1(
            reference.pointer,
            _id_removeLocationUpdates$1 as _$jni.JMethodIDPtr,
            pendingIntent.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $LocationEngine> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'getLastLocation(Lorg/maplibre/android/location/engine/LocationEngineCallback;)V') {
        _$impls[$p]!.getLastLocation(
          $a[0].as(
              const locationenginecallback_.$LocationEngineCallback$Type(
                  locationengineresult_.$LocationEngineResult$Type()),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'requestLocationUpdates(Lorg/maplibre/android/location/engine/LocationEngineRequest;Lorg/maplibre/android/location/engine/LocationEngineCallback;Landroid/os/Looper;)V') {
        _$impls[$p]!.requestLocationUpdates(
          $a[0].as(const locationenginerequest_.$LocationEngineRequest$Type(),
              releaseOriginal: true),
          $a[1].as(
              const locationenginecallback_.$LocationEngineCallback$Type(
                  locationengineresult_.$LocationEngineResult$Type()),
              releaseOriginal: true),
          $a[2].as(const _$jni.JObjectType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'requestLocationUpdates(Lorg/maplibre/android/location/engine/LocationEngineRequest;Landroid/app/PendingIntent;)V') {
        _$impls[$p]!.requestLocationUpdates$1(
          $a[0].as(const locationenginerequest_.$LocationEngineRequest$Type(),
              releaseOriginal: true),
          $a[1].as(const _$jni.JObjectType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'removeLocationUpdates(Lorg/maplibre/android/location/engine/LocationEngineCallback;)V') {
        _$impls[$p]!.removeLocationUpdates(
          $a[0].as(
              const locationenginecallback_.$LocationEngineCallback$Type(
                  locationengineresult_.$LocationEngineResult$Type()),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d == r'removeLocationUpdates(Landroid/app/PendingIntent;)V') {
        _$impls[$p]!.removeLocationUpdates$1(
          $a[0].as(const _$jni.JObjectType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $LocationEngine $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.location.engine.LocationEngine',
      $p,
      _$invokePointer,
      [
        if ($impl.getLastLocation$async)
          r'getLastLocation(Lorg/maplibre/android/location/engine/LocationEngineCallback;)V',
        if ($impl.requestLocationUpdates$async)
          r'requestLocationUpdates(Lorg/maplibre/android/location/engine/LocationEngineRequest;Lorg/maplibre/android/location/engine/LocationEngineCallback;Landroid/os/Looper;)V',
        if ($impl.requestLocationUpdates$1$async)
          r'requestLocationUpdates(Lorg/maplibre/android/location/engine/LocationEngineRequest;Landroid/app/PendingIntent;)V',
        if ($impl.removeLocationUpdates$async)
          r'removeLocationUpdates(Lorg/maplibre/android/location/engine/LocationEngineCallback;)V',
        if ($impl.removeLocationUpdates$1$async)
          r'removeLocationUpdates(Landroid/app/PendingIntent;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory LocationEngine.implement(
    $LocationEngine $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return LocationEngine.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $LocationEngine {
  factory $LocationEngine({
    required void Function(
            locationenginecallback_.LocationEngineCallback<
                    locationengineresult_.LocationEngineResult>
                locationEngineCallback)
        getLastLocation,
    bool getLastLocation$async,
    required void Function(
            locationenginerequest_.LocationEngineRequest locationEngineRequest,
            locationenginecallback_.LocationEngineCallback<
                    locationengineresult_.LocationEngineResult>
                locationEngineCallback,
            _$jni.JObject looper)
        requestLocationUpdates,
    bool requestLocationUpdates$async,
    required void Function(
            locationenginerequest_.LocationEngineRequest locationEngineRequest,
            _$jni.JObject pendingIntent)
        requestLocationUpdates$1,
    bool requestLocationUpdates$1$async,
    required void Function(
            locationenginecallback_.LocationEngineCallback<
                    locationengineresult_.LocationEngineResult>
                locationEngineCallback)
        removeLocationUpdates,
    bool removeLocationUpdates$async,
    required void Function(_$jni.JObject pendingIntent) removeLocationUpdates$1,
    bool removeLocationUpdates$1$async,
  }) = _$LocationEngine;

  void getLastLocation(
      locationenginecallback_
          .LocationEngineCallback<locationengineresult_.LocationEngineResult>
          locationEngineCallback);
  bool get getLastLocation$async => false;
  void requestLocationUpdates(
      locationenginerequest_.LocationEngineRequest locationEngineRequest,
      locationenginecallback_
          .LocationEngineCallback<locationengineresult_.LocationEngineResult>
          locationEngineCallback,
      _$jni.JObject looper);
  bool get requestLocationUpdates$async => false;
  void requestLocationUpdates$1(
      locationenginerequest_.LocationEngineRequest locationEngineRequest,
      _$jni.JObject pendingIntent);
  bool get requestLocationUpdates$1$async => false;
  void removeLocationUpdates(
      locationenginecallback_
          .LocationEngineCallback<locationengineresult_.LocationEngineResult>
          locationEngineCallback);
  bool get removeLocationUpdates$async => false;
  void removeLocationUpdates$1(_$jni.JObject pendingIntent);
  bool get removeLocationUpdates$1$async => false;
}

final class _$LocationEngine with $LocationEngine {
  _$LocationEngine({
    required void Function(
            locationenginecallback_.LocationEngineCallback<
                    locationengineresult_.LocationEngineResult>
                locationEngineCallback)
        getLastLocation,
    this.getLastLocation$async = false,
    required void Function(
            locationenginerequest_.LocationEngineRequest locationEngineRequest,
            locationenginecallback_.LocationEngineCallback<
                    locationengineresult_.LocationEngineResult>
                locationEngineCallback,
            _$jni.JObject looper)
        requestLocationUpdates,
    this.requestLocationUpdates$async = false,
    required void Function(
            locationenginerequest_.LocationEngineRequest locationEngineRequest,
            _$jni.JObject pendingIntent)
        requestLocationUpdates$1,
    this.requestLocationUpdates$1$async = false,
    required void Function(
            locationenginecallback_.LocationEngineCallback<
                    locationengineresult_.LocationEngineResult>
                locationEngineCallback)
        removeLocationUpdates,
    this.removeLocationUpdates$async = false,
    required void Function(_$jni.JObject pendingIntent) removeLocationUpdates$1,
    this.removeLocationUpdates$1$async = false,
  })  : _getLastLocation = getLastLocation,
        _requestLocationUpdates = requestLocationUpdates,
        _requestLocationUpdates$1 = requestLocationUpdates$1,
        _removeLocationUpdates = removeLocationUpdates,
        _removeLocationUpdates$1 = removeLocationUpdates$1;

  final void Function(
      locationenginecallback_
          .LocationEngineCallback<locationengineresult_.LocationEngineResult>
          locationEngineCallback) _getLastLocation;
  final bool getLastLocation$async;
  final void Function(
      locationenginerequest_.LocationEngineRequest locationEngineRequest,
      locationenginecallback_
          .LocationEngineCallback<locationengineresult_.LocationEngineResult>
          locationEngineCallback,
      _$jni.JObject looper) _requestLocationUpdates;
  final bool requestLocationUpdates$async;
  final void Function(
      locationenginerequest_.LocationEngineRequest locationEngineRequest,
      _$jni.JObject pendingIntent) _requestLocationUpdates$1;
  final bool requestLocationUpdates$1$async;
  final void Function(
      locationenginecallback_
          .LocationEngineCallback<locationengineresult_.LocationEngineResult>
          locationEngineCallback) _removeLocationUpdates;
  final bool removeLocationUpdates$async;
  final void Function(_$jni.JObject pendingIntent) _removeLocationUpdates$1;
  final bool removeLocationUpdates$1$async;

  void getLastLocation(
      locationenginecallback_
          .LocationEngineCallback<locationengineresult_.LocationEngineResult>
          locationEngineCallback) {
    return _getLastLocation(locationEngineCallback);
  }

  void requestLocationUpdates(
      locationenginerequest_.LocationEngineRequest locationEngineRequest,
      locationenginecallback_
          .LocationEngineCallback<locationengineresult_.LocationEngineResult>
          locationEngineCallback,
      _$jni.JObject looper) {
    return _requestLocationUpdates(
        locationEngineRequest, locationEngineCallback, looper);
  }

  void requestLocationUpdates$1(
      locationenginerequest_.LocationEngineRequest locationEngineRequest,
      _$jni.JObject pendingIntent) {
    return _requestLocationUpdates$1(locationEngineRequest, pendingIntent);
  }

  void removeLocationUpdates(
      locationenginecallback_
          .LocationEngineCallback<locationengineresult_.LocationEngineResult>
          locationEngineCallback) {
    return _removeLocationUpdates(locationEngineCallback);
  }

  void removeLocationUpdates$1(_$jni.JObject pendingIntent) {
    return _removeLocationUpdates$1(pendingIntent);
  }
}

final class $LocationEngine$Type extends _$jni.JObjType<LocationEngine> {
  @_$jni.internal
  const $LocationEngine$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/location/engine/LocationEngine;';

  @_$jni.internal
  @_$core.override
  LocationEngine fromReference(_$jni.JReference reference) =>
      LocationEngine.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($LocationEngine$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($LocationEngine$Type) &&
        other is $LocationEngine$Type;
  }
}
