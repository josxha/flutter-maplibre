// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `org.maplibre.android.offline.OfflineRegionStatus`
class OfflineRegionStatus extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<OfflineRegionStatus> $type;

  @_$jni.internal
  OfflineRegionStatus.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/offline/OfflineRegionStatus');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineRegionStatus$Type();
  static final _id_getDownloadState = _class.instanceMethodId(
    r'getDownloadState',
    r'()I',
  );

  static final _getDownloadState = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final int getDownloadState()`
  int getDownloadState() {
    return _getDownloadState(
            reference.pointer, _id_getDownloadState as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getCompletedResourceCount = _class.instanceMethodId(
    r'getCompletedResourceCount',
    r'()J',
  );

  static final _getCompletedResourceCount = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final long getCompletedResourceCount()`
  int getCompletedResourceCount() {
    return _getCompletedResourceCount(reference.pointer,
            _id_getCompletedResourceCount as _$jni.JMethodIDPtr)
        .long;
  }

  static final _id_getCompletedResourceSize = _class.instanceMethodId(
    r'getCompletedResourceSize',
    r'()J',
  );

  static final _getCompletedResourceSize = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final long getCompletedResourceSize()`
  int getCompletedResourceSize() {
    return _getCompletedResourceSize(reference.pointer,
            _id_getCompletedResourceSize as _$jni.JMethodIDPtr)
        .long;
  }

  static final _id_getCompletedTileCount = _class.instanceMethodId(
    r'getCompletedTileCount',
    r'()J',
  );

  static final _getCompletedTileCount = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final long getCompletedTileCount()`
  int getCompletedTileCount() {
    return _getCompletedTileCount(
            reference.pointer, _id_getCompletedTileCount as _$jni.JMethodIDPtr)
        .long;
  }

  static final _id_getCompletedTileSize = _class.instanceMethodId(
    r'getCompletedTileSize',
    r'()J',
  );

  static final _getCompletedTileSize = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final long getCompletedTileSize()`
  int getCompletedTileSize() {
    return _getCompletedTileSize(
            reference.pointer, _id_getCompletedTileSize as _$jni.JMethodIDPtr)
        .long;
  }

  static final _id_getRequiredResourceCount = _class.instanceMethodId(
    r'getRequiredResourceCount',
    r'()J',
  );

  static final _getRequiredResourceCount = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final long getRequiredResourceCount()`
  int getRequiredResourceCount() {
    return _getRequiredResourceCount(reference.pointer,
            _id_getRequiredResourceCount as _$jni.JMethodIDPtr)
        .long;
  }

  static final _id_isRequiredResourceCountPrecise = _class.instanceMethodId(
    r'isRequiredResourceCountPrecise',
    r'()Z',
  );

  static final _isRequiredResourceCountPrecise =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public final boolean isRequiredResourceCountPrecise()`
  bool isRequiredResourceCountPrecise() {
    return _isRequiredResourceCountPrecise(reference.pointer,
            _id_isRequiredResourceCountPrecise as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isComplete = _class.instanceMethodId(
    r'isComplete',
    r'()Z',
  );

  static final _isComplete = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final boolean isComplete()`
  bool isComplete() {
    return _isComplete(reference.pointer, _id_isComplete as _$jni.JMethodIDPtr)
        .boolean;
  }
}

final class $OfflineRegionStatus$Type
    extends _$jni.JObjType<OfflineRegionStatus> {
  @_$jni.internal
  const $OfflineRegionStatus$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/offline/OfflineRegionStatus;';

  @_$jni.internal
  @_$core.override
  OfflineRegionStatus fromReference(_$jni.JReference reference) =>
      OfflineRegionStatus.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($OfflineRegionStatus$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineRegionStatus$Type) &&
        other is $OfflineRegionStatus$Type;
  }
}
