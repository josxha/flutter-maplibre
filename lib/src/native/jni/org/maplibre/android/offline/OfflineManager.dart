// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import 'OfflineRegion.dart' as offlineregion_;

import 'OfflineRegionDefinition.dart' as offlineregiondefinition_;

/// from: `org.maplibre.android.offline.OfflineManager$Companion`
class OfflineManager_Companion extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<OfflineManager_Companion> $type;

  @_$jni.internal
  OfflineManager_Companion.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/offline/OfflineManager$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineManager_Companion$Type();
  static final _id_getInstance = _class.instanceMethodId(
    r'getInstance',
    r'(Landroid/content/Context;)Lorg/maplibre/android/offline/OfflineManager;',
  );

  static final _getInstance = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final org.maplibre.android.offline.OfflineManager getInstance(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  OfflineManager getInstance(
    _$jni.JObject context,
  ) {
    return _getInstance(reference.pointer,
            _id_getInstance as _$jni.JMethodIDPtr, context.reference.pointer)
        .object(const $OfflineManager$Type());
  }

  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory OfflineManager_Companion(
    _$jni.JObject defaultConstructorMarker,
  ) {
    return OfflineManager_Companion.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $OfflineManager_Companion$Type
    extends _$jni.JObjType<OfflineManager_Companion> {
  @_$jni.internal
  const $OfflineManager_Companion$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$Companion;';

  @_$jni.internal
  @_$core.override
  OfflineManager_Companion fromReference(_$jni.JReference reference) =>
      OfflineManager_Companion.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($OfflineManager_Companion$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineManager_Companion$Type) &&
        other is $OfflineManager_Companion$Type;
  }
}

/// from: `org.maplibre.android.offline.OfflineManager$CreateOfflineRegionCallback`
class OfflineManager_CreateOfflineRegionCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<OfflineManager_CreateOfflineRegionCallback> $type;

  @_$jni.internal
  OfflineManager_CreateOfflineRegionCallback.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/offline/OfflineManager$CreateOfflineRegionCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineManager_CreateOfflineRegionCallback$Type();
  static final _id_onCreate = _class.instanceMethodId(
    r'onCreate',
    r'(Lorg/maplibre/android/offline/OfflineRegion;)V',
  );

  static final _onCreate = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onCreate(org.maplibre.android.offline.OfflineRegion offlineRegion)`
  void onCreate(
    offlineregion_.OfflineRegion offlineRegion,
  ) {
    _onCreate(reference.pointer, _id_onCreate as _$jni.JMethodIDPtr,
            offlineRegion.reference.pointer)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'(Ljava/lang/String;)V',
  );

  static final _onError = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onError(java.lang.String string)`
  void onError(
    _$jni.JString string,
  ) {
    _onError(reference.pointer, _id_onError as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $OfflineManager_CreateOfflineRegionCallback>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onCreate(Lorg/maplibre/android/offline/OfflineRegion;)V') {
        _$impls[$p]!.onCreate(
          $a[0].as(const offlineregion_.$OfflineRegion$Type(),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d == r'onError(Ljava/lang/String;)V') {
        _$impls[$p]!.onError(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $OfflineManager_CreateOfflineRegionCallback $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.offline.OfflineManager$CreateOfflineRegionCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onCreate$async)
          r'onCreate(Lorg/maplibre/android/offline/OfflineRegion;)V',
        if ($impl.onError$async) r'onError(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory OfflineManager_CreateOfflineRegionCallback.implement(
    $OfflineManager_CreateOfflineRegionCallback $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return OfflineManager_CreateOfflineRegionCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $OfflineManager_CreateOfflineRegionCallback {
  factory $OfflineManager_CreateOfflineRegionCallback({
    required void Function(offlineregion_.OfflineRegion offlineRegion) onCreate,
    bool onCreate$async,
    required void Function(_$jni.JString string) onError,
    bool onError$async,
  }) = _$OfflineManager_CreateOfflineRegionCallback;

  void onCreate(offlineregion_.OfflineRegion offlineRegion);
  bool get onCreate$async => false;
  void onError(_$jni.JString string);
  bool get onError$async => false;
}

final class _$OfflineManager_CreateOfflineRegionCallback
    with $OfflineManager_CreateOfflineRegionCallback {
  _$OfflineManager_CreateOfflineRegionCallback({
    required void Function(offlineregion_.OfflineRegion offlineRegion) onCreate,
    this.onCreate$async = false,
    required void Function(_$jni.JString string) onError,
    this.onError$async = false,
  })  : _onCreate = onCreate,
        _onError = onError;

  final void Function(offlineregion_.OfflineRegion offlineRegion) _onCreate;
  final bool onCreate$async;
  final void Function(_$jni.JString string) _onError;
  final bool onError$async;

  void onCreate(offlineregion_.OfflineRegion offlineRegion) {
    return _onCreate(offlineRegion);
  }

  void onError(_$jni.JString string) {
    return _onError(string);
  }
}

final class $OfflineManager_CreateOfflineRegionCallback$Type
    extends _$jni.JObjType<OfflineManager_CreateOfflineRegionCallback> {
  @_$jni.internal
  const $OfflineManager_CreateOfflineRegionCallback$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$CreateOfflineRegionCallback;';

  @_$jni.internal
  @_$core.override
  OfflineManager_CreateOfflineRegionCallback fromReference(
          _$jni.JReference reference) =>
      OfflineManager_CreateOfflineRegionCallback.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($OfflineManager_CreateOfflineRegionCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($OfflineManager_CreateOfflineRegionCallback$Type) &&
        other is $OfflineManager_CreateOfflineRegionCallback$Type;
  }
}

/// from: `org.maplibre.android.offline.OfflineManager$FileSourceCallback`
class OfflineManager_FileSourceCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<OfflineManager_FileSourceCallback> $type;

  @_$jni.internal
  OfflineManager_FileSourceCallback.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/offline/OfflineManager$FileSourceCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineManager_FileSourceCallback$Type();
  static final _id_onSuccess = _class.instanceMethodId(
    r'onSuccess',
    r'()V',
  );

  static final _onSuccess = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onSuccess()`
  void onSuccess() {
    _onSuccess(reference.pointer, _id_onSuccess as _$jni.JMethodIDPtr).check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'(Ljava/lang/String;)V',
  );

  static final _onError = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onError(java.lang.String string)`
  void onError(
    _$jni.JString string,
  ) {
    _onError(reference.pointer, _id_onError as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $OfflineManager_FileSourceCallback> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onSuccess()V') {
        _$impls[$p]!.onSuccess();
        return _$jni.nullptr;
      }
      if ($d == r'onError(Ljava/lang/String;)V') {
        _$impls[$p]!.onError(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $OfflineManager_FileSourceCallback $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.offline.OfflineManager$FileSourceCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onSuccess$async) r'onSuccess()V',
        if ($impl.onError$async) r'onError(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory OfflineManager_FileSourceCallback.implement(
    $OfflineManager_FileSourceCallback $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return OfflineManager_FileSourceCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $OfflineManager_FileSourceCallback {
  factory $OfflineManager_FileSourceCallback({
    required void Function() onSuccess,
    bool onSuccess$async,
    required void Function(_$jni.JString string) onError,
    bool onError$async,
  }) = _$OfflineManager_FileSourceCallback;

  void onSuccess();
  bool get onSuccess$async => false;
  void onError(_$jni.JString string);
  bool get onError$async => false;
}

final class _$OfflineManager_FileSourceCallback
    with $OfflineManager_FileSourceCallback {
  _$OfflineManager_FileSourceCallback({
    required void Function() onSuccess,
    this.onSuccess$async = false,
    required void Function(_$jni.JString string) onError,
    this.onError$async = false,
  })  : _onSuccess = onSuccess,
        _onError = onError;

  final void Function() _onSuccess;
  final bool onSuccess$async;
  final void Function(_$jni.JString string) _onError;
  final bool onError$async;

  void onSuccess() {
    return _onSuccess();
  }

  void onError(_$jni.JString string) {
    return _onError(string);
  }
}

final class $OfflineManager_FileSourceCallback$Type
    extends _$jni.JObjType<OfflineManager_FileSourceCallback> {
  @_$jni.internal
  const $OfflineManager_FileSourceCallback$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$FileSourceCallback;';

  @_$jni.internal
  @_$core.override
  OfflineManager_FileSourceCallback fromReference(_$jni.JReference reference) =>
      OfflineManager_FileSourceCallback.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($OfflineManager_FileSourceCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineManager_FileSourceCallback$Type) &&
        other is $OfflineManager_FileSourceCallback$Type;
  }
}

/// from: `org.maplibre.android.offline.OfflineManager$GetOfflineRegionCallback`
class OfflineManager_GetOfflineRegionCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<OfflineManager_GetOfflineRegionCallback> $type;

  @_$jni.internal
  OfflineManager_GetOfflineRegionCallback.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/offline/OfflineManager$GetOfflineRegionCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineManager_GetOfflineRegionCallback$Type();
  static final _id_onRegion = _class.instanceMethodId(
    r'onRegion',
    r'(Lorg/maplibre/android/offline/OfflineRegion;)V',
  );

  static final _onRegion = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onRegion(org.maplibre.android.offline.OfflineRegion offlineRegion)`
  void onRegion(
    offlineregion_.OfflineRegion offlineRegion,
  ) {
    _onRegion(reference.pointer, _id_onRegion as _$jni.JMethodIDPtr,
            offlineRegion.reference.pointer)
        .check();
  }

  static final _id_onRegionNotFound = _class.instanceMethodId(
    r'onRegionNotFound',
    r'()V',
  );

  static final _onRegionNotFound = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onRegionNotFound()`
  void onRegionNotFound() {
    _onRegionNotFound(
            reference.pointer, _id_onRegionNotFound as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'(Ljava/lang/String;)V',
  );

  static final _onError = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onError(java.lang.String string)`
  void onError(
    _$jni.JString string,
  ) {
    _onError(reference.pointer, _id_onError as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $OfflineManager_GetOfflineRegionCallback>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onRegion(Lorg/maplibre/android/offline/OfflineRegion;)V') {
        _$impls[$p]!.onRegion(
          $a[0].as(const offlineregion_.$OfflineRegion$Type(),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d == r'onRegionNotFound()V') {
        _$impls[$p]!.onRegionNotFound();
        return _$jni.nullptr;
      }
      if ($d == r'onError(Ljava/lang/String;)V') {
        _$impls[$p]!.onError(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $OfflineManager_GetOfflineRegionCallback $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.offline.OfflineManager$GetOfflineRegionCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onRegion$async)
          r'onRegion(Lorg/maplibre/android/offline/OfflineRegion;)V',
        if ($impl.onRegionNotFound$async) r'onRegionNotFound()V',
        if ($impl.onError$async) r'onError(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory OfflineManager_GetOfflineRegionCallback.implement(
    $OfflineManager_GetOfflineRegionCallback $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return OfflineManager_GetOfflineRegionCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $OfflineManager_GetOfflineRegionCallback {
  factory $OfflineManager_GetOfflineRegionCallback({
    required void Function(offlineregion_.OfflineRegion offlineRegion) onRegion,
    bool onRegion$async,
    required void Function() onRegionNotFound,
    bool onRegionNotFound$async,
    required void Function(_$jni.JString string) onError,
    bool onError$async,
  }) = _$OfflineManager_GetOfflineRegionCallback;

  void onRegion(offlineregion_.OfflineRegion offlineRegion);
  bool get onRegion$async => false;
  void onRegionNotFound();
  bool get onRegionNotFound$async => false;
  void onError(_$jni.JString string);
  bool get onError$async => false;
}

final class _$OfflineManager_GetOfflineRegionCallback
    with $OfflineManager_GetOfflineRegionCallback {
  _$OfflineManager_GetOfflineRegionCallback({
    required void Function(offlineregion_.OfflineRegion offlineRegion) onRegion,
    this.onRegion$async = false,
    required void Function() onRegionNotFound,
    this.onRegionNotFound$async = false,
    required void Function(_$jni.JString string) onError,
    this.onError$async = false,
  })  : _onRegion = onRegion,
        _onRegionNotFound = onRegionNotFound,
        _onError = onError;

  final void Function(offlineregion_.OfflineRegion offlineRegion) _onRegion;
  final bool onRegion$async;
  final void Function() _onRegionNotFound;
  final bool onRegionNotFound$async;
  final void Function(_$jni.JString string) _onError;
  final bool onError$async;

  void onRegion(offlineregion_.OfflineRegion offlineRegion) {
    return _onRegion(offlineRegion);
  }

  void onRegionNotFound() {
    return _onRegionNotFound();
  }

  void onError(_$jni.JString string) {
    return _onError(string);
  }
}

final class $OfflineManager_GetOfflineRegionCallback$Type
    extends _$jni.JObjType<OfflineManager_GetOfflineRegionCallback> {
  @_$jni.internal
  const $OfflineManager_GetOfflineRegionCallback$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$GetOfflineRegionCallback;';

  @_$jni.internal
  @_$core.override
  OfflineManager_GetOfflineRegionCallback fromReference(
          _$jni.JReference reference) =>
      OfflineManager_GetOfflineRegionCallback.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($OfflineManager_GetOfflineRegionCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($OfflineManager_GetOfflineRegionCallback$Type) &&
        other is $OfflineManager_GetOfflineRegionCallback$Type;
  }
}

/// from: `org.maplibre.android.offline.OfflineManager$ListOfflineRegionsCallback`
class OfflineManager_ListOfflineRegionsCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<OfflineManager_ListOfflineRegionsCallback> $type;

  @_$jni.internal
  OfflineManager_ListOfflineRegionsCallback.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/offline/OfflineManager$ListOfflineRegionsCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineManager_ListOfflineRegionsCallback$Type();
  static final _id_onList = _class.instanceMethodId(
    r'onList',
    r'([Lorg/maplibre/android/offline/OfflineRegion;)V',
  );

  static final _onList = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onList(org.maplibre.android.offline.OfflineRegion[] offlineRegions)`
  void onList(
    _$jni.JArray<offlineregion_.OfflineRegion> offlineRegions,
  ) {
    _onList(reference.pointer, _id_onList as _$jni.JMethodIDPtr,
            offlineRegions.reference.pointer)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'(Ljava/lang/String;)V',
  );

  static final _onError = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onError(java.lang.String string)`
  void onError(
    _$jni.JString string,
  ) {
    _onError(reference.pointer, _id_onError as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $OfflineManager_ListOfflineRegionsCallback>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onList([Lorg/maplibre/android/offline/OfflineRegion;)V') {
        _$impls[$p]!.onList(
          $a[0].as(const _$jni.JArrayType(offlineregion_.$OfflineRegion$Type()),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d == r'onError(Ljava/lang/String;)V') {
        _$impls[$p]!.onError(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $OfflineManager_ListOfflineRegionsCallback $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.offline.OfflineManager$ListOfflineRegionsCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onList$async)
          r'onList([Lorg/maplibre/android/offline/OfflineRegion;)V',
        if ($impl.onError$async) r'onError(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory OfflineManager_ListOfflineRegionsCallback.implement(
    $OfflineManager_ListOfflineRegionsCallback $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return OfflineManager_ListOfflineRegionsCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $OfflineManager_ListOfflineRegionsCallback {
  factory $OfflineManager_ListOfflineRegionsCallback({
    required void Function(
            _$jni.JArray<offlineregion_.OfflineRegion> offlineRegions)
        onList,
    bool onList$async,
    required void Function(_$jni.JString string) onError,
    bool onError$async,
  }) = _$OfflineManager_ListOfflineRegionsCallback;

  void onList(_$jni.JArray<offlineregion_.OfflineRegion> offlineRegions);
  bool get onList$async => false;
  void onError(_$jni.JString string);
  bool get onError$async => false;
}

final class _$OfflineManager_ListOfflineRegionsCallback
    with $OfflineManager_ListOfflineRegionsCallback {
  _$OfflineManager_ListOfflineRegionsCallback({
    required void Function(
            _$jni.JArray<offlineregion_.OfflineRegion> offlineRegions)
        onList,
    this.onList$async = false,
    required void Function(_$jni.JString string) onError,
    this.onError$async = false,
  })  : _onList = onList,
        _onError = onError;

  final void Function(_$jni.JArray<offlineregion_.OfflineRegion> offlineRegions)
      _onList;
  final bool onList$async;
  final void Function(_$jni.JString string) _onError;
  final bool onError$async;

  void onList(_$jni.JArray<offlineregion_.OfflineRegion> offlineRegions) {
    return _onList(offlineRegions);
  }

  void onError(_$jni.JString string) {
    return _onError(string);
  }
}

final class $OfflineManager_ListOfflineRegionsCallback$Type
    extends _$jni.JObjType<OfflineManager_ListOfflineRegionsCallback> {
  @_$jni.internal
  const $OfflineManager_ListOfflineRegionsCallback$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$ListOfflineRegionsCallback;';

  @_$jni.internal
  @_$core.override
  OfflineManager_ListOfflineRegionsCallback fromReference(
          _$jni.JReference reference) =>
      OfflineManager_ListOfflineRegionsCallback.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($OfflineManager_ListOfflineRegionsCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($OfflineManager_ListOfflineRegionsCallback$Type) &&
        other is $OfflineManager_ListOfflineRegionsCallback$Type;
  }
}

/// from: `org.maplibre.android.offline.OfflineManager$MergeOfflineRegionsCallback`
class OfflineManager_MergeOfflineRegionsCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<OfflineManager_MergeOfflineRegionsCallback> $type;

  @_$jni.internal
  OfflineManager_MergeOfflineRegionsCallback.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/offline/OfflineManager$MergeOfflineRegionsCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineManager_MergeOfflineRegionsCallback$Type();
  static final _id_onMerge = _class.instanceMethodId(
    r'onMerge',
    r'([Lorg/maplibre/android/offline/OfflineRegion;)V',
  );

  static final _onMerge = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onMerge(org.maplibre.android.offline.OfflineRegion[] offlineRegions)`
  void onMerge(
    _$jni.JArray<offlineregion_.OfflineRegion> offlineRegions,
  ) {
    _onMerge(reference.pointer, _id_onMerge as _$jni.JMethodIDPtr,
            offlineRegions.reference.pointer)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'(Ljava/lang/String;)V',
  );

  static final _onError = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onError(java.lang.String string)`
  void onError(
    _$jni.JString string,
  ) {
    _onError(reference.pointer, _id_onError as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $OfflineManager_MergeOfflineRegionsCallback>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onMerge([Lorg/maplibre/android/offline/OfflineRegion;)V') {
        _$impls[$p]!.onMerge(
          $a[0].as(const _$jni.JArrayType(offlineregion_.$OfflineRegion$Type()),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d == r'onError(Ljava/lang/String;)V') {
        _$impls[$p]!.onError(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $OfflineManager_MergeOfflineRegionsCallback $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.offline.OfflineManager$MergeOfflineRegionsCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onMerge$async)
          r'onMerge([Lorg/maplibre/android/offline/OfflineRegion;)V',
        if ($impl.onError$async) r'onError(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory OfflineManager_MergeOfflineRegionsCallback.implement(
    $OfflineManager_MergeOfflineRegionsCallback $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return OfflineManager_MergeOfflineRegionsCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $OfflineManager_MergeOfflineRegionsCallback {
  factory $OfflineManager_MergeOfflineRegionsCallback({
    required void Function(
            _$jni.JArray<offlineregion_.OfflineRegion> offlineRegions)
        onMerge,
    bool onMerge$async,
    required void Function(_$jni.JString string) onError,
    bool onError$async,
  }) = _$OfflineManager_MergeOfflineRegionsCallback;

  void onMerge(_$jni.JArray<offlineregion_.OfflineRegion> offlineRegions);
  bool get onMerge$async => false;
  void onError(_$jni.JString string);
  bool get onError$async => false;
}

final class _$OfflineManager_MergeOfflineRegionsCallback
    with $OfflineManager_MergeOfflineRegionsCallback {
  _$OfflineManager_MergeOfflineRegionsCallback({
    required void Function(
            _$jni.JArray<offlineregion_.OfflineRegion> offlineRegions)
        onMerge,
    this.onMerge$async = false,
    required void Function(_$jni.JString string) onError,
    this.onError$async = false,
  })  : _onMerge = onMerge,
        _onError = onError;

  final void Function(_$jni.JArray<offlineregion_.OfflineRegion> offlineRegions)
      _onMerge;
  final bool onMerge$async;
  final void Function(_$jni.JString string) _onError;
  final bool onError$async;

  void onMerge(_$jni.JArray<offlineregion_.OfflineRegion> offlineRegions) {
    return _onMerge(offlineRegions);
  }

  void onError(_$jni.JString string) {
    return _onError(string);
  }
}

final class $OfflineManager_MergeOfflineRegionsCallback$Type
    extends _$jni.JObjType<OfflineManager_MergeOfflineRegionsCallback> {
  @_$jni.internal
  const $OfflineManager_MergeOfflineRegionsCallback$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/offline/OfflineManager$MergeOfflineRegionsCallback;';

  @_$jni.internal
  @_$core.override
  OfflineManager_MergeOfflineRegionsCallback fromReference(
          _$jni.JReference reference) =>
      OfflineManager_MergeOfflineRegionsCallback.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($OfflineManager_MergeOfflineRegionsCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($OfflineManager_MergeOfflineRegionsCallback$Type) &&
        other is $OfflineManager_MergeOfflineRegionsCallback$Type;
  }
}

/// from: `org.maplibre.android.offline.OfflineManager`
class OfflineManager extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<OfflineManager> $type;

  @_$jni.internal
  OfflineManager.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/offline/OfflineManager');

  /// The type which includes information such as the signature of this class.
  static const type = $OfflineManager$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lorg/maplibre/android/offline/OfflineManager$Companion;',
  );

  /// from: `static public final org.maplibre.android.offline.OfflineManager$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static OfflineManager_Companion get Companion =>
      _id_Companion.get(_class, const $OfflineManager_Companion$Type());

  static final _id_listOfflineRegions = _class.instanceMethodId(
    r'listOfflineRegions',
    r'(Lorg/maplibre/android/offline/OfflineManager$ListOfflineRegionsCallback;)V',
  );

  static final _listOfflineRegions = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void listOfflineRegions(org.maplibre.android.offline.OfflineManager$ListOfflineRegionsCallback listOfflineRegionsCallback)`
  void listOfflineRegions(
    OfflineManager_ListOfflineRegionsCallback listOfflineRegionsCallback,
  ) {
    _listOfflineRegions(
            reference.pointer,
            _id_listOfflineRegions as _$jni.JMethodIDPtr,
            listOfflineRegionsCallback.reference.pointer)
        .check();
  }

  static final _id_getOfflineRegion = _class.instanceMethodId(
    r'getOfflineRegion',
    r'(JLorg/maplibre/android/offline/OfflineManager$GetOfflineRegionCallback;)V',
  );

  static final _getOfflineRegion = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int64, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void getOfflineRegion(long j, org.maplibre.android.offline.OfflineManager$GetOfflineRegionCallback getOfflineRegionCallback)`
  void getOfflineRegion(
    int j,
    OfflineManager_GetOfflineRegionCallback getOfflineRegionCallback,
  ) {
    _getOfflineRegion(
            reference.pointer,
            _id_getOfflineRegion as _$jni.JMethodIDPtr,
            j,
            getOfflineRegionCallback.reference.pointer)
        .check();
  }

  static final _id_mergeOfflineRegions = _class.instanceMethodId(
    r'mergeOfflineRegions',
    r'(Ljava/lang/String;Lorg/maplibre/android/offline/OfflineManager$MergeOfflineRegionsCallback;)V',
  );

  static final _mergeOfflineRegions = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void mergeOfflineRegions(java.lang.String string, org.maplibre.android.offline.OfflineManager$MergeOfflineRegionsCallback mergeOfflineRegionsCallback)`
  void mergeOfflineRegions(
    _$jni.JString string,
    OfflineManager_MergeOfflineRegionsCallback mergeOfflineRegionsCallback,
  ) {
    _mergeOfflineRegions(
            reference.pointer,
            _id_mergeOfflineRegions as _$jni.JMethodIDPtr,
            string.reference.pointer,
            mergeOfflineRegionsCallback.reference.pointer)
        .check();
  }

  static final _id_resetDatabase = _class.instanceMethodId(
    r'resetDatabase',
    r'(Lorg/maplibre/android/offline/OfflineManager$FileSourceCallback;)V',
  );

  static final _resetDatabase = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void resetDatabase(org.maplibre.android.offline.OfflineManager$FileSourceCallback fileSourceCallback)`
  void resetDatabase(
    OfflineManager_FileSourceCallback fileSourceCallback,
  ) {
    _resetDatabase(reference.pointer, _id_resetDatabase as _$jni.JMethodIDPtr,
            fileSourceCallback.reference.pointer)
        .check();
  }

  static final _id_packDatabase = _class.instanceMethodId(
    r'packDatabase',
    r'(Lorg/maplibre/android/offline/OfflineManager$FileSourceCallback;)V',
  );

  static final _packDatabase = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void packDatabase(org.maplibre.android.offline.OfflineManager$FileSourceCallback fileSourceCallback)`
  void packDatabase(
    OfflineManager_FileSourceCallback fileSourceCallback,
  ) {
    _packDatabase(reference.pointer, _id_packDatabase as _$jni.JMethodIDPtr,
            fileSourceCallback.reference.pointer)
        .check();
  }

  static final _id_invalidateAmbientCache = _class.instanceMethodId(
    r'invalidateAmbientCache',
    r'(Lorg/maplibre/android/offline/OfflineManager$FileSourceCallback;)V',
  );

  static final _invalidateAmbientCache = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void invalidateAmbientCache(org.maplibre.android.offline.OfflineManager$FileSourceCallback fileSourceCallback)`
  void invalidateAmbientCache(
    OfflineManager_FileSourceCallback fileSourceCallback,
  ) {
    _invalidateAmbientCache(
            reference.pointer,
            _id_invalidateAmbientCache as _$jni.JMethodIDPtr,
            fileSourceCallback.reference.pointer)
        .check();
  }

  static final _id_clearAmbientCache = _class.instanceMethodId(
    r'clearAmbientCache',
    r'(Lorg/maplibre/android/offline/OfflineManager$FileSourceCallback;)V',
  );

  static final _clearAmbientCache = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void clearAmbientCache(org.maplibre.android.offline.OfflineManager$FileSourceCallback fileSourceCallback)`
  void clearAmbientCache(
    OfflineManager_FileSourceCallback fileSourceCallback,
  ) {
    _clearAmbientCache(
            reference.pointer,
            _id_clearAmbientCache as _$jni.JMethodIDPtr,
            fileSourceCallback.reference.pointer)
        .check();
  }

  static final _id_setMaximumAmbientCacheSize = _class.instanceMethodId(
    r'setMaximumAmbientCacheSize',
    r'(JLorg/maplibre/android/offline/OfflineManager$FileSourceCallback;)V',
  );

  static final _setMaximumAmbientCacheSize =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Int64,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void setMaximumAmbientCacheSize(long j, org.maplibre.android.offline.OfflineManager$FileSourceCallback fileSourceCallback)`
  void setMaximumAmbientCacheSize(
    int j,
    OfflineManager_FileSourceCallback fileSourceCallback,
  ) {
    _setMaximumAmbientCacheSize(
            reference.pointer,
            _id_setMaximumAmbientCacheSize as _$jni.JMethodIDPtr,
            j,
            fileSourceCallback.reference.pointer)
        .check();
  }

  static final _id_createOfflineRegion = _class.instanceMethodId(
    r'createOfflineRegion',
    r'(Lorg/maplibre/android/offline/OfflineRegionDefinition;[BLorg/maplibre/android/offline/OfflineManager$CreateOfflineRegionCallback;)V',
  );

  static final _createOfflineRegion = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void createOfflineRegion(org.maplibre.android.offline.OfflineRegionDefinition offlineRegionDefinition, byte[] bs, org.maplibre.android.offline.OfflineManager$CreateOfflineRegionCallback createOfflineRegionCallback)`
  void createOfflineRegion(
    offlineregiondefinition_.OfflineRegionDefinition offlineRegionDefinition,
    _$jni.JArray<_$jni.jbyte> bs,
    OfflineManager_CreateOfflineRegionCallback createOfflineRegionCallback,
  ) {
    _createOfflineRegion(
            reference.pointer,
            _id_createOfflineRegion as _$jni.JMethodIDPtr,
            offlineRegionDefinition.reference.pointer,
            bs.reference.pointer,
            createOfflineRegionCallback.reference.pointer)
        .check();
  }

  static final _id_setOfflineMapboxTileCountLimit = _class.instanceMethodId(
    r'setOfflineMapboxTileCountLimit',
    r'(J)V',
  );

  static final _setOfflineMapboxTileCountLimit =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int64,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public native final void setOfflineMapboxTileCountLimit(long j)`
  void setOfflineMapboxTileCountLimit(
    int j,
  ) {
    _setOfflineMapboxTileCountLimit(reference.pointer,
            _id_setOfflineMapboxTileCountLimit as _$jni.JMethodIDPtr, j)
        .check();
  }

  static final _id_runPackDatabaseAutomatically = _class.instanceMethodId(
    r'runPackDatabaseAutomatically',
    r'(Z)V',
  );

  static final _runPackDatabaseAutomatically =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public native final void runPackDatabaseAutomatically(boolean z)`
  void runPackDatabaseAutomatically(
    bool z,
  ) {
    _runPackDatabaseAutomatically(reference.pointer,
            _id_runPackDatabaseAutomatically as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_putResourceWithUrl = _class.instanceMethodId(
    r'putResourceWithUrl',
    r'(Ljava/lang/String;[BJJLjava/lang/String;Z)V',
  );

  static final _putResourceWithUrl = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int64,
                        _$jni.Int64,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `public native final void putResourceWithUrl(java.lang.String string, byte[] bs, long j, long j1, java.lang.String string1, boolean z)`
  void putResourceWithUrl(
    _$jni.JString string,
    _$jni.JArray<_$jni.jbyte> bs,
    int j,
    int j1,
    _$jni.JString string1,
    bool z,
  ) {
    _putResourceWithUrl(
            reference.pointer,
            _id_putResourceWithUrl as _$jni.JMethodIDPtr,
            string.reference.pointer,
            bs.reference.pointer,
            j,
            j1,
            string1.reference.pointer,
            z ? 1 : 0)
        .check();
  }

  static final _id_getInstance = _class.staticMethodId(
    r'getInstance',
    r'(Landroid/content/Context;)Lorg/maplibre/android/offline/OfflineManager;',
  );

  static final _getInstance = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public final org.maplibre.android.offline.OfflineManager getInstance(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static OfflineManager getInstance(
    _$jni.JObject context,
  ) {
    return _getInstance(_class.reference.pointer,
            _id_getInstance as _$jni.JMethodIDPtr, context.reference.pointer)
        .object(const $OfflineManager$Type());
  }

  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `synthetic public void <init>(android.content.Context context, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory OfflineManager(
    _$jni.JObject context,
    _$jni.JObject defaultConstructorMarker,
  ) {
    return OfflineManager.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            context.reference.pointer,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $OfflineManager$Type extends _$jni.JObjType<OfflineManager> {
  @_$jni.internal
  const $OfflineManager$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/offline/OfflineManager;';

  @_$jni.internal
  @_$core.override
  OfflineManager fromReference(_$jni.JReference reference) =>
      OfflineManager.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($OfflineManager$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OfflineManager$Type) &&
        other is $OfflineManager$Type;
  }
}
