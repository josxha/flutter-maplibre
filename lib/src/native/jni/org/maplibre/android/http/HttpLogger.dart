// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `org.maplibre.android.http.HttpLogger`
class HttpLogger extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<HttpLogger> $type;

  @_$jni.internal
  HttpLogger.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/http/HttpLogger');

  /// The type which includes information such as the signature of this class.
  static const type = $HttpLogger$Type();
  static final _id_logRequestUrl = _class.staticFieldId(
    r'logRequestUrl',
    r'Z',
  );

  /// from: `static public boolean logRequestUrl`
  static bool get logRequestUrl =>
      _id_logRequestUrl.get(_class, const _$jni.jbooleanType());

  /// from: `static public boolean logRequestUrl`
  static set logRequestUrl(bool value) =>
      _id_logRequestUrl.set(_class, const _$jni.jbooleanType(), value);

  static final _id_logEnabled = _class.staticFieldId(
    r'logEnabled',
    r'Z',
  );

  /// from: `static public boolean logEnabled`
  static bool get logEnabled =>
      _id_logEnabled.get(_class, const _$jni.jbooleanType());

  /// from: `static public boolean logEnabled`
  static set logEnabled(bool value) =>
      _id_logEnabled.set(_class, const _$jni.jbooleanType(), value);

  static final _id_logFailure = _class.staticMethodId(
    r'logFailure',
    r'(ILjava/lang/String;Ljava/lang/String;)V',
  );

  static final _logFailure = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void logFailure(int i, java.lang.String string, java.lang.String string1)`
  static void logFailure(
    int i,
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    _logFailure(_class.reference.pointer, _id_logFailure as _$jni.JMethodIDPtr,
            i, string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_log = _class.staticMethodId(
    r'log',
    r'(ILjava/lang/String;)V',
  );

  static final _log = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void log(int i, java.lang.String string)`
  static void log(
    int i,
    _$jni.JString string,
  ) {
    _log(_class.reference.pointer, _id_log as _$jni.JMethodIDPtr, i,
            string.reference.pointer)
        .check();
  }
}

final class $HttpLogger$Type extends _$jni.JObjType<HttpLogger> {
  @_$jni.internal
  const $HttpLogger$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/http/HttpLogger;';

  @_$jni.internal
  @_$core.override
  HttpLogger fromReference(_$jni.JReference reference) =>
      HttpLogger.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($HttpLogger$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HttpLogger$Type) && other is $HttpLogger$Type;
  }
}
