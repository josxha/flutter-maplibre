// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import 'MapLibreMapOptions.dart' as maplibremapoptions_;

import 'OnMapReadyCallback.dart' as onmapreadycallback_;

import 'renderer/MapRenderer.dart' as maprenderer_;

/// from: `org.maplibre.android.maps.MapView$OnCameraDidChangeListener`
class MapView_OnCameraDidChangeListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnCameraDidChangeListener> $type;

  @_$jni.internal
  MapView_OnCameraDidChangeListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnCameraDidChangeListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnCameraDidChangeListener$Type();
  static final _id_onCameraDidChange = _class.instanceMethodId(
    r'onCameraDidChange',
    r'(Z)V',
  );

  static final _onCameraDidChange = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void onCameraDidChange(boolean z)`
  void onCameraDidChange(
    bool z,
  ) {
    _onCameraDidChange(reference.pointer,
            _id_onCameraDidChange as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnCameraDidChangeListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onCameraDidChange(Z)V') {
        _$impls[$p]!.onCameraDidChange(
          $a[0]
              .as(const _$jni.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnCameraDidChangeListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnCameraDidChangeListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onCameraDidChange$async) r'onCameraDidChange(Z)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnCameraDidChangeListener.implement(
    $MapView_OnCameraDidChangeListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnCameraDidChangeListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnCameraDidChangeListener {
  factory $MapView_OnCameraDidChangeListener({
    required void Function(bool z) onCameraDidChange,
    bool onCameraDidChange$async,
  }) = _$MapView_OnCameraDidChangeListener;

  void onCameraDidChange(bool z);
  bool get onCameraDidChange$async => false;
}

final class _$MapView_OnCameraDidChangeListener
    with $MapView_OnCameraDidChangeListener {
  _$MapView_OnCameraDidChangeListener({
    required void Function(bool z) onCameraDidChange,
    this.onCameraDidChange$async = false,
  }) : _onCameraDidChange = onCameraDidChange;

  final void Function(bool z) _onCameraDidChange;
  final bool onCameraDidChange$async;

  void onCameraDidChange(bool z) {
    return _onCameraDidChange(z);
  }
}

final class $MapView_OnCameraDidChangeListener$Type
    extends _$jni.JObjType<MapView_OnCameraDidChangeListener> {
  @_$jni.internal
  const $MapView_OnCameraDidChangeListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnCameraDidChangeListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnCameraDidChangeListener fromReference(_$jni.JReference reference) =>
      MapView_OnCameraDidChangeListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnCameraDidChangeListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnCameraDidChangeListener$Type) &&
        other is $MapView_OnCameraDidChangeListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnCameraIsChangingListener`
class MapView_OnCameraIsChangingListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnCameraIsChangingListener> $type;

  @_$jni.internal
  MapView_OnCameraIsChangingListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnCameraIsChangingListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnCameraIsChangingListener$Type();
  static final _id_onCameraIsChanging = _class.instanceMethodId(
    r'onCameraIsChanging',
    r'()V',
  );

  static final _onCameraIsChanging = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onCameraIsChanging()`
  void onCameraIsChanging() {
    _onCameraIsChanging(
            reference.pointer, _id_onCameraIsChanging as _$jni.JMethodIDPtr)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnCameraIsChangingListener> _$impls =
      {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onCameraIsChanging()V') {
        _$impls[$p]!.onCameraIsChanging();
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnCameraIsChangingListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnCameraIsChangingListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onCameraIsChanging$async) r'onCameraIsChanging()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnCameraIsChangingListener.implement(
    $MapView_OnCameraIsChangingListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnCameraIsChangingListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnCameraIsChangingListener {
  factory $MapView_OnCameraIsChangingListener({
    required void Function() onCameraIsChanging,
    bool onCameraIsChanging$async,
  }) = _$MapView_OnCameraIsChangingListener;

  void onCameraIsChanging();
  bool get onCameraIsChanging$async => false;
}

final class _$MapView_OnCameraIsChangingListener
    with $MapView_OnCameraIsChangingListener {
  _$MapView_OnCameraIsChangingListener({
    required void Function() onCameraIsChanging,
    this.onCameraIsChanging$async = false,
  }) : _onCameraIsChanging = onCameraIsChanging;

  final void Function() _onCameraIsChanging;
  final bool onCameraIsChanging$async;

  void onCameraIsChanging() {
    return _onCameraIsChanging();
  }
}

final class $MapView_OnCameraIsChangingListener$Type
    extends _$jni.JObjType<MapView_OnCameraIsChangingListener> {
  @_$jni.internal
  const $MapView_OnCameraIsChangingListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnCameraIsChangingListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnCameraIsChangingListener fromReference(
          _$jni.JReference reference) =>
      MapView_OnCameraIsChangingListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnCameraIsChangingListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnCameraIsChangingListener$Type) &&
        other is $MapView_OnCameraIsChangingListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnCameraWillChangeListener`
class MapView_OnCameraWillChangeListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnCameraWillChangeListener> $type;

  @_$jni.internal
  MapView_OnCameraWillChangeListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnCameraWillChangeListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnCameraWillChangeListener$Type();
  static final _id_onCameraWillChange = _class.instanceMethodId(
    r'onCameraWillChange',
    r'(Z)V',
  );

  static final _onCameraWillChange = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void onCameraWillChange(boolean z)`
  void onCameraWillChange(
    bool z,
  ) {
    _onCameraWillChange(reference.pointer,
            _id_onCameraWillChange as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnCameraWillChangeListener> _$impls =
      {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onCameraWillChange(Z)V') {
        _$impls[$p]!.onCameraWillChange(
          $a[0]
              .as(const _$jni.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnCameraWillChangeListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnCameraWillChangeListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onCameraWillChange$async) r'onCameraWillChange(Z)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnCameraWillChangeListener.implement(
    $MapView_OnCameraWillChangeListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnCameraWillChangeListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnCameraWillChangeListener {
  factory $MapView_OnCameraWillChangeListener({
    required void Function(bool z) onCameraWillChange,
    bool onCameraWillChange$async,
  }) = _$MapView_OnCameraWillChangeListener;

  void onCameraWillChange(bool z);
  bool get onCameraWillChange$async => false;
}

final class _$MapView_OnCameraWillChangeListener
    with $MapView_OnCameraWillChangeListener {
  _$MapView_OnCameraWillChangeListener({
    required void Function(bool z) onCameraWillChange,
    this.onCameraWillChange$async = false,
  }) : _onCameraWillChange = onCameraWillChange;

  final void Function(bool z) _onCameraWillChange;
  final bool onCameraWillChange$async;

  void onCameraWillChange(bool z) {
    return _onCameraWillChange(z);
  }
}

final class $MapView_OnCameraWillChangeListener$Type
    extends _$jni.JObjType<MapView_OnCameraWillChangeListener> {
  @_$jni.internal
  const $MapView_OnCameraWillChangeListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnCameraWillChangeListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnCameraWillChangeListener fromReference(
          _$jni.JReference reference) =>
      MapView_OnCameraWillChangeListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnCameraWillChangeListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnCameraWillChangeListener$Type) &&
        other is $MapView_OnCameraWillChangeListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnCanRemoveUnusedStyleImageListener`
class MapView_OnCanRemoveUnusedStyleImageListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnCanRemoveUnusedStyleImageListener> $type;

  @_$jni.internal
  MapView_OnCanRemoveUnusedStyleImageListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnCanRemoveUnusedStyleImageListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnCanRemoveUnusedStyleImageListener$Type();
  static final _id_onCanRemoveUnusedStyleImage = _class.instanceMethodId(
    r'onCanRemoveUnusedStyleImage',
    r'(Ljava/lang/String;)Z',
  );

  static final _onCanRemoveUnusedStyleImage =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract boolean onCanRemoveUnusedStyleImage(java.lang.String string)`
  bool onCanRemoveUnusedStyleImage(
    _$jni.JString string,
  ) {
    return _onCanRemoveUnusedStyleImage(
            reference.pointer,
            _id_onCanRemoveUnusedStyleImage as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnCanRemoveUnusedStyleImageListener>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onCanRemoveUnusedStyleImage(Ljava/lang/String;)Z') {
        final $r = _$impls[$p]!.onCanRemoveUnusedStyleImage(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.JBoolean($r).reference.toPointer();
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnCanRemoveUnusedStyleImageListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnCanRemoveUnusedStyleImageListener',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnCanRemoveUnusedStyleImageListener.implement(
    $MapView_OnCanRemoveUnusedStyleImageListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnCanRemoveUnusedStyleImageListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnCanRemoveUnusedStyleImageListener {
  factory $MapView_OnCanRemoveUnusedStyleImageListener({
    required bool Function(_$jni.JString string) onCanRemoveUnusedStyleImage,
  }) = _$MapView_OnCanRemoveUnusedStyleImageListener;

  bool onCanRemoveUnusedStyleImage(_$jni.JString string);
}

final class _$MapView_OnCanRemoveUnusedStyleImageListener
    with $MapView_OnCanRemoveUnusedStyleImageListener {
  _$MapView_OnCanRemoveUnusedStyleImageListener({
    required bool Function(_$jni.JString string) onCanRemoveUnusedStyleImage,
  }) : _onCanRemoveUnusedStyleImage = onCanRemoveUnusedStyleImage;

  final bool Function(_$jni.JString string) _onCanRemoveUnusedStyleImage;

  bool onCanRemoveUnusedStyleImage(_$jni.JString string) {
    return _onCanRemoveUnusedStyleImage(string);
  }
}

final class $MapView_OnCanRemoveUnusedStyleImageListener$Type
    extends _$jni.JObjType<MapView_OnCanRemoveUnusedStyleImageListener> {
  @_$jni.internal
  const $MapView_OnCanRemoveUnusedStyleImageListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnCanRemoveUnusedStyleImageListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnCanRemoveUnusedStyleImageListener fromReference(
          _$jni.JReference reference) =>
      MapView_OnCanRemoveUnusedStyleImageListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($MapView_OnCanRemoveUnusedStyleImageListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MapView_OnCanRemoveUnusedStyleImageListener$Type) &&
        other is $MapView_OnCanRemoveUnusedStyleImageListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnDidBecomeIdleListener`
class MapView_OnDidBecomeIdleListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnDidBecomeIdleListener> $type;

  @_$jni.internal
  MapView_OnDidBecomeIdleListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnDidBecomeIdleListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnDidBecomeIdleListener$Type();
  static final _id_onDidBecomeIdle = _class.instanceMethodId(
    r'onDidBecomeIdle',
    r'()V',
  );

  static final _onDidBecomeIdle = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onDidBecomeIdle()`
  void onDidBecomeIdle() {
    _onDidBecomeIdle(
            reference.pointer, _id_onDidBecomeIdle as _$jni.JMethodIDPtr)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnDidBecomeIdleListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onDidBecomeIdle()V') {
        _$impls[$p]!.onDidBecomeIdle();
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnDidBecomeIdleListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnDidBecomeIdleListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onDidBecomeIdle$async) r'onDidBecomeIdle()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnDidBecomeIdleListener.implement(
    $MapView_OnDidBecomeIdleListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnDidBecomeIdleListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnDidBecomeIdleListener {
  factory $MapView_OnDidBecomeIdleListener({
    required void Function() onDidBecomeIdle,
    bool onDidBecomeIdle$async,
  }) = _$MapView_OnDidBecomeIdleListener;

  void onDidBecomeIdle();
  bool get onDidBecomeIdle$async => false;
}

final class _$MapView_OnDidBecomeIdleListener
    with $MapView_OnDidBecomeIdleListener {
  _$MapView_OnDidBecomeIdleListener({
    required void Function() onDidBecomeIdle,
    this.onDidBecomeIdle$async = false,
  }) : _onDidBecomeIdle = onDidBecomeIdle;

  final void Function() _onDidBecomeIdle;
  final bool onDidBecomeIdle$async;

  void onDidBecomeIdle() {
    return _onDidBecomeIdle();
  }
}

final class $MapView_OnDidBecomeIdleListener$Type
    extends _$jni.JObjType<MapView_OnDidBecomeIdleListener> {
  @_$jni.internal
  const $MapView_OnDidBecomeIdleListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnDidBecomeIdleListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnDidBecomeIdleListener fromReference(_$jni.JReference reference) =>
      MapView_OnDidBecomeIdleListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnDidBecomeIdleListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnDidBecomeIdleListener$Type) &&
        other is $MapView_OnDidBecomeIdleListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnDidFailLoadingMapListener`
class MapView_OnDidFailLoadingMapListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnDidFailLoadingMapListener> $type;

  @_$jni.internal
  MapView_OnDidFailLoadingMapListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnDidFailLoadingMapListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnDidFailLoadingMapListener$Type();
  static final _id_onDidFailLoadingMap = _class.instanceMethodId(
    r'onDidFailLoadingMap',
    r'(Ljava/lang/String;)V',
  );

  static final _onDidFailLoadingMap = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onDidFailLoadingMap(java.lang.String string)`
  void onDidFailLoadingMap(
    _$jni.JString string,
  ) {
    _onDidFailLoadingMap(
            reference.pointer,
            _id_onDidFailLoadingMap as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnDidFailLoadingMapListener> _$impls =
      {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onDidFailLoadingMap(Ljava/lang/String;)V') {
        _$impls[$p]!.onDidFailLoadingMap(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnDidFailLoadingMapListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnDidFailLoadingMapListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onDidFailLoadingMap$async)
          r'onDidFailLoadingMap(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnDidFailLoadingMapListener.implement(
    $MapView_OnDidFailLoadingMapListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnDidFailLoadingMapListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnDidFailLoadingMapListener {
  factory $MapView_OnDidFailLoadingMapListener({
    required void Function(_$jni.JString string) onDidFailLoadingMap,
    bool onDidFailLoadingMap$async,
  }) = _$MapView_OnDidFailLoadingMapListener;

  void onDidFailLoadingMap(_$jni.JString string);
  bool get onDidFailLoadingMap$async => false;
}

final class _$MapView_OnDidFailLoadingMapListener
    with $MapView_OnDidFailLoadingMapListener {
  _$MapView_OnDidFailLoadingMapListener({
    required void Function(_$jni.JString string) onDidFailLoadingMap,
    this.onDidFailLoadingMap$async = false,
  }) : _onDidFailLoadingMap = onDidFailLoadingMap;

  final void Function(_$jni.JString string) _onDidFailLoadingMap;
  final bool onDidFailLoadingMap$async;

  void onDidFailLoadingMap(_$jni.JString string) {
    return _onDidFailLoadingMap(string);
  }
}

final class $MapView_OnDidFailLoadingMapListener$Type
    extends _$jni.JObjType<MapView_OnDidFailLoadingMapListener> {
  @_$jni.internal
  const $MapView_OnDidFailLoadingMapListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnDidFailLoadingMapListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnDidFailLoadingMapListener fromReference(
          _$jni.JReference reference) =>
      MapView_OnDidFailLoadingMapListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnDidFailLoadingMapListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnDidFailLoadingMapListener$Type) &&
        other is $MapView_OnDidFailLoadingMapListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnDidFinishLoadingMapListener`
class MapView_OnDidFinishLoadingMapListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnDidFinishLoadingMapListener> $type;

  @_$jni.internal
  MapView_OnDidFinishLoadingMapListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnDidFinishLoadingMapListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnDidFinishLoadingMapListener$Type();
  static final _id_onDidFinishLoadingMap = _class.instanceMethodId(
    r'onDidFinishLoadingMap',
    r'()V',
  );

  static final _onDidFinishLoadingMap = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onDidFinishLoadingMap()`
  void onDidFinishLoadingMap() {
    _onDidFinishLoadingMap(
            reference.pointer, _id_onDidFinishLoadingMap as _$jni.JMethodIDPtr)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnDidFinishLoadingMapListener> _$impls =
      {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onDidFinishLoadingMap()V') {
        _$impls[$p]!.onDidFinishLoadingMap();
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnDidFinishLoadingMapListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnDidFinishLoadingMapListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onDidFinishLoadingMap$async) r'onDidFinishLoadingMap()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnDidFinishLoadingMapListener.implement(
    $MapView_OnDidFinishLoadingMapListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnDidFinishLoadingMapListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnDidFinishLoadingMapListener {
  factory $MapView_OnDidFinishLoadingMapListener({
    required void Function() onDidFinishLoadingMap,
    bool onDidFinishLoadingMap$async,
  }) = _$MapView_OnDidFinishLoadingMapListener;

  void onDidFinishLoadingMap();
  bool get onDidFinishLoadingMap$async => false;
}

final class _$MapView_OnDidFinishLoadingMapListener
    with $MapView_OnDidFinishLoadingMapListener {
  _$MapView_OnDidFinishLoadingMapListener({
    required void Function() onDidFinishLoadingMap,
    this.onDidFinishLoadingMap$async = false,
  }) : _onDidFinishLoadingMap = onDidFinishLoadingMap;

  final void Function() _onDidFinishLoadingMap;
  final bool onDidFinishLoadingMap$async;

  void onDidFinishLoadingMap() {
    return _onDidFinishLoadingMap();
  }
}

final class $MapView_OnDidFinishLoadingMapListener$Type
    extends _$jni.JObjType<MapView_OnDidFinishLoadingMapListener> {
  @_$jni.internal
  const $MapView_OnDidFinishLoadingMapListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnDidFinishLoadingMapListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnDidFinishLoadingMapListener fromReference(
          _$jni.JReference reference) =>
      MapView_OnDidFinishLoadingMapListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnDidFinishLoadingMapListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnDidFinishLoadingMapListener$Type) &&
        other is $MapView_OnDidFinishLoadingMapListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnDidFinishLoadingStyleListener`
class MapView_OnDidFinishLoadingStyleListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnDidFinishLoadingStyleListener> $type;

  @_$jni.internal
  MapView_OnDidFinishLoadingStyleListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnDidFinishLoadingStyleListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnDidFinishLoadingStyleListener$Type();
  static final _id_onDidFinishLoadingStyle = _class.instanceMethodId(
    r'onDidFinishLoadingStyle',
    r'()V',
  );

  static final _onDidFinishLoadingStyle = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onDidFinishLoadingStyle()`
  void onDidFinishLoadingStyle() {
    _onDidFinishLoadingStyle(reference.pointer,
            _id_onDidFinishLoadingStyle as _$jni.JMethodIDPtr)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnDidFinishLoadingStyleListener>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onDidFinishLoadingStyle()V') {
        _$impls[$p]!.onDidFinishLoadingStyle();
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnDidFinishLoadingStyleListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnDidFinishLoadingStyleListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onDidFinishLoadingStyle$async) r'onDidFinishLoadingStyle()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnDidFinishLoadingStyleListener.implement(
    $MapView_OnDidFinishLoadingStyleListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnDidFinishLoadingStyleListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnDidFinishLoadingStyleListener {
  factory $MapView_OnDidFinishLoadingStyleListener({
    required void Function() onDidFinishLoadingStyle,
    bool onDidFinishLoadingStyle$async,
  }) = _$MapView_OnDidFinishLoadingStyleListener;

  void onDidFinishLoadingStyle();
  bool get onDidFinishLoadingStyle$async => false;
}

final class _$MapView_OnDidFinishLoadingStyleListener
    with $MapView_OnDidFinishLoadingStyleListener {
  _$MapView_OnDidFinishLoadingStyleListener({
    required void Function() onDidFinishLoadingStyle,
    this.onDidFinishLoadingStyle$async = false,
  }) : _onDidFinishLoadingStyle = onDidFinishLoadingStyle;

  final void Function() _onDidFinishLoadingStyle;
  final bool onDidFinishLoadingStyle$async;

  void onDidFinishLoadingStyle() {
    return _onDidFinishLoadingStyle();
  }
}

final class $MapView_OnDidFinishLoadingStyleListener$Type
    extends _$jni.JObjType<MapView_OnDidFinishLoadingStyleListener> {
  @_$jni.internal
  const $MapView_OnDidFinishLoadingStyleListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnDidFinishLoadingStyleListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnDidFinishLoadingStyleListener fromReference(
          _$jni.JReference reference) =>
      MapView_OnDidFinishLoadingStyleListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnDidFinishLoadingStyleListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MapView_OnDidFinishLoadingStyleListener$Type) &&
        other is $MapView_OnDidFinishLoadingStyleListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnDidFinishRenderingFrameListener`
class MapView_OnDidFinishRenderingFrameListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnDidFinishRenderingFrameListener> $type;

  @_$jni.internal
  MapView_OnDidFinishRenderingFrameListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnDidFinishRenderingFrameListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnDidFinishRenderingFrameListener$Type();
  static final _id_onDidFinishRenderingFrame = _class.instanceMethodId(
    r'onDidFinishRenderingFrame',
    r'(ZDD)V',
  );

  static final _onDidFinishRenderingFrame = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Int32,
                        _$jni.Double,
                        _$jni.Double
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, double, double)>();

  /// from: `public abstract void onDidFinishRenderingFrame(boolean z, double d, double d1)`
  void onDidFinishRenderingFrame(
    bool z,
    double d,
    double d1,
  ) {
    _onDidFinishRenderingFrame(
            reference.pointer,
            _id_onDidFinishRenderingFrame as _$jni.JMethodIDPtr,
            z ? 1 : 0,
            d,
            d1)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnDidFinishRenderingFrameListener>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onDidFinishRenderingFrame(ZDD)V') {
        _$impls[$p]!.onDidFinishRenderingFrame(
          $a[0]
              .as(const _$jni.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
          $a[1]
              .as(const _$jni.JDoubleType(), releaseOriginal: true)
              .doubleValue(releaseOriginal: true),
          $a[2]
              .as(const _$jni.JDoubleType(), releaseOriginal: true)
              .doubleValue(releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnDidFinishRenderingFrameListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnDidFinishRenderingFrameListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onDidFinishRenderingFrame$async)
          r'onDidFinishRenderingFrame(ZDD)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnDidFinishRenderingFrameListener.implement(
    $MapView_OnDidFinishRenderingFrameListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnDidFinishRenderingFrameListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnDidFinishRenderingFrameListener {
  factory $MapView_OnDidFinishRenderingFrameListener({
    required void Function(bool z, double d, double d1)
        onDidFinishRenderingFrame,
    bool onDidFinishRenderingFrame$async,
  }) = _$MapView_OnDidFinishRenderingFrameListener;

  void onDidFinishRenderingFrame(bool z, double d, double d1);
  bool get onDidFinishRenderingFrame$async => false;
}

final class _$MapView_OnDidFinishRenderingFrameListener
    with $MapView_OnDidFinishRenderingFrameListener {
  _$MapView_OnDidFinishRenderingFrameListener({
    required void Function(bool z, double d, double d1)
        onDidFinishRenderingFrame,
    this.onDidFinishRenderingFrame$async = false,
  }) : _onDidFinishRenderingFrame = onDidFinishRenderingFrame;

  final void Function(bool z, double d, double d1) _onDidFinishRenderingFrame;
  final bool onDidFinishRenderingFrame$async;

  void onDidFinishRenderingFrame(bool z, double d, double d1) {
    return _onDidFinishRenderingFrame(z, d, d1);
  }
}

final class $MapView_OnDidFinishRenderingFrameListener$Type
    extends _$jni.JObjType<MapView_OnDidFinishRenderingFrameListener> {
  @_$jni.internal
  const $MapView_OnDidFinishRenderingFrameListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnDidFinishRenderingFrameListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnDidFinishRenderingFrameListener fromReference(
          _$jni.JReference reference) =>
      MapView_OnDidFinishRenderingFrameListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($MapView_OnDidFinishRenderingFrameListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MapView_OnDidFinishRenderingFrameListener$Type) &&
        other is $MapView_OnDidFinishRenderingFrameListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnDidFinishRenderingMapListener`
class MapView_OnDidFinishRenderingMapListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnDidFinishRenderingMapListener> $type;

  @_$jni.internal
  MapView_OnDidFinishRenderingMapListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnDidFinishRenderingMapListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnDidFinishRenderingMapListener$Type();
  static final _id_onDidFinishRenderingMap = _class.instanceMethodId(
    r'onDidFinishRenderingMap',
    r'(Z)V',
  );

  static final _onDidFinishRenderingMap = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void onDidFinishRenderingMap(boolean z)`
  void onDidFinishRenderingMap(
    bool z,
  ) {
    _onDidFinishRenderingMap(reference.pointer,
            _id_onDidFinishRenderingMap as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnDidFinishRenderingMapListener>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onDidFinishRenderingMap(Z)V') {
        _$impls[$p]!.onDidFinishRenderingMap(
          $a[0]
              .as(const _$jni.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnDidFinishRenderingMapListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnDidFinishRenderingMapListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onDidFinishRenderingMap$async) r'onDidFinishRenderingMap(Z)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnDidFinishRenderingMapListener.implement(
    $MapView_OnDidFinishRenderingMapListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnDidFinishRenderingMapListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnDidFinishRenderingMapListener {
  factory $MapView_OnDidFinishRenderingMapListener({
    required void Function(bool z) onDidFinishRenderingMap,
    bool onDidFinishRenderingMap$async,
  }) = _$MapView_OnDidFinishRenderingMapListener;

  void onDidFinishRenderingMap(bool z);
  bool get onDidFinishRenderingMap$async => false;
}

final class _$MapView_OnDidFinishRenderingMapListener
    with $MapView_OnDidFinishRenderingMapListener {
  _$MapView_OnDidFinishRenderingMapListener({
    required void Function(bool z) onDidFinishRenderingMap,
    this.onDidFinishRenderingMap$async = false,
  }) : _onDidFinishRenderingMap = onDidFinishRenderingMap;

  final void Function(bool z) _onDidFinishRenderingMap;
  final bool onDidFinishRenderingMap$async;

  void onDidFinishRenderingMap(bool z) {
    return _onDidFinishRenderingMap(z);
  }
}

final class $MapView_OnDidFinishRenderingMapListener$Type
    extends _$jni.JObjType<MapView_OnDidFinishRenderingMapListener> {
  @_$jni.internal
  const $MapView_OnDidFinishRenderingMapListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnDidFinishRenderingMapListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnDidFinishRenderingMapListener fromReference(
          _$jni.JReference reference) =>
      MapView_OnDidFinishRenderingMapListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnDidFinishRenderingMapListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MapView_OnDidFinishRenderingMapListener$Type) &&
        other is $MapView_OnDidFinishRenderingMapListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnGlyphsErrorListener`
class MapView_OnGlyphsErrorListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnGlyphsErrorListener> $type;

  @_$jni.internal
  MapView_OnGlyphsErrorListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnGlyphsErrorListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnGlyphsErrorListener$Type();
  static final _id_onGlyphsError = _class.instanceMethodId(
    r'onGlyphsError',
    r'([Ljava/lang/String;II)V',
  );

  static final _onGlyphsError = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int, int)>();

  /// from: `public abstract void onGlyphsError(java.lang.String[] strings, int i, int i1)`
  void onGlyphsError(
    _$jni.JArray<_$jni.JString> strings,
    int i,
    int i1,
  ) {
    _onGlyphsError(reference.pointer, _id_onGlyphsError as _$jni.JMethodIDPtr,
            strings.reference.pointer, i, i1)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnGlyphsErrorListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onGlyphsError([Ljava/lang/String;II)V') {
        _$impls[$p]!.onGlyphsError(
          $a[0].as(const _$jni.JArrayType(_$jni.JStringType()),
              releaseOriginal: true),
          $a[1]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[2]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnGlyphsErrorListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnGlyphsErrorListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onGlyphsError$async) r'onGlyphsError([Ljava/lang/String;II)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnGlyphsErrorListener.implement(
    $MapView_OnGlyphsErrorListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnGlyphsErrorListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnGlyphsErrorListener {
  factory $MapView_OnGlyphsErrorListener({
    required void Function(_$jni.JArray<_$jni.JString> strings, int i, int i1)
        onGlyphsError,
    bool onGlyphsError$async,
  }) = _$MapView_OnGlyphsErrorListener;

  void onGlyphsError(_$jni.JArray<_$jni.JString> strings, int i, int i1);
  bool get onGlyphsError$async => false;
}

final class _$MapView_OnGlyphsErrorListener
    with $MapView_OnGlyphsErrorListener {
  _$MapView_OnGlyphsErrorListener({
    required void Function(_$jni.JArray<_$jni.JString> strings, int i, int i1)
        onGlyphsError,
    this.onGlyphsError$async = false,
  }) : _onGlyphsError = onGlyphsError;

  final void Function(_$jni.JArray<_$jni.JString> strings, int i, int i1)
      _onGlyphsError;
  final bool onGlyphsError$async;

  void onGlyphsError(_$jni.JArray<_$jni.JString> strings, int i, int i1) {
    return _onGlyphsError(strings, i, i1);
  }
}

final class $MapView_OnGlyphsErrorListener$Type
    extends _$jni.JObjType<MapView_OnGlyphsErrorListener> {
  @_$jni.internal
  const $MapView_OnGlyphsErrorListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnGlyphsErrorListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnGlyphsErrorListener fromReference(_$jni.JReference reference) =>
      MapView_OnGlyphsErrorListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnGlyphsErrorListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnGlyphsErrorListener$Type) &&
        other is $MapView_OnGlyphsErrorListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnGlyphsLoadedListener`
class MapView_OnGlyphsLoadedListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnGlyphsLoadedListener> $type;

  @_$jni.internal
  MapView_OnGlyphsLoadedListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnGlyphsLoadedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnGlyphsLoadedListener$Type();
  static final _id_onGlyphsLoaded = _class.instanceMethodId(
    r'onGlyphsLoaded',
    r'([Ljava/lang/String;II)V',
  );

  static final _onGlyphsLoaded = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int, int)>();

  /// from: `public abstract void onGlyphsLoaded(java.lang.String[] strings, int i, int i1)`
  void onGlyphsLoaded(
    _$jni.JArray<_$jni.JString> strings,
    int i,
    int i1,
  ) {
    _onGlyphsLoaded(reference.pointer, _id_onGlyphsLoaded as _$jni.JMethodIDPtr,
            strings.reference.pointer, i, i1)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnGlyphsLoadedListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onGlyphsLoaded([Ljava/lang/String;II)V') {
        _$impls[$p]!.onGlyphsLoaded(
          $a[0].as(const _$jni.JArrayType(_$jni.JStringType()),
              releaseOriginal: true),
          $a[1]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[2]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnGlyphsLoadedListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnGlyphsLoadedListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onGlyphsLoaded$async)
          r'onGlyphsLoaded([Ljava/lang/String;II)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnGlyphsLoadedListener.implement(
    $MapView_OnGlyphsLoadedListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnGlyphsLoadedListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnGlyphsLoadedListener {
  factory $MapView_OnGlyphsLoadedListener({
    required void Function(_$jni.JArray<_$jni.JString> strings, int i, int i1)
        onGlyphsLoaded,
    bool onGlyphsLoaded$async,
  }) = _$MapView_OnGlyphsLoadedListener;

  void onGlyphsLoaded(_$jni.JArray<_$jni.JString> strings, int i, int i1);
  bool get onGlyphsLoaded$async => false;
}

final class _$MapView_OnGlyphsLoadedListener
    with $MapView_OnGlyphsLoadedListener {
  _$MapView_OnGlyphsLoadedListener({
    required void Function(_$jni.JArray<_$jni.JString> strings, int i, int i1)
        onGlyphsLoaded,
    this.onGlyphsLoaded$async = false,
  }) : _onGlyphsLoaded = onGlyphsLoaded;

  final void Function(_$jni.JArray<_$jni.JString> strings, int i, int i1)
      _onGlyphsLoaded;
  final bool onGlyphsLoaded$async;

  void onGlyphsLoaded(_$jni.JArray<_$jni.JString> strings, int i, int i1) {
    return _onGlyphsLoaded(strings, i, i1);
  }
}

final class $MapView_OnGlyphsLoadedListener$Type
    extends _$jni.JObjType<MapView_OnGlyphsLoadedListener> {
  @_$jni.internal
  const $MapView_OnGlyphsLoadedListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnGlyphsLoadedListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnGlyphsLoadedListener fromReference(_$jni.JReference reference) =>
      MapView_OnGlyphsLoadedListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnGlyphsLoadedListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnGlyphsLoadedListener$Type) &&
        other is $MapView_OnGlyphsLoadedListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnGlyphsRequestedListener`
class MapView_OnGlyphsRequestedListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnGlyphsRequestedListener> $type;

  @_$jni.internal
  MapView_OnGlyphsRequestedListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnGlyphsRequestedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnGlyphsRequestedListener$Type();
  static final _id_onGlyphsRequested = _class.instanceMethodId(
    r'onGlyphsRequested',
    r'([Ljava/lang/String;II)V',
  );

  static final _onGlyphsRequested = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int, int)>();

  /// from: `public abstract void onGlyphsRequested(java.lang.String[] strings, int i, int i1)`
  void onGlyphsRequested(
    _$jni.JArray<_$jni.JString> strings,
    int i,
    int i1,
  ) {
    _onGlyphsRequested(
            reference.pointer,
            _id_onGlyphsRequested as _$jni.JMethodIDPtr,
            strings.reference.pointer,
            i,
            i1)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnGlyphsRequestedListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onGlyphsRequested([Ljava/lang/String;II)V') {
        _$impls[$p]!.onGlyphsRequested(
          $a[0].as(const _$jni.JArrayType(_$jni.JStringType()),
              releaseOriginal: true),
          $a[1]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[2]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnGlyphsRequestedListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnGlyphsRequestedListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onGlyphsRequested$async)
          r'onGlyphsRequested([Ljava/lang/String;II)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnGlyphsRequestedListener.implement(
    $MapView_OnGlyphsRequestedListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnGlyphsRequestedListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnGlyphsRequestedListener {
  factory $MapView_OnGlyphsRequestedListener({
    required void Function(_$jni.JArray<_$jni.JString> strings, int i, int i1)
        onGlyphsRequested,
    bool onGlyphsRequested$async,
  }) = _$MapView_OnGlyphsRequestedListener;

  void onGlyphsRequested(_$jni.JArray<_$jni.JString> strings, int i, int i1);
  bool get onGlyphsRequested$async => false;
}

final class _$MapView_OnGlyphsRequestedListener
    with $MapView_OnGlyphsRequestedListener {
  _$MapView_OnGlyphsRequestedListener({
    required void Function(_$jni.JArray<_$jni.JString> strings, int i, int i1)
        onGlyphsRequested,
    this.onGlyphsRequested$async = false,
  }) : _onGlyphsRequested = onGlyphsRequested;

  final void Function(_$jni.JArray<_$jni.JString> strings, int i, int i1)
      _onGlyphsRequested;
  final bool onGlyphsRequested$async;

  void onGlyphsRequested(_$jni.JArray<_$jni.JString> strings, int i, int i1) {
    return _onGlyphsRequested(strings, i, i1);
  }
}

final class $MapView_OnGlyphsRequestedListener$Type
    extends _$jni.JObjType<MapView_OnGlyphsRequestedListener> {
  @_$jni.internal
  const $MapView_OnGlyphsRequestedListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnGlyphsRequestedListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnGlyphsRequestedListener fromReference(_$jni.JReference reference) =>
      MapView_OnGlyphsRequestedListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnGlyphsRequestedListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnGlyphsRequestedListener$Type) &&
        other is $MapView_OnGlyphsRequestedListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnPostCompileShaderListener`
class MapView_OnPostCompileShaderListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnPostCompileShaderListener> $type;

  @_$jni.internal
  MapView_OnPostCompileShaderListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnPostCompileShaderListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnPostCompileShaderListener$Type();
  static final _id_onPostCompileShader = _class.instanceMethodId(
    r'onPostCompileShader',
    r'(IILjava/lang/String;)V',
  );

  static final _onPostCompileShader = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onPostCompileShader(int i, int i1, java.lang.String string)`
  void onPostCompileShader(
    int i,
    int i1,
    _$jni.JString string,
  ) {
    _onPostCompileShader(
            reference.pointer,
            _id_onPostCompileShader as _$jni.JMethodIDPtr,
            i,
            i1,
            string.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnPostCompileShaderListener> _$impls =
      {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onPostCompileShader(IILjava/lang/String;)V') {
        _$impls[$p]!.onPostCompileShader(
          $a[0]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[1]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[2].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnPostCompileShaderListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnPostCompileShaderListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onPostCompileShader$async)
          r'onPostCompileShader(IILjava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnPostCompileShaderListener.implement(
    $MapView_OnPostCompileShaderListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnPostCompileShaderListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnPostCompileShaderListener {
  factory $MapView_OnPostCompileShaderListener({
    required void Function(int i, int i1, _$jni.JString string)
        onPostCompileShader,
    bool onPostCompileShader$async,
  }) = _$MapView_OnPostCompileShaderListener;

  void onPostCompileShader(int i, int i1, _$jni.JString string);
  bool get onPostCompileShader$async => false;
}

final class _$MapView_OnPostCompileShaderListener
    with $MapView_OnPostCompileShaderListener {
  _$MapView_OnPostCompileShaderListener({
    required void Function(int i, int i1, _$jni.JString string)
        onPostCompileShader,
    this.onPostCompileShader$async = false,
  }) : _onPostCompileShader = onPostCompileShader;

  final void Function(int i, int i1, _$jni.JString string) _onPostCompileShader;
  final bool onPostCompileShader$async;

  void onPostCompileShader(int i, int i1, _$jni.JString string) {
    return _onPostCompileShader(i, i1, string);
  }
}

final class $MapView_OnPostCompileShaderListener$Type
    extends _$jni.JObjType<MapView_OnPostCompileShaderListener> {
  @_$jni.internal
  const $MapView_OnPostCompileShaderListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnPostCompileShaderListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnPostCompileShaderListener fromReference(
          _$jni.JReference reference) =>
      MapView_OnPostCompileShaderListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnPostCompileShaderListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnPostCompileShaderListener$Type) &&
        other is $MapView_OnPostCompileShaderListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnPreCompileShaderListener`
class MapView_OnPreCompileShaderListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnPreCompileShaderListener> $type;

  @_$jni.internal
  MapView_OnPreCompileShaderListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnPreCompileShaderListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnPreCompileShaderListener$Type();
  static final _id_onPreCompileShader = _class.instanceMethodId(
    r'onPreCompileShader',
    r'(IILjava/lang/String;)V',
  );

  static final _onPreCompileShader = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onPreCompileShader(int i, int i1, java.lang.String string)`
  void onPreCompileShader(
    int i,
    int i1,
    _$jni.JString string,
  ) {
    _onPreCompileShader(
            reference.pointer,
            _id_onPreCompileShader as _$jni.JMethodIDPtr,
            i,
            i1,
            string.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnPreCompileShaderListener> _$impls =
      {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onPreCompileShader(IILjava/lang/String;)V') {
        _$impls[$p]!.onPreCompileShader(
          $a[0]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[1]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[2].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnPreCompileShaderListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnPreCompileShaderListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onPreCompileShader$async)
          r'onPreCompileShader(IILjava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnPreCompileShaderListener.implement(
    $MapView_OnPreCompileShaderListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnPreCompileShaderListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnPreCompileShaderListener {
  factory $MapView_OnPreCompileShaderListener({
    required void Function(int i, int i1, _$jni.JString string)
        onPreCompileShader,
    bool onPreCompileShader$async,
  }) = _$MapView_OnPreCompileShaderListener;

  void onPreCompileShader(int i, int i1, _$jni.JString string);
  bool get onPreCompileShader$async => false;
}

final class _$MapView_OnPreCompileShaderListener
    with $MapView_OnPreCompileShaderListener {
  _$MapView_OnPreCompileShaderListener({
    required void Function(int i, int i1, _$jni.JString string)
        onPreCompileShader,
    this.onPreCompileShader$async = false,
  }) : _onPreCompileShader = onPreCompileShader;

  final void Function(int i, int i1, _$jni.JString string) _onPreCompileShader;
  final bool onPreCompileShader$async;

  void onPreCompileShader(int i, int i1, _$jni.JString string) {
    return _onPreCompileShader(i, i1, string);
  }
}

final class $MapView_OnPreCompileShaderListener$Type
    extends _$jni.JObjType<MapView_OnPreCompileShaderListener> {
  @_$jni.internal
  const $MapView_OnPreCompileShaderListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnPreCompileShaderListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnPreCompileShaderListener fromReference(
          _$jni.JReference reference) =>
      MapView_OnPreCompileShaderListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnPreCompileShaderListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnPreCompileShaderListener$Type) &&
        other is $MapView_OnPreCompileShaderListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnShaderCompileFailedListener`
class MapView_OnShaderCompileFailedListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnShaderCompileFailedListener> $type;

  @_$jni.internal
  MapView_OnShaderCompileFailedListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnShaderCompileFailedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnShaderCompileFailedListener$Type();
  static final _id_onShaderCompileFailed = _class.instanceMethodId(
    r'onShaderCompileFailed',
    r'(IILjava/lang/String;)V',
  );

  static final _onShaderCompileFailed = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onShaderCompileFailed(int i, int i1, java.lang.String string)`
  void onShaderCompileFailed(
    int i,
    int i1,
    _$jni.JString string,
  ) {
    _onShaderCompileFailed(
            reference.pointer,
            _id_onShaderCompileFailed as _$jni.JMethodIDPtr,
            i,
            i1,
            string.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnShaderCompileFailedListener> _$impls =
      {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onShaderCompileFailed(IILjava/lang/String;)V') {
        _$impls[$p]!.onShaderCompileFailed(
          $a[0]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[1]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[2].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnShaderCompileFailedListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnShaderCompileFailedListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onShaderCompileFailed$async)
          r'onShaderCompileFailed(IILjava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnShaderCompileFailedListener.implement(
    $MapView_OnShaderCompileFailedListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnShaderCompileFailedListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnShaderCompileFailedListener {
  factory $MapView_OnShaderCompileFailedListener({
    required void Function(int i, int i1, _$jni.JString string)
        onShaderCompileFailed,
    bool onShaderCompileFailed$async,
  }) = _$MapView_OnShaderCompileFailedListener;

  void onShaderCompileFailed(int i, int i1, _$jni.JString string);
  bool get onShaderCompileFailed$async => false;
}

final class _$MapView_OnShaderCompileFailedListener
    with $MapView_OnShaderCompileFailedListener {
  _$MapView_OnShaderCompileFailedListener({
    required void Function(int i, int i1, _$jni.JString string)
        onShaderCompileFailed,
    this.onShaderCompileFailed$async = false,
  }) : _onShaderCompileFailed = onShaderCompileFailed;

  final void Function(int i, int i1, _$jni.JString string)
      _onShaderCompileFailed;
  final bool onShaderCompileFailed$async;

  void onShaderCompileFailed(int i, int i1, _$jni.JString string) {
    return _onShaderCompileFailed(i, i1, string);
  }
}

final class $MapView_OnShaderCompileFailedListener$Type
    extends _$jni.JObjType<MapView_OnShaderCompileFailedListener> {
  @_$jni.internal
  const $MapView_OnShaderCompileFailedListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnShaderCompileFailedListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnShaderCompileFailedListener fromReference(
          _$jni.JReference reference) =>
      MapView_OnShaderCompileFailedListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnShaderCompileFailedListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnShaderCompileFailedListener$Type) &&
        other is $MapView_OnShaderCompileFailedListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnSourceChangedListener`
class MapView_OnSourceChangedListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnSourceChangedListener> $type;

  @_$jni.internal
  MapView_OnSourceChangedListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnSourceChangedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnSourceChangedListener$Type();
  static final _id_onSourceChangedListener = _class.instanceMethodId(
    r'onSourceChangedListener',
    r'(Ljava/lang/String;)V',
  );

  static final _onSourceChangedListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onSourceChangedListener(java.lang.String string)`
  void onSourceChangedListener(
    _$jni.JString string,
  ) {
    _onSourceChangedListener(
            reference.pointer,
            _id_onSourceChangedListener as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnSourceChangedListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onSourceChangedListener(Ljava/lang/String;)V') {
        _$impls[$p]!.onSourceChangedListener(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnSourceChangedListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnSourceChangedListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onSourceChangedListener$async)
          r'onSourceChangedListener(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnSourceChangedListener.implement(
    $MapView_OnSourceChangedListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnSourceChangedListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnSourceChangedListener {
  factory $MapView_OnSourceChangedListener({
    required void Function(_$jni.JString string) onSourceChangedListener,
    bool onSourceChangedListener$async,
  }) = _$MapView_OnSourceChangedListener;

  void onSourceChangedListener(_$jni.JString string);
  bool get onSourceChangedListener$async => false;
}

final class _$MapView_OnSourceChangedListener
    with $MapView_OnSourceChangedListener {
  _$MapView_OnSourceChangedListener({
    required void Function(_$jni.JString string) onSourceChangedListener,
    this.onSourceChangedListener$async = false,
  }) : _onSourceChangedListener = onSourceChangedListener;

  final void Function(_$jni.JString string) _onSourceChangedListener;
  final bool onSourceChangedListener$async;

  void onSourceChangedListener(_$jni.JString string) {
    return _onSourceChangedListener(string);
  }
}

final class $MapView_OnSourceChangedListener$Type
    extends _$jni.JObjType<MapView_OnSourceChangedListener> {
  @_$jni.internal
  const $MapView_OnSourceChangedListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnSourceChangedListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnSourceChangedListener fromReference(_$jni.JReference reference) =>
      MapView_OnSourceChangedListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnSourceChangedListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnSourceChangedListener$Type) &&
        other is $MapView_OnSourceChangedListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnSpriteErrorListener`
class MapView_OnSpriteErrorListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnSpriteErrorListener> $type;

  @_$jni.internal
  MapView_OnSpriteErrorListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnSpriteErrorListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnSpriteErrorListener$Type();
  static final _id_onSpriteError = _class.instanceMethodId(
    r'onSpriteError',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _onSpriteError = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onSpriteError(java.lang.String string, java.lang.String string1)`
  void onSpriteError(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    _onSpriteError(reference.pointer, _id_onSpriteError as _$jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnSpriteErrorListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onSpriteError(Ljava/lang/String;Ljava/lang/String;)V') {
        _$impls[$p]!.onSpriteError(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[1].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnSpriteErrorListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnSpriteErrorListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onSpriteError$async)
          r'onSpriteError(Ljava/lang/String;Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnSpriteErrorListener.implement(
    $MapView_OnSpriteErrorListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnSpriteErrorListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnSpriteErrorListener {
  factory $MapView_OnSpriteErrorListener({
    required void Function(_$jni.JString string, _$jni.JString string1)
        onSpriteError,
    bool onSpriteError$async,
  }) = _$MapView_OnSpriteErrorListener;

  void onSpriteError(_$jni.JString string, _$jni.JString string1);
  bool get onSpriteError$async => false;
}

final class _$MapView_OnSpriteErrorListener
    with $MapView_OnSpriteErrorListener {
  _$MapView_OnSpriteErrorListener({
    required void Function(_$jni.JString string, _$jni.JString string1)
        onSpriteError,
    this.onSpriteError$async = false,
  }) : _onSpriteError = onSpriteError;

  final void Function(_$jni.JString string, _$jni.JString string1)
      _onSpriteError;
  final bool onSpriteError$async;

  void onSpriteError(_$jni.JString string, _$jni.JString string1) {
    return _onSpriteError(string, string1);
  }
}

final class $MapView_OnSpriteErrorListener$Type
    extends _$jni.JObjType<MapView_OnSpriteErrorListener> {
  @_$jni.internal
  const $MapView_OnSpriteErrorListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnSpriteErrorListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnSpriteErrorListener fromReference(_$jni.JReference reference) =>
      MapView_OnSpriteErrorListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnSpriteErrorListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnSpriteErrorListener$Type) &&
        other is $MapView_OnSpriteErrorListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnSpriteLoadedListener`
class MapView_OnSpriteLoadedListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnSpriteLoadedListener> $type;

  @_$jni.internal
  MapView_OnSpriteLoadedListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnSpriteLoadedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnSpriteLoadedListener$Type();
  static final _id_onSpriteLoaded = _class.instanceMethodId(
    r'onSpriteLoaded',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _onSpriteLoaded = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onSpriteLoaded(java.lang.String string, java.lang.String string1)`
  void onSpriteLoaded(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    _onSpriteLoaded(reference.pointer, _id_onSpriteLoaded as _$jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnSpriteLoadedListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onSpriteLoaded(Ljava/lang/String;Ljava/lang/String;)V') {
        _$impls[$p]!.onSpriteLoaded(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[1].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnSpriteLoadedListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnSpriteLoadedListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onSpriteLoaded$async)
          r'onSpriteLoaded(Ljava/lang/String;Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnSpriteLoadedListener.implement(
    $MapView_OnSpriteLoadedListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnSpriteLoadedListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnSpriteLoadedListener {
  factory $MapView_OnSpriteLoadedListener({
    required void Function(_$jni.JString string, _$jni.JString string1)
        onSpriteLoaded,
    bool onSpriteLoaded$async,
  }) = _$MapView_OnSpriteLoadedListener;

  void onSpriteLoaded(_$jni.JString string, _$jni.JString string1);
  bool get onSpriteLoaded$async => false;
}

final class _$MapView_OnSpriteLoadedListener
    with $MapView_OnSpriteLoadedListener {
  _$MapView_OnSpriteLoadedListener({
    required void Function(_$jni.JString string, _$jni.JString string1)
        onSpriteLoaded,
    this.onSpriteLoaded$async = false,
  }) : _onSpriteLoaded = onSpriteLoaded;

  final void Function(_$jni.JString string, _$jni.JString string1)
      _onSpriteLoaded;
  final bool onSpriteLoaded$async;

  void onSpriteLoaded(_$jni.JString string, _$jni.JString string1) {
    return _onSpriteLoaded(string, string1);
  }
}

final class $MapView_OnSpriteLoadedListener$Type
    extends _$jni.JObjType<MapView_OnSpriteLoadedListener> {
  @_$jni.internal
  const $MapView_OnSpriteLoadedListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnSpriteLoadedListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnSpriteLoadedListener fromReference(_$jni.JReference reference) =>
      MapView_OnSpriteLoadedListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnSpriteLoadedListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnSpriteLoadedListener$Type) &&
        other is $MapView_OnSpriteLoadedListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnSpriteRequestedListener`
class MapView_OnSpriteRequestedListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnSpriteRequestedListener> $type;

  @_$jni.internal
  MapView_OnSpriteRequestedListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnSpriteRequestedListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnSpriteRequestedListener$Type();
  static final _id_onSpriteRequested = _class.instanceMethodId(
    r'onSpriteRequested',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _onSpriteRequested = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onSpriteRequested(java.lang.String string, java.lang.String string1)`
  void onSpriteRequested(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    _onSpriteRequested(
            reference.pointer,
            _id_onSpriteRequested as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnSpriteRequestedListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onSpriteRequested(Ljava/lang/String;Ljava/lang/String;)V') {
        _$impls[$p]!.onSpriteRequested(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[1].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnSpriteRequestedListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnSpriteRequestedListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onSpriteRequested$async)
          r'onSpriteRequested(Ljava/lang/String;Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnSpriteRequestedListener.implement(
    $MapView_OnSpriteRequestedListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnSpriteRequestedListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnSpriteRequestedListener {
  factory $MapView_OnSpriteRequestedListener({
    required void Function(_$jni.JString string, _$jni.JString string1)
        onSpriteRequested,
    bool onSpriteRequested$async,
  }) = _$MapView_OnSpriteRequestedListener;

  void onSpriteRequested(_$jni.JString string, _$jni.JString string1);
  bool get onSpriteRequested$async => false;
}

final class _$MapView_OnSpriteRequestedListener
    with $MapView_OnSpriteRequestedListener {
  _$MapView_OnSpriteRequestedListener({
    required void Function(_$jni.JString string, _$jni.JString string1)
        onSpriteRequested,
    this.onSpriteRequested$async = false,
  }) : _onSpriteRequested = onSpriteRequested;

  final void Function(_$jni.JString string, _$jni.JString string1)
      _onSpriteRequested;
  final bool onSpriteRequested$async;

  void onSpriteRequested(_$jni.JString string, _$jni.JString string1) {
    return _onSpriteRequested(string, string1);
  }
}

final class $MapView_OnSpriteRequestedListener$Type
    extends _$jni.JObjType<MapView_OnSpriteRequestedListener> {
  @_$jni.internal
  const $MapView_OnSpriteRequestedListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnSpriteRequestedListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnSpriteRequestedListener fromReference(_$jni.JReference reference) =>
      MapView_OnSpriteRequestedListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnSpriteRequestedListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnSpriteRequestedListener$Type) &&
        other is $MapView_OnSpriteRequestedListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnStyleImageMissingListener`
class MapView_OnStyleImageMissingListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnStyleImageMissingListener> $type;

  @_$jni.internal
  MapView_OnStyleImageMissingListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnStyleImageMissingListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnStyleImageMissingListener$Type();
  static final _id_onStyleImageMissing = _class.instanceMethodId(
    r'onStyleImageMissing',
    r'(Ljava/lang/String;)V',
  );

  static final _onStyleImageMissing = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onStyleImageMissing(java.lang.String string)`
  void onStyleImageMissing(
    _$jni.JString string,
  ) {
    _onStyleImageMissing(
            reference.pointer,
            _id_onStyleImageMissing as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnStyleImageMissingListener> _$impls =
      {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onStyleImageMissing(Ljava/lang/String;)V') {
        _$impls[$p]!.onStyleImageMissing(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnStyleImageMissingListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnStyleImageMissingListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onStyleImageMissing$async)
          r'onStyleImageMissing(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnStyleImageMissingListener.implement(
    $MapView_OnStyleImageMissingListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnStyleImageMissingListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnStyleImageMissingListener {
  factory $MapView_OnStyleImageMissingListener({
    required void Function(_$jni.JString string) onStyleImageMissing,
    bool onStyleImageMissing$async,
  }) = _$MapView_OnStyleImageMissingListener;

  void onStyleImageMissing(_$jni.JString string);
  bool get onStyleImageMissing$async => false;
}

final class _$MapView_OnStyleImageMissingListener
    with $MapView_OnStyleImageMissingListener {
  _$MapView_OnStyleImageMissingListener({
    required void Function(_$jni.JString string) onStyleImageMissing,
    this.onStyleImageMissing$async = false,
  }) : _onStyleImageMissing = onStyleImageMissing;

  final void Function(_$jni.JString string) _onStyleImageMissing;
  final bool onStyleImageMissing$async;

  void onStyleImageMissing(_$jni.JString string) {
    return _onStyleImageMissing(string);
  }
}

final class $MapView_OnStyleImageMissingListener$Type
    extends _$jni.JObjType<MapView_OnStyleImageMissingListener> {
  @_$jni.internal
  const $MapView_OnStyleImageMissingListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnStyleImageMissingListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnStyleImageMissingListener fromReference(
          _$jni.JReference reference) =>
      MapView_OnStyleImageMissingListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnStyleImageMissingListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnStyleImageMissingListener$Type) &&
        other is $MapView_OnStyleImageMissingListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnTileActionListener`
class MapView_OnTileActionListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnTileActionListener> $type;

  @_$jni.internal
  MapView_OnTileActionListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnTileActionListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnTileActionListener$Type();
  static final _id_onTileAction = _class.instanceMethodId(
    r'onTileAction',
    r'(Lorg/maplibre/android/tile/TileOperation;IIIIILjava/lang/String;)V',
  );

  static final _onTileAction = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onTileAction(org.maplibre.android.tile.TileOperation tileOperation, int i, int i1, int i2, int i3, int i4, java.lang.String string)`
  void onTileAction(
    _$jni.JObject tileOperation,
    int i,
    int i1,
    int i2,
    int i3,
    int i4,
    _$jni.JString string,
  ) {
    _onTileAction(
            reference.pointer,
            _id_onTileAction as _$jni.JMethodIDPtr,
            tileOperation.reference.pointer,
            i,
            i1,
            i2,
            i3,
            i4,
            string.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnTileActionListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onTileAction(Lorg/maplibre/android/tile/TileOperation;IIIIILjava/lang/String;)V') {
        _$impls[$p]!.onTileAction(
          $a[0].as(const _$jni.JObjectType(), releaseOriginal: true),
          $a[1]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[2]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[3]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[4]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[5]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[6].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnTileActionListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnTileActionListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onTileAction$async)
          r'onTileAction(Lorg/maplibre/android/tile/TileOperation;IIIIILjava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnTileActionListener.implement(
    $MapView_OnTileActionListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnTileActionListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnTileActionListener {
  factory $MapView_OnTileActionListener({
    required void Function(_$jni.JObject tileOperation, int i, int i1, int i2,
            int i3, int i4, _$jni.JString string)
        onTileAction,
    bool onTileAction$async,
  }) = _$MapView_OnTileActionListener;

  void onTileAction(_$jni.JObject tileOperation, int i, int i1, int i2, int i3,
      int i4, _$jni.JString string);
  bool get onTileAction$async => false;
}

final class _$MapView_OnTileActionListener with $MapView_OnTileActionListener {
  _$MapView_OnTileActionListener({
    required void Function(_$jni.JObject tileOperation, int i, int i1, int i2,
            int i3, int i4, _$jni.JString string)
        onTileAction,
    this.onTileAction$async = false,
  }) : _onTileAction = onTileAction;

  final void Function(_$jni.JObject tileOperation, int i, int i1, int i2,
      int i3, int i4, _$jni.JString string) _onTileAction;
  final bool onTileAction$async;

  void onTileAction(_$jni.JObject tileOperation, int i, int i1, int i2, int i3,
      int i4, _$jni.JString string) {
    return _onTileAction(tileOperation, i, i1, i2, i3, i4, string);
  }
}

final class $MapView_OnTileActionListener$Type
    extends _$jni.JObjType<MapView_OnTileActionListener> {
  @_$jni.internal
  const $MapView_OnTileActionListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnTileActionListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnTileActionListener fromReference(_$jni.JReference reference) =>
      MapView_OnTileActionListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnTileActionListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnTileActionListener$Type) &&
        other is $MapView_OnTileActionListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnWillStartLoadingMapListener`
class MapView_OnWillStartLoadingMapListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnWillStartLoadingMapListener> $type;

  @_$jni.internal
  MapView_OnWillStartLoadingMapListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnWillStartLoadingMapListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnWillStartLoadingMapListener$Type();
  static final _id_onWillStartLoadingMap = _class.instanceMethodId(
    r'onWillStartLoadingMap',
    r'()V',
  );

  static final _onWillStartLoadingMap = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onWillStartLoadingMap()`
  void onWillStartLoadingMap() {
    _onWillStartLoadingMap(
            reference.pointer, _id_onWillStartLoadingMap as _$jni.JMethodIDPtr)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnWillStartLoadingMapListener> _$impls =
      {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onWillStartLoadingMap()V') {
        _$impls[$p]!.onWillStartLoadingMap();
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnWillStartLoadingMapListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnWillStartLoadingMapListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onWillStartLoadingMap$async) r'onWillStartLoadingMap()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnWillStartLoadingMapListener.implement(
    $MapView_OnWillStartLoadingMapListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnWillStartLoadingMapListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnWillStartLoadingMapListener {
  factory $MapView_OnWillStartLoadingMapListener({
    required void Function() onWillStartLoadingMap,
    bool onWillStartLoadingMap$async,
  }) = _$MapView_OnWillStartLoadingMapListener;

  void onWillStartLoadingMap();
  bool get onWillStartLoadingMap$async => false;
}

final class _$MapView_OnWillStartLoadingMapListener
    with $MapView_OnWillStartLoadingMapListener {
  _$MapView_OnWillStartLoadingMapListener({
    required void Function() onWillStartLoadingMap,
    this.onWillStartLoadingMap$async = false,
  }) : _onWillStartLoadingMap = onWillStartLoadingMap;

  final void Function() _onWillStartLoadingMap;
  final bool onWillStartLoadingMap$async;

  void onWillStartLoadingMap() {
    return _onWillStartLoadingMap();
  }
}

final class $MapView_OnWillStartLoadingMapListener$Type
    extends _$jni.JObjType<MapView_OnWillStartLoadingMapListener> {
  @_$jni.internal
  const $MapView_OnWillStartLoadingMapListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnWillStartLoadingMapListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnWillStartLoadingMapListener fromReference(
          _$jni.JReference reference) =>
      MapView_OnWillStartLoadingMapListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnWillStartLoadingMapListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView_OnWillStartLoadingMapListener$Type) &&
        other is $MapView_OnWillStartLoadingMapListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnWillStartRenderingFrameListener`
class MapView_OnWillStartRenderingFrameListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnWillStartRenderingFrameListener> $type;

  @_$jni.internal
  MapView_OnWillStartRenderingFrameListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnWillStartRenderingFrameListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnWillStartRenderingFrameListener$Type();
  static final _id_onWillStartRenderingFrame = _class.instanceMethodId(
    r'onWillStartRenderingFrame',
    r'()V',
  );

  static final _onWillStartRenderingFrame = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onWillStartRenderingFrame()`
  void onWillStartRenderingFrame() {
    _onWillStartRenderingFrame(reference.pointer,
            _id_onWillStartRenderingFrame as _$jni.JMethodIDPtr)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnWillStartRenderingFrameListener>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onWillStartRenderingFrame()V') {
        _$impls[$p]!.onWillStartRenderingFrame();
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnWillStartRenderingFrameListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnWillStartRenderingFrameListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onWillStartRenderingFrame$async)
          r'onWillStartRenderingFrame()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnWillStartRenderingFrameListener.implement(
    $MapView_OnWillStartRenderingFrameListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnWillStartRenderingFrameListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnWillStartRenderingFrameListener {
  factory $MapView_OnWillStartRenderingFrameListener({
    required void Function() onWillStartRenderingFrame,
    bool onWillStartRenderingFrame$async,
  }) = _$MapView_OnWillStartRenderingFrameListener;

  void onWillStartRenderingFrame();
  bool get onWillStartRenderingFrame$async => false;
}

final class _$MapView_OnWillStartRenderingFrameListener
    with $MapView_OnWillStartRenderingFrameListener {
  _$MapView_OnWillStartRenderingFrameListener({
    required void Function() onWillStartRenderingFrame,
    this.onWillStartRenderingFrame$async = false,
  }) : _onWillStartRenderingFrame = onWillStartRenderingFrame;

  final void Function() _onWillStartRenderingFrame;
  final bool onWillStartRenderingFrame$async;

  void onWillStartRenderingFrame() {
    return _onWillStartRenderingFrame();
  }
}

final class $MapView_OnWillStartRenderingFrameListener$Type
    extends _$jni.JObjType<MapView_OnWillStartRenderingFrameListener> {
  @_$jni.internal
  const $MapView_OnWillStartRenderingFrameListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnWillStartRenderingFrameListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnWillStartRenderingFrameListener fromReference(
          _$jni.JReference reference) =>
      MapView_OnWillStartRenderingFrameListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($MapView_OnWillStartRenderingFrameListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MapView_OnWillStartRenderingFrameListener$Type) &&
        other is $MapView_OnWillStartRenderingFrameListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView$OnWillStartRenderingMapListener`
class MapView_OnWillStartRenderingMapListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView_OnWillStartRenderingMapListener> $type;

  @_$jni.internal
  MapView_OnWillStartRenderingMapListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/MapView$OnWillStartRenderingMapListener');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView_OnWillStartRenderingMapListener$Type();
  static final _id_onWillStartRenderingMap = _class.instanceMethodId(
    r'onWillStartRenderingMap',
    r'()V',
  );

  static final _onWillStartRenderingMap = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onWillStartRenderingMap()`
  void onWillStartRenderingMap() {
    _onWillStartRenderingMap(reference.pointer,
            _id_onWillStartRenderingMap as _$jni.JMethodIDPtr)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $MapView_OnWillStartRenderingMapListener>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onWillStartRenderingMap()V') {
        _$impls[$p]!.onWillStartRenderingMap();
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $MapView_OnWillStartRenderingMapListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.maps.MapView$OnWillStartRenderingMapListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onWillStartRenderingMap$async) r'onWillStartRenderingMap()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MapView_OnWillStartRenderingMapListener.implement(
    $MapView_OnWillStartRenderingMapListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return MapView_OnWillStartRenderingMapListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MapView_OnWillStartRenderingMapListener {
  factory $MapView_OnWillStartRenderingMapListener({
    required void Function() onWillStartRenderingMap,
    bool onWillStartRenderingMap$async,
  }) = _$MapView_OnWillStartRenderingMapListener;

  void onWillStartRenderingMap();
  bool get onWillStartRenderingMap$async => false;
}

final class _$MapView_OnWillStartRenderingMapListener
    with $MapView_OnWillStartRenderingMapListener {
  _$MapView_OnWillStartRenderingMapListener({
    required void Function() onWillStartRenderingMap,
    this.onWillStartRenderingMap$async = false,
  }) : _onWillStartRenderingMap = onWillStartRenderingMap;

  final void Function() _onWillStartRenderingMap;
  final bool onWillStartRenderingMap$async;

  void onWillStartRenderingMap() {
    return _onWillStartRenderingMap();
  }
}

final class $MapView_OnWillStartRenderingMapListener$Type
    extends _$jni.JObjType<MapView_OnWillStartRenderingMapListener> {
  @_$jni.internal
  const $MapView_OnWillStartRenderingMapListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/MapView$OnWillStartRenderingMapListener;';

  @_$jni.internal
  @_$core.override
  MapView_OnWillStartRenderingMapListener fromReference(
          _$jni.JReference reference) =>
      MapView_OnWillStartRenderingMapListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView_OnWillStartRenderingMapListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($MapView_OnWillStartRenderingMapListener$Type) &&
        other is $MapView_OnWillStartRenderingMapListener$Type;
  }
}

/// from: `org.maplibre.android.maps.MapView`
class MapView extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapView> $type;

  @_$jni.internal
  MapView.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/maps/MapView');

  /// The type which includes information such as the signature of this class.
  static const type = $MapView$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapView(
    _$jni.JObject context,
  ) {
    return MapView.fromReference(_new$(_class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr, context.reference.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapView.new$1(
    _$jni.JObject context,
    _$jni.JObject attributeSet,
  ) {
    return MapView.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer)
        .reference);
  }

  static final _id_new$2 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;I)V',
  );

  static final _new$2 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapView.new$2(
    _$jni.JObject context,
    _$jni.JObject attributeSet,
    int i,
  ) {
    return MapView.fromReference(_new$2(
            _class.reference.pointer,
            _id_new$2 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer,
            i)
        .reference);
  }

  static final _id_new$3 = _class.constructorId(
    r'(Landroid/content/Context;Lorg/maplibre/android/maps/MapLibreMapOptions;)V',
  );

  static final _new$3 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.content.Context context, org.maplibre.android.maps.MapLibreMapOptions mapLibreMapOptions)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapView.new$3(
    _$jni.JObject context,
    maplibremapoptions_.MapLibreMapOptions mapLibreMapOptions,
  ) {
    return MapView.fromReference(_new$3(
            _class.reference.pointer,
            _id_new$3 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            mapLibreMapOptions.reference.pointer)
        .reference);
  }

  static final _id_onCreate = _class.instanceMethodId(
    r'onCreate',
    r'(Landroid/os/Bundle;)V',
  );

  static final _onCreate = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onCreate(android.os.Bundle bundle)`
  void onCreate(
    _$jni.JObject bundle,
  ) {
    _onCreate(reference.pointer, _id_onCreate as _$jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onSaveInstanceState = _class.instanceMethodId(
    r'onSaveInstanceState',
    r'(Landroid/os/Bundle;)V',
  );

  static final _onSaveInstanceState = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onSaveInstanceState(android.os.Bundle bundle)`
  void onSaveInstanceState(
    _$jni.JObject bundle,
  ) {
    _onSaveInstanceState(
            reference.pointer,
            _id_onSaveInstanceState as _$jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onStart = _class.instanceMethodId(
    r'onStart',
    r'()V',
  );

  static final _onStart = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onStart()`
  void onStart() {
    _onStart(reference.pointer, _id_onStart as _$jni.JMethodIDPtr).check();
  }

  static final _id_onResume = _class.instanceMethodId(
    r'onResume',
    r'()V',
  );

  static final _onResume = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onResume()`
  void onResume() {
    _onResume(reference.pointer, _id_onResume as _$jni.JMethodIDPtr).check();
  }

  static final _id_onPause = _class.instanceMethodId(
    r'onPause',
    r'()V',
  );

  static final _onPause = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onPause()`
  void onPause() {
    _onPause(reference.pointer, _id_onPause as _$jni.JMethodIDPtr).check();
  }

  static final _id_onStop = _class.instanceMethodId(
    r'onStop',
    r'()V',
  );

  static final _onStop = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onStop()`
  void onStop() {
    _onStop(reference.pointer, _id_onStop as _$jni.JMethodIDPtr).check();
  }

  static final _id_onDestroy = _class.instanceMethodId(
    r'onDestroy',
    r'()V',
  );

  static final _onDestroy = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onDestroy()`
  void onDestroy() {
    _onDestroy(reference.pointer, _id_onDestroy as _$jni.JMethodIDPtr).check();
  }

  static final _id_queueEvent = _class.instanceMethodId(
    r'queueEvent',
    r'(Ljava/lang/Runnable;)V',
  );

  static final _queueEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void queueEvent(java.lang.Runnable runnable)`
  void queueEvent(
    _$jni.JObject runnable,
  ) {
    _queueEvent(reference.pointer, _id_queueEvent as _$jni.JMethodIDPtr,
            runnable.reference.pointer)
        .check();
  }

  static final _id_setMaximumFps = _class.instanceMethodId(
    r'setMaximumFps',
    r'(I)V',
  );

  static final _setMaximumFps = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setMaximumFps(int i)`
  void setMaximumFps(
    int i,
  ) {
    _setMaximumFps(
            reference.pointer, _id_setMaximumFps as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setRenderingRefreshMode = _class.instanceMethodId(
    r'setRenderingRefreshMode',
    r'(Lorg/maplibre/android/maps/renderer/MapRenderer$RenderingRefreshMode;)V',
  );

  static final _setRenderingRefreshMode = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setRenderingRefreshMode(org.maplibre.android.maps.renderer.MapRenderer$RenderingRefreshMode renderingRefreshMode)`
  void setRenderingRefreshMode(
    maprenderer_.MapRenderer_RenderingRefreshMode renderingRefreshMode,
  ) {
    _setRenderingRefreshMode(
            reference.pointer,
            _id_setRenderingRefreshMode as _$jni.JMethodIDPtr,
            renderingRefreshMode.reference.pointer)
        .check();
  }

  static final _id_getRenderingRefreshMode = _class.instanceMethodId(
    r'getRenderingRefreshMode',
    r'()Lorg/maplibre/android/maps/renderer/MapRenderer$RenderingRefreshMode;',
  );

  static final _getRenderingRefreshMode = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public org.maplibre.android.maps.renderer.MapRenderer$RenderingRefreshMode getRenderingRefreshMode()`
  /// The returned object must be released after use, by calling the [release] method.
  maprenderer_.MapRenderer_RenderingRefreshMode getRenderingRefreshMode() {
    return _getRenderingRefreshMode(reference.pointer,
            _id_getRenderingRefreshMode as _$jni.JMethodIDPtr)
        .object(const maprenderer_.$MapRenderer_RenderingRefreshMode$Type());
  }

  static final _id_isDestroyed = _class.instanceMethodId(
    r'isDestroyed',
    r'()Z',
  );

  static final _isDestroyed = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isDestroyed()`
  bool isDestroyed() {
    return _isDestroyed(
            reference.pointer, _id_isDestroyed as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getRenderView = _class.instanceMethodId(
    r'getRenderView',
    r'()Landroid/view/View;',
  );

  static final _getRenderView = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.view.View getRenderView()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getRenderView() {
    return _getRenderView(
            reference.pointer, _id_getRenderView as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_onTouchEvent = _class.instanceMethodId(
    r'onTouchEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onTouchEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onTouchEvent(android.view.MotionEvent motionEvent)`
  bool onTouchEvent(
    _$jni.JObject motionEvent,
  ) {
    return _onTouchEvent(
            reference.pointer,
            _id_onTouchEvent as _$jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyDown = _class.instanceMethodId(
    r'onKeyDown',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyDown = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onKeyDown(int i, android.view.KeyEvent keyEvent)`
  bool onKeyDown(
    int i,
    _$jni.JObject keyEvent,
  ) {
    return _onKeyDown(reference.pointer, _id_onKeyDown as _$jni.JMethodIDPtr, i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyLongPress = _class.instanceMethodId(
    r'onKeyLongPress',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyLongPress = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onKeyLongPress(int i, android.view.KeyEvent keyEvent)`
  bool onKeyLongPress(
    int i,
    _$jni.JObject keyEvent,
  ) {
    return _onKeyLongPress(
            reference.pointer,
            _id_onKeyLongPress as _$jni.JMethodIDPtr,
            i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyUp = _class.instanceMethodId(
    r'onKeyUp',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyUp = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onKeyUp(int i, android.view.KeyEvent keyEvent)`
  bool onKeyUp(
    int i,
    _$jni.JObject keyEvent,
  ) {
    return _onKeyUp(reference.pointer, _id_onKeyUp as _$jni.JMethodIDPtr, i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onTrackballEvent = _class.instanceMethodId(
    r'onTrackballEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onTrackballEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onTrackballEvent(android.view.MotionEvent motionEvent)`
  bool onTrackballEvent(
    _$jni.JObject motionEvent,
  ) {
    return _onTrackballEvent(
            reference.pointer,
            _id_onTrackballEvent as _$jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onGenericMotionEvent = _class.instanceMethodId(
    r'onGenericMotionEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onGenericMotionEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onGenericMotionEvent(android.view.MotionEvent motionEvent)`
  bool onGenericMotionEvent(
    _$jni.JObject motionEvent,
  ) {
    return _onGenericMotionEvent(
            reference.pointer,
            _id_onGenericMotionEvent as _$jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onLowMemory = _class.instanceMethodId(
    r'onLowMemory',
    r'()V',
  );

  static final _onLowMemory = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onLowMemory()`
  void onLowMemory() {
    _onLowMemory(reference.pointer, _id_onLowMemory as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_getPixelRatio = _class.instanceMethodId(
    r'getPixelRatio',
    r'()F',
  );

  static final _getPixelRatio = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public float getPixelRatio()`
  double getPixelRatio() {
    return _getPixelRatio(
            reference.pointer, _id_getPixelRatio as _$jni.JMethodIDPtr)
        .float;
  }

  static final _id_getViewContent = _class.instanceMethodId(
    r'getViewContent',
    r'()Landroid/graphics/Bitmap;',
  );

  static final _getViewContent = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.Bitmap getViewContent()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getViewContent() {
    return _getViewContent(
            reference.pointer, _id_getViewContent as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_addOnCameraWillChangeListener = _class.instanceMethodId(
    r'addOnCameraWillChangeListener',
    r'(Lorg/maplibre/android/maps/MapView$OnCameraWillChangeListener;)V',
  );

  static final _addOnCameraWillChangeListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnCameraWillChangeListener(org.maplibre.android.maps.MapView$OnCameraWillChangeListener onCameraWillChangeListener)`
  void addOnCameraWillChangeListener(
    MapView_OnCameraWillChangeListener onCameraWillChangeListener,
  ) {
    _addOnCameraWillChangeListener(
            reference.pointer,
            _id_addOnCameraWillChangeListener as _$jni.JMethodIDPtr,
            onCameraWillChangeListener.reference.pointer)
        .check();
  }

  static final _id_removeOnCameraWillChangeListener = _class.instanceMethodId(
    r'removeOnCameraWillChangeListener',
    r'(Lorg/maplibre/android/maps/MapView$OnCameraWillChangeListener;)V',
  );

  static final _removeOnCameraWillChangeListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnCameraWillChangeListener(org.maplibre.android.maps.MapView$OnCameraWillChangeListener onCameraWillChangeListener)`
  void removeOnCameraWillChangeListener(
    MapView_OnCameraWillChangeListener onCameraWillChangeListener,
  ) {
    _removeOnCameraWillChangeListener(
            reference.pointer,
            _id_removeOnCameraWillChangeListener as _$jni.JMethodIDPtr,
            onCameraWillChangeListener.reference.pointer)
        .check();
  }

  static final _id_addOnCameraIsChangingListener = _class.instanceMethodId(
    r'addOnCameraIsChangingListener',
    r'(Lorg/maplibre/android/maps/MapView$OnCameraIsChangingListener;)V',
  );

  static final _addOnCameraIsChangingListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnCameraIsChangingListener(org.maplibre.android.maps.MapView$OnCameraIsChangingListener onCameraIsChangingListener)`
  void addOnCameraIsChangingListener(
    MapView_OnCameraIsChangingListener onCameraIsChangingListener,
  ) {
    _addOnCameraIsChangingListener(
            reference.pointer,
            _id_addOnCameraIsChangingListener as _$jni.JMethodIDPtr,
            onCameraIsChangingListener.reference.pointer)
        .check();
  }

  static final _id_removeOnCameraIsChangingListener = _class.instanceMethodId(
    r'removeOnCameraIsChangingListener',
    r'(Lorg/maplibre/android/maps/MapView$OnCameraIsChangingListener;)V',
  );

  static final _removeOnCameraIsChangingListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnCameraIsChangingListener(org.maplibre.android.maps.MapView$OnCameraIsChangingListener onCameraIsChangingListener)`
  void removeOnCameraIsChangingListener(
    MapView_OnCameraIsChangingListener onCameraIsChangingListener,
  ) {
    _removeOnCameraIsChangingListener(
            reference.pointer,
            _id_removeOnCameraIsChangingListener as _$jni.JMethodIDPtr,
            onCameraIsChangingListener.reference.pointer)
        .check();
  }

  static final _id_addOnCameraDidChangeListener = _class.instanceMethodId(
    r'addOnCameraDidChangeListener',
    r'(Lorg/maplibre/android/maps/MapView$OnCameraDidChangeListener;)V',
  );

  static final _addOnCameraDidChangeListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnCameraDidChangeListener(org.maplibre.android.maps.MapView$OnCameraDidChangeListener onCameraDidChangeListener)`
  void addOnCameraDidChangeListener(
    MapView_OnCameraDidChangeListener onCameraDidChangeListener,
  ) {
    _addOnCameraDidChangeListener(
            reference.pointer,
            _id_addOnCameraDidChangeListener as _$jni.JMethodIDPtr,
            onCameraDidChangeListener.reference.pointer)
        .check();
  }

  static final _id_removeOnCameraDidChangeListener = _class.instanceMethodId(
    r'removeOnCameraDidChangeListener',
    r'(Lorg/maplibre/android/maps/MapView$OnCameraDidChangeListener;)V',
  );

  static final _removeOnCameraDidChangeListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnCameraDidChangeListener(org.maplibre.android.maps.MapView$OnCameraDidChangeListener onCameraDidChangeListener)`
  void removeOnCameraDidChangeListener(
    MapView_OnCameraDidChangeListener onCameraDidChangeListener,
  ) {
    _removeOnCameraDidChangeListener(
            reference.pointer,
            _id_removeOnCameraDidChangeListener as _$jni.JMethodIDPtr,
            onCameraDidChangeListener.reference.pointer)
        .check();
  }

  static final _id_addOnWillStartLoadingMapListener = _class.instanceMethodId(
    r'addOnWillStartLoadingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnWillStartLoadingMapListener;)V',
  );

  static final _addOnWillStartLoadingMapListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnWillStartLoadingMapListener(org.maplibre.android.maps.MapView$OnWillStartLoadingMapListener onWillStartLoadingMapListener)`
  void addOnWillStartLoadingMapListener(
    MapView_OnWillStartLoadingMapListener onWillStartLoadingMapListener,
  ) {
    _addOnWillStartLoadingMapListener(
            reference.pointer,
            _id_addOnWillStartLoadingMapListener as _$jni.JMethodIDPtr,
            onWillStartLoadingMapListener.reference.pointer)
        .check();
  }

  static final _id_removeOnWillStartLoadingMapListener =
      _class.instanceMethodId(
    r'removeOnWillStartLoadingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnWillStartLoadingMapListener;)V',
  );

  static final _removeOnWillStartLoadingMapListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnWillStartLoadingMapListener(org.maplibre.android.maps.MapView$OnWillStartLoadingMapListener onWillStartLoadingMapListener)`
  void removeOnWillStartLoadingMapListener(
    MapView_OnWillStartLoadingMapListener onWillStartLoadingMapListener,
  ) {
    _removeOnWillStartLoadingMapListener(
            reference.pointer,
            _id_removeOnWillStartLoadingMapListener as _$jni.JMethodIDPtr,
            onWillStartLoadingMapListener.reference.pointer)
        .check();
  }

  static final _id_addOnDidFinishLoadingMapListener = _class.instanceMethodId(
    r'addOnDidFinishLoadingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFinishLoadingMapListener;)V',
  );

  static final _addOnDidFinishLoadingMapListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnDidFinishLoadingMapListener(org.maplibre.android.maps.MapView$OnDidFinishLoadingMapListener onDidFinishLoadingMapListener)`
  void addOnDidFinishLoadingMapListener(
    MapView_OnDidFinishLoadingMapListener onDidFinishLoadingMapListener,
  ) {
    _addOnDidFinishLoadingMapListener(
            reference.pointer,
            _id_addOnDidFinishLoadingMapListener as _$jni.JMethodIDPtr,
            onDidFinishLoadingMapListener.reference.pointer)
        .check();
  }

  static final _id_removeOnDidFinishLoadingMapListener =
      _class.instanceMethodId(
    r'removeOnDidFinishLoadingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFinishLoadingMapListener;)V',
  );

  static final _removeOnDidFinishLoadingMapListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnDidFinishLoadingMapListener(org.maplibre.android.maps.MapView$OnDidFinishLoadingMapListener onDidFinishLoadingMapListener)`
  void removeOnDidFinishLoadingMapListener(
    MapView_OnDidFinishLoadingMapListener onDidFinishLoadingMapListener,
  ) {
    _removeOnDidFinishLoadingMapListener(
            reference.pointer,
            _id_removeOnDidFinishLoadingMapListener as _$jni.JMethodIDPtr,
            onDidFinishLoadingMapListener.reference.pointer)
        .check();
  }

  static final _id_addOnDidFailLoadingMapListener = _class.instanceMethodId(
    r'addOnDidFailLoadingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFailLoadingMapListener;)V',
  );

  static final _addOnDidFailLoadingMapListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnDidFailLoadingMapListener(org.maplibre.android.maps.MapView$OnDidFailLoadingMapListener onDidFailLoadingMapListener)`
  void addOnDidFailLoadingMapListener(
    MapView_OnDidFailLoadingMapListener onDidFailLoadingMapListener,
  ) {
    _addOnDidFailLoadingMapListener(
            reference.pointer,
            _id_addOnDidFailLoadingMapListener as _$jni.JMethodIDPtr,
            onDidFailLoadingMapListener.reference.pointer)
        .check();
  }

  static final _id_removeOnDidFailLoadingMapListener = _class.instanceMethodId(
    r'removeOnDidFailLoadingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFailLoadingMapListener;)V',
  );

  static final _removeOnDidFailLoadingMapListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnDidFailLoadingMapListener(org.maplibre.android.maps.MapView$OnDidFailLoadingMapListener onDidFailLoadingMapListener)`
  void removeOnDidFailLoadingMapListener(
    MapView_OnDidFailLoadingMapListener onDidFailLoadingMapListener,
  ) {
    _removeOnDidFailLoadingMapListener(
            reference.pointer,
            _id_removeOnDidFailLoadingMapListener as _$jni.JMethodIDPtr,
            onDidFailLoadingMapListener.reference.pointer)
        .check();
  }

  static final _id_addOnWillStartRenderingFrameListener =
      _class.instanceMethodId(
    r'addOnWillStartRenderingFrameListener',
    r'(Lorg/maplibre/android/maps/MapView$OnWillStartRenderingFrameListener;)V',
  );

  static final _addOnWillStartRenderingFrameListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnWillStartRenderingFrameListener(org.maplibre.android.maps.MapView$OnWillStartRenderingFrameListener onWillStartRenderingFrameListener)`
  void addOnWillStartRenderingFrameListener(
    MapView_OnWillStartRenderingFrameListener onWillStartRenderingFrameListener,
  ) {
    _addOnWillStartRenderingFrameListener(
            reference.pointer,
            _id_addOnWillStartRenderingFrameListener as _$jni.JMethodIDPtr,
            onWillStartRenderingFrameListener.reference.pointer)
        .check();
  }

  static final _id_removeOnWillStartRenderingFrameListener =
      _class.instanceMethodId(
    r'removeOnWillStartRenderingFrameListener',
    r'(Lorg/maplibre/android/maps/MapView$OnWillStartRenderingFrameListener;)V',
  );

  static final _removeOnWillStartRenderingFrameListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnWillStartRenderingFrameListener(org.maplibre.android.maps.MapView$OnWillStartRenderingFrameListener onWillStartRenderingFrameListener)`
  void removeOnWillStartRenderingFrameListener(
    MapView_OnWillStartRenderingFrameListener onWillStartRenderingFrameListener,
  ) {
    _removeOnWillStartRenderingFrameListener(
            reference.pointer,
            _id_removeOnWillStartRenderingFrameListener as _$jni.JMethodIDPtr,
            onWillStartRenderingFrameListener.reference.pointer)
        .check();
  }

  static final _id_addOnDidFinishRenderingFrameListener =
      _class.instanceMethodId(
    r'addOnDidFinishRenderingFrameListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFinishRenderingFrameListener;)V',
  );

  static final _addOnDidFinishRenderingFrameListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnDidFinishRenderingFrameListener(org.maplibre.android.maps.MapView$OnDidFinishRenderingFrameListener onDidFinishRenderingFrameListener)`
  void addOnDidFinishRenderingFrameListener(
    MapView_OnDidFinishRenderingFrameListener onDidFinishRenderingFrameListener,
  ) {
    _addOnDidFinishRenderingFrameListener(
            reference.pointer,
            _id_addOnDidFinishRenderingFrameListener as _$jni.JMethodIDPtr,
            onDidFinishRenderingFrameListener.reference.pointer)
        .check();
  }

  static final _id_removeOnDidFinishRenderingFrameListener =
      _class.instanceMethodId(
    r'removeOnDidFinishRenderingFrameListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFinishRenderingFrameListener;)V',
  );

  static final _removeOnDidFinishRenderingFrameListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnDidFinishRenderingFrameListener(org.maplibre.android.maps.MapView$OnDidFinishRenderingFrameListener onDidFinishRenderingFrameListener)`
  void removeOnDidFinishRenderingFrameListener(
    MapView_OnDidFinishRenderingFrameListener onDidFinishRenderingFrameListener,
  ) {
    _removeOnDidFinishRenderingFrameListener(
            reference.pointer,
            _id_removeOnDidFinishRenderingFrameListener as _$jni.JMethodIDPtr,
            onDidFinishRenderingFrameListener.reference.pointer)
        .check();
  }

  static final _id_addOnWillStartRenderingMapListener = _class.instanceMethodId(
    r'addOnWillStartRenderingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnWillStartRenderingMapListener;)V',
  );

  static final _addOnWillStartRenderingMapListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnWillStartRenderingMapListener(org.maplibre.android.maps.MapView$OnWillStartRenderingMapListener onWillStartRenderingMapListener)`
  void addOnWillStartRenderingMapListener(
    MapView_OnWillStartRenderingMapListener onWillStartRenderingMapListener,
  ) {
    _addOnWillStartRenderingMapListener(
            reference.pointer,
            _id_addOnWillStartRenderingMapListener as _$jni.JMethodIDPtr,
            onWillStartRenderingMapListener.reference.pointer)
        .check();
  }

  static final _id_removeOnWillStartRenderingMapListener =
      _class.instanceMethodId(
    r'removeOnWillStartRenderingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnWillStartRenderingMapListener;)V',
  );

  static final _removeOnWillStartRenderingMapListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnWillStartRenderingMapListener(org.maplibre.android.maps.MapView$OnWillStartRenderingMapListener onWillStartRenderingMapListener)`
  void removeOnWillStartRenderingMapListener(
    MapView_OnWillStartRenderingMapListener onWillStartRenderingMapListener,
  ) {
    _removeOnWillStartRenderingMapListener(
            reference.pointer,
            _id_removeOnWillStartRenderingMapListener as _$jni.JMethodIDPtr,
            onWillStartRenderingMapListener.reference.pointer)
        .check();
  }

  static final _id_addOnDidFinishRenderingMapListener = _class.instanceMethodId(
    r'addOnDidFinishRenderingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFinishRenderingMapListener;)V',
  );

  static final _addOnDidFinishRenderingMapListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnDidFinishRenderingMapListener(org.maplibre.android.maps.MapView$OnDidFinishRenderingMapListener onDidFinishRenderingMapListener)`
  void addOnDidFinishRenderingMapListener(
    MapView_OnDidFinishRenderingMapListener onDidFinishRenderingMapListener,
  ) {
    _addOnDidFinishRenderingMapListener(
            reference.pointer,
            _id_addOnDidFinishRenderingMapListener as _$jni.JMethodIDPtr,
            onDidFinishRenderingMapListener.reference.pointer)
        .check();
  }

  static final _id_removeOnDidFinishRenderingMapListener =
      _class.instanceMethodId(
    r'removeOnDidFinishRenderingMapListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFinishRenderingMapListener;)V',
  );

  static final _removeOnDidFinishRenderingMapListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnDidFinishRenderingMapListener(org.maplibre.android.maps.MapView$OnDidFinishRenderingMapListener onDidFinishRenderingMapListener)`
  void removeOnDidFinishRenderingMapListener(
    MapView_OnDidFinishRenderingMapListener onDidFinishRenderingMapListener,
  ) {
    _removeOnDidFinishRenderingMapListener(
            reference.pointer,
            _id_removeOnDidFinishRenderingMapListener as _$jni.JMethodIDPtr,
            onDidFinishRenderingMapListener.reference.pointer)
        .check();
  }

  static final _id_addOnDidBecomeIdleListener = _class.instanceMethodId(
    r'addOnDidBecomeIdleListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidBecomeIdleListener;)V',
  );

  static final _addOnDidBecomeIdleListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnDidBecomeIdleListener(org.maplibre.android.maps.MapView$OnDidBecomeIdleListener onDidBecomeIdleListener)`
  void addOnDidBecomeIdleListener(
    MapView_OnDidBecomeIdleListener onDidBecomeIdleListener,
  ) {
    _addOnDidBecomeIdleListener(
            reference.pointer,
            _id_addOnDidBecomeIdleListener as _$jni.JMethodIDPtr,
            onDidBecomeIdleListener.reference.pointer)
        .check();
  }

  static final _id_removeOnDidBecomeIdleListener = _class.instanceMethodId(
    r'removeOnDidBecomeIdleListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidBecomeIdleListener;)V',
  );

  static final _removeOnDidBecomeIdleListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnDidBecomeIdleListener(org.maplibre.android.maps.MapView$OnDidBecomeIdleListener onDidBecomeIdleListener)`
  void removeOnDidBecomeIdleListener(
    MapView_OnDidBecomeIdleListener onDidBecomeIdleListener,
  ) {
    _removeOnDidBecomeIdleListener(
            reference.pointer,
            _id_removeOnDidBecomeIdleListener as _$jni.JMethodIDPtr,
            onDidBecomeIdleListener.reference.pointer)
        .check();
  }

  static final _id_addOnDidFinishLoadingStyleListener = _class.instanceMethodId(
    r'addOnDidFinishLoadingStyleListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFinishLoadingStyleListener;)V',
  );

  static final _addOnDidFinishLoadingStyleListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnDidFinishLoadingStyleListener(org.maplibre.android.maps.MapView$OnDidFinishLoadingStyleListener onDidFinishLoadingStyleListener)`
  void addOnDidFinishLoadingStyleListener(
    MapView_OnDidFinishLoadingStyleListener onDidFinishLoadingStyleListener,
  ) {
    _addOnDidFinishLoadingStyleListener(
            reference.pointer,
            _id_addOnDidFinishLoadingStyleListener as _$jni.JMethodIDPtr,
            onDidFinishLoadingStyleListener.reference.pointer)
        .check();
  }

  static final _id_removeOnDidFinishLoadingStyleListener =
      _class.instanceMethodId(
    r'removeOnDidFinishLoadingStyleListener',
    r'(Lorg/maplibre/android/maps/MapView$OnDidFinishLoadingStyleListener;)V',
  );

  static final _removeOnDidFinishLoadingStyleListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnDidFinishLoadingStyleListener(org.maplibre.android.maps.MapView$OnDidFinishLoadingStyleListener onDidFinishLoadingStyleListener)`
  void removeOnDidFinishLoadingStyleListener(
    MapView_OnDidFinishLoadingStyleListener onDidFinishLoadingStyleListener,
  ) {
    _removeOnDidFinishLoadingStyleListener(
            reference.pointer,
            _id_removeOnDidFinishLoadingStyleListener as _$jni.JMethodIDPtr,
            onDidFinishLoadingStyleListener.reference.pointer)
        .check();
  }

  static final _id_addOnSourceChangedListener = _class.instanceMethodId(
    r'addOnSourceChangedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnSourceChangedListener;)V',
  );

  static final _addOnSourceChangedListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnSourceChangedListener(org.maplibre.android.maps.MapView$OnSourceChangedListener onSourceChangedListener)`
  void addOnSourceChangedListener(
    MapView_OnSourceChangedListener onSourceChangedListener,
  ) {
    _addOnSourceChangedListener(
            reference.pointer,
            _id_addOnSourceChangedListener as _$jni.JMethodIDPtr,
            onSourceChangedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnSourceChangedListener = _class.instanceMethodId(
    r'removeOnSourceChangedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnSourceChangedListener;)V',
  );

  static final _removeOnSourceChangedListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnSourceChangedListener(org.maplibre.android.maps.MapView$OnSourceChangedListener onSourceChangedListener)`
  void removeOnSourceChangedListener(
    MapView_OnSourceChangedListener onSourceChangedListener,
  ) {
    _removeOnSourceChangedListener(
            reference.pointer,
            _id_removeOnSourceChangedListener as _$jni.JMethodIDPtr,
            onSourceChangedListener.reference.pointer)
        .check();
  }

  static final _id_addOnStyleImageMissingListener = _class.instanceMethodId(
    r'addOnStyleImageMissingListener',
    r'(Lorg/maplibre/android/maps/MapView$OnStyleImageMissingListener;)V',
  );

  static final _addOnStyleImageMissingListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnStyleImageMissingListener(org.maplibre.android.maps.MapView$OnStyleImageMissingListener onStyleImageMissingListener)`
  void addOnStyleImageMissingListener(
    MapView_OnStyleImageMissingListener onStyleImageMissingListener,
  ) {
    _addOnStyleImageMissingListener(
            reference.pointer,
            _id_addOnStyleImageMissingListener as _$jni.JMethodIDPtr,
            onStyleImageMissingListener.reference.pointer)
        .check();
  }

  static final _id_removeOnStyleImageMissingListener = _class.instanceMethodId(
    r'removeOnStyleImageMissingListener',
    r'(Lorg/maplibre/android/maps/MapView$OnStyleImageMissingListener;)V',
  );

  static final _removeOnStyleImageMissingListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnStyleImageMissingListener(org.maplibre.android.maps.MapView$OnStyleImageMissingListener onStyleImageMissingListener)`
  void removeOnStyleImageMissingListener(
    MapView_OnStyleImageMissingListener onStyleImageMissingListener,
  ) {
    _removeOnStyleImageMissingListener(
            reference.pointer,
            _id_removeOnStyleImageMissingListener as _$jni.JMethodIDPtr,
            onStyleImageMissingListener.reference.pointer)
        .check();
  }

  static final _id_addOnCanRemoveUnusedStyleImageListener =
      _class.instanceMethodId(
    r'addOnCanRemoveUnusedStyleImageListener',
    r'(Lorg/maplibre/android/maps/MapView$OnCanRemoveUnusedStyleImageListener;)V',
  );

  static final _addOnCanRemoveUnusedStyleImageListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnCanRemoveUnusedStyleImageListener(org.maplibre.android.maps.MapView$OnCanRemoveUnusedStyleImageListener onCanRemoveUnusedStyleImageListener)`
  void addOnCanRemoveUnusedStyleImageListener(
    MapView_OnCanRemoveUnusedStyleImageListener
        onCanRemoveUnusedStyleImageListener,
  ) {
    _addOnCanRemoveUnusedStyleImageListener(
            reference.pointer,
            _id_addOnCanRemoveUnusedStyleImageListener as _$jni.JMethodIDPtr,
            onCanRemoveUnusedStyleImageListener.reference.pointer)
        .check();
  }

  static final _id_removeOnCanRemoveUnusedStyleImageListener =
      _class.instanceMethodId(
    r'removeOnCanRemoveUnusedStyleImageListener',
    r'(Lorg/maplibre/android/maps/MapView$OnCanRemoveUnusedStyleImageListener;)V',
  );

  static final _removeOnCanRemoveUnusedStyleImageListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnCanRemoveUnusedStyleImageListener(org.maplibre.android.maps.MapView$OnCanRemoveUnusedStyleImageListener onCanRemoveUnusedStyleImageListener)`
  void removeOnCanRemoveUnusedStyleImageListener(
    MapView_OnCanRemoveUnusedStyleImageListener
        onCanRemoveUnusedStyleImageListener,
  ) {
    _removeOnCanRemoveUnusedStyleImageListener(
            reference.pointer,
            _id_removeOnCanRemoveUnusedStyleImageListener as _$jni.JMethodIDPtr,
            onCanRemoveUnusedStyleImageListener.reference.pointer)
        .check();
  }

  static final _id_addOnPreCompileShaderListener = _class.instanceMethodId(
    r'addOnPreCompileShaderListener',
    r'(Lorg/maplibre/android/maps/MapView$OnPreCompileShaderListener;)V',
  );

  static final _addOnPreCompileShaderListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnPreCompileShaderListener(org.maplibre.android.maps.MapView$OnPreCompileShaderListener onPreCompileShaderListener)`
  void addOnPreCompileShaderListener(
    MapView_OnPreCompileShaderListener onPreCompileShaderListener,
  ) {
    _addOnPreCompileShaderListener(
            reference.pointer,
            _id_addOnPreCompileShaderListener as _$jni.JMethodIDPtr,
            onPreCompileShaderListener.reference.pointer)
        .check();
  }

  static final _id_removeOnPreCompileShaderListener = _class.instanceMethodId(
    r'removeOnPreCompileShaderListener',
    r'(Lorg/maplibre/android/maps/MapView$OnPreCompileShaderListener;)V',
  );

  static final _removeOnPreCompileShaderListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnPreCompileShaderListener(org.maplibre.android.maps.MapView$OnPreCompileShaderListener onPreCompileShaderListener)`
  void removeOnPreCompileShaderListener(
    MapView_OnPreCompileShaderListener onPreCompileShaderListener,
  ) {
    _removeOnPreCompileShaderListener(
            reference.pointer,
            _id_removeOnPreCompileShaderListener as _$jni.JMethodIDPtr,
            onPreCompileShaderListener.reference.pointer)
        .check();
  }

  static final _id_addOnPostCompileShaderListener = _class.instanceMethodId(
    r'addOnPostCompileShaderListener',
    r'(Lorg/maplibre/android/maps/MapView$OnPostCompileShaderListener;)V',
  );

  static final _addOnPostCompileShaderListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnPostCompileShaderListener(org.maplibre.android.maps.MapView$OnPostCompileShaderListener onPostCompileShaderListener)`
  void addOnPostCompileShaderListener(
    MapView_OnPostCompileShaderListener onPostCompileShaderListener,
  ) {
    _addOnPostCompileShaderListener(
            reference.pointer,
            _id_addOnPostCompileShaderListener as _$jni.JMethodIDPtr,
            onPostCompileShaderListener.reference.pointer)
        .check();
  }

  static final _id_removeOnPostCompileShaderListener = _class.instanceMethodId(
    r'removeOnPostCompileShaderListener',
    r'(Lorg/maplibre/android/maps/MapView$OnPostCompileShaderListener;)V',
  );

  static final _removeOnPostCompileShaderListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnPostCompileShaderListener(org.maplibre.android.maps.MapView$OnPostCompileShaderListener onPostCompileShaderListener)`
  void removeOnPostCompileShaderListener(
    MapView_OnPostCompileShaderListener onPostCompileShaderListener,
  ) {
    _removeOnPostCompileShaderListener(
            reference.pointer,
            _id_removeOnPostCompileShaderListener as _$jni.JMethodIDPtr,
            onPostCompileShaderListener.reference.pointer)
        .check();
  }

  static final _id_addOnShaderCompileFailedListener = _class.instanceMethodId(
    r'addOnShaderCompileFailedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnShaderCompileFailedListener;)V',
  );

  static final _addOnShaderCompileFailedListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnShaderCompileFailedListener(org.maplibre.android.maps.MapView$OnShaderCompileFailedListener onShaderCompileFailedListener)`
  void addOnShaderCompileFailedListener(
    MapView_OnShaderCompileFailedListener onShaderCompileFailedListener,
  ) {
    _addOnShaderCompileFailedListener(
            reference.pointer,
            _id_addOnShaderCompileFailedListener as _$jni.JMethodIDPtr,
            onShaderCompileFailedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnShaderCompileFailedListener =
      _class.instanceMethodId(
    r'removeOnShaderCompileFailedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnShaderCompileFailedListener;)V',
  );

  static final _removeOnShaderCompileFailedListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnShaderCompileFailedListener(org.maplibre.android.maps.MapView$OnShaderCompileFailedListener onShaderCompileFailedListener)`
  void removeOnShaderCompileFailedListener(
    MapView_OnShaderCompileFailedListener onShaderCompileFailedListener,
  ) {
    _removeOnShaderCompileFailedListener(
            reference.pointer,
            _id_removeOnShaderCompileFailedListener as _$jni.JMethodIDPtr,
            onShaderCompileFailedListener.reference.pointer)
        .check();
  }

  static final _id_addOnGlyphsLoadedListener = _class.instanceMethodId(
    r'addOnGlyphsLoadedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnGlyphsLoadedListener;)V',
  );

  static final _addOnGlyphsLoadedListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnGlyphsLoadedListener(org.maplibre.android.maps.MapView$OnGlyphsLoadedListener onGlyphsLoadedListener)`
  void addOnGlyphsLoadedListener(
    MapView_OnGlyphsLoadedListener onGlyphsLoadedListener,
  ) {
    _addOnGlyphsLoadedListener(
            reference.pointer,
            _id_addOnGlyphsLoadedListener as _$jni.JMethodIDPtr,
            onGlyphsLoadedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnGlyphsLoadedListener = _class.instanceMethodId(
    r'removeOnGlyphsLoadedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnGlyphsLoadedListener;)V',
  );

  static final _removeOnGlyphsLoadedListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnGlyphsLoadedListener(org.maplibre.android.maps.MapView$OnGlyphsLoadedListener onGlyphsLoadedListener)`
  void removeOnGlyphsLoadedListener(
    MapView_OnGlyphsLoadedListener onGlyphsLoadedListener,
  ) {
    _removeOnGlyphsLoadedListener(
            reference.pointer,
            _id_removeOnGlyphsLoadedListener as _$jni.JMethodIDPtr,
            onGlyphsLoadedListener.reference.pointer)
        .check();
  }

  static final _id_addOnGlyphsErrorListener = _class.instanceMethodId(
    r'addOnGlyphsErrorListener',
    r'(Lorg/maplibre/android/maps/MapView$OnGlyphsErrorListener;)V',
  );

  static final _addOnGlyphsErrorListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnGlyphsErrorListener(org.maplibre.android.maps.MapView$OnGlyphsErrorListener onGlyphsErrorListener)`
  void addOnGlyphsErrorListener(
    MapView_OnGlyphsErrorListener onGlyphsErrorListener,
  ) {
    _addOnGlyphsErrorListener(
            reference.pointer,
            _id_addOnGlyphsErrorListener as _$jni.JMethodIDPtr,
            onGlyphsErrorListener.reference.pointer)
        .check();
  }

  static final _id_removeOnGlyphsErrorListener = _class.instanceMethodId(
    r'removeOnGlyphsErrorListener',
    r'(Lorg/maplibre/android/maps/MapView$OnGlyphsErrorListener;)V',
  );

  static final _removeOnGlyphsErrorListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnGlyphsErrorListener(org.maplibre.android.maps.MapView$OnGlyphsErrorListener onGlyphsErrorListener)`
  void removeOnGlyphsErrorListener(
    MapView_OnGlyphsErrorListener onGlyphsErrorListener,
  ) {
    _removeOnGlyphsErrorListener(
            reference.pointer,
            _id_removeOnGlyphsErrorListener as _$jni.JMethodIDPtr,
            onGlyphsErrorListener.reference.pointer)
        .check();
  }

  static final _id_addOnGlyphsRequestedListener = _class.instanceMethodId(
    r'addOnGlyphsRequestedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnGlyphsRequestedListener;)V',
  );

  static final _addOnGlyphsRequestedListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnGlyphsRequestedListener(org.maplibre.android.maps.MapView$OnGlyphsRequestedListener onGlyphsRequestedListener)`
  void addOnGlyphsRequestedListener(
    MapView_OnGlyphsRequestedListener onGlyphsRequestedListener,
  ) {
    _addOnGlyphsRequestedListener(
            reference.pointer,
            _id_addOnGlyphsRequestedListener as _$jni.JMethodIDPtr,
            onGlyphsRequestedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnGlyphsRequestedListener = _class.instanceMethodId(
    r'removeOnGlyphsRequestedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnGlyphsRequestedListener;)V',
  );

  static final _removeOnGlyphsRequestedListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnGlyphsRequestedListener(org.maplibre.android.maps.MapView$OnGlyphsRequestedListener onGlyphsRequestedListener)`
  void removeOnGlyphsRequestedListener(
    MapView_OnGlyphsRequestedListener onGlyphsRequestedListener,
  ) {
    _removeOnGlyphsRequestedListener(
            reference.pointer,
            _id_removeOnGlyphsRequestedListener as _$jni.JMethodIDPtr,
            onGlyphsRequestedListener.reference.pointer)
        .check();
  }

  static final _id_addOnTileActionListener = _class.instanceMethodId(
    r'addOnTileActionListener',
    r'(Lorg/maplibre/android/maps/MapView$OnTileActionListener;)V',
  );

  static final _addOnTileActionListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnTileActionListener(org.maplibre.android.maps.MapView$OnTileActionListener onTileActionListener)`
  void addOnTileActionListener(
    MapView_OnTileActionListener onTileActionListener,
  ) {
    _addOnTileActionListener(
            reference.pointer,
            _id_addOnTileActionListener as _$jni.JMethodIDPtr,
            onTileActionListener.reference.pointer)
        .check();
  }

  static final _id_removeOnTileActionListener = _class.instanceMethodId(
    r'removeOnTileActionListener',
    r'(Lorg/maplibre/android/maps/MapView$OnTileActionListener;)V',
  );

  static final _removeOnTileActionListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnTileActionListener(org.maplibre.android.maps.MapView$OnTileActionListener onTileActionListener)`
  void removeOnTileActionListener(
    MapView_OnTileActionListener onTileActionListener,
  ) {
    _removeOnTileActionListener(
            reference.pointer,
            _id_removeOnTileActionListener as _$jni.JMethodIDPtr,
            onTileActionListener.reference.pointer)
        .check();
  }

  static final _id_addOnSpriteLoadedListener = _class.instanceMethodId(
    r'addOnSpriteLoadedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnSpriteLoadedListener;)V',
  );

  static final _addOnSpriteLoadedListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnSpriteLoadedListener(org.maplibre.android.maps.MapView$OnSpriteLoadedListener onSpriteLoadedListener)`
  void addOnSpriteLoadedListener(
    MapView_OnSpriteLoadedListener onSpriteLoadedListener,
  ) {
    _addOnSpriteLoadedListener(
            reference.pointer,
            _id_addOnSpriteLoadedListener as _$jni.JMethodIDPtr,
            onSpriteLoadedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnSpriteLoadedListener = _class.instanceMethodId(
    r'removeOnSpriteLoadedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnSpriteLoadedListener;)V',
  );

  static final _removeOnSpriteLoadedListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnSpriteLoadedListener(org.maplibre.android.maps.MapView$OnSpriteLoadedListener onSpriteLoadedListener)`
  void removeOnSpriteLoadedListener(
    MapView_OnSpriteLoadedListener onSpriteLoadedListener,
  ) {
    _removeOnSpriteLoadedListener(
            reference.pointer,
            _id_removeOnSpriteLoadedListener as _$jni.JMethodIDPtr,
            onSpriteLoadedListener.reference.pointer)
        .check();
  }

  static final _id_addOnSpriteErrorListener = _class.instanceMethodId(
    r'addOnSpriteErrorListener',
    r'(Lorg/maplibre/android/maps/MapView$OnSpriteErrorListener;)V',
  );

  static final _addOnSpriteErrorListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnSpriteErrorListener(org.maplibre.android.maps.MapView$OnSpriteErrorListener onSpriteErrorListener)`
  void addOnSpriteErrorListener(
    MapView_OnSpriteErrorListener onSpriteErrorListener,
  ) {
    _addOnSpriteErrorListener(
            reference.pointer,
            _id_addOnSpriteErrorListener as _$jni.JMethodIDPtr,
            onSpriteErrorListener.reference.pointer)
        .check();
  }

  static final _id_removeOnSpriteErrorListener = _class.instanceMethodId(
    r'removeOnSpriteErrorListener',
    r'(Lorg/maplibre/android/maps/MapView$OnSpriteErrorListener;)V',
  );

  static final _removeOnSpriteErrorListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnSpriteErrorListener(org.maplibre.android.maps.MapView$OnSpriteErrorListener onSpriteErrorListener)`
  void removeOnSpriteErrorListener(
    MapView_OnSpriteErrorListener onSpriteErrorListener,
  ) {
    _removeOnSpriteErrorListener(
            reference.pointer,
            _id_removeOnSpriteErrorListener as _$jni.JMethodIDPtr,
            onSpriteErrorListener.reference.pointer)
        .check();
  }

  static final _id_addOnSpriteRequestedListener = _class.instanceMethodId(
    r'addOnSpriteRequestedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnSpriteRequestedListener;)V',
  );

  static final _addOnSpriteRequestedListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOnSpriteRequestedListener(org.maplibre.android.maps.MapView$OnSpriteRequestedListener onSpriteRequestedListener)`
  void addOnSpriteRequestedListener(
    MapView_OnSpriteRequestedListener onSpriteRequestedListener,
  ) {
    _addOnSpriteRequestedListener(
            reference.pointer,
            _id_addOnSpriteRequestedListener as _$jni.JMethodIDPtr,
            onSpriteRequestedListener.reference.pointer)
        .check();
  }

  static final _id_removeOnSpriteRequestedListener = _class.instanceMethodId(
    r'removeOnSpriteRequestedListener',
    r'(Lorg/maplibre/android/maps/MapView$OnSpriteRequestedListener;)V',
  );

  static final _removeOnSpriteRequestedListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeOnSpriteRequestedListener(org.maplibre.android.maps.MapView$OnSpriteRequestedListener onSpriteRequestedListener)`
  void removeOnSpriteRequestedListener(
    MapView_OnSpriteRequestedListener onSpriteRequestedListener,
  ) {
    _removeOnSpriteRequestedListener(
            reference.pointer,
            _id_removeOnSpriteRequestedListener as _$jni.JMethodIDPtr,
            onSpriteRequestedListener.reference.pointer)
        .check();
  }

  static final _id_getMapAsync = _class.instanceMethodId(
    r'getMapAsync',
    r'(Lorg/maplibre/android/maps/OnMapReadyCallback;)V',
  );

  static final _getMapAsync = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void getMapAsync(org.maplibre.android.maps.OnMapReadyCallback onMapReadyCallback)`
  void getMapAsync(
    onmapreadycallback_.OnMapReadyCallback onMapReadyCallback,
  ) {
    _getMapAsync(reference.pointer, _id_getMapAsync as _$jni.JMethodIDPtr,
            onMapReadyCallback.reference.pointer)
        .check();
  }

  static final _id_setMapStrictModeEnabled = _class.staticMethodId(
    r'setMapStrictModeEnabled',
    r'(Z)V',
  );

  static final _setMapStrictModeEnabled = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public void setMapStrictModeEnabled(boolean z)`
  static void setMapStrictModeEnabled(
    bool z,
  ) {
    _setMapStrictModeEnabled(_class.reference.pointer,
            _id_setMapStrictModeEnabled as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }
}

final class $MapView$Type extends _$jni.JObjType<MapView> {
  @_$jni.internal
  const $MapView$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/maps/MapView;';

  @_$jni.internal
  @_$core.override
  MapView fromReference(_$jni.JReference reference) =>
      MapView.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapView$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapView$Type) && other is $MapView$Type;
  }
}
