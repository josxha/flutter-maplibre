// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import 'MapLibreSurfaceView.dart' as maplibresurfaceview_;

import 'SurfaceViewMapRenderer.dart' as surfaceviewmaprenderer_;

/// from: `org.maplibre.android.maps.renderer.surfaceview.MapLibreGLSurfaceView`
class MapLibreGLSurfaceView extends maplibresurfaceview_.MapLibreSurfaceView {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapLibreGLSurfaceView> $type;

  @_$jni.internal
  MapLibreGLSurfaceView.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/maps/renderer/surfaceview/MapLibreGLSurfaceView');

  /// The type which includes information such as the signature of this class.
  static const type = $MapLibreGLSurfaceView$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapLibreGLSurfaceView(
    _$jni.JObject context,
  ) {
    return MapLibreGLSurfaceView.fromReference(_new$(_class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr, context.reference.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MapLibreGLSurfaceView.new$1(
    _$jni.JObject context,
    _$jni.JObject attributeSet,
  ) {
    return MapLibreGLSurfaceView.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer)
        .reference);
  }

  static final _id_setPreserveEGLContextOnPause = _class.instanceMethodId(
    r'setPreserveEGLContextOnPause',
    r'(Z)V',
  );

  static final _setPreserveEGLContextOnPause =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setPreserveEGLContextOnPause(boolean z)`
  void setPreserveEGLContextOnPause(
    bool z,
  ) {
    _setPreserveEGLContextOnPause(reference.pointer,
            _id_setPreserveEGLContextOnPause as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getPreserveEGLContextOnPause = _class.instanceMethodId(
    r'getPreserveEGLContextOnPause',
    r'()Z',
  );

  static final _getPreserveEGLContextOnPause =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean getPreserveEGLContextOnPause()`
  bool getPreserveEGLContextOnPause() {
    return _getPreserveEGLContextOnPause(reference.pointer,
            _id_getPreserveEGLContextOnPause as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setRenderer = _class.instanceMethodId(
    r'setRenderer',
    r'(Lorg/maplibre/android/maps/renderer/surfaceview/SurfaceViewMapRenderer;)V',
  );

  static final _setRenderer = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setRenderer(org.maplibre.android.maps.renderer.surfaceview.SurfaceViewMapRenderer surfaceViewMapRenderer)`
  void setRenderer(
    surfaceviewmaprenderer_.SurfaceViewMapRenderer surfaceViewMapRenderer,
  ) {
    _setRenderer(reference.pointer, _id_setRenderer as _$jni.JMethodIDPtr,
            surfaceViewMapRenderer.reference.pointer)
        .check();
  }

  static final _id_setEGLContextFactory = _class.instanceMethodId(
    r'setEGLContextFactory',
    r'(Landroid/opengl/GLSurfaceView$EGLContextFactory;)V',
  );

  static final _setEGLContextFactory = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setEGLContextFactory(android.opengl.GLSurfaceView$EGLContextFactory eGLContextFactory)`
  void setEGLContextFactory(
    _$jni.JObject eGLContextFactory,
  ) {
    _setEGLContextFactory(
            reference.pointer,
            _id_setEGLContextFactory as _$jni.JMethodIDPtr,
            eGLContextFactory.reference.pointer)
        .check();
  }

  static final _id_setEGLWindowSurfaceFactory = _class.instanceMethodId(
    r'setEGLWindowSurfaceFactory',
    r'(Landroid/opengl/GLSurfaceView$EGLWindowSurfaceFactory;)V',
  );

  static final _setEGLWindowSurfaceFactory =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView$EGLWindowSurfaceFactory eGLWindowSurfaceFactory)`
  void setEGLWindowSurfaceFactory(
    _$jni.JObject eGLWindowSurfaceFactory,
  ) {
    _setEGLWindowSurfaceFactory(
            reference.pointer,
            _id_setEGLWindowSurfaceFactory as _$jni.JMethodIDPtr,
            eGLWindowSurfaceFactory.reference.pointer)
        .check();
  }

  static final _id_setEGLConfigChooser = _class.instanceMethodId(
    r'setEGLConfigChooser',
    r'(Landroid/opengl/GLSurfaceView$EGLConfigChooser;)V',
  );

  static final _setEGLConfigChooser = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser eGLConfigChooser)`
  void setEGLConfigChooser(
    _$jni.JObject eGLConfigChooser,
  ) {
    _setEGLConfigChooser(
            reference.pointer,
            _id_setEGLConfigChooser as _$jni.JMethodIDPtr,
            eGLConfigChooser.reference.pointer)
        .check();
  }
}

final class $MapLibreGLSurfaceView$Type
    extends _$jni.JObjType<MapLibreGLSurfaceView> {
  @_$jni.internal
  const $MapLibreGLSurfaceView$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/maps/renderer/surfaceview/MapLibreGLSurfaceView;';

  @_$jni.internal
  @_$core.override
  MapLibreGLSurfaceView fromReference(_$jni.JReference reference) =>
      MapLibreGLSurfaceView.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType =>
      const maplibresurfaceview_.$MapLibreSurfaceView$Type();

  @_$jni.internal
  @_$core.override
  final superCount = 2;

  @_$core.override
  int get hashCode => ($MapLibreGLSurfaceView$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapLibreGLSurfaceView$Type) &&
        other is $MapLibreGLSurfaceView$Type;
  }
}
