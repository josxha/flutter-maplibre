// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `org.maplibre.android.maps.Image`
class Image extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Image> $type;

  @_$jni.internal
  Image.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/maps/Image');

  /// The type which includes information such as the signature of this class.
  static const type = $Image$Type();
  static final _id_new$ = _class.constructorId(
    r'([BFLjava/lang/String;IIZ)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Double,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              double,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int)>();

  /// from: `public void <init>(byte[] bs, float f, java.lang.String string, int i, int i1, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Image(
    _$jni.JArray<_$jni.jbyte> bs,
    double f,
    _$jni.JString string,
    int i,
    int i1,
    bool z,
  ) {
    return Image.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            bs.reference.pointer,
            f,
            string.reference.pointer,
            i,
            i1,
            z ? 1 : 0)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'([BFLjava/lang/String;IIZ[F[F[F)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Double,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              double,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(byte[] bs, float f, java.lang.String string, int i, int i1, boolean z, float[] fs, float[] fs1, float[] fs2)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Image.new$1(
    _$jni.JArray<_$jni.jbyte> bs,
    double f,
    _$jni.JString string,
    int i,
    int i1,
    bool z,
    _$jni.JArray<_$jni.jfloat> fs,
    _$jni.JArray<_$jni.jfloat> fs1,
    _$jni.JArray<_$jni.jfloat> fs2,
  ) {
    return Image.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as _$jni.JMethodIDPtr,
            bs.reference.pointer,
            f,
            string.reference.pointer,
            i,
            i1,
            z ? 1 : 0,
            fs.reference.pointer,
            fs1.reference.pointer,
            fs2.reference.pointer)
        .reference);
  }
}

final class $Image$Type extends _$jni.JObjType<Image> {
  @_$jni.internal
  const $Image$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/maps/Image;';

  @_$jni.internal
  @_$core.override
  Image fromReference(_$jni.JReference reference) =>
      Image.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($Image$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Image$Type) && other is $Image$Type;
  }
}
