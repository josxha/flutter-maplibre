// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../../../geojson/Feature.dart' as feature_;

import '../../geometry/LatLngBounds.dart' as latlngbounds_;

import 'CustomGeometrySourceOptions.dart' as customgeometrysourceoptions_;

import 'GeometryTileProvider.dart' as geometrytileprovider_;

import 'Source.dart' as source_;

/// from: `org.maplibre.android.style.sources.CustomGeometrySource$Companion`
class CustomGeometrySource_Companion extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CustomGeometrySource_Companion> $type;

  @_$jni.internal
  CustomGeometrySource_Companion.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/style/sources/CustomGeometrySource$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $CustomGeometrySource_Companion$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CustomGeometrySource_Companion(
    _$jni.JObject defaultConstructorMarker,
  ) {
    return CustomGeometrySource_Companion.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $CustomGeometrySource_Companion$Type
    extends _$jni.JObjType<CustomGeometrySource_Companion> {
  @_$jni.internal
  const $CustomGeometrySource_Companion$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/style/sources/CustomGeometrySource$Companion;';

  @_$jni.internal
  @_$core.override
  CustomGeometrySource_Companion fromReference(_$jni.JReference reference) =>
      CustomGeometrySource_Companion.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CustomGeometrySource_Companion$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomGeometrySource_Companion$Type) &&
        other is $CustomGeometrySource_Companion$Type;
  }
}

/// from: `org.maplibre.android.style.sources.CustomGeometrySource$GeometryTileRequest`
class CustomGeometrySource_GeometryTileRequest extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CustomGeometrySource_GeometryTileRequest> $type;

  @_$jni.internal
  CustomGeometrySource_GeometryTileRequest.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/style/sources/CustomGeometrySource$GeometryTileRequest');

  /// The type which includes information such as the signature of this class.
  static const type = $CustomGeometrySource_GeometryTileRequest$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lorg/maplibre/android/style/sources/CustomGeometrySource$TileID;Lorg/maplibre/android/style/sources/GeometryTileProvider;Ljava/util/Map;Ljava/util/Map;Lorg/maplibre/android/style/sources/CustomGeometrySource;Ljava/util/concurrent/atomic/AtomicBoolean;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(org.maplibre.android.style.sources.CustomGeometrySource$TileID tileID, org.maplibre.android.style.sources.GeometryTileProvider geometryTileProvider, java.util.Map map, java.util.Map map1, org.maplibre.android.style.sources.CustomGeometrySource customGeometrySource, java.util.concurrent.atomic.AtomicBoolean atomicBoolean)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CustomGeometrySource_GeometryTileRequest(
    CustomGeometrySource_TileID tileID,
    geometrytileprovider_.GeometryTileProvider geometryTileProvider,
    _$jni.JMap<CustomGeometrySource_TileID,
            CustomGeometrySource_GeometryTileRequest>
        map,
    _$jni.JMap<CustomGeometrySource_TileID, _$jni.JObject> map1,
    CustomGeometrySource customGeometrySource,
    _$jni.JObject atomicBoolean,
  ) {
    return CustomGeometrySource_GeometryTileRequest.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            tileID.reference.pointer,
            geometryTileProvider.reference.pointer,
            map.reference.pointer,
            map1.reference.pointer,
            customGeometrySource.reference.pointer,
            atomicBoolean.reference.pointer)
        .reference);
  }

  static final _id_run = _class.instanceMethodId(
    r'run',
    r'()V',
  );

  static final _run = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void run()`
  void run() {
    _run(reference.pointer, _id_run as _$jni.JMethodIDPtr).check();
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    _$jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as _$jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }
}

final class $CustomGeometrySource_GeometryTileRequest$Type
    extends _$jni.JObjType<CustomGeometrySource_GeometryTileRequest> {
  @_$jni.internal
  const $CustomGeometrySource_GeometryTileRequest$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/style/sources/CustomGeometrySource$GeometryTileRequest;';

  @_$jni.internal
  @_$core.override
  CustomGeometrySource_GeometryTileRequest fromReference(
          _$jni.JReference reference) =>
      CustomGeometrySource_GeometryTileRequest.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CustomGeometrySource_GeometryTileRequest$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CustomGeometrySource_GeometryTileRequest$Type) &&
        other is $CustomGeometrySource_GeometryTileRequest$Type;
  }
}

/// from: `org.maplibre.android.style.sources.CustomGeometrySource$TileID`
class CustomGeometrySource_TileID extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CustomGeometrySource_TileID> $type;

  @_$jni.internal
  CustomGeometrySource_TileID.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/style/sources/CustomGeometrySource$TileID');

  /// The type which includes information such as the signature of this class.
  static const type = $CustomGeometrySource_TileID$Type();
  static final _id_new$ = _class.constructorId(
    r'(III)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int, int)>();

  /// from: `public void <init>(int i, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CustomGeometrySource_TileID(
    int i,
    int i1,
    int i2,
  ) {
    return CustomGeometrySource_TileID.fromReference(_new$(
            _class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr, i, i1, i2)
        .reference);
  }

  static final _id_getZ = _class.instanceMethodId(
    r'getZ',
    r'()I',
  );

  static final _getZ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final int getZ()`
  int getZ() {
    return _getZ(reference.pointer, _id_getZ as _$jni.JMethodIDPtr).integer;
  }

  static final _id_setZ = _class.instanceMethodId(
    r'setZ',
    r'(I)V',
  );

  static final _setZ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public final void setZ(int i)`
  void setZ(
    int i,
  ) {
    _setZ(reference.pointer, _id_setZ as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_getX = _class.instanceMethodId(
    r'getX',
    r'()I',
  );

  static final _getX = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final int getX()`
  int getX() {
    return _getX(reference.pointer, _id_getX as _$jni.JMethodIDPtr).integer;
  }

  static final _id_setX = _class.instanceMethodId(
    r'setX',
    r'(I)V',
  );

  static final _setX = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public final void setX(int i)`
  void setX(
    int i,
  ) {
    _setX(reference.pointer, _id_setX as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_getY = _class.instanceMethodId(
    r'getY',
    r'()I',
  );

  static final _getY = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final int getY()`
  int getY() {
    return _getY(reference.pointer, _id_getY as _$jni.JMethodIDPtr).integer;
  }

  static final _id_setY = _class.instanceMethodId(
    r'setY',
    r'(I)V',
  );

  static final _setY = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public final void setY(int i)`
  void setY(
    int i,
  ) {
    _setY(reference.pointer, _id_setY as _$jni.JMethodIDPtr, i).check();
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    _$jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as _$jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }
}

final class $CustomGeometrySource_TileID$Type
    extends _$jni.JObjType<CustomGeometrySource_TileID> {
  @_$jni.internal
  const $CustomGeometrySource_TileID$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/style/sources/CustomGeometrySource$TileID;';

  @_$jni.internal
  @_$core.override
  CustomGeometrySource_TileID fromReference(_$jni.JReference reference) =>
      CustomGeometrySource_TileID.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CustomGeometrySource_TileID$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomGeometrySource_TileID$Type) &&
        other is $CustomGeometrySource_TileID$Type;
  }
}

/// from: `org.maplibre.android.style.sources.CustomGeometrySource`
class CustomGeometrySource extends source_.Source {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CustomGeometrySource> $type;

  @_$jni.internal
  CustomGeometrySource.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/style/sources/CustomGeometrySource');

  /// The type which includes information such as the signature of this class.
  static const type = $CustomGeometrySource$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lorg/maplibre/android/style/sources/CustomGeometrySource$Companion;',
  );

  /// from: `static public final org.maplibre.android.style.sources.CustomGeometrySource$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static CustomGeometrySource_Companion get Companion =>
      _id_Companion.get(_class, const $CustomGeometrySource_Companion$Type());

  static final _id_THREAD_PREFIX = _class.staticFieldId(
    r'THREAD_PREFIX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String THREAD_PREFIX`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get THREAD_PREFIX =>
      _id_THREAD_PREFIX.get(_class, const _$jni.JStringType());

  /// from: `static public final int THREAD_POOL_LIMIT`
  static const THREAD_POOL_LIMIT = 4;
  static final _id_new$ = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/android/style/sources/CustomGeometrySourceOptions;Lorg/maplibre/android/style/sources/GeometryTileProvider;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.android.style.sources.CustomGeometrySourceOptions customGeometrySourceOptions, org.maplibre.android.style.sources.GeometryTileProvider geometryTileProvider)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CustomGeometrySource(
    _$jni.JString string,
    customgeometrysourceoptions_.CustomGeometrySourceOptions
        customGeometrySourceOptions,
    geometrytileprovider_.GeometryTileProvider geometryTileProvider,
  ) {
    return CustomGeometrySource.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            string.reference.pointer,
            customGeometrySourceOptions.reference.pointer,
            geometryTileProvider.reference.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/lang/String;Lorg/maplibre/android/style/sources/GeometryTileProvider;)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(java.lang.String string, org.maplibre.android.style.sources.GeometryTileProvider geometryTileProvider)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CustomGeometrySource.new$1(
    _$jni.JString string,
    geometrytileprovider_.GeometryTileProvider geometryTileProvider,
  ) {
    return CustomGeometrySource.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            geometryTileProvider.reference.pointer)
        .reference);
  }

  static final _id_invalidateRegion = _class.instanceMethodId(
    r'invalidateRegion',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;)V',
  );

  static final _invalidateRegion = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void invalidateRegion(org.maplibre.android.geometry.LatLngBounds latLngBounds)`
  void invalidateRegion(
    latlngbounds_.LatLngBounds latLngBounds,
  ) {
    _invalidateRegion(
            reference.pointer,
            _id_invalidateRegion as _$jni.JMethodIDPtr,
            latLngBounds.reference.pointer)
        .check();
  }

  static final _id_invalidateTile = _class.instanceMethodId(
    r'invalidateTile',
    r'(III)V',
  );

  static final _invalidateTile = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int, int)>();

  /// from: `public final void invalidateTile(int i, int i1, int i2)`
  void invalidateTile(
    int i,
    int i1,
    int i2,
  ) {
    _invalidateTile(reference.pointer, _id_invalidateTile as _$jni.JMethodIDPtr,
            i, i1, i2)
        .check();
  }

  static final _id_setTileData = _class.instanceMethodId(
    r'setTileData',
    r'(IIILorg/maplibre/geojson/FeatureCollection;)V',
  );

  static final _setTileData = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, int, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void setTileData(int i, int i1, int i2, org.maplibre.geojson.FeatureCollection featureCollection)`
  void setTileData(
    int i,
    int i1,
    int i2,
    _$jni.JObject featureCollection,
  ) {
    _setTileData(reference.pointer, _id_setTileData as _$jni.JMethodIDPtr, i,
            i1, i2, featureCollection.reference.pointer)
        .check();
  }

  static final _id_querySourceFeatures = _class.instanceMethodId(
    r'querySourceFeatures',
    r'(Lorg/maplibre/android/style/expressions/Expression;)Ljava/util/List;',
  );

  static final _querySourceFeatures = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final java.util.List querySourceFeatures(org.maplibre.android.style.expressions.Expression expression)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<feature_.Feature> querySourceFeatures(
    _$jni.JObject expression,
  ) {
    return _querySourceFeatures(
            reference.pointer,
            _id_querySourceFeatures as _$jni.JMethodIDPtr,
            expression.reference.pointer)
        .object(const _$jni.JListType(feature_.$Feature$Type()));
  }
}

final class $CustomGeometrySource$Type
    extends _$jni.JObjType<CustomGeometrySource> {
  @_$jni.internal
  const $CustomGeometrySource$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/style/sources/CustomGeometrySource;';

  @_$jni.internal
  @_$core.override
  CustomGeometrySource fromReference(_$jni.JReference reference) =>
      CustomGeometrySource.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const source_.$Source$Type();

  @_$jni.internal
  @_$core.override
  final superCount = 2;

  @_$core.override
  int get hashCode => ($CustomGeometrySource$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CustomGeometrySource$Type) &&
        other is $CustomGeometrySource$Type;
  }
}
