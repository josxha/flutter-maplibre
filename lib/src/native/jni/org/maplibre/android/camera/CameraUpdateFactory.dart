// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../geometry/LatLng.dart' as latlng_;

import '../geometry/LatLngBounds.dart' as latlngbounds_;

import '../maps/MapLibreMap.dart' as maplibremap_;

import 'CameraPosition.dart' as cameraposition_;

import 'CameraUpdate.dart' as cameraupdate_;

/// from: `org.maplibre.android.camera.CameraUpdateFactory$CameraBoundsUpdate`
class CameraUpdateFactory_CameraBoundsUpdate extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CameraUpdateFactory_CameraBoundsUpdate> $type;

  @_$jni.internal
  CameraUpdateFactory_CameraBoundsUpdate.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/camera/CameraUpdateFactory$CameraBoundsUpdate');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraUpdateFactory_CameraBoundsUpdate$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lorg/maplibre/android/geometry/LatLngBounds;Ljava/lang/Double;Ljava/lang/Double;[I)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(org.maplibre.android.geometry.LatLngBounds latLngBounds, java.lang.Double double, java.lang.Double double1, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory_CameraBoundsUpdate(
    latlngbounds_.LatLngBounds latLngBounds,
    _$jni.JDouble double,
    _$jni.JDouble double1,
    _$jni.JArray<_$jni.jint> is$,
  ) {
    return CameraUpdateFactory_CameraBoundsUpdate.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            latLngBounds.reference.pointer,
            double.reference.pointer,
            double1.reference.pointer,
            is$.reference.pointer)
        .reference);
  }

  static final _id_getBounds = _class.instanceMethodId(
    r'getBounds',
    r'()Lorg/maplibre/android/geometry/LatLngBounds;',
  );

  static final _getBounds = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.geometry.LatLngBounds getBounds()`
  /// The returned object must be released after use, by calling the [release] method.
  latlngbounds_.LatLngBounds getBounds() {
    return _getBounds(reference.pointer, _id_getBounds as _$jni.JMethodIDPtr)
        .object(const latlngbounds_.$LatLngBounds$Type());
  }

  static final _id_getPadding = _class.instanceMethodId(
    r'getPadding',
    r'()[I',
  );

  static final _getPadding = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final int[] getPadding()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.jint> getPadding() {
    return _getPadding(reference.pointer, _id_getPadding as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType(_$jni.jintType()));
  }

  static final _id_new$1 = _class.constructorId(
    r'(Lorg/maplibre/android/geometry/LatLngBounds;Ljava/lang/Double;Ljava/lang/Double;IIII)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int)>();

  /// from: `public void <init>(org.maplibre.android.geometry.LatLngBounds latLngBounds, java.lang.Double double, java.lang.Double double1, int i, int i1, int i2, int i3)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory_CameraBoundsUpdate.new$1(
    latlngbounds_.LatLngBounds latLngBounds,
    _$jni.JDouble double,
    _$jni.JDouble double1,
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return CameraUpdateFactory_CameraBoundsUpdate.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as _$jni.JMethodIDPtr,
            latLngBounds.reference.pointer,
            double.reference.pointer,
            double1.reference.pointer,
            i,
            i1,
            i2,
            i3)
        .reference);
  }

  static final _id_getCameraPosition = _class.instanceMethodId(
    r'getCameraPosition',
    r'(Lorg/maplibre/android/maps/MapLibreMap;)Lorg/maplibre/android/camera/CameraPosition;',
  );

  static final _getCameraPosition = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.camera.CameraPosition getCameraPosition(org.maplibre.android.maps.MapLibreMap mapLibreMap)`
  /// The returned object must be released after use, by calling the [release] method.
  cameraposition_.CameraPosition getCameraPosition(
    maplibremap_.MapLibreMap mapLibreMap,
  ) {
    return _getCameraPosition(
            reference.pointer,
            _id_getCameraPosition as _$jni.JMethodIDPtr,
            mapLibreMap.reference.pointer)
        .object(const cameraposition_.$CameraPosition$Type());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    _$jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as _$jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }
}

final class $CameraUpdateFactory_CameraBoundsUpdate$Type
    extends _$jni.JObjType<CameraUpdateFactory_CameraBoundsUpdate> {
  @_$jni.internal
  const $CameraUpdateFactory_CameraBoundsUpdate$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$CameraBoundsUpdate;';

  @_$jni.internal
  @_$core.override
  CameraUpdateFactory_CameraBoundsUpdate fromReference(
          _$jni.JReference reference) =>
      CameraUpdateFactory_CameraBoundsUpdate.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CameraUpdateFactory_CameraBoundsUpdate$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CameraUpdateFactory_CameraBoundsUpdate$Type) &&
        other is $CameraUpdateFactory_CameraBoundsUpdate$Type;
  }
}

/// from: `org.maplibre.android.camera.CameraUpdateFactory$CameraPositionUpdate`
class CameraUpdateFactory_CameraPositionUpdate extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CameraUpdateFactory_CameraPositionUpdate> $type;

  @_$jni.internal
  CameraUpdateFactory_CameraPositionUpdate.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/camera/CameraUpdateFactory$CameraPositionUpdate');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraUpdateFactory_CameraPositionUpdate$Type();
  static final _id_new$ = _class.constructorId(
    r'(DLorg/maplibre/android/geometry/LatLng;DD[D)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Double,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Double,
                        _$jni.Double,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              double,
              _$jni.Pointer<_$jni.Void>,
              double,
              double,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(double d, org.maplibre.android.geometry.LatLng latLng, double d1, double d2, double[] ds)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory_CameraPositionUpdate(
    double d,
    latlng_.LatLng latLng,
    double d1,
    double d2,
    _$jni.JArray<_$jni.jdouble> ds,
  ) {
    return CameraUpdateFactory_CameraPositionUpdate.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            d,
            latLng.reference.pointer,
            d1,
            d2,
            ds.reference.pointer)
        .reference);
  }

  static final _id_getBearing = _class.instanceMethodId(
    r'getBearing',
    r'()D',
  );

  static final _getBearing = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final double getBearing()`
  double getBearing() {
    return _getBearing(reference.pointer, _id_getBearing as _$jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getTarget = _class.instanceMethodId(
    r'getTarget',
    r'()Lorg/maplibre/android/geometry/LatLng;',
  );

  static final _getTarget = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final org.maplibre.android.geometry.LatLng getTarget()`
  /// The returned object must be released after use, by calling the [release] method.
  latlng_.LatLng getTarget() {
    return _getTarget(reference.pointer, _id_getTarget as _$jni.JMethodIDPtr)
        .object(const latlng_.$LatLng$Type());
  }

  static final _id_getTilt = _class.instanceMethodId(
    r'getTilt',
    r'()D',
  );

  static final _getTilt = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final double getTilt()`
  double getTilt() {
    return _getTilt(reference.pointer, _id_getTilt as _$jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getZoom = _class.instanceMethodId(
    r'getZoom',
    r'()D',
  );

  static final _getZoom = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final double getZoom()`
  double getZoom() {
    return _getZoom(reference.pointer, _id_getZoom as _$jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getPadding = _class.instanceMethodId(
    r'getPadding',
    r'()[D',
  );

  static final _getPadding = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final double[] getPadding()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.jdouble> getPadding() {
    return _getPadding(reference.pointer, _id_getPadding as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType(_$jni.jdoubleType()));
  }

  static final _id_getCameraPosition = _class.instanceMethodId(
    r'getCameraPosition',
    r'(Lorg/maplibre/android/maps/MapLibreMap;)Lorg/maplibre/android/camera/CameraPosition;',
  );

  static final _getCameraPosition = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.camera.CameraPosition getCameraPosition(org.maplibre.android.maps.MapLibreMap mapLibreMap)`
  /// The returned object must be released after use, by calling the [release] method.
  cameraposition_.CameraPosition getCameraPosition(
    maplibremap_.MapLibreMap mapLibreMap,
  ) {
    return _getCameraPosition(
            reference.pointer,
            _id_getCameraPosition as _$jni.JMethodIDPtr,
            mapLibreMap.reference.pointer)
        .object(const cameraposition_.$CameraPosition$Type());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    _$jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as _$jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }
}

final class $CameraUpdateFactory_CameraPositionUpdate$Type
    extends _$jni.JObjType<CameraUpdateFactory_CameraPositionUpdate> {
  @_$jni.internal
  const $CameraUpdateFactory_CameraPositionUpdate$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$CameraPositionUpdate;';

  @_$jni.internal
  @_$core.override
  CameraUpdateFactory_CameraPositionUpdate fromReference(
          _$jni.JReference reference) =>
      CameraUpdateFactory_CameraPositionUpdate.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CameraUpdateFactory_CameraPositionUpdate$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CameraUpdateFactory_CameraPositionUpdate$Type) &&
        other is $CameraUpdateFactory_CameraPositionUpdate$Type;
  }
}

/// from: `org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate$Companion`
class CameraUpdateFactory_ZoomUpdate_Companion extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CameraUpdateFactory_ZoomUpdate_Companion> $type;

  @_$jni.internal
  CameraUpdateFactory_ZoomUpdate_Companion.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraUpdateFactory_ZoomUpdate_Companion$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory_ZoomUpdate_Companion(
    _$jni.JObject defaultConstructorMarker,
  ) {
    return CameraUpdateFactory_ZoomUpdate_Companion.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $CameraUpdateFactory_ZoomUpdate_Companion$Type
    extends _$jni.JObjType<CameraUpdateFactory_ZoomUpdate_Companion> {
  @_$jni.internal
  const $CameraUpdateFactory_ZoomUpdate_Companion$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Companion;';

  @_$jni.internal
  @_$core.override
  CameraUpdateFactory_ZoomUpdate_Companion fromReference(
          _$jni.JReference reference) =>
      CameraUpdateFactory_ZoomUpdate_Companion.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CameraUpdateFactory_ZoomUpdate_Companion$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($CameraUpdateFactory_ZoomUpdate_Companion$Type) &&
        other is $CameraUpdateFactory_ZoomUpdate_Companion$Type;
  }
}

/// from: `org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate$Type`
class CameraUpdateFactory_ZoomUpdate_Type extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CameraUpdateFactory_ZoomUpdate_Type> $type;

  @_$jni.internal
  CameraUpdateFactory_ZoomUpdate_Type.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Type');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraUpdateFactory_ZoomUpdate_Type$Type();

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $CameraUpdateFactory_ZoomUpdate_Type> _$impls =
      {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $CameraUpdateFactory_ZoomUpdate_Type $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate$Type',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory CameraUpdateFactory_ZoomUpdate_Type.implement(
    $CameraUpdateFactory_ZoomUpdate_Type $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return CameraUpdateFactory_ZoomUpdate_Type.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $CameraUpdateFactory_ZoomUpdate_Type {
  factory $CameraUpdateFactory_ZoomUpdate_Type() =
      _$CameraUpdateFactory_ZoomUpdate_Type;
}

final class _$CameraUpdateFactory_ZoomUpdate_Type
    with $CameraUpdateFactory_ZoomUpdate_Type {
  _$CameraUpdateFactory_ZoomUpdate_Type();
}

final class $CameraUpdateFactory_ZoomUpdate_Type$Type
    extends _$jni.JObjType<CameraUpdateFactory_ZoomUpdate_Type> {
  @_$jni.internal
  const $CameraUpdateFactory_ZoomUpdate_Type$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Type;';

  @_$jni.internal
  @_$core.override
  CameraUpdateFactory_ZoomUpdate_Type fromReference(
          _$jni.JReference reference) =>
      CameraUpdateFactory_ZoomUpdate_Type.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CameraUpdateFactory_ZoomUpdate_Type$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraUpdateFactory_ZoomUpdate_Type$Type) &&
        other is $CameraUpdateFactory_ZoomUpdate_Type$Type;
  }
}

/// from: `org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate`
class CameraUpdateFactory_ZoomUpdate extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CameraUpdateFactory_ZoomUpdate> $type;

  @_$jni.internal
  CameraUpdateFactory_ZoomUpdate.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'org/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraUpdateFactory_ZoomUpdate$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate$Companion;',
  );

  /// from: `static public final org.maplibre.android.camera.CameraUpdateFactory$ZoomUpdate$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraUpdateFactory_ZoomUpdate_Companion get Companion => _id_Companion
      .get(_class, const $CameraUpdateFactory_ZoomUpdate_Companion$Type());

  /// from: `static public final int ZOOM_IN`
  static const ZOOM_IN = 0;

  /// from: `static public final int ZOOM_OUT`
  static const ZOOM_OUT = 1;

  /// from: `static public final int ZOOM_BY`
  static const ZOOM_BY = 2;

  /// from: `static public final int ZOOM_TO`
  static const ZOOM_TO = 3;

  /// from: `static public final int ZOOM_TO_POINT`
  static const ZOOM_TO_POINT = 4;
  static final _id_getType = _class.instanceMethodId(
    r'getType',
    r'()I',
  );

  static final _getType = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final int getType()`
  int getType() {
    return _getType(reference.pointer, _id_getType as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getZoom = _class.instanceMethodId(
    r'getZoom',
    r'()D',
  );

  static final _getZoom = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final double getZoom()`
  double getZoom() {
    return _getZoom(reference.pointer, _id_getZoom as _$jni.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getX = _class.instanceMethodId(
    r'getX',
    r'()F',
  );

  static final _getX = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final float getX()`
  double getX() {
    return _getX(reference.pointer, _id_getX as _$jni.JMethodIDPtr).float;
  }

  static final _id_getY = _class.instanceMethodId(
    r'getY',
    r'()F',
  );

  static final _getY = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public final float getY()`
  double getY() {
    return _getY(reference.pointer, _id_getY as _$jni.JMethodIDPtr).float;
  }

  static final _id_new$ = _class.constructorId(
    r'(I)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void <init>(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory_ZoomUpdate(
    int i,
  ) {
    return CameraUpdateFactory_ZoomUpdate.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr, i)
            .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(ID)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Double)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, double)>();

  /// from: `public void <init>(int i, double d)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory_ZoomUpdate.new$1(
    int i,
    double d,
  ) {
    return CameraUpdateFactory_ZoomUpdate.fromReference(
        _new$1(_class.reference.pointer, _id_new$1 as _$jni.JMethodIDPtr, i, d)
            .reference);
  }

  static final _id_new$2 = _class.constructorId(
    r'(DFF)V',
  );

  static final _new$2 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Double,
                        _$jni.Double,
                        _$jni.Double
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, double, double, double)>();

  /// from: `public void <init>(double d, float f, float f1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory CameraUpdateFactory_ZoomUpdate.new$2(
    double d,
    double f,
    double f1,
  ) {
    return CameraUpdateFactory_ZoomUpdate.fromReference(_new$2(
            _class.reference.pointer, _id_new$2 as _$jni.JMethodIDPtr, d, f, f1)
        .reference);
  }

  static final _id_getCameraPosition = _class.instanceMethodId(
    r'getCameraPosition',
    r'(Lorg/maplibre/android/maps/MapLibreMap;)Lorg/maplibre/android/camera/CameraPosition;',
  );

  static final _getCameraPosition = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public org.maplibre.android.camera.CameraPosition getCameraPosition(org.maplibre.android.maps.MapLibreMap mapLibreMap)`
  /// The returned object must be released after use, by calling the [release] method.
  cameraposition_.CameraPosition getCameraPosition(
    maplibremap_.MapLibreMap mapLibreMap,
  ) {
    return _getCameraPosition(
            reference.pointer,
            _id_getCameraPosition as _$jni.JMethodIDPtr,
            mapLibreMap.reference.pointer)
        .object(const cameraposition_.$CameraPosition$Type());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    _$jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as _$jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }
}

final class $CameraUpdateFactory_ZoomUpdate$Type
    extends _$jni.JObjType<CameraUpdateFactory_ZoomUpdate> {
  @_$jni.internal
  const $CameraUpdateFactory_ZoomUpdate$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lorg/maplibre/android/camera/CameraUpdateFactory$ZoomUpdate;';

  @_$jni.internal
  @_$core.override
  CameraUpdateFactory_ZoomUpdate fromReference(_$jni.JReference reference) =>
      CameraUpdateFactory_ZoomUpdate.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CameraUpdateFactory_ZoomUpdate$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraUpdateFactory_ZoomUpdate$Type) &&
        other is $CameraUpdateFactory_ZoomUpdate$Type;
  }
}

/// from: `org.maplibre.android.camera.CameraUpdateFactory`
class CameraUpdateFactory extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CameraUpdateFactory> $type;

  @_$jni.internal
  CameraUpdateFactory.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'org/maplibre/android/camera/CameraUpdateFactory');

  /// The type which includes information such as the signature of this class.
  static const type = $CameraUpdateFactory$Type();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Lorg/maplibre/android/camera/CameraUpdateFactory;',
  );

  /// from: `static public final org.maplibre.android.camera.CameraUpdateFactory INSTANCE`
  /// The returned object must be released after use, by calling the [release] method.
  static CameraUpdateFactory get INSTANCE =>
      _id_INSTANCE.get(_class, const $CameraUpdateFactory$Type());

  static final _id_newCameraPosition = _class.staticMethodId(
    r'newCameraPosition',
    r'(Lorg/maplibre/android/camera/CameraPosition;)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newCameraPosition = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newCameraPosition(org.maplibre.android.camera.CameraPosition cameraPosition)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate newCameraPosition(
    cameraposition_.CameraPosition cameraPosition,
  ) {
    return _newCameraPosition(
            _class.reference.pointer,
            _id_newCameraPosition as _$jni.JMethodIDPtr,
            cameraPosition.reference.pointer)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }

  static final _id_newLatLng = _class.staticMethodId(
    r'newLatLng',
    r'(Lorg/maplibre/android/geometry/LatLng;)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLng = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLng(org.maplibre.android.geometry.LatLng latLng)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate newLatLng(
    latlng_.LatLng latLng,
  ) {
    return _newLatLng(_class.reference.pointer,
            _id_newLatLng as _$jni.JMethodIDPtr, latLng.reference.pointer)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }

  static final _id_newLatLngBounds = _class.staticMethodId(
    r'newLatLngBounds',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;I)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngBounds = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngBounds(org.maplibre.android.geometry.LatLngBounds latLngBounds, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate newLatLngBounds(
    latlngbounds_.LatLngBounds latLngBounds,
    int i,
  ) {
    return _newLatLngBounds(
            _class.reference.pointer,
            _id_newLatLngBounds as _$jni.JMethodIDPtr,
            latLngBounds.reference.pointer,
            i)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }

  static final _id_newLatLngBounds$1 = _class.staticMethodId(
    r'newLatLngBounds',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;DDI)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngBounds$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Double,
                        _$jni.Double,
                        _$jni.Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              double,
              double,
              int)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngBounds(org.maplibre.android.geometry.LatLngBounds latLngBounds, double d, double d1, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate newLatLngBounds$1(
    latlngbounds_.LatLngBounds latLngBounds,
    double d,
    double d1,
    int i,
  ) {
    return _newLatLngBounds$1(
            _class.reference.pointer,
            _id_newLatLngBounds$1 as _$jni.JMethodIDPtr,
            latLngBounds.reference.pointer,
            d,
            d1,
            i)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }

  static final _id_newLatLngBounds$2 = _class.staticMethodId(
    r'newLatLngBounds',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;IIII)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngBounds$2 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngBounds(org.maplibre.android.geometry.LatLngBounds latLngBounds, int i, int i1, int i2, int i3)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate newLatLngBounds$2(
    latlngbounds_.LatLngBounds latLngBounds,
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return _newLatLngBounds$2(
            _class.reference.pointer,
            _id_newLatLngBounds$2 as _$jni.JMethodIDPtr,
            latLngBounds.reference.pointer,
            i,
            i1,
            i2,
            i3)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }

  static final _id_newLatLngBounds$3 = _class.staticMethodId(
    r'newLatLngBounds',
    r'(Lorg/maplibre/android/geometry/LatLngBounds;DDIIII)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngBounds$3 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Double,
                        _$jni.Double,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              double,
              double,
              int,
              int,
              int,
              int)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngBounds(org.maplibre.android.geometry.LatLngBounds latLngBounds, double d, double d1, int i, int i1, int i2, int i3)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate newLatLngBounds$3(
    latlngbounds_.LatLngBounds latLngBounds,
    double d,
    double d1,
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return _newLatLngBounds$3(
            _class.reference.pointer,
            _id_newLatLngBounds$3 as _$jni.JMethodIDPtr,
            latLngBounds.reference.pointer,
            d,
            d1,
            i,
            i1,
            i2,
            i3)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }

  static final _id_newLatLngZoom = _class.staticMethodId(
    r'newLatLngZoom',
    r'(Lorg/maplibre/android/geometry/LatLng;D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngZoom = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Double
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngZoom(org.maplibre.android.geometry.LatLng latLng, double d)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate newLatLngZoom(
    latlng_.LatLng latLng,
    double d,
  ) {
    return _newLatLngZoom(
            _class.reference.pointer,
            _id_newLatLngZoom as _$jni.JMethodIDPtr,
            latLng.reference.pointer,
            d)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }

  static final _id_newLatLngPadding = _class.staticMethodId(
    r'newLatLngPadding',
    r'(Lorg/maplibre/android/geometry/LatLng;DDDD)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _newLatLngPadding = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Double,
                        _$jni.Double,
                        _$jni.Double,
                        _$jni.Double
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              double,
              double,
              double,
              double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate newLatLngPadding(org.maplibre.android.geometry.LatLng latLng, double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate newLatLngPadding(
    latlng_.LatLng latLng,
    double d,
    double d1,
    double d2,
    double d3,
  ) {
    return _newLatLngPadding(
            _class.reference.pointer,
            _id_newLatLngPadding as _$jni.JMethodIDPtr,
            latLng.reference.pointer,
            d,
            d1,
            d2,
            d3)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }

  static final _id_zoomBy = _class.staticMethodId(
    r'zoomBy',
    r'(DLandroid/graphics/Point;)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _zoomBy = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Double,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, double, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate zoomBy(double d, android.graphics.Point point)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate zoomBy(
    double d,
    _$jni.JObject point,
  ) {
    return _zoomBy(_class.reference.pointer, _id_zoomBy as _$jni.JMethodIDPtr,
            d, point.reference.pointer)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }

  static final _id_zoomBy$1 = _class.staticMethodId(
    r'zoomBy',
    r'(D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _zoomBy$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Double,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate zoomBy(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate zoomBy$1(
    double d,
  ) {
    return _zoomBy$1(
            _class.reference.pointer, _id_zoomBy$1 as _$jni.JMethodIDPtr, d)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }

  static final _id_zoomIn = _class.staticMethodId(
    r'zoomIn',
    r'()Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _zoomIn = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate zoomIn()`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate zoomIn() {
    return _zoomIn(_class.reference.pointer, _id_zoomIn as _$jni.JMethodIDPtr)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }

  static final _id_zoomOut = _class.staticMethodId(
    r'zoomOut',
    r'()Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _zoomOut = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate zoomOut()`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate zoomOut() {
    return _zoomOut(_class.reference.pointer, _id_zoomOut as _$jni.JMethodIDPtr)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }

  static final _id_zoomTo = _class.staticMethodId(
    r'zoomTo',
    r'(D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _zoomTo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Double,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate zoomTo(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate zoomTo(
    double d,
  ) {
    return _zoomTo(
            _class.reference.pointer, _id_zoomTo as _$jni.JMethodIDPtr, d)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }

  static final _id_bearingTo = _class.staticMethodId(
    r'bearingTo',
    r'(D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _bearingTo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Double,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate bearingTo(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate bearingTo(
    double d,
  ) {
    return _bearingTo(
            _class.reference.pointer, _id_bearingTo as _$jni.JMethodIDPtr, d)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }

  static final _id_tiltTo = _class.staticMethodId(
    r'tiltTo',
    r'(D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _tiltTo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Double,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate tiltTo(double d)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate tiltTo(
    double d,
  ) {
    return _tiltTo(
            _class.reference.pointer, _id_tiltTo as _$jni.JMethodIDPtr, d)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }

  static final _id_paddingTo = _class.staticMethodId(
    r'paddingTo',
    r'([D)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _paddingTo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate paddingTo(double[] ds)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate paddingTo(
    _$jni.JArray<_$jni.jdouble> ds,
  ) {
    return _paddingTo(_class.reference.pointer,
            _id_paddingTo as _$jni.JMethodIDPtr, ds.reference.pointer)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }

  static final _id_paddingTo$1 = _class.staticMethodId(
    r'paddingTo',
    r'(DDDD)Lorg/maplibre/android/camera/CameraUpdate;',
  );

  static final _paddingTo$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Double,
                        _$jni.Double,
                        _$jni.Double,
                        _$jni.Double
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, double, double, double, double)>();

  /// from: `static public final org.maplibre.android.camera.CameraUpdate paddingTo(double d, double d1, double d2, double d3)`
  /// The returned object must be released after use, by calling the [release] method.
  static cameraupdate_.CameraUpdate paddingTo$1(
    double d,
    double d1,
    double d2,
    double d3,
  ) {
    return _paddingTo$1(_class.reference.pointer,
            _id_paddingTo$1 as _$jni.JMethodIDPtr, d, d1, d2, d3)
        .object(const cameraupdate_.$CameraUpdate$Type());
  }
}

final class $CameraUpdateFactory$Type
    extends _$jni.JObjType<CameraUpdateFactory> {
  @_$jni.internal
  const $CameraUpdateFactory$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/camera/CameraUpdateFactory;';

  @_$jni.internal
  @_$core.override
  CameraUpdateFactory fromReference(_$jni.JReference reference) =>
      CameraUpdateFactory.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CameraUpdateFactory$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CameraUpdateFactory$Type) &&
        other is $CameraUpdateFactory$Type;
  }
}
