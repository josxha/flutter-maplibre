// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: avoid_field_initializers_in_const_classes
// ignore_for_file: avoid_equals_and_hash_code_on_mutable_classes
// ignore_for_file: sort_constructors_first
// ignore_for_file: avoid_positional_boolean_parameters
// ignore_for_file: sort_unnamed_constructors_first
// ignore_for_file: always_use_package_imports
// ignore_for_file: use_late_for_private_fields_and_variables
// ignore_for_file: one_member_abstracts
// ignore_for_file: always_put_required_named_parameters_first

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import 'util/DefaultStyle.dart' as defaultstyle_;

import 'util/TileServerOptions.dart' as tileserveroptions_;

/// from: `org.maplibre.android.MapLibre`
class MapLibre extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<MapLibre> $type;

  @_$jni.internal
  MapLibre.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'org/maplibre/android/MapLibre');

  /// The type which includes information such as the signature of this class.
  static const type = $MapLibre$Type();
  static final _id_getInstance = _class.staticMethodId(
    r'getInstance',
    r'(Landroid/content/Context;)Lorg/maplibre/android/MapLibre;',
  );

  static final _getInstance = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.MapLibre getInstance(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static MapLibre getInstance(
    _$jni.JObject context,
  ) {
    return _getInstance(_class.reference.pointer,
            _id_getInstance as _$jni.JMethodIDPtr, context.reference.pointer)
        .object(const $MapLibre$Type());
  }

  static final _id_getInstance$1 = _class.staticMethodId(
    r'getInstance',
    r'(Landroid/content/Context;Ljava/lang/String;Lorg/maplibre/android/WellKnownTileServer;)Lorg/maplibre/android/MapLibre;',
  );

  static final _getInstance$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.MapLibre getInstance(android.content.Context context, java.lang.String string, org.maplibre.android.WellKnownTileServer wellKnownTileServer)`
  /// The returned object must be released after use, by calling the [release] method.
  static MapLibre getInstance$1(
    _$jni.JObject context,
    _$jni.JString string,
    _$jni.JObject wellKnownTileServer,
  ) {
    return _getInstance$1(
            _class.reference.pointer,
            _id_getInstance$1 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer,
            wellKnownTileServer.reference.pointer)
        .object(const $MapLibre$Type());
  }

  static final _id_getApiKey = _class.staticMethodId(
    r'getApiKey',
    r'()Ljava/lang/String;',
  );

  static final _getApiKey = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public java.lang.String getApiKey()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString getApiKey() {
    return _getApiKey(
            _class.reference.pointer, _id_getApiKey as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_setApiKey = _class.staticMethodId(
    r'setApiKey',
    r'(Ljava/lang/String;)V',
  );

  static final _setApiKey = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void setApiKey(java.lang.String string)`
  static void setApiKey(
    _$jni.JString string,
  ) {
    _setApiKey(_class.reference.pointer, _id_setApiKey as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getTileServerOptions = _class.staticMethodId(
    r'getTileServerOptions',
    r'()Lorg/maplibre/android/util/TileServerOptions;',
  );

  static final _getTileServerOptions = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.util.TileServerOptions getTileServerOptions()`
  /// The returned object must be released after use, by calling the [release] method.
  static tileserveroptions_.TileServerOptions getTileServerOptions() {
    return _getTileServerOptions(_class.reference.pointer,
            _id_getTileServerOptions as _$jni.JMethodIDPtr)
        .object(const tileserveroptions_.$TileServerOptions$Type());
  }

  static final _id_getPredefinedStyles = _class.staticMethodId(
    r'getPredefinedStyles',
    r'()[Lorg/maplibre/android/util/DefaultStyle;',
  );

  static final _getPredefinedStyles = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.util.DefaultStyle[] getPredefinedStyles()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<defaultstyle_.DefaultStyle> getPredefinedStyles() {
    return _getPredefinedStyles(_class.reference.pointer,
            _id_getPredefinedStyles as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType(defaultstyle_.$DefaultStyle$Type()));
  }

  static final _id_getPredefinedStyle = _class.staticMethodId(
    r'getPredefinedStyle',
    r'(Ljava/lang/String;)Lorg/maplibre/android/util/DefaultStyle;',
  );

  static final _getPredefinedStyle = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public org.maplibre.android.util.DefaultStyle getPredefinedStyle(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static defaultstyle_.DefaultStyle getPredefinedStyle(
    _$jni.JString string,
  ) {
    return _getPredefinedStyle(
            _class.reference.pointer,
            _id_getPredefinedStyle as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const defaultstyle_.$DefaultStyle$Type());
  }

  static final _id_getApplicationContext = _class.staticMethodId(
    r'getApplicationContext',
    r'()Landroid/content/Context;',
  );

  static final _getApplicationContext = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public android.content.Context getApplicationContext()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getApplicationContext() {
    return _getApplicationContext(_class.reference.pointer,
            _id_getApplicationContext as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setConnected = _class.staticMethodId(
    r'setConnected',
    r'(Ljava/lang/Boolean;)V',
  );

  static final _setConnected = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void setConnected(java.lang.Boolean boolean)`
  static void setConnected(
    _$jni.JBoolean boolean,
  ) {
    _setConnected(_class.reference.pointer,
            _id_setConnected as _$jni.JMethodIDPtr, boolean.reference.pointer)
        .check();
  }

  static final _id_isConnected = _class.staticMethodId(
    r'isConnected',
    r'()Ljava/lang/Boolean;',
  );

  static final _isConnected = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public java.lang.Boolean isConnected()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JBoolean isConnected() {
    return _isConnected(
            _class.reference.pointer, _id_isConnected as _$jni.JMethodIDPtr)
        .object(const _$jni.JBooleanType());
  }

  static final _id_getModuleProvider = _class.staticMethodId(
    r'getModuleProvider',
    r'()Lorg/maplibre/android/ModuleProvider;',
  );

  static final _getModuleProvider = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public org.maplibre.android.ModuleProvider getModuleProvider()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getModuleProvider() {
    return _getModuleProvider(_class.reference.pointer,
            _id_getModuleProvider as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setModuleProvider = _class.staticMethodId(
    r'setModuleProvider',
    r'(Lorg/maplibre/android/ModuleProvider;)V',
  );

  static final _setModuleProvider = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void setModuleProvider(org.maplibre.android.ModuleProvider moduleProvider)`
  static void setModuleProvider(
    _$jni.JObject moduleProvider,
  ) {
    _setModuleProvider(
            _class.reference.pointer,
            _id_setModuleProvider as _$jni.JMethodIDPtr,
            moduleProvider.reference.pointer)
        .check();
  }

  static final _id_throwIfApiKeyInvalid = _class.staticMethodId(
    r'throwIfApiKeyInvalid',
    r'(Ljava/lang/String;)V',
  );

  static final _throwIfApiKeyInvalid = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void throwIfApiKeyInvalid(java.lang.String string)`
  static void throwIfApiKeyInvalid(
    _$jni.JString string,
  ) {
    _throwIfApiKeyInvalid(
            _class.reference.pointer,
            _id_throwIfApiKeyInvalid as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_hasInstance = _class.staticMethodId(
    r'hasInstance',
    r'()Z',
  );

  static final _hasInstance = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public boolean hasInstance()`
  static bool hasInstance() {
    return _hasInstance(
            _class.reference.pointer, _id_hasInstance as _$jni.JMethodIDPtr)
        .boolean;
  }
}

final class $MapLibre$Type extends _$jni.JObjType<MapLibre> {
  @_$jni.internal
  const $MapLibre$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lorg/maplibre/android/MapLibre;';

  @_$jni.internal
  @_$core.override
  MapLibre fromReference(_$jni.JReference reference) =>
      MapLibre.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($MapLibre$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MapLibre$Type) && other is $MapLibre$Type;
  }
}
