// Autogenerated from Pigeon (v22.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "pigeon.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace pigeon_maplibre {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
  return FlutterError(
      "channel-error",
      "Unable to establish connection on channel: '" + channel_name + "'.",
      EncodableValue(""));
}

// LngLat

LngLat::LngLat(
  double lng,
  double lat)
 : lng_(lng),
    lat_(lat) {}

double LngLat::lng() const {
  return lng_;
}

void LngLat::set_lng(double value_arg) {
  lng_ = value_arg;
}


double LngLat::lat() const {
  return lat_;
}

void LngLat::set_lat(double value_arg) {
  lat_ = value_arg;
}


EncodableList LngLat::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(lng_));
  list.push_back(EncodableValue(lat_));
  return list;
}

LngLat LngLat::FromEncodableList(const EncodableList& list) {
  LngLat decoded(
    std::get<double>(list[0]),
    std::get<double>(list[1]));
  return decoded;
}

// ScreenLocation

ScreenLocation::ScreenLocation(
  double x,
  double y)
 : x_(x),
    y_(y) {}

double ScreenLocation::x() const {
  return x_;
}

void ScreenLocation::set_x(double value_arg) {
  x_ = value_arg;
}


double ScreenLocation::y() const {
  return y_;
}

void ScreenLocation::set_y(double value_arg) {
  y_ = value_arg;
}


EncodableList ScreenLocation::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(x_));
  list.push_back(EncodableValue(y_));
  return list;
}

ScreenLocation ScreenLocation::FromEncodableList(const EncodableList& list) {
  ScreenLocation decoded(
    std::get<double>(list[0]),
    std::get<double>(list[1]));
  return decoded;
}


PigeonInternalCodecSerializer::PigeonInternalCodecSerializer() {}

EncodableValue PigeonInternalCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 129: {
        return CustomEncodableValue(LngLat::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 130: {
        return CustomEncodableValue(ScreenLocation::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
    }
}

void PigeonInternalCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(LngLat)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<LngLat>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ScreenLocation)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<ScreenLocation>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by MapLibrePigeon.
const flutter::StandardMessageCodec& MapLibrePigeon::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonInternalCodecSerializer::GetInstance());
}

// Sets up an instance of `MapLibrePigeon` to handle messages through the `binary_messenger`.
void MapLibrePigeon::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  MapLibrePigeon* api) {
  MapLibrePigeon::SetUp(binary_messenger, api, "");
}

void MapLibrePigeon::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  MapLibrePigeon* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibrePigeon.jumpTo" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_center_arg = args.at(0);
          if (encodable_center_arg.IsNull()) {
            reply(WrapError("center_arg unexpectedly null."));
            return;
          }
          const auto& center_arg = std::any_cast<const LngLat&>(std::get<CustomEncodableValue>(encodable_center_arg));
          const auto& encodable_zoom_arg = args.at(1);
          const auto* zoom_arg = std::get_if<double>(&encodable_zoom_arg);
          const auto& encodable_bearing_arg = args.at(2);
          const auto* bearing_arg = std::get_if<double>(&encodable_bearing_arg);
          const auto& encodable_pitch_arg = args.at(3);
          const auto* pitch_arg = std::get_if<double>(&encodable_pitch_arg);
          api->JumpTo(center_arg, zoom_arg, bearing_arg, pitch_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibrePigeon.flyTo" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_center_arg = args.at(0);
          if (encodable_center_arg.IsNull()) {
            reply(WrapError("center_arg unexpectedly null."));
            return;
          }
          const auto& center_arg = std::any_cast<const LngLat&>(std::get<CustomEncodableValue>(encodable_center_arg));
          const auto& encodable_zoom_arg = args.at(1);
          const auto* zoom_arg = std::get_if<double>(&encodable_zoom_arg);
          const auto& encodable_bearing_arg = args.at(2);
          const auto* bearing_arg = std::get_if<double>(&encodable_bearing_arg);
          const auto& encodable_pitch_arg = args.at(3);
          const auto* pitch_arg = std::get_if<double>(&encodable_pitch_arg);
          api->FlyTo(center_arg, zoom_arg, bearing_arg, pitch_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibrePigeon.toScreenLocation" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_lng_arg = args.at(0);
          if (encodable_lng_arg.IsNull()) {
            reply(WrapError("lng_arg unexpectedly null."));
            return;
          }
          const auto& lng_arg = std::get<double>(encodable_lng_arg);
          const auto& encodable_lat_arg = args.at(1);
          if (encodable_lat_arg.IsNull()) {
            reply(WrapError("lat_arg unexpectedly null."));
            return;
          }
          const auto& lat_arg = std::get<double>(encodable_lat_arg);
          api->ToScreenLocation(lng_arg, lat_arg, [reply](ErrorOr<ScreenLocation>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibrePigeon.toLngLat" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_x_arg = args.at(0);
          if (encodable_x_arg.IsNull()) {
            reply(WrapError("x_arg unexpectedly null."));
            return;
          }
          const auto& x_arg = std::get<double>(encodable_x_arg);
          const auto& encodable_y_arg = args.at(1);
          if (encodable_y_arg.IsNull()) {
            reply(WrapError("y_arg unexpectedly null."));
            return;
          }
          const auto& y_arg = std::get<double>(encodable_y_arg);
          api->ToLngLat(x_arg, y_arg, [reply](ErrorOr<LngLat>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibrePigeon.addFillLayer" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_id_arg = args.at(0);
          if (encodable_id_arg.IsNull()) {
            reply(WrapError("id_arg unexpectedly null."));
            return;
          }
          const auto& id_arg = std::get<std::string>(encodable_id_arg);
          const auto& encodable_source_id_arg = args.at(1);
          if (encodable_source_id_arg.IsNull()) {
            reply(WrapError("source_id_arg unexpectedly null."));
            return;
          }
          const auto& source_id_arg = std::get<std::string>(encodable_source_id_arg);
          api->AddFillLayer(id_arg, source_id_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibrePigeon.addCircleLayer" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_id_arg = args.at(0);
          if (encodable_id_arg.IsNull()) {
            reply(WrapError("id_arg unexpectedly null."));
            return;
          }
          const auto& id_arg = std::get<std::string>(encodable_id_arg);
          const auto& encodable_source_id_arg = args.at(1);
          if (encodable_source_id_arg.IsNull()) {
            reply(WrapError("source_id_arg unexpectedly null."));
            return;
          }
          const auto& source_id_arg = std::get<std::string>(encodable_source_id_arg);
          api->AddCircleLayer(id_arg, source_id_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibrePigeon.addGeoJsonSource" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_id_arg = args.at(0);
          if (encodable_id_arg.IsNull()) {
            reply(WrapError("id_arg unexpectedly null."));
            return;
          }
          const auto& id_arg = std::get<std::string>(encodable_id_arg);
          const auto& encodable_data_arg = args.at(1);
          if (encodable_data_arg.IsNull()) {
            reply(WrapError("data_arg unexpectedly null."));
            return;
          }
          const auto& data_arg = std::get<EncodableMap>(encodable_data_arg);
          api->AddGeoJsonSource(id_arg, data_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue MapLibrePigeon::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue MapLibrePigeon::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace pigeon_maplibre
