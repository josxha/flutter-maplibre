// Autogenerated from Pigeon (v22.4.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "pigeon.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace pigeon_maplibre {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
  return FlutterError(
      "channel-error",
      "Unable to establish connection on channel: '" + channel_name + "'.",
      EncodableValue(""));
}

// MapOptions

MapOptions::MapOptions(
  const std::string& style,
  double zoom,
  double pitch,
  double bearing,
  double min_zoom,
  double max_zoom,
  double min_pitch,
  double max_pitch,
  const MapGestures& gestures)
 : style_(style),
    zoom_(zoom),
    pitch_(pitch),
    bearing_(bearing),
    min_zoom_(min_zoom),
    max_zoom_(max_zoom),
    min_pitch_(min_pitch),
    max_pitch_(max_pitch),
    gestures_(std::make_unique<MapGestures>(gestures)) {}

MapOptions::MapOptions(
  const std::string& style,
  double zoom,
  double pitch,
  double bearing,
  const LngLat* center,
  const LngLatBounds* max_bounds,
  double min_zoom,
  double max_zoom,
  double min_pitch,
  double max_pitch,
  const MapGestures& gestures)
 : style_(style),
    zoom_(zoom),
    pitch_(pitch),
    bearing_(bearing),
    center_(center ? std::make_unique<LngLat>(*center) : nullptr),
    max_bounds_(max_bounds ? std::make_unique<LngLatBounds>(*max_bounds) : nullptr),
    min_zoom_(min_zoom),
    max_zoom_(max_zoom),
    min_pitch_(min_pitch),
    max_pitch_(max_pitch),
    gestures_(std::make_unique<MapGestures>(gestures)) {}

MapOptions::MapOptions(const MapOptions& other)
 : style_(other.style_),
    zoom_(other.zoom_),
    pitch_(other.pitch_),
    bearing_(other.bearing_),
    center_(other.center_ ? std::make_unique<LngLat>(*other.center_) : nullptr),
    max_bounds_(other.max_bounds_ ? std::make_unique<LngLatBounds>(*other.max_bounds_) : nullptr),
    min_zoom_(other.min_zoom_),
    max_zoom_(other.max_zoom_),
    min_pitch_(other.min_pitch_),
    max_pitch_(other.max_pitch_),
    gestures_(std::make_unique<MapGestures>(*other.gestures_)) {}

MapOptions& MapOptions::operator=(const MapOptions& other) {
  style_ = other.style_;
  zoom_ = other.zoom_;
  pitch_ = other.pitch_;
  bearing_ = other.bearing_;
  center_ = other.center_ ? std::make_unique<LngLat>(*other.center_) : nullptr;
  max_bounds_ = other.max_bounds_ ? std::make_unique<LngLatBounds>(*other.max_bounds_) : nullptr;
  min_zoom_ = other.min_zoom_;
  max_zoom_ = other.max_zoom_;
  min_pitch_ = other.min_pitch_;
  max_pitch_ = other.max_pitch_;
  gestures_ = std::make_unique<MapGestures>(*other.gestures_);
  return *this;
}

const std::string& MapOptions::style() const {
  return style_;
}

void MapOptions::set_style(std::string_view value_arg) {
  style_ = value_arg;
}


double MapOptions::zoom() const {
  return zoom_;
}

void MapOptions::set_zoom(double value_arg) {
  zoom_ = value_arg;
}


double MapOptions::pitch() const {
  return pitch_;
}

void MapOptions::set_pitch(double value_arg) {
  pitch_ = value_arg;
}


double MapOptions::bearing() const {
  return bearing_;
}

void MapOptions::set_bearing(double value_arg) {
  bearing_ = value_arg;
}


const LngLat* MapOptions::center() const {
  return center_.get();
}

void MapOptions::set_center(const LngLat* value_arg) {
  center_ = value_arg ? std::make_unique<LngLat>(*value_arg) : nullptr;
}

void MapOptions::set_center(const LngLat& value_arg) {
  center_ = std::make_unique<LngLat>(value_arg);
}


const LngLatBounds* MapOptions::max_bounds() const {
  return max_bounds_.get();
}

void MapOptions::set_max_bounds(const LngLatBounds* value_arg) {
  max_bounds_ = value_arg ? std::make_unique<LngLatBounds>(*value_arg) : nullptr;
}

void MapOptions::set_max_bounds(const LngLatBounds& value_arg) {
  max_bounds_ = std::make_unique<LngLatBounds>(value_arg);
}


double MapOptions::min_zoom() const {
  return min_zoom_;
}

void MapOptions::set_min_zoom(double value_arg) {
  min_zoom_ = value_arg;
}


double MapOptions::max_zoom() const {
  return max_zoom_;
}

void MapOptions::set_max_zoom(double value_arg) {
  max_zoom_ = value_arg;
}


double MapOptions::min_pitch() const {
  return min_pitch_;
}

void MapOptions::set_min_pitch(double value_arg) {
  min_pitch_ = value_arg;
}


double MapOptions::max_pitch() const {
  return max_pitch_;
}

void MapOptions::set_max_pitch(double value_arg) {
  max_pitch_ = value_arg;
}


const MapGestures& MapOptions::gestures() const {
  return *gestures_;
}

void MapOptions::set_gestures(const MapGestures& value_arg) {
  gestures_ = std::make_unique<MapGestures>(value_arg);
}


EncodableList MapOptions::ToEncodableList() const {
  EncodableList list;
  list.reserve(11);
  list.push_back(EncodableValue(style_));
  list.push_back(EncodableValue(zoom_));
  list.push_back(EncodableValue(pitch_));
  list.push_back(EncodableValue(bearing_));
  list.push_back(center_ ? CustomEncodableValue(*center_) : EncodableValue());
  list.push_back(max_bounds_ ? CustomEncodableValue(*max_bounds_) : EncodableValue());
  list.push_back(EncodableValue(min_zoom_));
  list.push_back(EncodableValue(max_zoom_));
  list.push_back(EncodableValue(min_pitch_));
  list.push_back(EncodableValue(max_pitch_));
  list.push_back(CustomEncodableValue(*gestures_));
  return list;
}

MapOptions MapOptions::FromEncodableList(const EncodableList& list) {
  MapOptions decoded(
    std::get<std::string>(list[0]),
    std::get<double>(list[1]),
    std::get<double>(list[2]),
    std::get<double>(list[3]),
    std::get<double>(list[6]),
    std::get<double>(list[7]),
    std::get<double>(list[8]),
    std::get<double>(list[9]),
    std::any_cast<const MapGestures&>(std::get<CustomEncodableValue>(list[10])));
  auto& encodable_center = list[4];
  if (!encodable_center.IsNull()) {
    decoded.set_center(std::any_cast<const LngLat&>(std::get<CustomEncodableValue>(encodable_center)));
  }
  auto& encodable_max_bounds = list[5];
  if (!encodable_max_bounds.IsNull()) {
    decoded.set_max_bounds(std::any_cast<const LngLatBounds&>(std::get<CustomEncodableValue>(encodable_max_bounds)));
  }
  return decoded;
}

// MapGestures

MapGestures::MapGestures(
  bool rotate,
  bool pan,
  bool zoom,
  bool tilt)
 : rotate_(rotate),
    pan_(pan),
    zoom_(zoom),
    tilt_(tilt) {}

bool MapGestures::rotate() const {
  return rotate_;
}

void MapGestures::set_rotate(bool value_arg) {
  rotate_ = value_arg;
}


bool MapGestures::pan() const {
  return pan_;
}

void MapGestures::set_pan(bool value_arg) {
  pan_ = value_arg;
}


bool MapGestures::zoom() const {
  return zoom_;
}

void MapGestures::set_zoom(bool value_arg) {
  zoom_ = value_arg;
}


bool MapGestures::tilt() const {
  return tilt_;
}

void MapGestures::set_tilt(bool value_arg) {
  tilt_ = value_arg;
}


EncodableList MapGestures::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(EncodableValue(rotate_));
  list.push_back(EncodableValue(pan_));
  list.push_back(EncodableValue(zoom_));
  list.push_back(EncodableValue(tilt_));
  return list;
}

MapGestures MapGestures::FromEncodableList(const EncodableList& list) {
  MapGestures decoded(
    std::get<bool>(list[0]),
    std::get<bool>(list[1]),
    std::get<bool>(list[2]),
    std::get<bool>(list[3]));
  return decoded;
}

// LngLat

LngLat::LngLat(
  double lng,
  double lat)
 : lng_(lng),
    lat_(lat) {}

double LngLat::lng() const {
  return lng_;
}

void LngLat::set_lng(double value_arg) {
  lng_ = value_arg;
}


double LngLat::lat() const {
  return lat_;
}

void LngLat::set_lat(double value_arg) {
  lat_ = value_arg;
}


EncodableList LngLat::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(lng_));
  list.push_back(EncodableValue(lat_));
  return list;
}

LngLat LngLat::FromEncodableList(const EncodableList& list) {
  LngLat decoded(
    std::get<double>(list[0]),
    std::get<double>(list[1]));
  return decoded;
}

// Offset

Offset::Offset(
  double x,
  double y)
 : x_(x),
    y_(y) {}

double Offset::x() const {
  return x_;
}

void Offset::set_x(double value_arg) {
  x_ = value_arg;
}


double Offset::y() const {
  return y_;
}

void Offset::set_y(double value_arg) {
  y_ = value_arg;
}


EncodableList Offset::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(x_));
  list.push_back(EncodableValue(y_));
  return list;
}

Offset Offset::FromEncodableList(const EncodableList& list) {
  Offset decoded(
    std::get<double>(list[0]),
    std::get<double>(list[1]));
  return decoded;
}

// Padding

Padding::Padding(
  int64_t top,
  int64_t bottom,
  int64_t left,
  int64_t right)
 : top_(top),
    bottom_(bottom),
    left_(left),
    right_(right) {}

int64_t Padding::top() const {
  return top_;
}

void Padding::set_top(int64_t value_arg) {
  top_ = value_arg;
}


int64_t Padding::bottom() const {
  return bottom_;
}

void Padding::set_bottom(int64_t value_arg) {
  bottom_ = value_arg;
}


int64_t Padding::left() const {
  return left_;
}

void Padding::set_left(int64_t value_arg) {
  left_ = value_arg;
}


int64_t Padding::right() const {
  return right_;
}

void Padding::set_right(int64_t value_arg) {
  right_ = value_arg;
}


EncodableList Padding::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(EncodableValue(top_));
  list.push_back(EncodableValue(bottom_));
  list.push_back(EncodableValue(left_));
  list.push_back(EncodableValue(right_));
  return list;
}

Padding Padding::FromEncodableList(const EncodableList& list) {
  Padding decoded(
    std::get<int64_t>(list[0]),
    std::get<int64_t>(list[1]),
    std::get<int64_t>(list[2]),
    std::get<int64_t>(list[3]));
  return decoded;
}

// MapCamera

MapCamera::MapCamera(
  const LngLat& center,
  double zoom,
  double pitch,
  double bearing)
 : center_(std::make_unique<LngLat>(center)),
    zoom_(zoom),
    pitch_(pitch),
    bearing_(bearing) {}

MapCamera::MapCamera(const MapCamera& other)
 : center_(std::make_unique<LngLat>(*other.center_)),
    zoom_(other.zoom_),
    pitch_(other.pitch_),
    bearing_(other.bearing_) {}

MapCamera& MapCamera::operator=(const MapCamera& other) {
  center_ = std::make_unique<LngLat>(*other.center_);
  zoom_ = other.zoom_;
  pitch_ = other.pitch_;
  bearing_ = other.bearing_;
  return *this;
}

const LngLat& MapCamera::center() const {
  return *center_;
}

void MapCamera::set_center(const LngLat& value_arg) {
  center_ = std::make_unique<LngLat>(value_arg);
}


double MapCamera::zoom() const {
  return zoom_;
}

void MapCamera::set_zoom(double value_arg) {
  zoom_ = value_arg;
}


double MapCamera::pitch() const {
  return pitch_;
}

void MapCamera::set_pitch(double value_arg) {
  pitch_ = value_arg;
}


double MapCamera::bearing() const {
  return bearing_;
}

void MapCamera::set_bearing(double value_arg) {
  bearing_ = value_arg;
}


EncodableList MapCamera::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(CustomEncodableValue(*center_));
  list.push_back(EncodableValue(zoom_));
  list.push_back(EncodableValue(pitch_));
  list.push_back(EncodableValue(bearing_));
  return list;
}

MapCamera MapCamera::FromEncodableList(const EncodableList& list) {
  MapCamera decoded(
    std::any_cast<const LngLat&>(std::get<CustomEncodableValue>(list[0])),
    std::get<double>(list[1]),
    std::get<double>(list[2]),
    std::get<double>(list[3]));
  return decoded;
}

// LngLatBounds

LngLatBounds::LngLatBounds(
  double longitude_west,
  double longitude_east,
  double latitude_south,
  double latitude_north)
 : longitude_west_(longitude_west),
    longitude_east_(longitude_east),
    latitude_south_(latitude_south),
    latitude_north_(latitude_north) {}

double LngLatBounds::longitude_west() const {
  return longitude_west_;
}

void LngLatBounds::set_longitude_west(double value_arg) {
  longitude_west_ = value_arg;
}


double LngLatBounds::longitude_east() const {
  return longitude_east_;
}

void LngLatBounds::set_longitude_east(double value_arg) {
  longitude_east_ = value_arg;
}


double LngLatBounds::latitude_south() const {
  return latitude_south_;
}

void LngLatBounds::set_latitude_south(double value_arg) {
  latitude_south_ = value_arg;
}


double LngLatBounds::latitude_north() const {
  return latitude_north_;
}

void LngLatBounds::set_latitude_north(double value_arg) {
  latitude_north_ = value_arg;
}


EncodableList LngLatBounds::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(EncodableValue(longitude_west_));
  list.push_back(EncodableValue(longitude_east_));
  list.push_back(EncodableValue(latitude_south_));
  list.push_back(EncodableValue(latitude_north_));
  return list;
}

LngLatBounds LngLatBounds::FromEncodableList(const EncodableList& list) {
  LngLatBounds decoded(
    std::get<double>(list[0]),
    std::get<double>(list[1]),
    std::get<double>(list[2]),
    std::get<double>(list[3]));
  return decoded;
}


PigeonInternalCodecSerializer::PigeonInternalCodecSerializer() {}

EncodableValue PigeonInternalCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 129: {
        const auto& encodable_enum_arg = ReadValue(stream);
        const int64_t enum_arg_value = encodable_enum_arg.IsNull() ? 0 : encodable_enum_arg.LongValue();
        return encodable_enum_arg.IsNull() ? EncodableValue() : CustomEncodableValue(static_cast<TileScheme>(enum_arg_value));
      }
    case 130: {
        const auto& encodable_enum_arg = ReadValue(stream);
        const int64_t enum_arg_value = encodable_enum_arg.IsNull() ? 0 : encodable_enum_arg.LongValue();
        return encodable_enum_arg.IsNull() ? EncodableValue() : CustomEncodableValue(static_cast<RasterDemEncoding>(enum_arg_value));
      }
    case 131: {
        const auto& encodable_enum_arg = ReadValue(stream);
        const int64_t enum_arg_value = encodable_enum_arg.IsNull() ? 0 : encodable_enum_arg.LongValue();
        return encodable_enum_arg.IsNull() ? EncodableValue() : CustomEncodableValue(static_cast<CameraChangeReason>(enum_arg_value));
      }
    case 132: {
        return CustomEncodableValue(MapOptions::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 133: {
        return CustomEncodableValue(MapGestures::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 134: {
        return CustomEncodableValue(LngLat::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 135: {
        return CustomEncodableValue(Offset::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 136: {
        return CustomEncodableValue(Padding::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 137: {
        return CustomEncodableValue(MapCamera::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 138: {
        return CustomEncodableValue(LngLatBounds::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
    }
}

void PigeonInternalCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(TileScheme)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(static_cast<int>(std::any_cast<TileScheme>(*custom_value))), stream);
      return;
    }
    if (custom_value->type() == typeid(RasterDemEncoding)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(static_cast<int>(std::any_cast<RasterDemEncoding>(*custom_value))), stream);
      return;
    }
    if (custom_value->type() == typeid(CameraChangeReason)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(static_cast<int>(std::any_cast<CameraChangeReason>(*custom_value))), stream);
      return;
    }
    if (custom_value->type() == typeid(MapOptions)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<MapOptions>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(MapGestures)) {
      stream->WriteByte(133);
      WriteValue(EncodableValue(std::any_cast<MapGestures>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(LngLat)) {
      stream->WriteByte(134);
      WriteValue(EncodableValue(std::any_cast<LngLat>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(Offset)) {
      stream->WriteByte(135);
      WriteValue(EncodableValue(std::any_cast<Offset>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(Padding)) {
      stream->WriteByte(136);
      WriteValue(EncodableValue(std::any_cast<Padding>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(MapCamera)) {
      stream->WriteByte(137);
      WriteValue(EncodableValue(std::any_cast<MapCamera>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(LngLatBounds)) {
      stream->WriteByte(138);
      WriteValue(EncodableValue(std::any_cast<LngLatBounds>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by MapLibreHostApi.
const flutter::StandardMessageCodec& MapLibreHostApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonInternalCodecSerializer::GetInstance());
}

// Sets up an instance of `MapLibreHostApi` to handle messages through the `binary_messenger`.
void MapLibreHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  MapLibreHostApi* api) {
  MapLibreHostApi::SetUp(binary_messenger, api, "");
}

void MapLibreHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  MapLibreHostApi* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.addFillLayer" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_id_arg = args.at(0);
          if (encodable_id_arg.IsNull()) {
            reply(WrapError("id_arg unexpectedly null."));
            return;
          }
          const auto& id_arg = std::get<std::string>(encodable_id_arg);
          const auto& encodable_source_id_arg = args.at(1);
          if (encodable_source_id_arg.IsNull()) {
            reply(WrapError("source_id_arg unexpectedly null."));
            return;
          }
          const auto& source_id_arg = std::get<std::string>(encodable_source_id_arg);
          const auto& encodable_layout_arg = args.at(2);
          if (encodable_layout_arg.IsNull()) {
            reply(WrapError("layout_arg unexpectedly null."));
            return;
          }
          const auto& layout_arg = std::get<EncodableMap>(encodable_layout_arg);
          const auto& encodable_paint_arg = args.at(3);
          if (encodable_paint_arg.IsNull()) {
            reply(WrapError("paint_arg unexpectedly null."));
            return;
          }
          const auto& paint_arg = std::get<EncodableMap>(encodable_paint_arg);
          const auto& encodable_below_layer_id_arg = args.at(4);
          const auto* below_layer_id_arg = std::get_if<std::string>(&encodable_below_layer_id_arg);
          api->AddFillLayer(id_arg, source_id_arg, layout_arg, paint_arg, below_layer_id_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.addCircleLayer" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_id_arg = args.at(0);
          if (encodable_id_arg.IsNull()) {
            reply(WrapError("id_arg unexpectedly null."));
            return;
          }
          const auto& id_arg = std::get<std::string>(encodable_id_arg);
          const auto& encodable_source_id_arg = args.at(1);
          if (encodable_source_id_arg.IsNull()) {
            reply(WrapError("source_id_arg unexpectedly null."));
            return;
          }
          const auto& source_id_arg = std::get<std::string>(encodable_source_id_arg);
          const auto& encodable_layout_arg = args.at(2);
          if (encodable_layout_arg.IsNull()) {
            reply(WrapError("layout_arg unexpectedly null."));
            return;
          }
          const auto& layout_arg = std::get<EncodableMap>(encodable_layout_arg);
          const auto& encodable_paint_arg = args.at(3);
          if (encodable_paint_arg.IsNull()) {
            reply(WrapError("paint_arg unexpectedly null."));
            return;
          }
          const auto& paint_arg = std::get<EncodableMap>(encodable_paint_arg);
          const auto& encodable_below_layer_id_arg = args.at(4);
          const auto* below_layer_id_arg = std::get_if<std::string>(&encodable_below_layer_id_arg);
          api->AddCircleLayer(id_arg, source_id_arg, layout_arg, paint_arg, below_layer_id_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.addBackgroundLayer" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_id_arg = args.at(0);
          if (encodable_id_arg.IsNull()) {
            reply(WrapError("id_arg unexpectedly null."));
            return;
          }
          const auto& id_arg = std::get<std::string>(encodable_id_arg);
          const auto& encodable_layout_arg = args.at(1);
          if (encodable_layout_arg.IsNull()) {
            reply(WrapError("layout_arg unexpectedly null."));
            return;
          }
          const auto& layout_arg = std::get<EncodableMap>(encodable_layout_arg);
          const auto& encodable_paint_arg = args.at(2);
          if (encodable_paint_arg.IsNull()) {
            reply(WrapError("paint_arg unexpectedly null."));
            return;
          }
          const auto& paint_arg = std::get<EncodableMap>(encodable_paint_arg);
          const auto& encodable_below_layer_id_arg = args.at(3);
          const auto* below_layer_id_arg = std::get_if<std::string>(&encodable_below_layer_id_arg);
          api->AddBackgroundLayer(id_arg, layout_arg, paint_arg, below_layer_id_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.addFillExtrusionLayer" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_id_arg = args.at(0);
          if (encodable_id_arg.IsNull()) {
            reply(WrapError("id_arg unexpectedly null."));
            return;
          }
          const auto& id_arg = std::get<std::string>(encodable_id_arg);
          const auto& encodable_source_id_arg = args.at(1);
          if (encodable_source_id_arg.IsNull()) {
            reply(WrapError("source_id_arg unexpectedly null."));
            return;
          }
          const auto& source_id_arg = std::get<std::string>(encodable_source_id_arg);
          const auto& encodable_layout_arg = args.at(2);
          if (encodable_layout_arg.IsNull()) {
            reply(WrapError("layout_arg unexpectedly null."));
            return;
          }
          const auto& layout_arg = std::get<EncodableMap>(encodable_layout_arg);
          const auto& encodable_paint_arg = args.at(3);
          if (encodable_paint_arg.IsNull()) {
            reply(WrapError("paint_arg unexpectedly null."));
            return;
          }
          const auto& paint_arg = std::get<EncodableMap>(encodable_paint_arg);
          const auto& encodable_below_layer_id_arg = args.at(4);
          const auto* below_layer_id_arg = std::get_if<std::string>(&encodable_below_layer_id_arg);
          api->AddFillExtrusionLayer(id_arg, source_id_arg, layout_arg, paint_arg, below_layer_id_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.addHeatmapLayer" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_id_arg = args.at(0);
          if (encodable_id_arg.IsNull()) {
            reply(WrapError("id_arg unexpectedly null."));
            return;
          }
          const auto& id_arg = std::get<std::string>(encodable_id_arg);
          const auto& encodable_source_id_arg = args.at(1);
          if (encodable_source_id_arg.IsNull()) {
            reply(WrapError("source_id_arg unexpectedly null."));
            return;
          }
          const auto& source_id_arg = std::get<std::string>(encodable_source_id_arg);
          const auto& encodable_layout_arg = args.at(2);
          if (encodable_layout_arg.IsNull()) {
            reply(WrapError("layout_arg unexpectedly null."));
            return;
          }
          const auto& layout_arg = std::get<EncodableMap>(encodable_layout_arg);
          const auto& encodable_paint_arg = args.at(3);
          if (encodable_paint_arg.IsNull()) {
            reply(WrapError("paint_arg unexpectedly null."));
            return;
          }
          const auto& paint_arg = std::get<EncodableMap>(encodable_paint_arg);
          const auto& encodable_below_layer_id_arg = args.at(4);
          const auto* below_layer_id_arg = std::get_if<std::string>(&encodable_below_layer_id_arg);
          api->AddHeatmapLayer(id_arg, source_id_arg, layout_arg, paint_arg, below_layer_id_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.addHillshadeLayer" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_id_arg = args.at(0);
          if (encodable_id_arg.IsNull()) {
            reply(WrapError("id_arg unexpectedly null."));
            return;
          }
          const auto& id_arg = std::get<std::string>(encodable_id_arg);
          const auto& encodable_source_id_arg = args.at(1);
          if (encodable_source_id_arg.IsNull()) {
            reply(WrapError("source_id_arg unexpectedly null."));
            return;
          }
          const auto& source_id_arg = std::get<std::string>(encodable_source_id_arg);
          const auto& encodable_layout_arg = args.at(2);
          if (encodable_layout_arg.IsNull()) {
            reply(WrapError("layout_arg unexpectedly null."));
            return;
          }
          const auto& layout_arg = std::get<EncodableMap>(encodable_layout_arg);
          const auto& encodable_paint_arg = args.at(3);
          if (encodable_paint_arg.IsNull()) {
            reply(WrapError("paint_arg unexpectedly null."));
            return;
          }
          const auto& paint_arg = std::get<EncodableMap>(encodable_paint_arg);
          const auto& encodable_below_layer_id_arg = args.at(4);
          const auto* below_layer_id_arg = std::get_if<std::string>(&encodable_below_layer_id_arg);
          api->AddHillshadeLayer(id_arg, source_id_arg, layout_arg, paint_arg, below_layer_id_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.addLineLayer" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_id_arg = args.at(0);
          if (encodable_id_arg.IsNull()) {
            reply(WrapError("id_arg unexpectedly null."));
            return;
          }
          const auto& id_arg = std::get<std::string>(encodable_id_arg);
          const auto& encodable_source_id_arg = args.at(1);
          if (encodable_source_id_arg.IsNull()) {
            reply(WrapError("source_id_arg unexpectedly null."));
            return;
          }
          const auto& source_id_arg = std::get<std::string>(encodable_source_id_arg);
          const auto& encodable_layout_arg = args.at(2);
          if (encodable_layout_arg.IsNull()) {
            reply(WrapError("layout_arg unexpectedly null."));
            return;
          }
          const auto& layout_arg = std::get<EncodableMap>(encodable_layout_arg);
          const auto& encodable_paint_arg = args.at(3);
          if (encodable_paint_arg.IsNull()) {
            reply(WrapError("paint_arg unexpectedly null."));
            return;
          }
          const auto& paint_arg = std::get<EncodableMap>(encodable_paint_arg);
          const auto& encodable_below_layer_id_arg = args.at(4);
          const auto* below_layer_id_arg = std::get_if<std::string>(&encodable_below_layer_id_arg);
          api->AddLineLayer(id_arg, source_id_arg, layout_arg, paint_arg, below_layer_id_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.addRasterLayer" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_id_arg = args.at(0);
          if (encodable_id_arg.IsNull()) {
            reply(WrapError("id_arg unexpectedly null."));
            return;
          }
          const auto& id_arg = std::get<std::string>(encodable_id_arg);
          const auto& encodable_source_id_arg = args.at(1);
          if (encodable_source_id_arg.IsNull()) {
            reply(WrapError("source_id_arg unexpectedly null."));
            return;
          }
          const auto& source_id_arg = std::get<std::string>(encodable_source_id_arg);
          const auto& encodable_layout_arg = args.at(2);
          if (encodable_layout_arg.IsNull()) {
            reply(WrapError("layout_arg unexpectedly null."));
            return;
          }
          const auto& layout_arg = std::get<EncodableMap>(encodable_layout_arg);
          const auto& encodable_paint_arg = args.at(3);
          if (encodable_paint_arg.IsNull()) {
            reply(WrapError("paint_arg unexpectedly null."));
            return;
          }
          const auto& paint_arg = std::get<EncodableMap>(encodable_paint_arg);
          const auto& encodable_below_layer_id_arg = args.at(4);
          const auto* below_layer_id_arg = std::get_if<std::string>(&encodable_below_layer_id_arg);
          api->AddRasterLayer(id_arg, source_id_arg, layout_arg, paint_arg, below_layer_id_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.addSymbolLayer" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_id_arg = args.at(0);
          if (encodable_id_arg.IsNull()) {
            reply(WrapError("id_arg unexpectedly null."));
            return;
          }
          const auto& id_arg = std::get<std::string>(encodable_id_arg);
          const auto& encodable_source_id_arg = args.at(1);
          if (encodable_source_id_arg.IsNull()) {
            reply(WrapError("source_id_arg unexpectedly null."));
            return;
          }
          const auto& source_id_arg = std::get<std::string>(encodable_source_id_arg);
          const auto& encodable_layout_arg = args.at(2);
          if (encodable_layout_arg.IsNull()) {
            reply(WrapError("layout_arg unexpectedly null."));
            return;
          }
          const auto& layout_arg = std::get<EncodableMap>(encodable_layout_arg);
          const auto& encodable_paint_arg = args.at(3);
          if (encodable_paint_arg.IsNull()) {
            reply(WrapError("paint_arg unexpectedly null."));
            return;
          }
          const auto& paint_arg = std::get<EncodableMap>(encodable_paint_arg);
          const auto& encodable_below_layer_id_arg = args.at(4);
          const auto* below_layer_id_arg = std::get_if<std::string>(&encodable_below_layer_id_arg);
          api->AddSymbolLayer(id_arg, source_id_arg, layout_arg, paint_arg, below_layer_id_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.loadImage" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_url_arg = args.at(0);
          if (encodable_url_arg.IsNull()) {
            reply(WrapError("url_arg unexpectedly null."));
            return;
          }
          const auto& url_arg = std::get<std::string>(encodable_url_arg);
          api->LoadImage(url_arg, [reply](ErrorOr<std::vector<uint8_t>>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.addImage" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_id_arg = args.at(0);
          if (encodable_id_arg.IsNull()) {
            reply(WrapError("id_arg unexpectedly null."));
            return;
          }
          const auto& id_arg = std::get<std::string>(encodable_id_arg);
          const auto& encodable_bytes_arg = args.at(1);
          if (encodable_bytes_arg.IsNull()) {
            reply(WrapError("bytes_arg unexpectedly null."));
            return;
          }
          const auto& bytes_arg = std::get<std::vector<uint8_t>>(encodable_bytes_arg);
          api->AddImage(id_arg, bytes_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue MapLibreHostApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue MapLibreHostApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

// Generated class from Pigeon that represents Flutter messages that can be called from C++.
MapLibreFlutterApi::MapLibreFlutterApi(flutter::BinaryMessenger* binary_messenger)
 : binary_messenger_(binary_messenger),
    message_channel_suffix_("") {}

MapLibreFlutterApi::MapLibreFlutterApi(
  flutter::BinaryMessenger* binary_messenger,
  const std::string& message_channel_suffix)
 : binary_messenger_(binary_messenger),
    message_channel_suffix_(message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "") {}

const flutter::StandardMessageCodec& MapLibreFlutterApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonInternalCodecSerializer::GetInstance());
}

void MapLibreFlutterApi::GetOptions(
  std::function<void(const MapOptions&)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.maplibre.MapLibreFlutterApi.getOptions" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue();
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        const auto& return_value = std::any_cast<const MapOptions&>(std::get<CustomEncodableValue>(list_return_value->at(0)));
        on_success(return_value);
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void MapLibreFlutterApi::OnStyleLoaded(
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onStyleLoaded" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue();
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void MapLibreFlutterApi::OnClick(
  const LngLat& point_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onClick" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(point_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void MapLibreFlutterApi::OnIdle(
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onIdle" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue();
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void MapLibreFlutterApi::OnCameraIdle(
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onCameraIdle" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue();
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void MapLibreFlutterApi::OnSecondaryClick(
  const LngLat& point_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onSecondaryClick" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(point_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void MapLibreFlutterApi::OnDoubleClick(
  const LngLat& point_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onDoubleClick" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(point_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void MapLibreFlutterApi::OnLongClick(
  const LngLat& point_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onLongClick" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(point_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void MapLibreFlutterApi::OnMoveCamera(
  const MapCamera& camera_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onMoveCamera" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(camera_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

void MapLibreFlutterApi::OnStartMoveCamera(
  const CameraChangeReason& reason_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  const std::string channel_name = "dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onStartMoveCamera" + message_channel_suffix_;
  BasicMessageChannel<> channel(binary_messenger_, channel_name, &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(reason_arg),
  });
  channel.Send(encoded_api_arguments, [channel_name, on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* list_return_value = std::get_if<EncodableList>(&encodable_return_value);
    if (list_return_value) {
      if (list_return_value->size() > 1) {
        on_error(FlutterError(std::get<std::string>(list_return_value->at(0)), std::get<std::string>(list_return_value->at(1)), list_return_value->at(2)));
      } else {
        on_success();
      }
    } else {
      on_error(CreateConnectionError(channel_name));
    } 
  });
}

}  // namespace pigeon_maplibre
