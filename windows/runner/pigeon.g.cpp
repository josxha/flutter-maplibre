// Autogenerated from Pigeon (v22.4.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "pigeon.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace pigeon_maplibre {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
  return FlutterError(
      "channel-error",
      "Unable to establish connection on channel: '" + channel_name + "'.",
      EncodableValue(""));
}

// LngLat

LngLat::LngLat(
  double lng,
  double lat)
 : lng_(lng),
    lat_(lat) {}

double LngLat::lng() const {
  return lng_;
}

void LngLat::set_lng(double value_arg) {
  lng_ = value_arg;
}


double LngLat::lat() const {
  return lat_;
}

void LngLat::set_lat(double value_arg) {
  lat_ = value_arg;
}


EncodableList LngLat::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(lng_));
  list.push_back(EncodableValue(lat_));
  return list;
}

LngLat LngLat::FromEncodableList(const EncodableList& list) {
  LngLat decoded(
    std::get<double>(list[0]),
    std::get<double>(list[1]));
  return decoded;
}

// ScreenLocation

ScreenLocation::ScreenLocation(
  double x,
  double y)
 : x_(x),
    y_(y) {}

double ScreenLocation::x() const {
  return x_;
}

void ScreenLocation::set_x(double value_arg) {
  x_ = value_arg;
}


double ScreenLocation::y() const {
  return y_;
}

void ScreenLocation::set_y(double value_arg) {
  y_ = value_arg;
}


EncodableList ScreenLocation::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(x_));
  list.push_back(EncodableValue(y_));
  return list;
}

ScreenLocation ScreenLocation::FromEncodableList(const EncodableList& list) {
  ScreenLocation decoded(
    std::get<double>(list[0]),
    std::get<double>(list[1]));
  return decoded;
}

// MapCamera

MapCamera::MapCamera(
  const LngLat& center,
  double zoom,
  double tilt,
  double bearing)
 : center_(std::make_unique<LngLat>(center)),
    zoom_(zoom),
    tilt_(tilt),
    bearing_(bearing) {}

MapCamera::MapCamera(const MapCamera& other)
 : center_(std::make_unique<LngLat>(*other.center_)),
    zoom_(other.zoom_),
    tilt_(other.tilt_),
    bearing_(other.bearing_) {}

MapCamera& MapCamera::operator=(const MapCamera& other) {
  center_ = std::make_unique<LngLat>(*other.center_);
  zoom_ = other.zoom_;
  tilt_ = other.tilt_;
  bearing_ = other.bearing_;
  return *this;
}

const LngLat& MapCamera::center() const {
  return *center_;
}

void MapCamera::set_center(const LngLat& value_arg) {
  center_ = std::make_unique<LngLat>(value_arg);
}


double MapCamera::zoom() const {
  return zoom_;
}

void MapCamera::set_zoom(double value_arg) {
  zoom_ = value_arg;
}


double MapCamera::tilt() const {
  return tilt_;
}

void MapCamera::set_tilt(double value_arg) {
  tilt_ = value_arg;
}


double MapCamera::bearing() const {
  return bearing_;
}

void MapCamera::set_bearing(double value_arg) {
  bearing_ = value_arg;
}


EncodableList MapCamera::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(CustomEncodableValue(*center_));
  list.push_back(EncodableValue(zoom_));
  list.push_back(EncodableValue(tilt_));
  list.push_back(EncodableValue(bearing_));
  return list;
}

MapCamera MapCamera::FromEncodableList(const EncodableList& list) {
  MapCamera decoded(
    std::any_cast<const LngLat&>(std::get<CustomEncodableValue>(list[0])),
    std::get<double>(list[1]),
    std::get<double>(list[2]),
    std::get<double>(list[3]));
  return decoded;
}

// LngLatBounds

LngLatBounds::LngLatBounds(
  double longitude_west,
  double longitude_east,
  double latitude_south,
  double latitude_north)
 : longitude_west_(longitude_west),
    longitude_east_(longitude_east),
    latitude_south_(latitude_south),
    latitude_north_(latitude_north) {}

double LngLatBounds::longitude_west() const {
  return longitude_west_;
}

void LngLatBounds::set_longitude_west(double value_arg) {
  longitude_west_ = value_arg;
}


double LngLatBounds::longitude_east() const {
  return longitude_east_;
}

void LngLatBounds::set_longitude_east(double value_arg) {
  longitude_east_ = value_arg;
}


double LngLatBounds::latitude_south() const {
  return latitude_south_;
}

void LngLatBounds::set_latitude_south(double value_arg) {
  latitude_south_ = value_arg;
}


double LngLatBounds::latitude_north() const {
  return latitude_north_;
}

void LngLatBounds::set_latitude_north(double value_arg) {
  latitude_north_ = value_arg;
}


EncodableList LngLatBounds::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(EncodableValue(longitude_west_));
  list.push_back(EncodableValue(longitude_east_));
  list.push_back(EncodableValue(latitude_south_));
  list.push_back(EncodableValue(latitude_north_));
  return list;
}

LngLatBounds LngLatBounds::FromEncodableList(const EncodableList& list) {
  LngLatBounds decoded(
    std::get<double>(list[0]),
    std::get<double>(list[1]),
    std::get<double>(list[2]),
    std::get<double>(list[3]));
  return decoded;
}


PigeonInternalCodecSerializer::PigeonInternalCodecSerializer() {}

EncodableValue PigeonInternalCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 129: {
        const auto& encodable_enum_arg = ReadValue(stream);
        const int64_t enum_arg_value = encodable_enum_arg.IsNull() ? 0 : encodable_enum_arg.LongValue();
        return encodable_enum_arg.IsNull() ? EncodableValue() : CustomEncodableValue(static_cast<TileScheme>(enum_arg_value));
      }
    case 130: {
        const auto& encodable_enum_arg = ReadValue(stream);
        const int64_t enum_arg_value = encodable_enum_arg.IsNull() ? 0 : encodable_enum_arg.LongValue();
        return encodable_enum_arg.IsNull() ? EncodableValue() : CustomEncodableValue(static_cast<RasterDemEncoding>(enum_arg_value));
      }
    case 131: {
        return CustomEncodableValue(LngLat::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 132: {
        return CustomEncodableValue(ScreenLocation::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 133: {
        return CustomEncodableValue(MapCamera::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 134: {
        return CustomEncodableValue(LngLatBounds::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
    }
}

void PigeonInternalCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(TileScheme)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(static_cast<int>(std::any_cast<TileScheme>(*custom_value))), stream);
      return;
    }
    if (custom_value->type() == typeid(RasterDemEncoding)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(static_cast<int>(std::any_cast<RasterDemEncoding>(*custom_value))), stream);
      return;
    }
    if (custom_value->type() == typeid(LngLat)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<LngLat>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ScreenLocation)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<ScreenLocation>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(MapCamera)) {
      stream->WriteByte(133);
      WriteValue(EncodableValue(std::any_cast<MapCamera>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(LngLatBounds)) {
      stream->WriteByte(134);
      WriteValue(EncodableValue(std::any_cast<LngLatBounds>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

}  // namespace pigeon_maplibre
