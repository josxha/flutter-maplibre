// Autogenerated from Pigeon (v22.4.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_PIGEON_G_H_
#define PIGEON_PIGEON_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace pigeon_maplibre {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

// Influences the y direction of the tile coordinates.
enum class TileScheme {
  // Slippy map tilenames scheme.
  kXyz = 0,
  // OSGeo spec scheme.
  kTms = 1
};

// The encoding used by this source. Mapbox Terrain RGB is used by default.
enum class RasterDemEncoding {
  // Terrarium format PNG tiles.
  kTerrarium = 0,
  // Mapbox Terrain RGB tiles.
  kMapbox = 1,
  // Decodes tiles using the redFactor, blueFactor, greenFactor, baseShift
  // parameters.
  kCustom = 2
};


// A longitude/latitude coordinate object.
//
// Generated class from Pigeon that represents data sent in messages.
class LngLat {
 public:
  // Constructs an object setting all fields.
  explicit LngLat(
    double lng,
    double lat);

  // The longitude
  double lng() const;
  void set_lng(double value_arg);

  // The latitude
  double lat() const;
  void set_lat(double value_arg);


 private:
  static LngLat FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class MapCamera;
  friend class PigeonInternalCodecSerializer;
  double lng_;
  double lat_;

};


// A pixel location / location on the device screen.
//
// Generated class from Pigeon that represents data sent in messages.
class ScreenLocation {
 public:
  // Constructs an object setting all fields.
  explicit ScreenLocation(
    double x,
    double y);

  // The x coordinate
  double x() const;
  void set_x(double value_arg);

  // The y coordinate
  double y() const;
  void set_y(double value_arg);


 private:
  static ScreenLocation FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class PigeonInternalCodecSerializer;
  double x_;
  double y_;

};


// The current position of the map camera.
//
// Generated class from Pigeon that represents data sent in messages.
class MapCamera {
 public:
  // Constructs an object setting all fields.
  explicit MapCamera(
    const LngLat& center,
    double zoom,
    double tilt,
    double bearing);

  ~MapCamera() = default;
  MapCamera(const MapCamera& other);
  MapCamera& operator=(const MapCamera& other);
  MapCamera(MapCamera&& other) = default;
  MapCamera& operator=(MapCamera&& other) noexcept = default;
  const LngLat& center() const;
  void set_center(const LngLat& value_arg);

  double zoom() const;
  void set_zoom(double value_arg);

  double tilt() const;
  void set_tilt(double value_arg);

  double bearing() const;
  void set_bearing(double value_arg);


 private:
  static MapCamera FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class PigeonInternalCodecSerializer;
  std::unique_ptr<LngLat> center_;
  double zoom_;
  double tilt_;
  double bearing_;

};


// LatLng bound object
//
// Generated class from Pigeon that represents data sent in messages.
class LngLatBounds {
 public:
  // Constructs an object setting all fields.
  explicit LngLatBounds(
    double longitude_west,
    double longitude_east,
    double latitude_south,
    double latitude_north);

  double longitude_west() const;
  void set_longitude_west(double value_arg);

  double longitude_east() const;
  void set_longitude_east(double value_arg);

  double latitude_south() const;
  void set_latitude_south(double value_arg);

  double latitude_north() const;
  void set_latitude_north(double value_arg);


 private:
  static LngLatBounds FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class PigeonInternalCodecSerializer;
  double longitude_west_;
  double longitude_east_;
  double latitude_south_;
  double latitude_north_;

};


class PigeonInternalCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  PigeonInternalCodecSerializer();
  inline static PigeonInternalCodecSerializer& GetInstance() {
    static PigeonInternalCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

}  // namespace pigeon_maplibre
#endif  // PIGEON_PIGEON_G_H_
