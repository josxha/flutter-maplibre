// Autogenerated from Pigeon (v22.4.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/**
 * The map options define initial values for the MapLibre map.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class MapOptions (
  /** The URL of the used map style. */
  val style: String,
  /** The initial zoom level of the map. */
  val zoom: Double,
  /** The initial tilt of the map. */
  val tilt: Double,
  /** The initial bearing of the map. */
  val bearing: Double,
  /** The initial center coordinates of the map. */
  val center: LngLat? = null,
  /** If the native map should listen to click events. */
  val listensOnClick: Boolean,
  /** If the native map should listen to long click events. */
  val listensOnLongClick: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MapOptions {
      val style = pigeonVar_list[0] as String
      val zoom = pigeonVar_list[1] as Double
      val tilt = pigeonVar_list[2] as Double
      val bearing = pigeonVar_list[3] as Double
      val center = pigeonVar_list[4] as LngLat?
      val listensOnClick = pigeonVar_list[5] as Boolean
      val listensOnLongClick = pigeonVar_list[6] as Boolean
      return MapOptions(style, zoom, tilt, bearing, center, listensOnClick, listensOnLongClick)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      style,
      zoom,
      tilt,
      bearing,
      center,
      listensOnClick,
      listensOnLongClick,
    )
  }
}

/**
 * A longitude/latitude coordinate object.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class LngLat (
  /** The longitude */
  val lng: Double,
  /** The latitude */
  val lat: Double
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): LngLat {
      val lng = pigeonVar_list[0] as Double
      val lat = pigeonVar_list[1] as Double
      return LngLat(lng, lat)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      lng,
      lat,
    )
  }
}

/**
 * A pixel location / location on the device screen.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class ScreenLocation (
  /** The x coordinate */
  val x: Double,
  /** The y coordinate */
  val y: Double
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ScreenLocation {
      val x = pigeonVar_list[0] as Double
      val y = pigeonVar_list[1] as Double
      return ScreenLocation(x, y)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      x,
      y,
    )
  }
}

/**
 * The current position of the map camera.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class MapCamera (
  val center: LngLat,
  val zoom: Double,
  val tilt: Double,
  val bearing: Double
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MapCamera {
      val center = pigeonVar_list[0] as LngLat
      val zoom = pigeonVar_list[1] as Double
      val tilt = pigeonVar_list[2] as Double
      val bearing = pigeonVar_list[3] as Double
      return MapCamera(center, zoom, tilt, bearing)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      center,
      zoom,
      tilt,
      bearing,
    )
  }
}

/**
 * LatLng bound object
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class LngLatBounds (
  val longitudeWest: Double,
  val longitudeEast: Double,
  val latitudeSouth: Double,
  val latitudeNorth: Double
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): LngLatBounds {
      val longitudeWest = pigeonVar_list[0] as Double
      val longitudeEast = pigeonVar_list[1] as Double
      val latitudeSouth = pigeonVar_list[2] as Double
      val latitudeNorth = pigeonVar_list[3] as Double
      return LngLatBounds(longitudeWest, longitudeEast, latitudeSouth, latitudeNorth)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      longitudeWest,
      longitudeEast,
      latitudeSouth,
      latitudeNorth,
    )
  }
}
private open class PigeonPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MapOptions.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          LngLat.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ScreenLocation.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MapCamera.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          LngLatBounds.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MapOptions -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is LngLat -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is ScreenLocation -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is MapCamera -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is LngLatBounds -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface MapLibreHostApi {
  /** Move the viewport of the map to a new location without any animation. */
  fun jumpTo(center: LngLat?, zoom: Double?, bearing: Double?, pitch: Double?, callback: (Result<Unit>) -> Unit)
  /** Animate the viewport of the map to a new location. */
  fun flyTo(center: LngLat?, zoom: Double?, bearing: Double?, pitch: Double?, durationMs: Long, callback: (Result<Unit>) -> Unit)
  /**
   * Get the current camera position with the map center, zoom level, camera
   * tilt and map rotation.
   */
  fun getCamera(callback: (Result<MapCamera>) -> Unit)
  /** Get the visible region of the current map camera. */
  fun getVisibleRegion(callback: (Result<LngLatBounds>) -> Unit)
  /** Convert a coordinate to a location on the screen. */
  fun toScreenLocation(lng: Double, lat: Double, callback: (Result<ScreenLocation>) -> Unit)
  /** Convert a screen location to a coordinate. */
  fun toLngLat(x: Double, y: Double, callback: (Result<LngLat>) -> Unit)
  /** Add a fill layer to the map style. */
  fun addFillLayer(id: String, sourceId: String, callback: (Result<Unit>) -> Unit)
  /** Add a circle layer to the map style. */
  fun addCircleLayer(id: String, sourceId: String, callback: (Result<Unit>) -> Unit)
  /** Add a GeoJSON source to the map style. */
  fun addGeoJsonSource(id: String, data: String, callback: (Result<Unit>) -> Unit)
  /**
   * Returns the distance spanned by one pixel at the specified latitude and
   * current zoom level.
   */
  fun getMetersPerPixelAtLatitude(latitude: Double): Double

  companion object {
    /** The codec used by MapLibreHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec()
    }
    /** Sets up an instance of `MapLibreHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: MapLibreHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.jumpTo$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val centerArg = args[0] as LngLat?
            val zoomArg = args[1] as Double?
            val bearingArg = args[2] as Double?
            val pitchArg = args[3] as Double?
            api.jumpTo(centerArg, zoomArg, bearingArg, pitchArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.flyTo$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val centerArg = args[0] as LngLat?
            val zoomArg = args[1] as Double?
            val bearingArg = args[2] as Double?
            val pitchArg = args[3] as Double?
            val durationMsArg = args[4] as Long
            api.flyTo(centerArg, zoomArg, bearingArg, pitchArg, durationMsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.getCamera$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getCamera{ result: Result<MapCamera> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.getVisibleRegion$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getVisibleRegion{ result: Result<LngLatBounds> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.toScreenLocation$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val lngArg = args[0] as Double
            val latArg = args[1] as Double
            api.toScreenLocation(lngArg, latArg) { result: Result<ScreenLocation> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.toLngLat$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val xArg = args[0] as Double
            val yArg = args[1] as Double
            api.toLngLat(xArg, yArg) { result: Result<LngLat> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.addFillLayer$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val sourceIdArg = args[1] as String
            api.addFillLayer(idArg, sourceIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.addCircleLayer$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val sourceIdArg = args[1] as String
            api.addCircleLayer(idArg, sourceIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.addGeoJsonSource$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val dataArg = args[1] as String
            api.addGeoJsonSource(idArg, dataArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.maplibre.MapLibreHostApi.getMetersPerPixelAtLatitude$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val latitudeArg = args[0] as Double
            val wrapped: List<Any?> = try {
              listOf(api.getMetersPerPixelAtLatitude(latitudeArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class MapLibreFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by MapLibreFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec()
    }
  }
  /** Get the map options from dart. */
  fun getOptions(callback: (Result<MapOptions>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.maplibre.MapLibreFlutterApi.getOptions$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as MapOptions
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** Callback for when the style has been loaded. */
  fun onStyleLoaded(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onStyleLoaded$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** Callback when the user clicks on the map. */
  fun onClick(pointArg: LngLat, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onClick$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pointArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /**
   * Callback when the user performs a secondary click on the map
   * (e.g. by default a click with the right mouse button).
   */
  fun onSecondaryClick(pointArg: LngLat, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onSecondaryClick$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pointArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** Callback when the user performs a double click on the map. */
  fun onDoubleClick(pointArg: LngLat, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onDoubleClick$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pointArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** Callback when the user performs a long lasting click on the map. */
  fun onLongClick(pointArg: LngLat, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onLongClick$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pointArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
