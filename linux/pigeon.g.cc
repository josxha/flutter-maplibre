// Autogenerated from Pigeon (v22.4.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#include "pigeon.g.h"

struct _MaplibreMapOptions {
  GObject parent_instance;

  gchar* style;
  double zoom;
  double tilt;
  double bearing;
  MaplibreLngLat* center;
  MaplibreLngLatBounds* max_bounds;
  double min_zoom;
  double max_zoom;
  double min_tilt;
  double max_tilt;
  gboolean listens_on_click;
  gboolean listens_on_long_click;
};

G_DEFINE_TYPE(MaplibreMapOptions, maplibre_map_options, G_TYPE_OBJECT)

static void maplibre_map_options_dispose(GObject* object) {
  MaplibreMapOptions* self = MAPLIBRE_MAP_OPTIONS(object);
  g_clear_pointer(&self->style, g_free);
  g_clear_object(&self->center);
  g_clear_object(&self->max_bounds);
  G_OBJECT_CLASS(maplibre_map_options_parent_class)->dispose(object);
}

static void maplibre_map_options_init(MaplibreMapOptions* self) {
}

static void maplibre_map_options_class_init(MaplibreMapOptionsClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_options_dispose;
}

MaplibreMapOptions* maplibre_map_options_new(const gchar* style, double zoom, double tilt, double bearing, MaplibreLngLat* center, MaplibreLngLatBounds* max_bounds, double min_zoom, double max_zoom, double min_tilt, double max_tilt, gboolean listens_on_click, gboolean listens_on_long_click) {
  MaplibreMapOptions* self = MAPLIBRE_MAP_OPTIONS(g_object_new(maplibre_map_options_get_type(), nullptr));
  self->style = g_strdup(style);
  self->zoom = zoom;
  self->tilt = tilt;
  self->bearing = bearing;
  if (center != nullptr) {
    self->center = MAPLIBRE_LNG_LAT(g_object_ref(center));
  }
  else {
    self->center = nullptr;
  }
  if (max_bounds != nullptr) {
    self->max_bounds = MAPLIBRE_LNG_LAT_BOUNDS(g_object_ref(max_bounds));
  }
  else {
    self->max_bounds = nullptr;
  }
  self->min_zoom = min_zoom;
  self->max_zoom = max_zoom;
  self->min_tilt = min_tilt;
  self->max_tilt = max_tilt;
  self->listens_on_click = listens_on_click;
  self->listens_on_long_click = listens_on_long_click;
  return self;
}

const gchar* maplibre_map_options_get_style(MaplibreMapOptions* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_OPTIONS(self), nullptr);
  return self->style;
}

double maplibre_map_options_get_zoom(MaplibreMapOptions* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_OPTIONS(self), 0.0);
  return self->zoom;
}

double maplibre_map_options_get_tilt(MaplibreMapOptions* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_OPTIONS(self), 0.0);
  return self->tilt;
}

double maplibre_map_options_get_bearing(MaplibreMapOptions* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_OPTIONS(self), 0.0);
  return self->bearing;
}

MaplibreLngLat* maplibre_map_options_get_center(MaplibreMapOptions* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_OPTIONS(self), nullptr);
  return self->center;
}

MaplibreLngLatBounds* maplibre_map_options_get_max_bounds(MaplibreMapOptions* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_OPTIONS(self), nullptr);
  return self->max_bounds;
}

double maplibre_map_options_get_min_zoom(MaplibreMapOptions* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_OPTIONS(self), 0.0);
  return self->min_zoom;
}

double maplibre_map_options_get_max_zoom(MaplibreMapOptions* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_OPTIONS(self), 0.0);
  return self->max_zoom;
}

double maplibre_map_options_get_min_tilt(MaplibreMapOptions* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_OPTIONS(self), 0.0);
  return self->min_tilt;
}

double maplibre_map_options_get_max_tilt(MaplibreMapOptions* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_OPTIONS(self), 0.0);
  return self->max_tilt;
}

gboolean maplibre_map_options_get_listens_on_click(MaplibreMapOptions* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_OPTIONS(self), FALSE);
  return self->listens_on_click;
}

gboolean maplibre_map_options_get_listens_on_long_click(MaplibreMapOptions* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_OPTIONS(self), FALSE);
  return self->listens_on_long_click;
}

static FlValue* maplibre_map_options_to_list(MaplibreMapOptions* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_string(self->style));
  fl_value_append_take(values, fl_value_new_float(self->zoom));
  fl_value_append_take(values, fl_value_new_float(self->tilt));
  fl_value_append_take(values, fl_value_new_float(self->bearing));
  fl_value_append_take(values, self->center != nullptr ? fl_value_new_custom_object(132, G_OBJECT(self->center)) : fl_value_new_null());
  fl_value_append_take(values, self->max_bounds != nullptr ? fl_value_new_custom_object(135, G_OBJECT(self->max_bounds)) : fl_value_new_null());
  fl_value_append_take(values, fl_value_new_float(self->min_zoom));
  fl_value_append_take(values, fl_value_new_float(self->max_zoom));
  fl_value_append_take(values, fl_value_new_float(self->min_tilt));
  fl_value_append_take(values, fl_value_new_float(self->max_tilt));
  fl_value_append_take(values, fl_value_new_bool(self->listens_on_click));
  fl_value_append_take(values, fl_value_new_bool(self->listens_on_long_click));
  return values;
}

static MaplibreMapOptions* maplibre_map_options_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  const gchar* style = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(values, 1);
  double zoom = fl_value_get_float(value1);
  FlValue* value2 = fl_value_get_list_value(values, 2);
  double tilt = fl_value_get_float(value2);
  FlValue* value3 = fl_value_get_list_value(values, 3);
  double bearing = fl_value_get_float(value3);
  FlValue* value4 = fl_value_get_list_value(values, 4);
  MaplibreLngLat* center = nullptr;
  if (fl_value_get_type(value4) != FL_VALUE_TYPE_NULL) {
    center = MAPLIBRE_LNG_LAT(fl_value_get_custom_value_object(value4));
  }
  FlValue* value5 = fl_value_get_list_value(values, 5);
  MaplibreLngLatBounds* max_bounds = nullptr;
  if (fl_value_get_type(value5) != FL_VALUE_TYPE_NULL) {
    max_bounds = MAPLIBRE_LNG_LAT_BOUNDS(fl_value_get_custom_value_object(value5));
  }
  FlValue* value6 = fl_value_get_list_value(values, 6);
  double min_zoom = fl_value_get_float(value6);
  FlValue* value7 = fl_value_get_list_value(values, 7);
  double max_zoom = fl_value_get_float(value7);
  FlValue* value8 = fl_value_get_list_value(values, 8);
  double min_tilt = fl_value_get_float(value8);
  FlValue* value9 = fl_value_get_list_value(values, 9);
  double max_tilt = fl_value_get_float(value9);
  FlValue* value10 = fl_value_get_list_value(values, 10);
  gboolean listens_on_click = fl_value_get_bool(value10);
  FlValue* value11 = fl_value_get_list_value(values, 11);
  gboolean listens_on_long_click = fl_value_get_bool(value11);
  return maplibre_map_options_new(style, zoom, tilt, bearing, center, max_bounds, min_zoom, max_zoom, min_tilt, max_tilt, listens_on_click, listens_on_long_click);
}

struct _MaplibreLngLat {
  GObject parent_instance;

  double lng;
  double lat;
};

G_DEFINE_TYPE(MaplibreLngLat, maplibre_lng_lat, G_TYPE_OBJECT)

static void maplibre_lng_lat_dispose(GObject* object) {
  G_OBJECT_CLASS(maplibre_lng_lat_parent_class)->dispose(object);
}

static void maplibre_lng_lat_init(MaplibreLngLat* self) {
}

static void maplibre_lng_lat_class_init(MaplibreLngLatClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_lng_lat_dispose;
}

MaplibreLngLat* maplibre_lng_lat_new(double lng, double lat) {
  MaplibreLngLat* self = MAPLIBRE_LNG_LAT(g_object_new(maplibre_lng_lat_get_type(), nullptr));
  self->lng = lng;
  self->lat = lat;
  return self;
}

double maplibre_lng_lat_get_lng(MaplibreLngLat* self) {
  g_return_val_if_fail(MAPLIBRE_IS_LNG_LAT(self), 0.0);
  return self->lng;
}

double maplibre_lng_lat_get_lat(MaplibreLngLat* self) {
  g_return_val_if_fail(MAPLIBRE_IS_LNG_LAT(self), 0.0);
  return self->lat;
}

static FlValue* maplibre_lng_lat_to_list(MaplibreLngLat* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_float(self->lng));
  fl_value_append_take(values, fl_value_new_float(self->lat));
  return values;
}

static MaplibreLngLat* maplibre_lng_lat_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  double lng = fl_value_get_float(value0);
  FlValue* value1 = fl_value_get_list_value(values, 1);
  double lat = fl_value_get_float(value1);
  return maplibre_lng_lat_new(lng, lat);
}

struct _MaplibreScreenLocation {
  GObject parent_instance;

  double x;
  double y;
};

G_DEFINE_TYPE(MaplibreScreenLocation, maplibre_screen_location, G_TYPE_OBJECT)

static void maplibre_screen_location_dispose(GObject* object) {
  G_OBJECT_CLASS(maplibre_screen_location_parent_class)->dispose(object);
}

static void maplibre_screen_location_init(MaplibreScreenLocation* self) {
}

static void maplibre_screen_location_class_init(MaplibreScreenLocationClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_screen_location_dispose;
}

MaplibreScreenLocation* maplibre_screen_location_new(double x, double y) {
  MaplibreScreenLocation* self = MAPLIBRE_SCREEN_LOCATION(g_object_new(maplibre_screen_location_get_type(), nullptr));
  self->x = x;
  self->y = y;
  return self;
}

double maplibre_screen_location_get_x(MaplibreScreenLocation* self) {
  g_return_val_if_fail(MAPLIBRE_IS_SCREEN_LOCATION(self), 0.0);
  return self->x;
}

double maplibre_screen_location_get_y(MaplibreScreenLocation* self) {
  g_return_val_if_fail(MAPLIBRE_IS_SCREEN_LOCATION(self), 0.0);
  return self->y;
}

static FlValue* maplibre_screen_location_to_list(MaplibreScreenLocation* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_float(self->x));
  fl_value_append_take(values, fl_value_new_float(self->y));
  return values;
}

static MaplibreScreenLocation* maplibre_screen_location_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  double x = fl_value_get_float(value0);
  FlValue* value1 = fl_value_get_list_value(values, 1);
  double y = fl_value_get_float(value1);
  return maplibre_screen_location_new(x, y);
}

struct _MaplibreMapCamera {
  GObject parent_instance;

  MaplibreLngLat* center;
  double zoom;
  double tilt;
  double bearing;
};

G_DEFINE_TYPE(MaplibreMapCamera, maplibre_map_camera, G_TYPE_OBJECT)

static void maplibre_map_camera_dispose(GObject* object) {
  MaplibreMapCamera* self = MAPLIBRE_MAP_CAMERA(object);
  g_clear_object(&self->center);
  G_OBJECT_CLASS(maplibre_map_camera_parent_class)->dispose(object);
}

static void maplibre_map_camera_init(MaplibreMapCamera* self) {
}

static void maplibre_map_camera_class_init(MaplibreMapCameraClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_camera_dispose;
}

MaplibreMapCamera* maplibre_map_camera_new(MaplibreLngLat* center, double zoom, double tilt, double bearing) {
  MaplibreMapCamera* self = MAPLIBRE_MAP_CAMERA(g_object_new(maplibre_map_camera_get_type(), nullptr));
  self->center = MAPLIBRE_LNG_LAT(g_object_ref(center));
  self->zoom = zoom;
  self->tilt = tilt;
  self->bearing = bearing;
  return self;
}

MaplibreLngLat* maplibre_map_camera_get_center(MaplibreMapCamera* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_CAMERA(self), nullptr);
  return self->center;
}

double maplibre_map_camera_get_zoom(MaplibreMapCamera* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_CAMERA(self), 0.0);
  return self->zoom;
}

double maplibre_map_camera_get_tilt(MaplibreMapCamera* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_CAMERA(self), 0.0);
  return self->tilt;
}

double maplibre_map_camera_get_bearing(MaplibreMapCamera* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_CAMERA(self), 0.0);
  return self->bearing;
}

static FlValue* maplibre_map_camera_to_list(MaplibreMapCamera* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_custom_object(132, G_OBJECT(self->center)));
  fl_value_append_take(values, fl_value_new_float(self->zoom));
  fl_value_append_take(values, fl_value_new_float(self->tilt));
  fl_value_append_take(values, fl_value_new_float(self->bearing));
  return values;
}

static MaplibreMapCamera* maplibre_map_camera_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  MaplibreLngLat* center = MAPLIBRE_LNG_LAT(fl_value_get_custom_value_object(value0));
  FlValue* value1 = fl_value_get_list_value(values, 1);
  double zoom = fl_value_get_float(value1);
  FlValue* value2 = fl_value_get_list_value(values, 2);
  double tilt = fl_value_get_float(value2);
  FlValue* value3 = fl_value_get_list_value(values, 3);
  double bearing = fl_value_get_float(value3);
  return maplibre_map_camera_new(center, zoom, tilt, bearing);
}

struct _MaplibreLngLatBounds {
  GObject parent_instance;

  double longitude_west;
  double longitude_east;
  double latitude_south;
  double latitude_north;
};

G_DEFINE_TYPE(MaplibreLngLatBounds, maplibre_lng_lat_bounds, G_TYPE_OBJECT)

static void maplibre_lng_lat_bounds_dispose(GObject* object) {
  G_OBJECT_CLASS(maplibre_lng_lat_bounds_parent_class)->dispose(object);
}

static void maplibre_lng_lat_bounds_init(MaplibreLngLatBounds* self) {
}

static void maplibre_lng_lat_bounds_class_init(MaplibreLngLatBoundsClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_lng_lat_bounds_dispose;
}

MaplibreLngLatBounds* maplibre_lng_lat_bounds_new(double longitude_west, double longitude_east, double latitude_south, double latitude_north) {
  MaplibreLngLatBounds* self = MAPLIBRE_LNG_LAT_BOUNDS(g_object_new(maplibre_lng_lat_bounds_get_type(), nullptr));
  self->longitude_west = longitude_west;
  self->longitude_east = longitude_east;
  self->latitude_south = latitude_south;
  self->latitude_north = latitude_north;
  return self;
}

double maplibre_lng_lat_bounds_get_longitude_west(MaplibreLngLatBounds* self) {
  g_return_val_if_fail(MAPLIBRE_IS_LNG_LAT_BOUNDS(self), 0.0);
  return self->longitude_west;
}

double maplibre_lng_lat_bounds_get_longitude_east(MaplibreLngLatBounds* self) {
  g_return_val_if_fail(MAPLIBRE_IS_LNG_LAT_BOUNDS(self), 0.0);
  return self->longitude_east;
}

double maplibre_lng_lat_bounds_get_latitude_south(MaplibreLngLatBounds* self) {
  g_return_val_if_fail(MAPLIBRE_IS_LNG_LAT_BOUNDS(self), 0.0);
  return self->latitude_south;
}

double maplibre_lng_lat_bounds_get_latitude_north(MaplibreLngLatBounds* self) {
  g_return_val_if_fail(MAPLIBRE_IS_LNG_LAT_BOUNDS(self), 0.0);
  return self->latitude_north;
}

static FlValue* maplibre_lng_lat_bounds_to_list(MaplibreLngLatBounds* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_float(self->longitude_west));
  fl_value_append_take(values, fl_value_new_float(self->longitude_east));
  fl_value_append_take(values, fl_value_new_float(self->latitude_south));
  fl_value_append_take(values, fl_value_new_float(self->latitude_north));
  return values;
}

static MaplibreLngLatBounds* maplibre_lng_lat_bounds_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  double longitude_west = fl_value_get_float(value0);
  FlValue* value1 = fl_value_get_list_value(values, 1);
  double longitude_east = fl_value_get_float(value1);
  FlValue* value2 = fl_value_get_list_value(values, 2);
  double latitude_south = fl_value_get_float(value2);
  FlValue* value3 = fl_value_get_list_value(values, 3);
  double latitude_north = fl_value_get_float(value3);
  return maplibre_lng_lat_bounds_new(longitude_west, longitude_east, latitude_south, latitude_north);
}

G_DECLARE_FINAL_TYPE(MaplibreMessageCodec, maplibre_message_codec, MAPLIBRE, MESSAGE_CODEC, FlStandardMessageCodec)

struct _MaplibreMessageCodec {
  FlStandardMessageCodec parent_instance;

};

G_DEFINE_TYPE(MaplibreMessageCodec, maplibre_message_codec, fl_standard_message_codec_get_type())

static gboolean maplibre_message_codec_write_maplibre_tile_scheme(FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value, GError** error) {
  uint8_t type = 129;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  return fl_standard_message_codec_write_value(codec, buffer, value, error);
}

static gboolean maplibre_message_codec_write_maplibre_raster_dem_encoding(FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value, GError** error) {
  uint8_t type = 130;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  return fl_standard_message_codec_write_value(codec, buffer, value, error);
}

static gboolean maplibre_message_codec_write_maplibre_map_options(FlStandardMessageCodec* codec, GByteArray* buffer, MaplibreMapOptions* value, GError** error) {
  uint8_t type = 131;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = maplibre_map_options_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean maplibre_message_codec_write_maplibre_lng_lat(FlStandardMessageCodec* codec, GByteArray* buffer, MaplibreLngLat* value, GError** error) {
  uint8_t type = 132;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = maplibre_lng_lat_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean maplibre_message_codec_write_maplibre_screen_location(FlStandardMessageCodec* codec, GByteArray* buffer, MaplibreScreenLocation* value, GError** error) {
  uint8_t type = 133;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = maplibre_screen_location_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean maplibre_message_codec_write_maplibre_map_camera(FlStandardMessageCodec* codec, GByteArray* buffer, MaplibreMapCamera* value, GError** error) {
  uint8_t type = 134;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = maplibre_map_camera_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean maplibre_message_codec_write_maplibre_lng_lat_bounds(FlStandardMessageCodec* codec, GByteArray* buffer, MaplibreLngLatBounds* value, GError** error) {
  uint8_t type = 135;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = maplibre_lng_lat_bounds_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean maplibre_message_codec_write_value(FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value, GError** error) {
  if (fl_value_get_type(value) == FL_VALUE_TYPE_CUSTOM) {
    switch (fl_value_get_custom_type(value)) {
      case 129:
        return maplibre_message_codec_write_maplibre_tile_scheme(codec, buffer, reinterpret_cast<FlValue*>(const_cast<gpointer>(fl_value_get_custom_value(value))), error);
      case 130:
        return maplibre_message_codec_write_maplibre_raster_dem_encoding(codec, buffer, reinterpret_cast<FlValue*>(const_cast<gpointer>(fl_value_get_custom_value(value))), error);
      case 131:
        return maplibre_message_codec_write_maplibre_map_options(codec, buffer, MAPLIBRE_MAP_OPTIONS(fl_value_get_custom_value_object(value)), error);
      case 132:
        return maplibre_message_codec_write_maplibre_lng_lat(codec, buffer, MAPLIBRE_LNG_LAT(fl_value_get_custom_value_object(value)), error);
      case 133:
        return maplibre_message_codec_write_maplibre_screen_location(codec, buffer, MAPLIBRE_SCREEN_LOCATION(fl_value_get_custom_value_object(value)), error);
      case 134:
        return maplibre_message_codec_write_maplibre_map_camera(codec, buffer, MAPLIBRE_MAP_CAMERA(fl_value_get_custom_value_object(value)), error);
      case 135:
        return maplibre_message_codec_write_maplibre_lng_lat_bounds(codec, buffer, MAPLIBRE_LNG_LAT_BOUNDS(fl_value_get_custom_value_object(value)), error);
    }
  }

  return FL_STANDARD_MESSAGE_CODEC_CLASS(maplibre_message_codec_parent_class)->write_value(codec, buffer, value, error);
}

static FlValue* maplibre_message_codec_read_maplibre_tile_scheme(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  return fl_value_new_custom(129, fl_standard_message_codec_read_value(codec, buffer, offset, error), (GDestroyNotify)fl_value_unref);
}

static FlValue* maplibre_message_codec_read_maplibre_raster_dem_encoding(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  return fl_value_new_custom(130, fl_standard_message_codec_read_value(codec, buffer, offset, error), (GDestroyNotify)fl_value_unref);
}

static FlValue* maplibre_message_codec_read_maplibre_map_options(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  g_autoptr(FlValue) values = fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(MaplibreMapOptions) value = maplibre_map_options_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED, "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(131, G_OBJECT(value));
}

static FlValue* maplibre_message_codec_read_maplibre_lng_lat(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  g_autoptr(FlValue) values = fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(MaplibreLngLat) value = maplibre_lng_lat_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED, "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(132, G_OBJECT(value));
}

static FlValue* maplibre_message_codec_read_maplibre_screen_location(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  g_autoptr(FlValue) values = fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(MaplibreScreenLocation) value = maplibre_screen_location_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED, "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(133, G_OBJECT(value));
}

static FlValue* maplibre_message_codec_read_maplibre_map_camera(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  g_autoptr(FlValue) values = fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(MaplibreMapCamera) value = maplibre_map_camera_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED, "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(134, G_OBJECT(value));
}

static FlValue* maplibre_message_codec_read_maplibre_lng_lat_bounds(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  g_autoptr(FlValue) values = fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(MaplibreLngLatBounds) value = maplibre_lng_lat_bounds_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED, "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(135, G_OBJECT(value));
}

static FlValue* maplibre_message_codec_read_value_of_type(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, int type, GError** error) {
  switch (type) {
    case 129:
      return maplibre_message_codec_read_maplibre_tile_scheme(codec, buffer, offset, error);
    case 130:
      return maplibre_message_codec_read_maplibre_raster_dem_encoding(codec, buffer, offset, error);
    case 131:
      return maplibre_message_codec_read_maplibre_map_options(codec, buffer, offset, error);
    case 132:
      return maplibre_message_codec_read_maplibre_lng_lat(codec, buffer, offset, error);
    case 133:
      return maplibre_message_codec_read_maplibre_screen_location(codec, buffer, offset, error);
    case 134:
      return maplibre_message_codec_read_maplibre_map_camera(codec, buffer, offset, error);
    case 135:
      return maplibre_message_codec_read_maplibre_lng_lat_bounds(codec, buffer, offset, error);
    default:
      return FL_STANDARD_MESSAGE_CODEC_CLASS(maplibre_message_codec_parent_class)->read_value_of_type(codec, buffer, offset, type, error);
  }
}

static void maplibre_message_codec_init(MaplibreMessageCodec* self) {
}

static void maplibre_message_codec_class_init(MaplibreMessageCodecClass* klass) {
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->write_value = maplibre_message_codec_write_value;
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->read_value_of_type = maplibre_message_codec_read_value_of_type;
}

static MaplibreMessageCodec* maplibre_message_codec_new() {
  MaplibreMessageCodec* self = MAPLIBRE_MESSAGE_CODEC(g_object_new(maplibre_message_codec_get_type(), nullptr));
  return self;
}

struct _MaplibreMapLibreHostApiResponseHandle {
  GObject parent_instance;

  FlBasicMessageChannel* channel;
  FlBasicMessageChannelResponseHandle* response_handle;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiResponseHandle, maplibre_map_libre_host_api_response_handle, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_response_handle_dispose(GObject* object) {
  MaplibreMapLibreHostApiResponseHandle* self = MAPLIBRE_MAP_LIBRE_HOST_API_RESPONSE_HANDLE(object);
  g_clear_object(&self->channel);
  g_clear_object(&self->response_handle);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_response_handle_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_response_handle_init(MaplibreMapLibreHostApiResponseHandle* self) {
}

static void maplibre_map_libre_host_api_response_handle_class_init(MaplibreMapLibreHostApiResponseHandleClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_response_handle_dispose;
}

static MaplibreMapLibreHostApiResponseHandle* maplibre_map_libre_host_api_response_handle_new(FlBasicMessageChannel* channel, FlBasicMessageChannelResponseHandle* response_handle) {
  MaplibreMapLibreHostApiResponseHandle* self = MAPLIBRE_MAP_LIBRE_HOST_API_RESPONSE_HANDLE(g_object_new(maplibre_map_libre_host_api_response_handle_get_type(), nullptr));
  self->channel = FL_BASIC_MESSAGE_CHANNEL(g_object_ref(channel));
  self->response_handle = FL_BASIC_MESSAGE_CHANNEL_RESPONSE_HANDLE(g_object_ref(response_handle));
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiJumpToResponse, maplibre_map_libre_host_api_jump_to_response, MAPLIBRE, MAP_LIBRE_HOST_API_JUMP_TO_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiJumpToResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiJumpToResponse, maplibre_map_libre_host_api_jump_to_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_jump_to_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiJumpToResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_JUMP_TO_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_jump_to_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_jump_to_response_init(MaplibreMapLibreHostApiJumpToResponse* self) {
}

static void maplibre_map_libre_host_api_jump_to_response_class_init(MaplibreMapLibreHostApiJumpToResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_jump_to_response_dispose;
}

static MaplibreMapLibreHostApiJumpToResponse* maplibre_map_libre_host_api_jump_to_response_new() {
  MaplibreMapLibreHostApiJumpToResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_JUMP_TO_RESPONSE(g_object_new(maplibre_map_libre_host_api_jump_to_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiJumpToResponse* maplibre_map_libre_host_api_jump_to_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiJumpToResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_JUMP_TO_RESPONSE(g_object_new(maplibre_map_libre_host_api_jump_to_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiFlyToResponse, maplibre_map_libre_host_api_fly_to_response, MAPLIBRE, MAP_LIBRE_HOST_API_FLY_TO_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiFlyToResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiFlyToResponse, maplibre_map_libre_host_api_fly_to_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_fly_to_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiFlyToResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_FLY_TO_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_fly_to_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_fly_to_response_init(MaplibreMapLibreHostApiFlyToResponse* self) {
}

static void maplibre_map_libre_host_api_fly_to_response_class_init(MaplibreMapLibreHostApiFlyToResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_fly_to_response_dispose;
}

static MaplibreMapLibreHostApiFlyToResponse* maplibre_map_libre_host_api_fly_to_response_new() {
  MaplibreMapLibreHostApiFlyToResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_FLY_TO_RESPONSE(g_object_new(maplibre_map_libre_host_api_fly_to_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiFlyToResponse* maplibre_map_libre_host_api_fly_to_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiFlyToResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_FLY_TO_RESPONSE(g_object_new(maplibre_map_libre_host_api_fly_to_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiGetCameraResponse, maplibre_map_libre_host_api_get_camera_response, MAPLIBRE, MAP_LIBRE_HOST_API_GET_CAMERA_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiGetCameraResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiGetCameraResponse, maplibre_map_libre_host_api_get_camera_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_get_camera_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiGetCameraResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_GET_CAMERA_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_get_camera_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_get_camera_response_init(MaplibreMapLibreHostApiGetCameraResponse* self) {
}

static void maplibre_map_libre_host_api_get_camera_response_class_init(MaplibreMapLibreHostApiGetCameraResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_get_camera_response_dispose;
}

static MaplibreMapLibreHostApiGetCameraResponse* maplibre_map_libre_host_api_get_camera_response_new(MaplibreMapCamera* return_value) {
  MaplibreMapLibreHostApiGetCameraResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_GET_CAMERA_RESPONSE(g_object_new(maplibre_map_libre_host_api_get_camera_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_custom_object(134, G_OBJECT(return_value)));
  return self;
}

static MaplibreMapLibreHostApiGetCameraResponse* maplibre_map_libre_host_api_get_camera_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiGetCameraResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_GET_CAMERA_RESPONSE(g_object_new(maplibre_map_libre_host_api_get_camera_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiGetVisibleRegionResponse, maplibre_map_libre_host_api_get_visible_region_response, MAPLIBRE, MAP_LIBRE_HOST_API_GET_VISIBLE_REGION_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiGetVisibleRegionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiGetVisibleRegionResponse, maplibre_map_libre_host_api_get_visible_region_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_get_visible_region_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiGetVisibleRegionResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_GET_VISIBLE_REGION_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_get_visible_region_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_get_visible_region_response_init(MaplibreMapLibreHostApiGetVisibleRegionResponse* self) {
}

static void maplibre_map_libre_host_api_get_visible_region_response_class_init(MaplibreMapLibreHostApiGetVisibleRegionResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_get_visible_region_response_dispose;
}

static MaplibreMapLibreHostApiGetVisibleRegionResponse* maplibre_map_libre_host_api_get_visible_region_response_new(MaplibreLngLatBounds* return_value) {
  MaplibreMapLibreHostApiGetVisibleRegionResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_GET_VISIBLE_REGION_RESPONSE(g_object_new(maplibre_map_libre_host_api_get_visible_region_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_custom_object(135, G_OBJECT(return_value)));
  return self;
}

static MaplibreMapLibreHostApiGetVisibleRegionResponse* maplibre_map_libre_host_api_get_visible_region_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiGetVisibleRegionResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_GET_VISIBLE_REGION_RESPONSE(g_object_new(maplibre_map_libre_host_api_get_visible_region_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiToScreenLocationResponse, maplibre_map_libre_host_api_to_screen_location_response, MAPLIBRE, MAP_LIBRE_HOST_API_TO_SCREEN_LOCATION_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiToScreenLocationResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiToScreenLocationResponse, maplibre_map_libre_host_api_to_screen_location_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_to_screen_location_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiToScreenLocationResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_TO_SCREEN_LOCATION_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_to_screen_location_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_to_screen_location_response_init(MaplibreMapLibreHostApiToScreenLocationResponse* self) {
}

static void maplibre_map_libre_host_api_to_screen_location_response_class_init(MaplibreMapLibreHostApiToScreenLocationResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_to_screen_location_response_dispose;
}

static MaplibreMapLibreHostApiToScreenLocationResponse* maplibre_map_libre_host_api_to_screen_location_response_new(MaplibreScreenLocation* return_value) {
  MaplibreMapLibreHostApiToScreenLocationResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_TO_SCREEN_LOCATION_RESPONSE(g_object_new(maplibre_map_libre_host_api_to_screen_location_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_custom_object(133, G_OBJECT(return_value)));
  return self;
}

static MaplibreMapLibreHostApiToScreenLocationResponse* maplibre_map_libre_host_api_to_screen_location_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiToScreenLocationResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_TO_SCREEN_LOCATION_RESPONSE(g_object_new(maplibre_map_libre_host_api_to_screen_location_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiToLngLatResponse, maplibre_map_libre_host_api_to_lng_lat_response, MAPLIBRE, MAP_LIBRE_HOST_API_TO_LNG_LAT_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiToLngLatResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiToLngLatResponse, maplibre_map_libre_host_api_to_lng_lat_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_to_lng_lat_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiToLngLatResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_TO_LNG_LAT_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_to_lng_lat_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_to_lng_lat_response_init(MaplibreMapLibreHostApiToLngLatResponse* self) {
}

static void maplibre_map_libre_host_api_to_lng_lat_response_class_init(MaplibreMapLibreHostApiToLngLatResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_to_lng_lat_response_dispose;
}

static MaplibreMapLibreHostApiToLngLatResponse* maplibre_map_libre_host_api_to_lng_lat_response_new(MaplibreLngLat* return_value) {
  MaplibreMapLibreHostApiToLngLatResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_TO_LNG_LAT_RESPONSE(g_object_new(maplibre_map_libre_host_api_to_lng_lat_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_custom_object(132, G_OBJECT(return_value)));
  return self;
}

static MaplibreMapLibreHostApiToLngLatResponse* maplibre_map_libre_host_api_to_lng_lat_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiToLngLatResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_TO_LNG_LAT_RESPONSE(g_object_new(maplibre_map_libre_host_api_to_lng_lat_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiAddFillLayerResponse, maplibre_map_libre_host_api_add_fill_layer_response, MAPLIBRE, MAP_LIBRE_HOST_API_ADD_FILL_LAYER_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiAddFillLayerResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiAddFillLayerResponse, maplibre_map_libre_host_api_add_fill_layer_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_add_fill_layer_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiAddFillLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_FILL_LAYER_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_add_fill_layer_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_add_fill_layer_response_init(MaplibreMapLibreHostApiAddFillLayerResponse* self) {
}

static void maplibre_map_libre_host_api_add_fill_layer_response_class_init(MaplibreMapLibreHostApiAddFillLayerResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_add_fill_layer_response_dispose;
}

static MaplibreMapLibreHostApiAddFillLayerResponse* maplibre_map_libre_host_api_add_fill_layer_response_new() {
  MaplibreMapLibreHostApiAddFillLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_FILL_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_fill_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiAddFillLayerResponse* maplibre_map_libre_host_api_add_fill_layer_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiAddFillLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_FILL_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_fill_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiAddCircleLayerResponse, maplibre_map_libre_host_api_add_circle_layer_response, MAPLIBRE, MAP_LIBRE_HOST_API_ADD_CIRCLE_LAYER_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiAddCircleLayerResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiAddCircleLayerResponse, maplibre_map_libre_host_api_add_circle_layer_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_add_circle_layer_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiAddCircleLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_CIRCLE_LAYER_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_add_circle_layer_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_add_circle_layer_response_init(MaplibreMapLibreHostApiAddCircleLayerResponse* self) {
}

static void maplibre_map_libre_host_api_add_circle_layer_response_class_init(MaplibreMapLibreHostApiAddCircleLayerResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_add_circle_layer_response_dispose;
}

static MaplibreMapLibreHostApiAddCircleLayerResponse* maplibre_map_libre_host_api_add_circle_layer_response_new() {
  MaplibreMapLibreHostApiAddCircleLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_CIRCLE_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_circle_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiAddCircleLayerResponse* maplibre_map_libre_host_api_add_circle_layer_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiAddCircleLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_CIRCLE_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_circle_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiAddBackgroundLayerResponse, maplibre_map_libre_host_api_add_background_layer_response, MAPLIBRE, MAP_LIBRE_HOST_API_ADD_BACKGROUND_LAYER_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiAddBackgroundLayerResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiAddBackgroundLayerResponse, maplibre_map_libre_host_api_add_background_layer_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_add_background_layer_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiAddBackgroundLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_BACKGROUND_LAYER_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_add_background_layer_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_add_background_layer_response_init(MaplibreMapLibreHostApiAddBackgroundLayerResponse* self) {
}

static void maplibre_map_libre_host_api_add_background_layer_response_class_init(MaplibreMapLibreHostApiAddBackgroundLayerResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_add_background_layer_response_dispose;
}

static MaplibreMapLibreHostApiAddBackgroundLayerResponse* maplibre_map_libre_host_api_add_background_layer_response_new() {
  MaplibreMapLibreHostApiAddBackgroundLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_BACKGROUND_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_background_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiAddBackgroundLayerResponse* maplibre_map_libre_host_api_add_background_layer_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiAddBackgroundLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_BACKGROUND_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_background_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiAddFillExtrusionLayerResponse, maplibre_map_libre_host_api_add_fill_extrusion_layer_response, MAPLIBRE, MAP_LIBRE_HOST_API_ADD_FILL_EXTRUSION_LAYER_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiAddFillExtrusionLayerResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiAddFillExtrusionLayerResponse, maplibre_map_libre_host_api_add_fill_extrusion_layer_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_add_fill_extrusion_layer_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiAddFillExtrusionLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_FILL_EXTRUSION_LAYER_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_add_fill_extrusion_layer_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_add_fill_extrusion_layer_response_init(MaplibreMapLibreHostApiAddFillExtrusionLayerResponse* self) {
}

static void maplibre_map_libre_host_api_add_fill_extrusion_layer_response_class_init(MaplibreMapLibreHostApiAddFillExtrusionLayerResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_add_fill_extrusion_layer_response_dispose;
}

static MaplibreMapLibreHostApiAddFillExtrusionLayerResponse* maplibre_map_libre_host_api_add_fill_extrusion_layer_response_new() {
  MaplibreMapLibreHostApiAddFillExtrusionLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_FILL_EXTRUSION_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_fill_extrusion_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiAddFillExtrusionLayerResponse* maplibre_map_libre_host_api_add_fill_extrusion_layer_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiAddFillExtrusionLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_FILL_EXTRUSION_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_fill_extrusion_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiAddHeatmapLayerResponse, maplibre_map_libre_host_api_add_heatmap_layer_response, MAPLIBRE, MAP_LIBRE_HOST_API_ADD_HEATMAP_LAYER_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiAddHeatmapLayerResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiAddHeatmapLayerResponse, maplibre_map_libre_host_api_add_heatmap_layer_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_add_heatmap_layer_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiAddHeatmapLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_HEATMAP_LAYER_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_add_heatmap_layer_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_add_heatmap_layer_response_init(MaplibreMapLibreHostApiAddHeatmapLayerResponse* self) {
}

static void maplibre_map_libre_host_api_add_heatmap_layer_response_class_init(MaplibreMapLibreHostApiAddHeatmapLayerResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_add_heatmap_layer_response_dispose;
}

static MaplibreMapLibreHostApiAddHeatmapLayerResponse* maplibre_map_libre_host_api_add_heatmap_layer_response_new() {
  MaplibreMapLibreHostApiAddHeatmapLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_HEATMAP_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_heatmap_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiAddHeatmapLayerResponse* maplibre_map_libre_host_api_add_heatmap_layer_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiAddHeatmapLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_HEATMAP_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_heatmap_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiAddHillshadeLayerResponse, maplibre_map_libre_host_api_add_hillshade_layer_response, MAPLIBRE, MAP_LIBRE_HOST_API_ADD_HILLSHADE_LAYER_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiAddHillshadeLayerResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiAddHillshadeLayerResponse, maplibre_map_libre_host_api_add_hillshade_layer_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_add_hillshade_layer_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiAddHillshadeLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_HILLSHADE_LAYER_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_add_hillshade_layer_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_add_hillshade_layer_response_init(MaplibreMapLibreHostApiAddHillshadeLayerResponse* self) {
}

static void maplibre_map_libre_host_api_add_hillshade_layer_response_class_init(MaplibreMapLibreHostApiAddHillshadeLayerResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_add_hillshade_layer_response_dispose;
}

static MaplibreMapLibreHostApiAddHillshadeLayerResponse* maplibre_map_libre_host_api_add_hillshade_layer_response_new() {
  MaplibreMapLibreHostApiAddHillshadeLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_HILLSHADE_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_hillshade_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiAddHillshadeLayerResponse* maplibre_map_libre_host_api_add_hillshade_layer_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiAddHillshadeLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_HILLSHADE_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_hillshade_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiAddLineLayerResponse, maplibre_map_libre_host_api_add_line_layer_response, MAPLIBRE, MAP_LIBRE_HOST_API_ADD_LINE_LAYER_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiAddLineLayerResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiAddLineLayerResponse, maplibre_map_libre_host_api_add_line_layer_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_add_line_layer_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiAddLineLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_LINE_LAYER_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_add_line_layer_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_add_line_layer_response_init(MaplibreMapLibreHostApiAddLineLayerResponse* self) {
}

static void maplibre_map_libre_host_api_add_line_layer_response_class_init(MaplibreMapLibreHostApiAddLineLayerResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_add_line_layer_response_dispose;
}

static MaplibreMapLibreHostApiAddLineLayerResponse* maplibre_map_libre_host_api_add_line_layer_response_new() {
  MaplibreMapLibreHostApiAddLineLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_LINE_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_line_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiAddLineLayerResponse* maplibre_map_libre_host_api_add_line_layer_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiAddLineLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_LINE_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_line_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiAddRasterLayerResponse, maplibre_map_libre_host_api_add_raster_layer_response, MAPLIBRE, MAP_LIBRE_HOST_API_ADD_RASTER_LAYER_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiAddRasterLayerResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiAddRasterLayerResponse, maplibre_map_libre_host_api_add_raster_layer_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_add_raster_layer_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiAddRasterLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_RASTER_LAYER_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_add_raster_layer_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_add_raster_layer_response_init(MaplibreMapLibreHostApiAddRasterLayerResponse* self) {
}

static void maplibre_map_libre_host_api_add_raster_layer_response_class_init(MaplibreMapLibreHostApiAddRasterLayerResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_add_raster_layer_response_dispose;
}

static MaplibreMapLibreHostApiAddRasterLayerResponse* maplibre_map_libre_host_api_add_raster_layer_response_new() {
  MaplibreMapLibreHostApiAddRasterLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_RASTER_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_raster_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiAddRasterLayerResponse* maplibre_map_libre_host_api_add_raster_layer_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiAddRasterLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_RASTER_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_raster_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiAddSymbolLayerResponse, maplibre_map_libre_host_api_add_symbol_layer_response, MAPLIBRE, MAP_LIBRE_HOST_API_ADD_SYMBOL_LAYER_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiAddSymbolLayerResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiAddSymbolLayerResponse, maplibre_map_libre_host_api_add_symbol_layer_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_add_symbol_layer_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiAddSymbolLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_SYMBOL_LAYER_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_add_symbol_layer_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_add_symbol_layer_response_init(MaplibreMapLibreHostApiAddSymbolLayerResponse* self) {
}

static void maplibre_map_libre_host_api_add_symbol_layer_response_class_init(MaplibreMapLibreHostApiAddSymbolLayerResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_add_symbol_layer_response_dispose;
}

static MaplibreMapLibreHostApiAddSymbolLayerResponse* maplibre_map_libre_host_api_add_symbol_layer_response_new() {
  MaplibreMapLibreHostApiAddSymbolLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_SYMBOL_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_symbol_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiAddSymbolLayerResponse* maplibre_map_libre_host_api_add_symbol_layer_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiAddSymbolLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_SYMBOL_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_symbol_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiRemoveLayerResponse, maplibre_map_libre_host_api_remove_layer_response, MAPLIBRE, MAP_LIBRE_HOST_API_REMOVE_LAYER_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiRemoveLayerResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiRemoveLayerResponse, maplibre_map_libre_host_api_remove_layer_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_remove_layer_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiRemoveLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_REMOVE_LAYER_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_remove_layer_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_remove_layer_response_init(MaplibreMapLibreHostApiRemoveLayerResponse* self) {
}

static void maplibre_map_libre_host_api_remove_layer_response_class_init(MaplibreMapLibreHostApiRemoveLayerResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_remove_layer_response_dispose;
}

static MaplibreMapLibreHostApiRemoveLayerResponse* maplibre_map_libre_host_api_remove_layer_response_new() {
  MaplibreMapLibreHostApiRemoveLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_REMOVE_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_remove_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiRemoveLayerResponse* maplibre_map_libre_host_api_remove_layer_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiRemoveLayerResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_REMOVE_LAYER_RESPONSE(g_object_new(maplibre_map_libre_host_api_remove_layer_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiRemoveSourceResponse, maplibre_map_libre_host_api_remove_source_response, MAPLIBRE, MAP_LIBRE_HOST_API_REMOVE_SOURCE_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiRemoveSourceResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiRemoveSourceResponse, maplibre_map_libre_host_api_remove_source_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_remove_source_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiRemoveSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_REMOVE_SOURCE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_remove_source_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_remove_source_response_init(MaplibreMapLibreHostApiRemoveSourceResponse* self) {
}

static void maplibre_map_libre_host_api_remove_source_response_class_init(MaplibreMapLibreHostApiRemoveSourceResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_remove_source_response_dispose;
}

static MaplibreMapLibreHostApiRemoveSourceResponse* maplibre_map_libre_host_api_remove_source_response_new() {
  MaplibreMapLibreHostApiRemoveSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_REMOVE_SOURCE_RESPONSE(g_object_new(maplibre_map_libre_host_api_remove_source_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiRemoveSourceResponse* maplibre_map_libre_host_api_remove_source_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiRemoveSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_REMOVE_SOURCE_RESPONSE(g_object_new(maplibre_map_libre_host_api_remove_source_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiLoadImageResponse, maplibre_map_libre_host_api_load_image_response, MAPLIBRE, MAP_LIBRE_HOST_API_LOAD_IMAGE_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiLoadImageResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiLoadImageResponse, maplibre_map_libre_host_api_load_image_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_load_image_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiLoadImageResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_LOAD_IMAGE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_load_image_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_load_image_response_init(MaplibreMapLibreHostApiLoadImageResponse* self) {
}

static void maplibre_map_libre_host_api_load_image_response_class_init(MaplibreMapLibreHostApiLoadImageResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_load_image_response_dispose;
}

static MaplibreMapLibreHostApiLoadImageResponse* maplibre_map_libre_host_api_load_image_response_new(const uint8_t* return_value, size_t return_value_length) {
  MaplibreMapLibreHostApiLoadImageResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_LOAD_IMAGE_RESPONSE(g_object_new(maplibre_map_libre_host_api_load_image_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_uint8_list(return_value, return_value_length));
  return self;
}

static MaplibreMapLibreHostApiLoadImageResponse* maplibre_map_libre_host_api_load_image_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiLoadImageResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_LOAD_IMAGE_RESPONSE(g_object_new(maplibre_map_libre_host_api_load_image_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiAddImageResponse, maplibre_map_libre_host_api_add_image_response, MAPLIBRE, MAP_LIBRE_HOST_API_ADD_IMAGE_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiAddImageResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiAddImageResponse, maplibre_map_libre_host_api_add_image_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_add_image_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiAddImageResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_IMAGE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_add_image_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_add_image_response_init(MaplibreMapLibreHostApiAddImageResponse* self) {
}

static void maplibre_map_libre_host_api_add_image_response_class_init(MaplibreMapLibreHostApiAddImageResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_add_image_response_dispose;
}

static MaplibreMapLibreHostApiAddImageResponse* maplibre_map_libre_host_api_add_image_response_new() {
  MaplibreMapLibreHostApiAddImageResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_IMAGE_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_image_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiAddImageResponse* maplibre_map_libre_host_api_add_image_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiAddImageResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_IMAGE_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_image_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiRemoveImageResponse, maplibre_map_libre_host_api_remove_image_response, MAPLIBRE, MAP_LIBRE_HOST_API_REMOVE_IMAGE_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiRemoveImageResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiRemoveImageResponse, maplibre_map_libre_host_api_remove_image_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_remove_image_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiRemoveImageResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_REMOVE_IMAGE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_remove_image_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_remove_image_response_init(MaplibreMapLibreHostApiRemoveImageResponse* self) {
}

static void maplibre_map_libre_host_api_remove_image_response_class_init(MaplibreMapLibreHostApiRemoveImageResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_remove_image_response_dispose;
}

static MaplibreMapLibreHostApiRemoveImageResponse* maplibre_map_libre_host_api_remove_image_response_new() {
  MaplibreMapLibreHostApiRemoveImageResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_REMOVE_IMAGE_RESPONSE(g_object_new(maplibre_map_libre_host_api_remove_image_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiRemoveImageResponse* maplibre_map_libre_host_api_remove_image_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiRemoveImageResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_REMOVE_IMAGE_RESPONSE(g_object_new(maplibre_map_libre_host_api_remove_image_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiAddGeoJsonSourceResponse, maplibre_map_libre_host_api_add_geo_json_source_response, MAPLIBRE, MAP_LIBRE_HOST_API_ADD_GEO_JSON_SOURCE_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiAddGeoJsonSourceResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiAddGeoJsonSourceResponse, maplibre_map_libre_host_api_add_geo_json_source_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_add_geo_json_source_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiAddGeoJsonSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_GEO_JSON_SOURCE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_add_geo_json_source_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_add_geo_json_source_response_init(MaplibreMapLibreHostApiAddGeoJsonSourceResponse* self) {
}

static void maplibre_map_libre_host_api_add_geo_json_source_response_class_init(MaplibreMapLibreHostApiAddGeoJsonSourceResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_add_geo_json_source_response_dispose;
}

static MaplibreMapLibreHostApiAddGeoJsonSourceResponse* maplibre_map_libre_host_api_add_geo_json_source_response_new() {
  MaplibreMapLibreHostApiAddGeoJsonSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_GEO_JSON_SOURCE_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_geo_json_source_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiAddGeoJsonSourceResponse* maplibre_map_libre_host_api_add_geo_json_source_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiAddGeoJsonSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_GEO_JSON_SOURCE_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_geo_json_source_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiAddImageSourceResponse, maplibre_map_libre_host_api_add_image_source_response, MAPLIBRE, MAP_LIBRE_HOST_API_ADD_IMAGE_SOURCE_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiAddImageSourceResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiAddImageSourceResponse, maplibre_map_libre_host_api_add_image_source_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_add_image_source_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiAddImageSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_IMAGE_SOURCE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_add_image_source_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_add_image_source_response_init(MaplibreMapLibreHostApiAddImageSourceResponse* self) {
}

static void maplibre_map_libre_host_api_add_image_source_response_class_init(MaplibreMapLibreHostApiAddImageSourceResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_add_image_source_response_dispose;
}

static MaplibreMapLibreHostApiAddImageSourceResponse* maplibre_map_libre_host_api_add_image_source_response_new() {
  MaplibreMapLibreHostApiAddImageSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_IMAGE_SOURCE_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_image_source_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiAddImageSourceResponse* maplibre_map_libre_host_api_add_image_source_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiAddImageSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_IMAGE_SOURCE_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_image_source_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiAddRasterSourceResponse, maplibre_map_libre_host_api_add_raster_source_response, MAPLIBRE, MAP_LIBRE_HOST_API_ADD_RASTER_SOURCE_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiAddRasterSourceResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiAddRasterSourceResponse, maplibre_map_libre_host_api_add_raster_source_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_add_raster_source_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiAddRasterSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_RASTER_SOURCE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_add_raster_source_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_add_raster_source_response_init(MaplibreMapLibreHostApiAddRasterSourceResponse* self) {
}

static void maplibre_map_libre_host_api_add_raster_source_response_class_init(MaplibreMapLibreHostApiAddRasterSourceResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_add_raster_source_response_dispose;
}

static MaplibreMapLibreHostApiAddRasterSourceResponse* maplibre_map_libre_host_api_add_raster_source_response_new() {
  MaplibreMapLibreHostApiAddRasterSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_RASTER_SOURCE_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_raster_source_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiAddRasterSourceResponse* maplibre_map_libre_host_api_add_raster_source_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiAddRasterSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_RASTER_SOURCE_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_raster_source_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiAddRasterDemSourceResponse, maplibre_map_libre_host_api_add_raster_dem_source_response, MAPLIBRE, MAP_LIBRE_HOST_API_ADD_RASTER_DEM_SOURCE_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiAddRasterDemSourceResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiAddRasterDemSourceResponse, maplibre_map_libre_host_api_add_raster_dem_source_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_add_raster_dem_source_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiAddRasterDemSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_RASTER_DEM_SOURCE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_add_raster_dem_source_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_add_raster_dem_source_response_init(MaplibreMapLibreHostApiAddRasterDemSourceResponse* self) {
}

static void maplibre_map_libre_host_api_add_raster_dem_source_response_class_init(MaplibreMapLibreHostApiAddRasterDemSourceResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_add_raster_dem_source_response_dispose;
}

static MaplibreMapLibreHostApiAddRasterDemSourceResponse* maplibre_map_libre_host_api_add_raster_dem_source_response_new() {
  MaplibreMapLibreHostApiAddRasterDemSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_RASTER_DEM_SOURCE_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_raster_dem_source_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiAddRasterDemSourceResponse* maplibre_map_libre_host_api_add_raster_dem_source_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiAddRasterDemSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_RASTER_DEM_SOURCE_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_raster_dem_source_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiAddVectorSourceResponse, maplibre_map_libre_host_api_add_vector_source_response, MAPLIBRE, MAP_LIBRE_HOST_API_ADD_VECTOR_SOURCE_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiAddVectorSourceResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiAddVectorSourceResponse, maplibre_map_libre_host_api_add_vector_source_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_add_vector_source_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiAddVectorSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_VECTOR_SOURCE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_add_vector_source_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_add_vector_source_response_init(MaplibreMapLibreHostApiAddVectorSourceResponse* self) {
}

static void maplibre_map_libre_host_api_add_vector_source_response_class_init(MaplibreMapLibreHostApiAddVectorSourceResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_add_vector_source_response_dispose;
}

static MaplibreMapLibreHostApiAddVectorSourceResponse* maplibre_map_libre_host_api_add_vector_source_response_new() {
  MaplibreMapLibreHostApiAddVectorSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_VECTOR_SOURCE_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_vector_source_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiAddVectorSourceResponse* maplibre_map_libre_host_api_add_vector_source_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiAddVectorSourceResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_ADD_VECTOR_SOURCE_RESPONSE(g_object_new(maplibre_map_libre_host_api_add_vector_source_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _MaplibreMapLibreHostApiGetMetersPerPixelAtLatitudeResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiGetMetersPerPixelAtLatitudeResponse, maplibre_map_libre_host_api_get_meters_per_pixel_at_latitude_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_get_meters_per_pixel_at_latitude_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiGetMetersPerPixelAtLatitudeResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_GET_METERS_PER_PIXEL_AT_LATITUDE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_get_meters_per_pixel_at_latitude_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_get_meters_per_pixel_at_latitude_response_init(MaplibreMapLibreHostApiGetMetersPerPixelAtLatitudeResponse* self) {
}

static void maplibre_map_libre_host_api_get_meters_per_pixel_at_latitude_response_class_init(MaplibreMapLibreHostApiGetMetersPerPixelAtLatitudeResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_get_meters_per_pixel_at_latitude_response_dispose;
}

MaplibreMapLibreHostApiGetMetersPerPixelAtLatitudeResponse* maplibre_map_libre_host_api_get_meters_per_pixel_at_latitude_response_new(double return_value) {
  MaplibreMapLibreHostApiGetMetersPerPixelAtLatitudeResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_GET_METERS_PER_PIXEL_AT_LATITUDE_RESPONSE(g_object_new(maplibre_map_libre_host_api_get_meters_per_pixel_at_latitude_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_float(return_value));
  return self;
}

MaplibreMapLibreHostApiGetMetersPerPixelAtLatitudeResponse* maplibre_map_libre_host_api_get_meters_per_pixel_at_latitude_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiGetMetersPerPixelAtLatitudeResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_GET_METERS_PER_PIXEL_AT_LATITUDE_RESPONSE(g_object_new(maplibre_map_libre_host_api_get_meters_per_pixel_at_latitude_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApiUpdateOptionsResponse, maplibre_map_libre_host_api_update_options_response, MAPLIBRE, MAP_LIBRE_HOST_API_UPDATE_OPTIONS_RESPONSE, GObject)

struct _MaplibreMapLibreHostApiUpdateOptionsResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApiUpdateOptionsResponse, maplibre_map_libre_host_api_update_options_response, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_update_options_response_dispose(GObject* object) {
  MaplibreMapLibreHostApiUpdateOptionsResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_UPDATE_OPTIONS_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_host_api_update_options_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_update_options_response_init(MaplibreMapLibreHostApiUpdateOptionsResponse* self) {
}

static void maplibre_map_libre_host_api_update_options_response_class_init(MaplibreMapLibreHostApiUpdateOptionsResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_update_options_response_dispose;
}

static MaplibreMapLibreHostApiUpdateOptionsResponse* maplibre_map_libre_host_api_update_options_response_new() {
  MaplibreMapLibreHostApiUpdateOptionsResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_UPDATE_OPTIONS_RESPONSE(g_object_new(maplibre_map_libre_host_api_update_options_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MaplibreMapLibreHostApiUpdateOptionsResponse* maplibre_map_libre_host_api_update_options_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  MaplibreMapLibreHostApiUpdateOptionsResponse* self = MAPLIBRE_MAP_LIBRE_HOST_API_UPDATE_OPTIONS_RESPONSE(g_object_new(maplibre_map_libre_host_api_update_options_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(MaplibreMapLibreHostApi, maplibre_map_libre_host_api, MAPLIBRE, MAP_LIBRE_HOST_API, GObject)

struct _MaplibreMapLibreHostApi {
  GObject parent_instance;

  const MaplibreMapLibreHostApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;
};

G_DEFINE_TYPE(MaplibreMapLibreHostApi, maplibre_map_libre_host_api, G_TYPE_OBJECT)

static void maplibre_map_libre_host_api_dispose(GObject* object) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(object);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;
  G_OBJECT_CLASS(maplibre_map_libre_host_api_parent_class)->dispose(object);
}

static void maplibre_map_libre_host_api_init(MaplibreMapLibreHostApi* self) {
}

static void maplibre_map_libre_host_api_class_init(MaplibreMapLibreHostApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_host_api_dispose;
}

static MaplibreMapLibreHostApi* maplibre_map_libre_host_api_new(const MaplibreMapLibreHostApiVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(g_object_new(maplibre_map_libre_host_api_get_type(), nullptr));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;
  return self;
}

static void maplibre_map_libre_host_api_jump_to_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->jump_to == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  MaplibreLngLat* center = MAPLIBRE_LNG_LAT(fl_value_get_custom_value_object(value0));
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  double* zoom = nullptr;
  double zoom_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    zoom_value = fl_value_get_float(value1);
    zoom = &zoom_value;
  }
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  double* bearing = nullptr;
  double bearing_value;
  if (fl_value_get_type(value2) != FL_VALUE_TYPE_NULL) {
    bearing_value = fl_value_get_float(value2);
    bearing = &bearing_value;
  }
  FlValue* value3 = fl_value_get_list_value(message_, 3);
  double* pitch = nullptr;
  double pitch_value;
  if (fl_value_get_type(value3) != FL_VALUE_TYPE_NULL) {
    pitch_value = fl_value_get_float(value3);
    pitch = &pitch_value;
  }
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->jump_to(center, zoom, bearing, pitch, handle, self->user_data);
}

static void maplibre_map_libre_host_api_fly_to_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->fly_to == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  MaplibreLngLat* center = MAPLIBRE_LNG_LAT(fl_value_get_custom_value_object(value0));
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  double* zoom = nullptr;
  double zoom_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    zoom_value = fl_value_get_float(value1);
    zoom = &zoom_value;
  }
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  double* bearing = nullptr;
  double bearing_value;
  if (fl_value_get_type(value2) != FL_VALUE_TYPE_NULL) {
    bearing_value = fl_value_get_float(value2);
    bearing = &bearing_value;
  }
  FlValue* value3 = fl_value_get_list_value(message_, 3);
  double* pitch = nullptr;
  double pitch_value;
  if (fl_value_get_type(value3) != FL_VALUE_TYPE_NULL) {
    pitch_value = fl_value_get_float(value3);
    pitch = &pitch_value;
  }
  FlValue* value4 = fl_value_get_list_value(message_, 4);
  int64_t duration_ms = fl_value_get_int(value4);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->fly_to(center, zoom, bearing, pitch, duration_ms, handle, self->user_data);
}

static void maplibre_map_libre_host_api_get_camera_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->get_camera == nullptr) {
    return;
  }

  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->get_camera(handle, self->user_data);
}

static void maplibre_map_libre_host_api_get_visible_region_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->get_visible_region == nullptr) {
    return;
  }

  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->get_visible_region(handle, self->user_data);
}

static void maplibre_map_libre_host_api_to_screen_location_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->to_screen_location == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double lng = fl_value_get_float(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  double lat = fl_value_get_float(value1);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->to_screen_location(lng, lat, handle, self->user_data);
}

static void maplibre_map_libre_host_api_to_lng_lat_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->to_lng_lat == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double x = fl_value_get_float(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  double y = fl_value_get_float(value1);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->to_lng_lat(x, y, handle, self->user_data);
}

static void maplibre_map_libre_host_api_add_fill_layer_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add_fill_layer == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  const gchar* source_id = fl_value_get_string(value1);
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  FlValue* layout = value2;
  FlValue* value3 = fl_value_get_list_value(message_, 3);
  FlValue* paint = value3;
  FlValue* value4 = fl_value_get_list_value(message_, 4);
  const gchar* below_layer_id = fl_value_get_string(value4);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->add_fill_layer(id, source_id, layout, paint, below_layer_id, handle, self->user_data);
}

static void maplibre_map_libre_host_api_add_circle_layer_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add_circle_layer == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  const gchar* source_id = fl_value_get_string(value1);
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  FlValue* layout = value2;
  FlValue* value3 = fl_value_get_list_value(message_, 3);
  FlValue* paint = value3;
  FlValue* value4 = fl_value_get_list_value(message_, 4);
  const gchar* below_layer_id = fl_value_get_string(value4);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->add_circle_layer(id, source_id, layout, paint, below_layer_id, handle, self->user_data);
}

static void maplibre_map_libre_host_api_add_background_layer_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add_background_layer == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  FlValue* layout = value1;
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  FlValue* paint = value2;
  FlValue* value3 = fl_value_get_list_value(message_, 3);
  const gchar* below_layer_id = fl_value_get_string(value3);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->add_background_layer(id, layout, paint, below_layer_id, handle, self->user_data);
}

static void maplibre_map_libre_host_api_add_fill_extrusion_layer_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add_fill_extrusion_layer == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  const gchar* source_id = fl_value_get_string(value1);
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  FlValue* layout = value2;
  FlValue* value3 = fl_value_get_list_value(message_, 3);
  FlValue* paint = value3;
  FlValue* value4 = fl_value_get_list_value(message_, 4);
  const gchar* below_layer_id = fl_value_get_string(value4);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->add_fill_extrusion_layer(id, source_id, layout, paint, below_layer_id, handle, self->user_data);
}

static void maplibre_map_libre_host_api_add_heatmap_layer_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add_heatmap_layer == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  const gchar* source_id = fl_value_get_string(value1);
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  FlValue* layout = value2;
  FlValue* value3 = fl_value_get_list_value(message_, 3);
  FlValue* paint = value3;
  FlValue* value4 = fl_value_get_list_value(message_, 4);
  const gchar* below_layer_id = fl_value_get_string(value4);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->add_heatmap_layer(id, source_id, layout, paint, below_layer_id, handle, self->user_data);
}

static void maplibre_map_libre_host_api_add_hillshade_layer_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add_hillshade_layer == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  const gchar* source_id = fl_value_get_string(value1);
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  FlValue* layout = value2;
  FlValue* value3 = fl_value_get_list_value(message_, 3);
  FlValue* paint = value3;
  FlValue* value4 = fl_value_get_list_value(message_, 4);
  const gchar* below_layer_id = fl_value_get_string(value4);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->add_hillshade_layer(id, source_id, layout, paint, below_layer_id, handle, self->user_data);
}

static void maplibre_map_libre_host_api_add_line_layer_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add_line_layer == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  const gchar* source_id = fl_value_get_string(value1);
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  FlValue* layout = value2;
  FlValue* value3 = fl_value_get_list_value(message_, 3);
  FlValue* paint = value3;
  FlValue* value4 = fl_value_get_list_value(message_, 4);
  const gchar* below_layer_id = fl_value_get_string(value4);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->add_line_layer(id, source_id, layout, paint, below_layer_id, handle, self->user_data);
}

static void maplibre_map_libre_host_api_add_raster_layer_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add_raster_layer == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  const gchar* source_id = fl_value_get_string(value1);
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  FlValue* layout = value2;
  FlValue* value3 = fl_value_get_list_value(message_, 3);
  FlValue* paint = value3;
  FlValue* value4 = fl_value_get_list_value(message_, 4);
  const gchar* below_layer_id = fl_value_get_string(value4);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->add_raster_layer(id, source_id, layout, paint, below_layer_id, handle, self->user_data);
}

static void maplibre_map_libre_host_api_add_symbol_layer_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add_symbol_layer == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  const gchar* source_id = fl_value_get_string(value1);
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  FlValue* layout = value2;
  FlValue* value3 = fl_value_get_list_value(message_, 3);
  FlValue* paint = value3;
  FlValue* value4 = fl_value_get_list_value(message_, 4);
  const gchar* below_layer_id = fl_value_get_string(value4);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->add_symbol_layer(id, source_id, layout, paint, below_layer_id, handle, self->user_data);
}

static void maplibre_map_libre_host_api_remove_layer_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->remove_layer == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->remove_layer(id, handle, self->user_data);
}

static void maplibre_map_libre_host_api_remove_source_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->remove_source == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->remove_source(id, handle, self->user_data);
}

static void maplibre_map_libre_host_api_load_image_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->load_image == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* url = fl_value_get_string(value0);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->load_image(url, handle, self->user_data);
}

static void maplibre_map_libre_host_api_add_image_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add_image == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  const uint8_t* bytes = fl_value_get_uint8_list(value1);
  size_t bytes_length = fl_value_get_length(value1);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->add_image(id, bytes, bytes_length, handle, self->user_data);
}

static void maplibre_map_libre_host_api_remove_image_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->remove_image == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->remove_image(id, handle, self->user_data);
}

static void maplibre_map_libre_host_api_add_geo_json_source_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add_geo_json_source == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  const gchar* data = fl_value_get_string(value1);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->add_geo_json_source(id, data, handle, self->user_data);
}

static void maplibre_map_libre_host_api_add_image_source_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add_image_source == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  const gchar* url = fl_value_get_string(value1);
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  FlValue* coordinates = value2;
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->add_image_source(id, url, coordinates, handle, self->user_data);
}

static void maplibre_map_libre_host_api_add_raster_source_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add_raster_source == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  const gchar* url = fl_value_get_string(value1);
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  FlValue* tiles = value2;
  FlValue* value3 = fl_value_get_list_value(message_, 3);
  FlValue* bounds = value3;
  FlValue* value4 = fl_value_get_list_value(message_, 4);
  double min_zoom = fl_value_get_float(value4);
  FlValue* value5 = fl_value_get_list_value(message_, 5);
  double max_zoom = fl_value_get_float(value5);
  FlValue* value6 = fl_value_get_list_value(message_, 6);
  int64_t tile_size = fl_value_get_int(value6);
  FlValue* value7 = fl_value_get_list_value(message_, 7);
  MaplibreTileScheme scheme = static_cast<MaplibreTileScheme>(fl_value_get_int(reinterpret_cast<FlValue*>(const_cast<gpointer>(fl_value_get_custom_value(value7)))));
  FlValue* value8 = fl_value_get_list_value(message_, 8);
  const gchar* attribution = fl_value_get_string(value8);
  FlValue* value9 = fl_value_get_list_value(message_, 9);
  gboolean volatile = fl_value_get_bool(value9);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->add_raster_source(id, url, tiles, bounds, min_zoom, max_zoom, tile_size, scheme, attribution, volatile, handle, self->user_data);
}

static void maplibre_map_libre_host_api_add_raster_dem_source_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add_raster_dem_source == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  const gchar* url = fl_value_get_string(value1);
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  FlValue* tiles = value2;
  FlValue* value3 = fl_value_get_list_value(message_, 3);
  FlValue* bounds = value3;
  FlValue* value4 = fl_value_get_list_value(message_, 4);
  double min_zoom = fl_value_get_float(value4);
  FlValue* value5 = fl_value_get_list_value(message_, 5);
  double max_zoom = fl_value_get_float(value5);
  FlValue* value6 = fl_value_get_list_value(message_, 6);
  int64_t tile_size = fl_value_get_int(value6);
  FlValue* value7 = fl_value_get_list_value(message_, 7);
  const gchar* attribution = fl_value_get_string(value7);
  FlValue* value8 = fl_value_get_list_value(message_, 8);
  MaplibreRasterDemEncoding encoding = static_cast<MaplibreRasterDemEncoding>(fl_value_get_int(reinterpret_cast<FlValue*>(const_cast<gpointer>(fl_value_get_custom_value(value8)))));
  FlValue* value9 = fl_value_get_list_value(message_, 9);
  gboolean volatile = fl_value_get_bool(value9);
  FlValue* value10 = fl_value_get_list_value(message_, 10);
  double red_factor = fl_value_get_float(value10);
  FlValue* value11 = fl_value_get_list_value(message_, 11);
  double blue_factor = fl_value_get_float(value11);
  FlValue* value12 = fl_value_get_list_value(message_, 12);
  double green_factor = fl_value_get_float(value12);
  FlValue* value13 = fl_value_get_list_value(message_, 13);
  double base_shift = fl_value_get_float(value13);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->add_raster_dem_source(id, url, tiles, bounds, min_zoom, max_zoom, tile_size, attribution, encoding, volatile, red_factor, blue_factor, green_factor, base_shift, handle, self->user_data);
}

static void maplibre_map_libre_host_api_add_vector_source_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add_vector_source == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* id = fl_value_get_string(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  const gchar* url = fl_value_get_string(value1);
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  FlValue* tiles = value2;
  FlValue* value3 = fl_value_get_list_value(message_, 3);
  FlValue* bounds = value3;
  FlValue* value4 = fl_value_get_list_value(message_, 4);
  MaplibreTileScheme scheme = static_cast<MaplibreTileScheme>(fl_value_get_int(reinterpret_cast<FlValue*>(const_cast<gpointer>(fl_value_get_custom_value(value4)))));
  FlValue* value5 = fl_value_get_list_value(message_, 5);
  double min_zoom = fl_value_get_float(value5);
  FlValue* value6 = fl_value_get_list_value(message_, 6);
  double max_zoom = fl_value_get_float(value6);
  FlValue* value7 = fl_value_get_list_value(message_, 7);
  const gchar* attribution = fl_value_get_string(value7);
  FlValue* value8 = fl_value_get_list_value(message_, 8);
  gboolean volatile = fl_value_get_bool(value8);
  FlValue* value9 = fl_value_get_list_value(message_, 9);
  const gchar* source_layer = fl_value_get_string(value9);
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->add_vector_source(id, url, tiles, bounds, scheme, min_zoom, max_zoom, attribution, volatile, source_layer, handle, self->user_data);
}

static void maplibre_map_libre_host_api_get_meters_per_pixel_at_latitude_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->get_meters_per_pixel_at_latitude == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double latitude = fl_value_get_float(value0);
  g_autoptr(MaplibreMapLibreHostApiGetMetersPerPixelAtLatitudeResponse) response = self->vtable->get_meters_per_pixel_at_latitude(latitude, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "MapLibreHostApi", "getMetersPerPixelAtLatitude");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "getMetersPerPixelAtLatitude", error->message);
  }
}

static void maplibre_map_libre_host_api_update_options_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MaplibreMapLibreHostApi* self = MAPLIBRE_MAP_LIBRE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->update_options == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  MaplibreMapOptions* options = MAPLIBRE_MAP_OPTIONS(fl_value_get_custom_value_object(value0));
  g_autoptr(MaplibreMapLibreHostApiResponseHandle) handle = maplibre_map_libre_host_api_response_handle_new(channel, response_handle);
  self->vtable->update_options(options, handle, self->user_data);
}

void maplibre_map_libre_host_api_set_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix, const MaplibreMapLibreHostApiVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func) {
  g_autofree gchar* dot_suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  g_autoptr(MaplibreMapLibreHostApi) api_data = maplibre_map_libre_host_api_new(vtable, user_data, user_data_free_func);

  g_autoptr(MaplibreMessageCodec) codec = maplibre_message_codec_new();
  g_autofree gchar* jump_to_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.jumpTo%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) jump_to_channel = fl_basic_message_channel_new(messenger, jump_to_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(jump_to_channel, maplibre_map_libre_host_api_jump_to_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* fly_to_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.flyTo%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) fly_to_channel = fl_basic_message_channel_new(messenger, fly_to_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(fly_to_channel, maplibre_map_libre_host_api_fly_to_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* get_camera_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.getCamera%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) get_camera_channel = fl_basic_message_channel_new(messenger, get_camera_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(get_camera_channel, maplibre_map_libre_host_api_get_camera_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* get_visible_region_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.getVisibleRegion%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) get_visible_region_channel = fl_basic_message_channel_new(messenger, get_visible_region_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(get_visible_region_channel, maplibre_map_libre_host_api_get_visible_region_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* to_screen_location_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.toScreenLocation%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) to_screen_location_channel = fl_basic_message_channel_new(messenger, to_screen_location_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(to_screen_location_channel, maplibre_map_libre_host_api_to_screen_location_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* to_lng_lat_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.toLngLat%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) to_lng_lat_channel = fl_basic_message_channel_new(messenger, to_lng_lat_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(to_lng_lat_channel, maplibre_map_libre_host_api_to_lng_lat_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_fill_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addFillLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_fill_layer_channel = fl_basic_message_channel_new(messenger, add_fill_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_fill_layer_channel, maplibre_map_libre_host_api_add_fill_layer_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_circle_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addCircleLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_circle_layer_channel = fl_basic_message_channel_new(messenger, add_circle_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_circle_layer_channel, maplibre_map_libre_host_api_add_circle_layer_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_background_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addBackgroundLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_background_layer_channel = fl_basic_message_channel_new(messenger, add_background_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_background_layer_channel, maplibre_map_libre_host_api_add_background_layer_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_fill_extrusion_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addFillExtrusionLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_fill_extrusion_layer_channel = fl_basic_message_channel_new(messenger, add_fill_extrusion_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_fill_extrusion_layer_channel, maplibre_map_libre_host_api_add_fill_extrusion_layer_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_heatmap_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addHeatmapLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_heatmap_layer_channel = fl_basic_message_channel_new(messenger, add_heatmap_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_heatmap_layer_channel, maplibre_map_libre_host_api_add_heatmap_layer_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_hillshade_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addHillshadeLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_hillshade_layer_channel = fl_basic_message_channel_new(messenger, add_hillshade_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_hillshade_layer_channel, maplibre_map_libre_host_api_add_hillshade_layer_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_line_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addLineLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_line_layer_channel = fl_basic_message_channel_new(messenger, add_line_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_line_layer_channel, maplibre_map_libre_host_api_add_line_layer_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_raster_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addRasterLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_raster_layer_channel = fl_basic_message_channel_new(messenger, add_raster_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_raster_layer_channel, maplibre_map_libre_host_api_add_raster_layer_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_symbol_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addSymbolLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_symbol_layer_channel = fl_basic_message_channel_new(messenger, add_symbol_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_symbol_layer_channel, maplibre_map_libre_host_api_add_symbol_layer_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* remove_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.removeLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) remove_layer_channel = fl_basic_message_channel_new(messenger, remove_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(remove_layer_channel, maplibre_map_libre_host_api_remove_layer_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* remove_source_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.removeSource%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) remove_source_channel = fl_basic_message_channel_new(messenger, remove_source_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(remove_source_channel, maplibre_map_libre_host_api_remove_source_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* load_image_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.loadImage%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) load_image_channel = fl_basic_message_channel_new(messenger, load_image_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(load_image_channel, maplibre_map_libre_host_api_load_image_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_image_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addImage%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_image_channel = fl_basic_message_channel_new(messenger, add_image_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_image_channel, maplibre_map_libre_host_api_add_image_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* remove_image_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.removeImage%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) remove_image_channel = fl_basic_message_channel_new(messenger, remove_image_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(remove_image_channel, maplibre_map_libre_host_api_remove_image_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_geo_json_source_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addGeoJsonSource%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_geo_json_source_channel = fl_basic_message_channel_new(messenger, add_geo_json_source_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_geo_json_source_channel, maplibre_map_libre_host_api_add_geo_json_source_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_image_source_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addImageSource%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_image_source_channel = fl_basic_message_channel_new(messenger, add_image_source_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_image_source_channel, maplibre_map_libre_host_api_add_image_source_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_raster_source_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addRasterSource%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_raster_source_channel = fl_basic_message_channel_new(messenger, add_raster_source_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_raster_source_channel, maplibre_map_libre_host_api_add_raster_source_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_raster_dem_source_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addRasterDemSource%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_raster_dem_source_channel = fl_basic_message_channel_new(messenger, add_raster_dem_source_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_raster_dem_source_channel, maplibre_map_libre_host_api_add_raster_dem_source_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_vector_source_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addVectorSource%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_vector_source_channel = fl_basic_message_channel_new(messenger, add_vector_source_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_vector_source_channel, maplibre_map_libre_host_api_add_vector_source_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* get_meters_per_pixel_at_latitude_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.getMetersPerPixelAtLatitude%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) get_meters_per_pixel_at_latitude_channel = fl_basic_message_channel_new(messenger, get_meters_per_pixel_at_latitude_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(get_meters_per_pixel_at_latitude_channel, maplibre_map_libre_host_api_get_meters_per_pixel_at_latitude_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* update_options_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.updateOptions%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) update_options_channel = fl_basic_message_channel_new(messenger, update_options_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(update_options_channel, maplibre_map_libre_host_api_update_options_cb, g_object_ref(api_data), g_object_unref);
}

void maplibre_map_libre_host_api_clear_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix) {
  g_autofree gchar* dot_suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");

  g_autoptr(MaplibreMessageCodec) codec = maplibre_message_codec_new();
  g_autofree gchar* jump_to_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.jumpTo%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) jump_to_channel = fl_basic_message_channel_new(messenger, jump_to_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(jump_to_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* fly_to_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.flyTo%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) fly_to_channel = fl_basic_message_channel_new(messenger, fly_to_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(fly_to_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* get_camera_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.getCamera%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) get_camera_channel = fl_basic_message_channel_new(messenger, get_camera_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(get_camera_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* get_visible_region_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.getVisibleRegion%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) get_visible_region_channel = fl_basic_message_channel_new(messenger, get_visible_region_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(get_visible_region_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* to_screen_location_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.toScreenLocation%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) to_screen_location_channel = fl_basic_message_channel_new(messenger, to_screen_location_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(to_screen_location_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* to_lng_lat_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.toLngLat%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) to_lng_lat_channel = fl_basic_message_channel_new(messenger, to_lng_lat_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(to_lng_lat_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_fill_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addFillLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_fill_layer_channel = fl_basic_message_channel_new(messenger, add_fill_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_fill_layer_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_circle_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addCircleLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_circle_layer_channel = fl_basic_message_channel_new(messenger, add_circle_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_circle_layer_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_background_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addBackgroundLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_background_layer_channel = fl_basic_message_channel_new(messenger, add_background_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_background_layer_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_fill_extrusion_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addFillExtrusionLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_fill_extrusion_layer_channel = fl_basic_message_channel_new(messenger, add_fill_extrusion_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_fill_extrusion_layer_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_heatmap_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addHeatmapLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_heatmap_layer_channel = fl_basic_message_channel_new(messenger, add_heatmap_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_heatmap_layer_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_hillshade_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addHillshadeLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_hillshade_layer_channel = fl_basic_message_channel_new(messenger, add_hillshade_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_hillshade_layer_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_line_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addLineLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_line_layer_channel = fl_basic_message_channel_new(messenger, add_line_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_line_layer_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_raster_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addRasterLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_raster_layer_channel = fl_basic_message_channel_new(messenger, add_raster_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_raster_layer_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_symbol_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addSymbolLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_symbol_layer_channel = fl_basic_message_channel_new(messenger, add_symbol_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_symbol_layer_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* remove_layer_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.removeLayer%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) remove_layer_channel = fl_basic_message_channel_new(messenger, remove_layer_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(remove_layer_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* remove_source_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.removeSource%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) remove_source_channel = fl_basic_message_channel_new(messenger, remove_source_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(remove_source_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* load_image_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.loadImage%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) load_image_channel = fl_basic_message_channel_new(messenger, load_image_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(load_image_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_image_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addImage%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_image_channel = fl_basic_message_channel_new(messenger, add_image_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_image_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* remove_image_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.removeImage%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) remove_image_channel = fl_basic_message_channel_new(messenger, remove_image_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(remove_image_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_geo_json_source_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addGeoJsonSource%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_geo_json_source_channel = fl_basic_message_channel_new(messenger, add_geo_json_source_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_geo_json_source_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_image_source_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addImageSource%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_image_source_channel = fl_basic_message_channel_new(messenger, add_image_source_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_image_source_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_raster_source_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addRasterSource%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_raster_source_channel = fl_basic_message_channel_new(messenger, add_raster_source_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_raster_source_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_raster_dem_source_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addRasterDemSource%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_raster_dem_source_channel = fl_basic_message_channel_new(messenger, add_raster_dem_source_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_raster_dem_source_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_vector_source_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.addVectorSource%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_vector_source_channel = fl_basic_message_channel_new(messenger, add_vector_source_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_vector_source_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* get_meters_per_pixel_at_latitude_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.getMetersPerPixelAtLatitude%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) get_meters_per_pixel_at_latitude_channel = fl_basic_message_channel_new(messenger, get_meters_per_pixel_at_latitude_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(get_meters_per_pixel_at_latitude_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* update_options_channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreHostApi.updateOptions%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) update_options_channel = fl_basic_message_channel_new(messenger, update_options_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(update_options_channel, nullptr, nullptr, nullptr);
}

void maplibre_map_libre_host_api_respond_jump_to(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiJumpToResponse) response = maplibre_map_libre_host_api_jump_to_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "jumpTo", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_jump_to(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiJumpToResponse) response = maplibre_map_libre_host_api_jump_to_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "jumpTo", error->message);
  }
}

void maplibre_map_libre_host_api_respond_fly_to(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiFlyToResponse) response = maplibre_map_libre_host_api_fly_to_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "flyTo", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_fly_to(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiFlyToResponse) response = maplibre_map_libre_host_api_fly_to_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "flyTo", error->message);
  }
}

void maplibre_map_libre_host_api_respond_get_camera(MaplibreMapLibreHostApiResponseHandle* response_handle, MaplibreMapCamera* return_value) {
  g_autoptr(MaplibreMapLibreHostApiGetCameraResponse) response = maplibre_map_libre_host_api_get_camera_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "getCamera", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_get_camera(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiGetCameraResponse) response = maplibre_map_libre_host_api_get_camera_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "getCamera", error->message);
  }
}

void maplibre_map_libre_host_api_respond_get_visible_region(MaplibreMapLibreHostApiResponseHandle* response_handle, MaplibreLngLatBounds* return_value) {
  g_autoptr(MaplibreMapLibreHostApiGetVisibleRegionResponse) response = maplibre_map_libre_host_api_get_visible_region_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "getVisibleRegion", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_get_visible_region(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiGetVisibleRegionResponse) response = maplibre_map_libre_host_api_get_visible_region_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "getVisibleRegion", error->message);
  }
}

void maplibre_map_libre_host_api_respond_to_screen_location(MaplibreMapLibreHostApiResponseHandle* response_handle, MaplibreScreenLocation* return_value) {
  g_autoptr(MaplibreMapLibreHostApiToScreenLocationResponse) response = maplibre_map_libre_host_api_to_screen_location_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "toScreenLocation", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_to_screen_location(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiToScreenLocationResponse) response = maplibre_map_libre_host_api_to_screen_location_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "toScreenLocation", error->message);
  }
}

void maplibre_map_libre_host_api_respond_to_lng_lat(MaplibreMapLibreHostApiResponseHandle* response_handle, MaplibreLngLat* return_value) {
  g_autoptr(MaplibreMapLibreHostApiToLngLatResponse) response = maplibre_map_libre_host_api_to_lng_lat_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "toLngLat", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_to_lng_lat(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiToLngLatResponse) response = maplibre_map_libre_host_api_to_lng_lat_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "toLngLat", error->message);
  }
}

void maplibre_map_libre_host_api_respond_add_fill_layer(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiAddFillLayerResponse) response = maplibre_map_libre_host_api_add_fill_layer_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addFillLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_add_fill_layer(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiAddFillLayerResponse) response = maplibre_map_libre_host_api_add_fill_layer_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addFillLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_add_circle_layer(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiAddCircleLayerResponse) response = maplibre_map_libre_host_api_add_circle_layer_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addCircleLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_add_circle_layer(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiAddCircleLayerResponse) response = maplibre_map_libre_host_api_add_circle_layer_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addCircleLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_add_background_layer(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiAddBackgroundLayerResponse) response = maplibre_map_libre_host_api_add_background_layer_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addBackgroundLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_add_background_layer(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiAddBackgroundLayerResponse) response = maplibre_map_libre_host_api_add_background_layer_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addBackgroundLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_add_fill_extrusion_layer(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiAddFillExtrusionLayerResponse) response = maplibre_map_libre_host_api_add_fill_extrusion_layer_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addFillExtrusionLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_add_fill_extrusion_layer(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiAddFillExtrusionLayerResponse) response = maplibre_map_libre_host_api_add_fill_extrusion_layer_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addFillExtrusionLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_add_heatmap_layer(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiAddHeatmapLayerResponse) response = maplibre_map_libre_host_api_add_heatmap_layer_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addHeatmapLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_add_heatmap_layer(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiAddHeatmapLayerResponse) response = maplibre_map_libre_host_api_add_heatmap_layer_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addHeatmapLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_add_hillshade_layer(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiAddHillshadeLayerResponse) response = maplibre_map_libre_host_api_add_hillshade_layer_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addHillshadeLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_add_hillshade_layer(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiAddHillshadeLayerResponse) response = maplibre_map_libre_host_api_add_hillshade_layer_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addHillshadeLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_add_line_layer(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiAddLineLayerResponse) response = maplibre_map_libre_host_api_add_line_layer_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addLineLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_add_line_layer(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiAddLineLayerResponse) response = maplibre_map_libre_host_api_add_line_layer_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addLineLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_add_raster_layer(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiAddRasterLayerResponse) response = maplibre_map_libre_host_api_add_raster_layer_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addRasterLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_add_raster_layer(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiAddRasterLayerResponse) response = maplibre_map_libre_host_api_add_raster_layer_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addRasterLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_add_symbol_layer(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiAddSymbolLayerResponse) response = maplibre_map_libre_host_api_add_symbol_layer_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addSymbolLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_add_symbol_layer(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiAddSymbolLayerResponse) response = maplibre_map_libre_host_api_add_symbol_layer_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addSymbolLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_remove_layer(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiRemoveLayerResponse) response = maplibre_map_libre_host_api_remove_layer_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "removeLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_remove_layer(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiRemoveLayerResponse) response = maplibre_map_libre_host_api_remove_layer_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "removeLayer", error->message);
  }
}

void maplibre_map_libre_host_api_respond_remove_source(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiRemoveSourceResponse) response = maplibre_map_libre_host_api_remove_source_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "removeSource", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_remove_source(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiRemoveSourceResponse) response = maplibre_map_libre_host_api_remove_source_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "removeSource", error->message);
  }
}

void maplibre_map_libre_host_api_respond_load_image(MaplibreMapLibreHostApiResponseHandle* response_handle, const uint8_t* return_value, size_t return_value_length) {
  g_autoptr(MaplibreMapLibreHostApiLoadImageResponse) response = maplibre_map_libre_host_api_load_image_response_new(return_value, return_value_length);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "loadImage", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_load_image(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiLoadImageResponse) response = maplibre_map_libre_host_api_load_image_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "loadImage", error->message);
  }
}

void maplibre_map_libre_host_api_respond_add_image(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiAddImageResponse) response = maplibre_map_libre_host_api_add_image_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addImage", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_add_image(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiAddImageResponse) response = maplibre_map_libre_host_api_add_image_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addImage", error->message);
  }
}

void maplibre_map_libre_host_api_respond_remove_image(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiRemoveImageResponse) response = maplibre_map_libre_host_api_remove_image_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "removeImage", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_remove_image(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiRemoveImageResponse) response = maplibre_map_libre_host_api_remove_image_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "removeImage", error->message);
  }
}

void maplibre_map_libre_host_api_respond_add_geo_json_source(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiAddGeoJsonSourceResponse) response = maplibre_map_libre_host_api_add_geo_json_source_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addGeoJsonSource", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_add_geo_json_source(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiAddGeoJsonSourceResponse) response = maplibre_map_libre_host_api_add_geo_json_source_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addGeoJsonSource", error->message);
  }
}

void maplibre_map_libre_host_api_respond_add_image_source(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiAddImageSourceResponse) response = maplibre_map_libre_host_api_add_image_source_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addImageSource", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_add_image_source(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiAddImageSourceResponse) response = maplibre_map_libre_host_api_add_image_source_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addImageSource", error->message);
  }
}

void maplibre_map_libre_host_api_respond_add_raster_source(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiAddRasterSourceResponse) response = maplibre_map_libre_host_api_add_raster_source_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addRasterSource", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_add_raster_source(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiAddRasterSourceResponse) response = maplibre_map_libre_host_api_add_raster_source_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addRasterSource", error->message);
  }
}

void maplibre_map_libre_host_api_respond_add_raster_dem_source(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiAddRasterDemSourceResponse) response = maplibre_map_libre_host_api_add_raster_dem_source_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addRasterDemSource", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_add_raster_dem_source(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiAddRasterDemSourceResponse) response = maplibre_map_libre_host_api_add_raster_dem_source_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addRasterDemSource", error->message);
  }
}

void maplibre_map_libre_host_api_respond_add_vector_source(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiAddVectorSourceResponse) response = maplibre_map_libre_host_api_add_vector_source_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addVectorSource", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_add_vector_source(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiAddVectorSourceResponse) response = maplibre_map_libre_host_api_add_vector_source_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "addVectorSource", error->message);
  }
}

void maplibre_map_libre_host_api_respond_update_options(MaplibreMapLibreHostApiResponseHandle* response_handle) {
  g_autoptr(MaplibreMapLibreHostApiUpdateOptionsResponse) response = maplibre_map_libre_host_api_update_options_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "updateOptions", error->message);
  }
}

void maplibre_map_libre_host_api_respond_error_update_options(MaplibreMapLibreHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MaplibreMapLibreHostApiUpdateOptionsResponse) response = maplibre_map_libre_host_api_update_options_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "MapLibreHostApi", "updateOptions", error->message);
  }
}

struct _MaplibreMapLibreFlutterApi {
  GObject parent_instance;

  FlBinaryMessenger* messenger;
  gchar *suffix;
};

G_DEFINE_TYPE(MaplibreMapLibreFlutterApi, maplibre_map_libre_flutter_api, G_TYPE_OBJECT)

static void maplibre_map_libre_flutter_api_dispose(GObject* object) {
  MaplibreMapLibreFlutterApi* self = MAPLIBRE_MAP_LIBRE_FLUTTER_API(object);
  g_clear_object(&self->messenger);
  g_clear_pointer(&self->suffix, g_free);
  G_OBJECT_CLASS(maplibre_map_libre_flutter_api_parent_class)->dispose(object);
}

static void maplibre_map_libre_flutter_api_init(MaplibreMapLibreFlutterApi* self) {
}

static void maplibre_map_libre_flutter_api_class_init(MaplibreMapLibreFlutterApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_flutter_api_dispose;
}

MaplibreMapLibreFlutterApi* maplibre_map_libre_flutter_api_new(FlBinaryMessenger* messenger, const gchar* suffix) {
  MaplibreMapLibreFlutterApi* self = MAPLIBRE_MAP_LIBRE_FLUTTER_API(g_object_new(maplibre_map_libre_flutter_api_get_type(), nullptr));
  self->messenger = FL_BINARY_MESSENGER(g_object_ref(messenger));
  self->suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  return self;
}

struct _MaplibreMapLibreFlutterApiGetOptionsResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(MaplibreMapLibreFlutterApiGetOptionsResponse, maplibre_map_libre_flutter_api_get_options_response, G_TYPE_OBJECT)

static void maplibre_map_libre_flutter_api_get_options_response_dispose(GObject* object) {
  MaplibreMapLibreFlutterApiGetOptionsResponse* self = MAPLIBRE_MAP_LIBRE_FLUTTER_API_GET_OPTIONS_RESPONSE(object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_flutter_api_get_options_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_flutter_api_get_options_response_init(MaplibreMapLibreFlutterApiGetOptionsResponse* self) {
}

static void maplibre_map_libre_flutter_api_get_options_response_class_init(MaplibreMapLibreFlutterApiGetOptionsResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_flutter_api_get_options_response_dispose;
}

static MaplibreMapLibreFlutterApiGetOptionsResponse* maplibre_map_libre_flutter_api_get_options_response_new(FlValue* response) {
  MaplibreMapLibreFlutterApiGetOptionsResponse* self = MAPLIBRE_MAP_LIBRE_FLUTTER_API_GET_OPTIONS_RESPONSE(g_object_new(maplibre_map_libre_flutter_api_get_options_response_get_type(), nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean maplibre_map_libre_flutter_api_get_options_response_is_error(MaplibreMapLibreFlutterApiGetOptionsResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_GET_OPTIONS_RESPONSE(self), FALSE);
  return self->error != nullptr;
}

const gchar* maplibre_map_libre_flutter_api_get_options_response_get_error_code(MaplibreMapLibreFlutterApiGetOptionsResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_GET_OPTIONS_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_get_options_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar* maplibre_map_libre_flutter_api_get_options_response_get_error_message(MaplibreMapLibreFlutterApiGetOptionsResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_GET_OPTIONS_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_get_options_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue* maplibre_map_libre_flutter_api_get_options_response_get_error_details(MaplibreMapLibreFlutterApiGetOptionsResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_GET_OPTIONS_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_get_options_response_is_error(self));
  return fl_value_get_list_value(self->error, 2);
}

MaplibreMapOptions* maplibre_map_libre_flutter_api_get_options_response_get_return_value(MaplibreMapLibreFlutterApiGetOptionsResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_GET_OPTIONS_RESPONSE(self), nullptr);
  g_assert(!maplibre_map_libre_flutter_api_get_options_response_is_error(self));
  return MAPLIBRE_MAP_OPTIONS(fl_value_get_custom_value_object(self->return_value));
}

static void maplibre_map_libre_flutter_api_get_options_cb(GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void maplibre_map_libre_flutter_api_get_options(MaplibreMapLibreFlutterApi* self, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  g_autofree gchar* channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreFlutterApi.getOptions%s", self->suffix);
  g_autoptr(MaplibreMessageCodec) codec = maplibre_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(channel, args, cancellable, maplibre_map_libre_flutter_api_get_options_cb, task);
}

MaplibreMapLibreFlutterApiGetOptionsResponse* maplibre_map_libre_flutter_api_get_options_finish(MaplibreMapLibreFlutterApi* self, GAsyncResult* result, GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel = FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response = fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) { 
    return nullptr;
  }
  return maplibre_map_libre_flutter_api_get_options_response_new(response);
}

struct _MaplibreMapLibreFlutterApiOnStyleLoadedResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(MaplibreMapLibreFlutterApiOnStyleLoadedResponse, maplibre_map_libre_flutter_api_on_style_loaded_response, G_TYPE_OBJECT)

static void maplibre_map_libre_flutter_api_on_style_loaded_response_dispose(GObject* object) {
  MaplibreMapLibreFlutterApiOnStyleLoadedResponse* self = MAPLIBRE_MAP_LIBRE_FLUTTER_API_ON_STYLE_LOADED_RESPONSE(object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_flutter_api_on_style_loaded_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_flutter_api_on_style_loaded_response_init(MaplibreMapLibreFlutterApiOnStyleLoadedResponse* self) {
}

static void maplibre_map_libre_flutter_api_on_style_loaded_response_class_init(MaplibreMapLibreFlutterApiOnStyleLoadedResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_flutter_api_on_style_loaded_response_dispose;
}

static MaplibreMapLibreFlutterApiOnStyleLoadedResponse* maplibre_map_libre_flutter_api_on_style_loaded_response_new(FlValue* response) {
  MaplibreMapLibreFlutterApiOnStyleLoadedResponse* self = MAPLIBRE_MAP_LIBRE_FLUTTER_API_ON_STYLE_LOADED_RESPONSE(g_object_new(maplibre_map_libre_flutter_api_on_style_loaded_response_get_type(), nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean maplibre_map_libre_flutter_api_on_style_loaded_response_is_error(MaplibreMapLibreFlutterApiOnStyleLoadedResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_STYLE_LOADED_RESPONSE(self), FALSE);
  return self->error != nullptr;
}

const gchar* maplibre_map_libre_flutter_api_on_style_loaded_response_get_error_code(MaplibreMapLibreFlutterApiOnStyleLoadedResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_STYLE_LOADED_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_style_loaded_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar* maplibre_map_libre_flutter_api_on_style_loaded_response_get_error_message(MaplibreMapLibreFlutterApiOnStyleLoadedResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_STYLE_LOADED_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_style_loaded_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue* maplibre_map_libre_flutter_api_on_style_loaded_response_get_error_details(MaplibreMapLibreFlutterApiOnStyleLoadedResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_STYLE_LOADED_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_style_loaded_response_is_error(self));
  return fl_value_get_list_value(self->error, 2);
}

static void maplibre_map_libre_flutter_api_on_style_loaded_cb(GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void maplibre_map_libre_flutter_api_on_style_loaded(MaplibreMapLibreFlutterApi* self, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  g_autofree gchar* channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onStyleLoaded%s", self->suffix);
  g_autoptr(MaplibreMessageCodec) codec = maplibre_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(channel, args, cancellable, maplibre_map_libre_flutter_api_on_style_loaded_cb, task);
}

MaplibreMapLibreFlutterApiOnStyleLoadedResponse* maplibre_map_libre_flutter_api_on_style_loaded_finish(MaplibreMapLibreFlutterApi* self, GAsyncResult* result, GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel = FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response = fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) { 
    return nullptr;
  }
  return maplibre_map_libre_flutter_api_on_style_loaded_response_new(response);
}

struct _MaplibreMapLibreFlutterApiOnClickResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(MaplibreMapLibreFlutterApiOnClickResponse, maplibre_map_libre_flutter_api_on_click_response, G_TYPE_OBJECT)

static void maplibre_map_libre_flutter_api_on_click_response_dispose(GObject* object) {
  MaplibreMapLibreFlutterApiOnClickResponse* self = MAPLIBRE_MAP_LIBRE_FLUTTER_API_ON_CLICK_RESPONSE(object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_flutter_api_on_click_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_flutter_api_on_click_response_init(MaplibreMapLibreFlutterApiOnClickResponse* self) {
}

static void maplibre_map_libre_flutter_api_on_click_response_class_init(MaplibreMapLibreFlutterApiOnClickResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_flutter_api_on_click_response_dispose;
}

static MaplibreMapLibreFlutterApiOnClickResponse* maplibre_map_libre_flutter_api_on_click_response_new(FlValue* response) {
  MaplibreMapLibreFlutterApiOnClickResponse* self = MAPLIBRE_MAP_LIBRE_FLUTTER_API_ON_CLICK_RESPONSE(g_object_new(maplibre_map_libre_flutter_api_on_click_response_get_type(), nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean maplibre_map_libre_flutter_api_on_click_response_is_error(MaplibreMapLibreFlutterApiOnClickResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_CLICK_RESPONSE(self), FALSE);
  return self->error != nullptr;
}

const gchar* maplibre_map_libre_flutter_api_on_click_response_get_error_code(MaplibreMapLibreFlutterApiOnClickResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_CLICK_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_click_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar* maplibre_map_libre_flutter_api_on_click_response_get_error_message(MaplibreMapLibreFlutterApiOnClickResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_CLICK_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_click_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue* maplibre_map_libre_flutter_api_on_click_response_get_error_details(MaplibreMapLibreFlutterApiOnClickResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_CLICK_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_click_response_is_error(self));
  return fl_value_get_list_value(self->error, 2);
}

static void maplibre_map_libre_flutter_api_on_click_cb(GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void maplibre_map_libre_flutter_api_on_click(MaplibreMapLibreFlutterApi* self, MaplibreLngLat* point, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_custom_object(132, G_OBJECT(point)));
  g_autofree gchar* channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onClick%s", self->suffix);
  g_autoptr(MaplibreMessageCodec) codec = maplibre_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(channel, args, cancellable, maplibre_map_libre_flutter_api_on_click_cb, task);
}

MaplibreMapLibreFlutterApiOnClickResponse* maplibre_map_libre_flutter_api_on_click_finish(MaplibreMapLibreFlutterApi* self, GAsyncResult* result, GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel = FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response = fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) { 
    return nullptr;
  }
  return maplibre_map_libre_flutter_api_on_click_response_new(response);
}

struct _MaplibreMapLibreFlutterApiOnSecondaryClickResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(MaplibreMapLibreFlutterApiOnSecondaryClickResponse, maplibre_map_libre_flutter_api_on_secondary_click_response, G_TYPE_OBJECT)

static void maplibre_map_libre_flutter_api_on_secondary_click_response_dispose(GObject* object) {
  MaplibreMapLibreFlutterApiOnSecondaryClickResponse* self = MAPLIBRE_MAP_LIBRE_FLUTTER_API_ON_SECONDARY_CLICK_RESPONSE(object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_flutter_api_on_secondary_click_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_flutter_api_on_secondary_click_response_init(MaplibreMapLibreFlutterApiOnSecondaryClickResponse* self) {
}

static void maplibre_map_libre_flutter_api_on_secondary_click_response_class_init(MaplibreMapLibreFlutterApiOnSecondaryClickResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_flutter_api_on_secondary_click_response_dispose;
}

static MaplibreMapLibreFlutterApiOnSecondaryClickResponse* maplibre_map_libre_flutter_api_on_secondary_click_response_new(FlValue* response) {
  MaplibreMapLibreFlutterApiOnSecondaryClickResponse* self = MAPLIBRE_MAP_LIBRE_FLUTTER_API_ON_SECONDARY_CLICK_RESPONSE(g_object_new(maplibre_map_libre_flutter_api_on_secondary_click_response_get_type(), nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean maplibre_map_libre_flutter_api_on_secondary_click_response_is_error(MaplibreMapLibreFlutterApiOnSecondaryClickResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_SECONDARY_CLICK_RESPONSE(self), FALSE);
  return self->error != nullptr;
}

const gchar* maplibre_map_libre_flutter_api_on_secondary_click_response_get_error_code(MaplibreMapLibreFlutterApiOnSecondaryClickResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_SECONDARY_CLICK_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_secondary_click_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar* maplibre_map_libre_flutter_api_on_secondary_click_response_get_error_message(MaplibreMapLibreFlutterApiOnSecondaryClickResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_SECONDARY_CLICK_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_secondary_click_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue* maplibre_map_libre_flutter_api_on_secondary_click_response_get_error_details(MaplibreMapLibreFlutterApiOnSecondaryClickResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_SECONDARY_CLICK_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_secondary_click_response_is_error(self));
  return fl_value_get_list_value(self->error, 2);
}

static void maplibre_map_libre_flutter_api_on_secondary_click_cb(GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void maplibre_map_libre_flutter_api_on_secondary_click(MaplibreMapLibreFlutterApi* self, MaplibreLngLat* point, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_custom_object(132, G_OBJECT(point)));
  g_autofree gchar* channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onSecondaryClick%s", self->suffix);
  g_autoptr(MaplibreMessageCodec) codec = maplibre_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(channel, args, cancellable, maplibre_map_libre_flutter_api_on_secondary_click_cb, task);
}

MaplibreMapLibreFlutterApiOnSecondaryClickResponse* maplibre_map_libre_flutter_api_on_secondary_click_finish(MaplibreMapLibreFlutterApi* self, GAsyncResult* result, GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel = FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response = fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) { 
    return nullptr;
  }
  return maplibre_map_libre_flutter_api_on_secondary_click_response_new(response);
}

struct _MaplibreMapLibreFlutterApiOnDoubleClickResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(MaplibreMapLibreFlutterApiOnDoubleClickResponse, maplibre_map_libre_flutter_api_on_double_click_response, G_TYPE_OBJECT)

static void maplibre_map_libre_flutter_api_on_double_click_response_dispose(GObject* object) {
  MaplibreMapLibreFlutterApiOnDoubleClickResponse* self = MAPLIBRE_MAP_LIBRE_FLUTTER_API_ON_DOUBLE_CLICK_RESPONSE(object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_flutter_api_on_double_click_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_flutter_api_on_double_click_response_init(MaplibreMapLibreFlutterApiOnDoubleClickResponse* self) {
}

static void maplibre_map_libre_flutter_api_on_double_click_response_class_init(MaplibreMapLibreFlutterApiOnDoubleClickResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_flutter_api_on_double_click_response_dispose;
}

static MaplibreMapLibreFlutterApiOnDoubleClickResponse* maplibre_map_libre_flutter_api_on_double_click_response_new(FlValue* response) {
  MaplibreMapLibreFlutterApiOnDoubleClickResponse* self = MAPLIBRE_MAP_LIBRE_FLUTTER_API_ON_DOUBLE_CLICK_RESPONSE(g_object_new(maplibre_map_libre_flutter_api_on_double_click_response_get_type(), nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean maplibre_map_libre_flutter_api_on_double_click_response_is_error(MaplibreMapLibreFlutterApiOnDoubleClickResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_DOUBLE_CLICK_RESPONSE(self), FALSE);
  return self->error != nullptr;
}

const gchar* maplibre_map_libre_flutter_api_on_double_click_response_get_error_code(MaplibreMapLibreFlutterApiOnDoubleClickResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_DOUBLE_CLICK_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_double_click_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar* maplibre_map_libre_flutter_api_on_double_click_response_get_error_message(MaplibreMapLibreFlutterApiOnDoubleClickResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_DOUBLE_CLICK_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_double_click_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue* maplibre_map_libre_flutter_api_on_double_click_response_get_error_details(MaplibreMapLibreFlutterApiOnDoubleClickResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_DOUBLE_CLICK_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_double_click_response_is_error(self));
  return fl_value_get_list_value(self->error, 2);
}

static void maplibre_map_libre_flutter_api_on_double_click_cb(GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void maplibre_map_libre_flutter_api_on_double_click(MaplibreMapLibreFlutterApi* self, MaplibreLngLat* point, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_custom_object(132, G_OBJECT(point)));
  g_autofree gchar* channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onDoubleClick%s", self->suffix);
  g_autoptr(MaplibreMessageCodec) codec = maplibre_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(channel, args, cancellable, maplibre_map_libre_flutter_api_on_double_click_cb, task);
}

MaplibreMapLibreFlutterApiOnDoubleClickResponse* maplibre_map_libre_flutter_api_on_double_click_finish(MaplibreMapLibreFlutterApi* self, GAsyncResult* result, GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel = FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response = fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) { 
    return nullptr;
  }
  return maplibre_map_libre_flutter_api_on_double_click_response_new(response);
}

struct _MaplibreMapLibreFlutterApiOnLongClickResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(MaplibreMapLibreFlutterApiOnLongClickResponse, maplibre_map_libre_flutter_api_on_long_click_response, G_TYPE_OBJECT)

static void maplibre_map_libre_flutter_api_on_long_click_response_dispose(GObject* object) {
  MaplibreMapLibreFlutterApiOnLongClickResponse* self = MAPLIBRE_MAP_LIBRE_FLUTTER_API_ON_LONG_CLICK_RESPONSE(object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_flutter_api_on_long_click_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_flutter_api_on_long_click_response_init(MaplibreMapLibreFlutterApiOnLongClickResponse* self) {
}

static void maplibre_map_libre_flutter_api_on_long_click_response_class_init(MaplibreMapLibreFlutterApiOnLongClickResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_flutter_api_on_long_click_response_dispose;
}

static MaplibreMapLibreFlutterApiOnLongClickResponse* maplibre_map_libre_flutter_api_on_long_click_response_new(FlValue* response) {
  MaplibreMapLibreFlutterApiOnLongClickResponse* self = MAPLIBRE_MAP_LIBRE_FLUTTER_API_ON_LONG_CLICK_RESPONSE(g_object_new(maplibre_map_libre_flutter_api_on_long_click_response_get_type(), nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean maplibre_map_libre_flutter_api_on_long_click_response_is_error(MaplibreMapLibreFlutterApiOnLongClickResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_LONG_CLICK_RESPONSE(self), FALSE);
  return self->error != nullptr;
}

const gchar* maplibre_map_libre_flutter_api_on_long_click_response_get_error_code(MaplibreMapLibreFlutterApiOnLongClickResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_LONG_CLICK_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_long_click_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar* maplibre_map_libre_flutter_api_on_long_click_response_get_error_message(MaplibreMapLibreFlutterApiOnLongClickResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_LONG_CLICK_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_long_click_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue* maplibre_map_libre_flutter_api_on_long_click_response_get_error_details(MaplibreMapLibreFlutterApiOnLongClickResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_LONG_CLICK_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_long_click_response_is_error(self));
  return fl_value_get_list_value(self->error, 2);
}

static void maplibre_map_libre_flutter_api_on_long_click_cb(GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void maplibre_map_libre_flutter_api_on_long_click(MaplibreMapLibreFlutterApi* self, MaplibreLngLat* point, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_custom_object(132, G_OBJECT(point)));
  g_autofree gchar* channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onLongClick%s", self->suffix);
  g_autoptr(MaplibreMessageCodec) codec = maplibre_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(channel, args, cancellable, maplibre_map_libre_flutter_api_on_long_click_cb, task);
}

MaplibreMapLibreFlutterApiOnLongClickResponse* maplibre_map_libre_flutter_api_on_long_click_finish(MaplibreMapLibreFlutterApi* self, GAsyncResult* result, GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel = FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response = fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) { 
    return nullptr;
  }
  return maplibre_map_libre_flutter_api_on_long_click_response_new(response);
}

struct _MaplibreMapLibreFlutterApiOnCameraMovedResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(MaplibreMapLibreFlutterApiOnCameraMovedResponse, maplibre_map_libre_flutter_api_on_camera_moved_response, G_TYPE_OBJECT)

static void maplibre_map_libre_flutter_api_on_camera_moved_response_dispose(GObject* object) {
  MaplibreMapLibreFlutterApiOnCameraMovedResponse* self = MAPLIBRE_MAP_LIBRE_FLUTTER_API_ON_CAMERA_MOVED_RESPONSE(object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(maplibre_map_libre_flutter_api_on_camera_moved_response_parent_class)->dispose(object);
}

static void maplibre_map_libre_flutter_api_on_camera_moved_response_init(MaplibreMapLibreFlutterApiOnCameraMovedResponse* self) {
}

static void maplibre_map_libre_flutter_api_on_camera_moved_response_class_init(MaplibreMapLibreFlutterApiOnCameraMovedResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = maplibre_map_libre_flutter_api_on_camera_moved_response_dispose;
}

static MaplibreMapLibreFlutterApiOnCameraMovedResponse* maplibre_map_libre_flutter_api_on_camera_moved_response_new(FlValue* response) {
  MaplibreMapLibreFlutterApiOnCameraMovedResponse* self = MAPLIBRE_MAP_LIBRE_FLUTTER_API_ON_CAMERA_MOVED_RESPONSE(g_object_new(maplibre_map_libre_flutter_api_on_camera_moved_response_get_type(), nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean maplibre_map_libre_flutter_api_on_camera_moved_response_is_error(MaplibreMapLibreFlutterApiOnCameraMovedResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_CAMERA_MOVED_RESPONSE(self), FALSE);
  return self->error != nullptr;
}

const gchar* maplibre_map_libre_flutter_api_on_camera_moved_response_get_error_code(MaplibreMapLibreFlutterApiOnCameraMovedResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_CAMERA_MOVED_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_camera_moved_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar* maplibre_map_libre_flutter_api_on_camera_moved_response_get_error_message(MaplibreMapLibreFlutterApiOnCameraMovedResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_CAMERA_MOVED_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_camera_moved_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue* maplibre_map_libre_flutter_api_on_camera_moved_response_get_error_details(MaplibreMapLibreFlutterApiOnCameraMovedResponse* self) {
  g_return_val_if_fail(MAPLIBRE_IS_MAP_LIBRE_FLUTTER_API_ON_CAMERA_MOVED_RESPONSE(self), nullptr);
  g_assert(maplibre_map_libre_flutter_api_on_camera_moved_response_is_error(self));
  return fl_value_get_list_value(self->error, 2);
}

static void maplibre_map_libre_flutter_api_on_camera_moved_cb(GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void maplibre_map_libre_flutter_api_on_camera_moved(MaplibreMapLibreFlutterApi* self, MaplibreMapCamera* camera, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_custom_object(134, G_OBJECT(camera)));
  g_autofree gchar* channel_name = g_strdup_printf("dev.flutter.pigeon.maplibre.MapLibreFlutterApi.onCameraMoved%s", self->suffix);
  g_autoptr(MaplibreMessageCodec) codec = maplibre_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(channel, args, cancellable, maplibre_map_libre_flutter_api_on_camera_moved_cb, task);
}

MaplibreMapLibreFlutterApiOnCameraMovedResponse* maplibre_map_libre_flutter_api_on_camera_moved_finish(MaplibreMapLibreFlutterApi* self, GAsyncResult* result, GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel = FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response = fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) { 
    return nullptr;
  }
  return maplibre_map_libre_flutter_api_on_camera_moved_response_new(response);
}
