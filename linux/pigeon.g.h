// Autogenerated from Pigeon (v22.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_PIGEON_G_H_
#define PIGEON_PIGEON_G_H_

#include <flutter_linux/flutter_linux.h>

G_BEGIN_DECLS

/**
 * MaplibreLngLat:
 *
 */

G_DECLARE_FINAL_TYPE(MaplibreLngLat, maplibre_lng_lat, MAPLIBRE, LNG_LAT, GObject)

/**
 * maplibre_lng_lat_new:
 * lng: field in this object.
 * lat: field in this object.
 *
 * Creates a new #LngLat object.
 *
 * Returns: a new #MaplibreLngLat
 */
MaplibreLngLat* maplibre_lng_lat_new(double lng, double lat);

/**
 * maplibre_lng_lat_get_lng
 * @object: a #MaplibreLngLat.
 *
 * Gets the value of the lng field of @object.
 *
 * Returns: the field value.
 */
double maplibre_lng_lat_get_lng(MaplibreLngLat* object);

/**
 * maplibre_lng_lat_get_lat
 * @object: a #MaplibreLngLat.
 *
 * Gets the value of the lat field of @object.
 *
 * Returns: the field value.
 */
double maplibre_lng_lat_get_lat(MaplibreLngLat* object);

/**
 * MaplibreScreenLocation:
 *
 */

G_DECLARE_FINAL_TYPE(MaplibreScreenLocation, maplibre_screen_location, MAPLIBRE, SCREEN_LOCATION, GObject)

/**
 * maplibre_screen_location_new:
 * x: field in this object.
 * y: field in this object.
 *
 * Creates a new #ScreenLocation object.
 *
 * Returns: a new #MaplibreScreenLocation
 */
MaplibreScreenLocation* maplibre_screen_location_new(double x, double y);

/**
 * maplibre_screen_location_get_x
 * @object: a #MaplibreScreenLocation.
 *
 * Gets the value of the x field of @object.
 *
 * Returns: the field value.
 */
double maplibre_screen_location_get_x(MaplibreScreenLocation* object);

/**
 * maplibre_screen_location_get_y
 * @object: a #MaplibreScreenLocation.
 *
 * Gets the value of the y field of @object.
 *
 * Returns: the field value.
 */
double maplibre_screen_location_get_y(MaplibreScreenLocation* object);

G_DECLARE_FINAL_TYPE(MaplibreMapLibrePigeonResponseHandle, maplibre_map_libre_pigeon_response_handle, MAPLIBRE, MAP_LIBRE_PIGEON_RESPONSE_HANDLE, GObject)

/**
 * MaplibreMapLibrePigeonVTable:
 *
 * Table of functions exposed by MapLibrePigeon to be implemented by the API provider.
 */
typedef struct {
  void (*jump_to)(MaplibreLngLat* center, double* zoom, double* bearing, double* pitch, MaplibreMapLibrePigeonResponseHandle* response_handle, gpointer user_data);
  void (*fly_to)(MaplibreLngLat* center, double* zoom, double* bearing, double* pitch, MaplibreMapLibrePigeonResponseHandle* response_handle, gpointer user_data);
  void (*to_screen_location)(double lng, double lat, MaplibreMapLibrePigeonResponseHandle* response_handle, gpointer user_data);
  void (*to_lng_lat)(double x, double y, MaplibreMapLibrePigeonResponseHandle* response_handle, gpointer user_data);
  void (*add_fill_layer)(const gchar* id, const gchar* source_id, MaplibreMapLibrePigeonResponseHandle* response_handle, gpointer user_data);
  void (*add_circle_layer)(const gchar* id, const gchar* source_id, MaplibreMapLibrePigeonResponseHandle* response_handle, gpointer user_data);
  void (*add_geo_json_source)(const gchar* id, FlValue* data, MaplibreMapLibrePigeonResponseHandle* response_handle, gpointer user_data);
} MaplibreMapLibrePigeonVTable;

/**
 * maplibre_map_libre_pigeon_set_method_handlers:
 *
 * @messenger: an #FlBinaryMessenger.
 * @suffix: (allow-none): a suffix to add to the API or %NULL for none.
 * @vtable: implementations of the methods in this API.
 * @user_data: (closure): user data to pass to the functions in @vtable.
 * @user_data_free_func: (allow-none): a function which gets called to free @user_data, or %NULL.
 *
 * Connects the method handlers in the MapLibrePigeon API.
 */
void maplibre_map_libre_pigeon_set_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix, const MaplibreMapLibrePigeonVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func);

/**
 * maplibre_map_libre_pigeon_clear_method_handlers:
 *
 * @messenger: an #FlBinaryMessenger.
 * @suffix: (allow-none): a suffix to add to the API or %NULL for none.
 *
 * Clears the method handlers in the MapLibrePigeon API.
 */
void maplibre_map_libre_pigeon_clear_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix);

/**
 * maplibre_map_libre_pigeon_respond_jump_to:
 * @response_handle: a #MaplibreMapLibrePigeonResponseHandle.
 *
 * Responds to MapLibrePigeon.jumpTo. 
 */
void maplibre_map_libre_pigeon_respond_jump_to(MaplibreMapLibrePigeonResponseHandle* response_handle);

/**
 * maplibre_map_libre_pigeon_respond_error_jump_to:
 * @response_handle: a #MaplibreMapLibrePigeonResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to MapLibrePigeon.jumpTo. 
 */
void maplibre_map_libre_pigeon_respond_error_jump_to(MaplibreMapLibrePigeonResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * maplibre_map_libre_pigeon_respond_fly_to:
 * @response_handle: a #MaplibreMapLibrePigeonResponseHandle.
 *
 * Responds to MapLibrePigeon.flyTo. 
 */
void maplibre_map_libre_pigeon_respond_fly_to(MaplibreMapLibrePigeonResponseHandle* response_handle);

/**
 * maplibre_map_libre_pigeon_respond_error_fly_to:
 * @response_handle: a #MaplibreMapLibrePigeonResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to MapLibrePigeon.flyTo. 
 */
void maplibre_map_libre_pigeon_respond_error_fly_to(MaplibreMapLibrePigeonResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * maplibre_map_libre_pigeon_respond_to_screen_location:
 * @response_handle: a #MaplibreMapLibrePigeonResponseHandle.
 * @return_value: location to write the value returned by this method.
 *
 * Responds to MapLibrePigeon.toScreenLocation. 
 */
void maplibre_map_libre_pigeon_respond_to_screen_location(MaplibreMapLibrePigeonResponseHandle* response_handle, MaplibreScreenLocation* return_value);

/**
 * maplibre_map_libre_pigeon_respond_error_to_screen_location:
 * @response_handle: a #MaplibreMapLibrePigeonResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to MapLibrePigeon.toScreenLocation. 
 */
void maplibre_map_libre_pigeon_respond_error_to_screen_location(MaplibreMapLibrePigeonResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * maplibre_map_libre_pigeon_respond_to_lng_lat:
 * @response_handle: a #MaplibreMapLibrePigeonResponseHandle.
 * @return_value: location to write the value returned by this method.
 *
 * Responds to MapLibrePigeon.toLngLat. 
 */
void maplibre_map_libre_pigeon_respond_to_lng_lat(MaplibreMapLibrePigeonResponseHandle* response_handle, MaplibreLngLat* return_value);

/**
 * maplibre_map_libre_pigeon_respond_error_to_lng_lat:
 * @response_handle: a #MaplibreMapLibrePigeonResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to MapLibrePigeon.toLngLat. 
 */
void maplibre_map_libre_pigeon_respond_error_to_lng_lat(MaplibreMapLibrePigeonResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * maplibre_map_libre_pigeon_respond_add_fill_layer:
 * @response_handle: a #MaplibreMapLibrePigeonResponseHandle.
 *
 * Responds to MapLibrePigeon.addFillLayer. 
 */
void maplibre_map_libre_pigeon_respond_add_fill_layer(MaplibreMapLibrePigeonResponseHandle* response_handle);

/**
 * maplibre_map_libre_pigeon_respond_error_add_fill_layer:
 * @response_handle: a #MaplibreMapLibrePigeonResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to MapLibrePigeon.addFillLayer. 
 */
void maplibre_map_libre_pigeon_respond_error_add_fill_layer(MaplibreMapLibrePigeonResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * maplibre_map_libre_pigeon_respond_add_circle_layer:
 * @response_handle: a #MaplibreMapLibrePigeonResponseHandle.
 *
 * Responds to MapLibrePigeon.addCircleLayer. 
 */
void maplibre_map_libre_pigeon_respond_add_circle_layer(MaplibreMapLibrePigeonResponseHandle* response_handle);

/**
 * maplibre_map_libre_pigeon_respond_error_add_circle_layer:
 * @response_handle: a #MaplibreMapLibrePigeonResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to MapLibrePigeon.addCircleLayer. 
 */
void maplibre_map_libre_pigeon_respond_error_add_circle_layer(MaplibreMapLibrePigeonResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

/**
 * maplibre_map_libre_pigeon_respond_add_geo_json_source:
 * @response_handle: a #MaplibreMapLibrePigeonResponseHandle.
 *
 * Responds to MapLibrePigeon.addGeoJsonSource. 
 */
void maplibre_map_libre_pigeon_respond_add_geo_json_source(MaplibreMapLibrePigeonResponseHandle* response_handle);

/**
 * maplibre_map_libre_pigeon_respond_error_add_geo_json_source:
 * @response_handle: a #MaplibreMapLibrePigeonResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to MapLibrePigeon.addGeoJsonSource. 
 */
void maplibre_map_libre_pigeon_respond_error_add_geo_json_source(MaplibreMapLibrePigeonResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

G_END_DECLS

#endif  // PIGEON_PIGEON_G_H_
